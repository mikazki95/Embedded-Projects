
msv_ECG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018484  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  08018618  08018618  00028618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018e44  08018e44  00031564  2**0
                  CONTENTS
  4 .ARM          00000008  08018e44  08018e44  00028e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018e4c  08018e4c  00031564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018e4c  08018e4c  00028e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018e50  08018e50  00028e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001564  20000000  08018e54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00031564  2**0
                  CONTENTS
 10 .bss          00008f84  20001568  20001568  00031568  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000a4ec  2000a4ec  00031568  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00031564  2**0
                  CONTENTS, READONLY
 13 .comment      000000b1  00000000  00000000  00031594  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002b85b  00000000  00000000  00031645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007558  00000000  00000000  0005cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002118  00000000  00000000  000643f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000018fd  00000000  00000000  00066510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b568  00000000  00000000  00067e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000339aa  00000000  00000000  00093375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df889  00000000  00000000  000c6d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009758  00000000  00000000  001a65a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  001afd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00001450  00000000  00000000  001afd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  001b11cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001568 	.word	0x20001568
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080185fc 	.word	0x080185fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000156c 	.word	0x2000156c
 80001cc:	080185fc 	.word	0x080185fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_uldivmod>:
 8000e64:	b953      	cbnz	r3, 8000e7c <__aeabi_uldivmod+0x18>
 8000e66:	b94a      	cbnz	r2, 8000e7c <__aeabi_uldivmod+0x18>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bf08      	it	eq
 8000e6c:	2800      	cmpeq	r0, #0
 8000e6e:	bf1c      	itt	ne
 8000e70:	f04f 31ff 	movne.w	r1, #4294967295
 8000e74:	f04f 30ff 	movne.w	r0, #4294967295
 8000e78:	f000 b9a4 	b.w	80011c4 <__aeabi_idiv0>
 8000e7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e84:	f000 f83a 	bl	8000efc <__udivmoddi4>
 8000e88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_f2lz>:
 8000e94:	ee07 0a90 	vmov	s15, r0
 8000e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea0:	d401      	bmi.n	8000ea6 <__aeabi_f2lz+0x12>
 8000ea2:	f000 b80b 	b.w	8000ebc <__aeabi_f2ulz>
 8000ea6:	eef1 7a67 	vneg.f32	s15, s15
 8000eaa:	b508      	push	{r3, lr}
 8000eac:	ee17 0a90 	vmov	r0, s15
 8000eb0:	f000 f804 	bl	8000ebc <__aeabi_f2ulz>
 8000eb4:	4240      	negs	r0, r0
 8000eb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eba:	bd08      	pop	{r3, pc}

08000ebc <__aeabi_f2ulz>:
 8000ebc:	b5d0      	push	{r4, r6, r7, lr}
 8000ebe:	f7ff fb43 	bl	8000548 <__aeabi_f2d>
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__aeabi_f2ulz+0x38>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4606      	mov	r6, r0
 8000ec8:	460f      	mov	r7, r1
 8000eca:	f7ff fb95 	bl	80005f8 <__aeabi_dmul>
 8000ece:	f000 f97b 	bl	80011c8 <__aeabi_d2uiz>
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	f7ff fb16 	bl	8000504 <__aeabi_ui2d>
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <__aeabi_f2ulz+0x3c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f7ff fb8c 	bl	80005f8 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	4639      	mov	r1, r7
 8000ee8:	f7ff f9ce 	bl	8000288 <__aeabi_dsub>
 8000eec:	f000 f96c 	bl	80011c8 <__aeabi_d2uiz>
 8000ef0:	4621      	mov	r1, r4
 8000ef2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ef4:	3df00000 	.word	0x3df00000
 8000ef8:	41f00000 	.word	0x41f00000

08000efc <__udivmoddi4>:
 8000efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f00:	9e08      	ldr	r6, [sp, #32]
 8000f02:	460d      	mov	r5, r1
 8000f04:	4604      	mov	r4, r0
 8000f06:	460f      	mov	r7, r1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d14a      	bne.n	8000fa2 <__udivmoddi4+0xa6>
 8000f0c:	428a      	cmp	r2, r1
 8000f0e:	4694      	mov	ip, r2
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0xe2>
 8000f12:	fab2 f382 	clz	r3, r2
 8000f16:	b143      	cbz	r3, 8000f2a <__udivmoddi4+0x2e>
 8000f18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f1c:	f1c3 0220 	rsb	r2, r3, #32
 8000f20:	409f      	lsls	r7, r3
 8000f22:	fa20 f202 	lsr.w	r2, r0, r2
 8000f26:	4317      	orrs	r7, r2
 8000f28:	409c      	lsls	r4, r3
 8000f2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f2e:	fa1f f58c 	uxth.w	r5, ip
 8000f32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f36:	0c22      	lsrs	r2, r4, #16
 8000f38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f40:	fb01 f005 	mul.w	r0, r1, r5
 8000f44:	4290      	cmp	r0, r2
 8000f46:	d90a      	bls.n	8000f5e <__udivmoddi4+0x62>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f50:	f080 811c 	bcs.w	800118c <__udivmoddi4+0x290>
 8000f54:	4290      	cmp	r0, r2
 8000f56:	f240 8119 	bls.w	800118c <__udivmoddi4+0x290>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4462      	add	r2, ip
 8000f5e:	1a12      	subs	r2, r2, r0
 8000f60:	b2a4      	uxth	r4, r4
 8000f62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f6e:	fb00 f505 	mul.w	r5, r0, r5
 8000f72:	42a5      	cmp	r5, r4
 8000f74:	d90a      	bls.n	8000f8c <__udivmoddi4+0x90>
 8000f76:	eb1c 0404 	adds.w	r4, ip, r4
 8000f7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f7e:	f080 8107 	bcs.w	8001190 <__udivmoddi4+0x294>
 8000f82:	42a5      	cmp	r5, r4
 8000f84:	f240 8104 	bls.w	8001190 <__udivmoddi4+0x294>
 8000f88:	4464      	add	r4, ip
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f90:	1b64      	subs	r4, r4, r5
 8000f92:	2100      	movs	r1, #0
 8000f94:	b11e      	cbz	r6, 8000f9e <__udivmoddi4+0xa2>
 8000f96:	40dc      	lsrs	r4, r3
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0xbc>
 8000fa6:	2e00      	cmp	r6, #0
 8000fa8:	f000 80ed 	beq.w	8001186 <__udivmoddi4+0x28a>
 8000fac:	2100      	movs	r1, #0
 8000fae:	e9c6 0500 	strd	r0, r5, [r6]
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb8:	fab3 f183 	clz	r1, r3
 8000fbc:	2900      	cmp	r1, #0
 8000fbe:	d149      	bne.n	8001054 <__udivmoddi4+0x158>
 8000fc0:	42ab      	cmp	r3, r5
 8000fc2:	d302      	bcc.n	8000fca <__udivmoddi4+0xce>
 8000fc4:	4282      	cmp	r2, r0
 8000fc6:	f200 80f8 	bhi.w	80011ba <__udivmoddi4+0x2be>
 8000fca:	1a84      	subs	r4, r0, r2
 8000fcc:	eb65 0203 	sbc.w	r2, r5, r3
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	4617      	mov	r7, r2
 8000fd4:	2e00      	cmp	r6, #0
 8000fd6:	d0e2      	beq.n	8000f9e <__udivmoddi4+0xa2>
 8000fd8:	e9c6 4700 	strd	r4, r7, [r6]
 8000fdc:	e7df      	b.n	8000f9e <__udivmoddi4+0xa2>
 8000fde:	b902      	cbnz	r2, 8000fe2 <__udivmoddi4+0xe6>
 8000fe0:	deff      	udf	#255	; 0xff
 8000fe2:	fab2 f382 	clz	r3, r2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f040 8090 	bne.w	800110c <__udivmoddi4+0x210>
 8000fec:	1a8a      	subs	r2, r1, r2
 8000fee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff2:	fa1f fe8c 	uxth.w	lr, ip
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ffc:	fb07 2015 	mls	r0, r7, r5, r2
 8001000:	0c22      	lsrs	r2, r4, #16
 8001002:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001006:	fb0e f005 	mul.w	r0, lr, r5
 800100a:	4290      	cmp	r0, r2
 800100c:	d908      	bls.n	8001020 <__udivmoddi4+0x124>
 800100e:	eb1c 0202 	adds.w	r2, ip, r2
 8001012:	f105 38ff 	add.w	r8, r5, #4294967295
 8001016:	d202      	bcs.n	800101e <__udivmoddi4+0x122>
 8001018:	4290      	cmp	r0, r2
 800101a:	f200 80cb 	bhi.w	80011b4 <__udivmoddi4+0x2b8>
 800101e:	4645      	mov	r5, r8
 8001020:	1a12      	subs	r2, r2, r0
 8001022:	b2a4      	uxth	r4, r4
 8001024:	fbb2 f0f7 	udiv	r0, r2, r7
 8001028:	fb07 2210 	mls	r2, r7, r0, r2
 800102c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001030:	fb0e fe00 	mul.w	lr, lr, r0
 8001034:	45a6      	cmp	lr, r4
 8001036:	d908      	bls.n	800104a <__udivmoddi4+0x14e>
 8001038:	eb1c 0404 	adds.w	r4, ip, r4
 800103c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001040:	d202      	bcs.n	8001048 <__udivmoddi4+0x14c>
 8001042:	45a6      	cmp	lr, r4
 8001044:	f200 80bb 	bhi.w	80011be <__udivmoddi4+0x2c2>
 8001048:	4610      	mov	r0, r2
 800104a:	eba4 040e 	sub.w	r4, r4, lr
 800104e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001052:	e79f      	b.n	8000f94 <__udivmoddi4+0x98>
 8001054:	f1c1 0720 	rsb	r7, r1, #32
 8001058:	408b      	lsls	r3, r1
 800105a:	fa22 fc07 	lsr.w	ip, r2, r7
 800105e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001062:	fa05 f401 	lsl.w	r4, r5, r1
 8001066:	fa20 f307 	lsr.w	r3, r0, r7
 800106a:	40fd      	lsrs	r5, r7
 800106c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001070:	4323      	orrs	r3, r4
 8001072:	fbb5 f8f9 	udiv	r8, r5, r9
 8001076:	fa1f fe8c 	uxth.w	lr, ip
 800107a:	fb09 5518 	mls	r5, r9, r8, r5
 800107e:	0c1c      	lsrs	r4, r3, #16
 8001080:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001084:	fb08 f50e 	mul.w	r5, r8, lr
 8001088:	42a5      	cmp	r5, r4
 800108a:	fa02 f201 	lsl.w	r2, r2, r1
 800108e:	fa00 f001 	lsl.w	r0, r0, r1
 8001092:	d90b      	bls.n	80010ac <__udivmoddi4+0x1b0>
 8001094:	eb1c 0404 	adds.w	r4, ip, r4
 8001098:	f108 3aff 	add.w	sl, r8, #4294967295
 800109c:	f080 8088 	bcs.w	80011b0 <__udivmoddi4+0x2b4>
 80010a0:	42a5      	cmp	r5, r4
 80010a2:	f240 8085 	bls.w	80011b0 <__udivmoddi4+0x2b4>
 80010a6:	f1a8 0802 	sub.w	r8, r8, #2
 80010aa:	4464      	add	r4, ip
 80010ac:	1b64      	subs	r4, r4, r5
 80010ae:	b29d      	uxth	r5, r3
 80010b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80010b4:	fb09 4413 	mls	r4, r9, r3, r4
 80010b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80010c0:	45a6      	cmp	lr, r4
 80010c2:	d908      	bls.n	80010d6 <__udivmoddi4+0x1da>
 80010c4:	eb1c 0404 	adds.w	r4, ip, r4
 80010c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80010cc:	d26c      	bcs.n	80011a8 <__udivmoddi4+0x2ac>
 80010ce:	45a6      	cmp	lr, r4
 80010d0:	d96a      	bls.n	80011a8 <__udivmoddi4+0x2ac>
 80010d2:	3b02      	subs	r3, #2
 80010d4:	4464      	add	r4, ip
 80010d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010da:	fba3 9502 	umull	r9, r5, r3, r2
 80010de:	eba4 040e 	sub.w	r4, r4, lr
 80010e2:	42ac      	cmp	r4, r5
 80010e4:	46c8      	mov	r8, r9
 80010e6:	46ae      	mov	lr, r5
 80010e8:	d356      	bcc.n	8001198 <__udivmoddi4+0x29c>
 80010ea:	d053      	beq.n	8001194 <__udivmoddi4+0x298>
 80010ec:	b156      	cbz	r6, 8001104 <__udivmoddi4+0x208>
 80010ee:	ebb0 0208 	subs.w	r2, r0, r8
 80010f2:	eb64 040e 	sbc.w	r4, r4, lr
 80010f6:	fa04 f707 	lsl.w	r7, r4, r7
 80010fa:	40ca      	lsrs	r2, r1
 80010fc:	40cc      	lsrs	r4, r1
 80010fe:	4317      	orrs	r7, r2
 8001100:	e9c6 7400 	strd	r7, r4, [r6]
 8001104:	4618      	mov	r0, r3
 8001106:	2100      	movs	r1, #0
 8001108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800110c:	f1c3 0120 	rsb	r1, r3, #32
 8001110:	fa02 fc03 	lsl.w	ip, r2, r3
 8001114:	fa20 f201 	lsr.w	r2, r0, r1
 8001118:	fa25 f101 	lsr.w	r1, r5, r1
 800111c:	409d      	lsls	r5, r3
 800111e:	432a      	orrs	r2, r5
 8001120:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001124:	fa1f fe8c 	uxth.w	lr, ip
 8001128:	fbb1 f0f7 	udiv	r0, r1, r7
 800112c:	fb07 1510 	mls	r5, r7, r0, r1
 8001130:	0c11      	lsrs	r1, r2, #16
 8001132:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001136:	fb00 f50e 	mul.w	r5, r0, lr
 800113a:	428d      	cmp	r5, r1
 800113c:	fa04 f403 	lsl.w	r4, r4, r3
 8001140:	d908      	bls.n	8001154 <__udivmoddi4+0x258>
 8001142:	eb1c 0101 	adds.w	r1, ip, r1
 8001146:	f100 38ff 	add.w	r8, r0, #4294967295
 800114a:	d22f      	bcs.n	80011ac <__udivmoddi4+0x2b0>
 800114c:	428d      	cmp	r5, r1
 800114e:	d92d      	bls.n	80011ac <__udivmoddi4+0x2b0>
 8001150:	3802      	subs	r0, #2
 8001152:	4461      	add	r1, ip
 8001154:	1b49      	subs	r1, r1, r5
 8001156:	b292      	uxth	r2, r2
 8001158:	fbb1 f5f7 	udiv	r5, r1, r7
 800115c:	fb07 1115 	mls	r1, r7, r5, r1
 8001160:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001164:	fb05 f10e 	mul.w	r1, r5, lr
 8001168:	4291      	cmp	r1, r2
 800116a:	d908      	bls.n	800117e <__udivmoddi4+0x282>
 800116c:	eb1c 0202 	adds.w	r2, ip, r2
 8001170:	f105 38ff 	add.w	r8, r5, #4294967295
 8001174:	d216      	bcs.n	80011a4 <__udivmoddi4+0x2a8>
 8001176:	4291      	cmp	r1, r2
 8001178:	d914      	bls.n	80011a4 <__udivmoddi4+0x2a8>
 800117a:	3d02      	subs	r5, #2
 800117c:	4462      	add	r2, ip
 800117e:	1a52      	subs	r2, r2, r1
 8001180:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001184:	e738      	b.n	8000ff8 <__udivmoddi4+0xfc>
 8001186:	4631      	mov	r1, r6
 8001188:	4630      	mov	r0, r6
 800118a:	e708      	b.n	8000f9e <__udivmoddi4+0xa2>
 800118c:	4639      	mov	r1, r7
 800118e:	e6e6      	b.n	8000f5e <__udivmoddi4+0x62>
 8001190:	4610      	mov	r0, r2
 8001192:	e6fb      	b.n	8000f8c <__udivmoddi4+0x90>
 8001194:	4548      	cmp	r0, r9
 8001196:	d2a9      	bcs.n	80010ec <__udivmoddi4+0x1f0>
 8001198:	ebb9 0802 	subs.w	r8, r9, r2
 800119c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80011a0:	3b01      	subs	r3, #1
 80011a2:	e7a3      	b.n	80010ec <__udivmoddi4+0x1f0>
 80011a4:	4645      	mov	r5, r8
 80011a6:	e7ea      	b.n	800117e <__udivmoddi4+0x282>
 80011a8:	462b      	mov	r3, r5
 80011aa:	e794      	b.n	80010d6 <__udivmoddi4+0x1da>
 80011ac:	4640      	mov	r0, r8
 80011ae:	e7d1      	b.n	8001154 <__udivmoddi4+0x258>
 80011b0:	46d0      	mov	r8, sl
 80011b2:	e77b      	b.n	80010ac <__udivmoddi4+0x1b0>
 80011b4:	3d02      	subs	r5, #2
 80011b6:	4462      	add	r2, ip
 80011b8:	e732      	b.n	8001020 <__udivmoddi4+0x124>
 80011ba:	4608      	mov	r0, r1
 80011bc:	e70a      	b.n	8000fd4 <__udivmoddi4+0xd8>
 80011be:	4464      	add	r4, ip
 80011c0:	3802      	subs	r0, #2
 80011c2:	e742      	b.n	800104a <__udivmoddi4+0x14e>

080011c4 <__aeabi_idiv0>:
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2uiz>:
 80011c8:	004a      	lsls	r2, r1, #1
 80011ca:	d211      	bcs.n	80011f0 <__aeabi_d2uiz+0x28>
 80011cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80011d0:	d211      	bcs.n	80011f6 <__aeabi_d2uiz+0x2e>
 80011d2:	d50d      	bpl.n	80011f0 <__aeabi_d2uiz+0x28>
 80011d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80011d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011dc:	d40e      	bmi.n	80011fc <__aeabi_d2uiz+0x34>
 80011de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011ea:	fa23 f002 	lsr.w	r0, r3, r2
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80011fa:	d102      	bne.n	8001202 <__aeabi_d2uiz+0x3a>
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	4770      	bx	lr
 8001202:	f04f 0000 	mov.w	r0, #0
 8001206:	4770      	bx	lr

08001208 <HAL_SPI_TxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/

/* Private application code --------------------------------------------------*/
//Callback de escritura SPI
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <HAL_SPI_TxCpltCallback+0x24>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d102      	bne.n	8001220 <HAL_SPI_TxCpltCallback+0x18>
        {
            flag_ADS_Write_Cplt = true;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_SPI_TxCpltCallback+0x28>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
        }
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40013000 	.word	0x40013000
 8001230:	200015bf 	.word	0x200015bf

08001234 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_SPI_RxCpltCallback+0x2c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d107      	bne.n	8001256 <HAL_SPI_RxCpltCallback+0x22>
        {
//            if (flag_ADS_Reading) // Si fue recepción por esperar lectura, proceso este callback
//                {
                    HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); // Liberar el SPI del ADS
 8001246:	2201      	movs	r2, #1
 8001248:	2110      	movs	r1, #16
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <HAL_SPI_RxCpltCallback+0x30>)
 800124c:	f005 feec 	bl	8007028 <HAL_GPIO_WritePin>
                    flag_ADS_Reading = false;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_SPI_RxCpltCallback+0x34>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
//                }
        }
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40013000 	.word	0x40013000
 8001264:	40020000 	.word	0x40020000
 8001268:	200015c0 	.word	0x200015c0

0800126c <adsCmd_rdatac>:
void adsCmd_rdatac (void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    ads_SendSimpleCommand (ADS_CMD_RDATAC);
 8001270:	2010      	movs	r0, #16
 8001272:	f000 f859 	bl	8001328 <ads_SendSimpleCommand>
    ads_is_rdatac = true;
 8001276:	4b02      	ldr	r3, [pc, #8]	; (8001280 <adsCmd_rdatac+0x14>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000

08001284 <adsCmd_sdatac>:
void adsCmd_sdatac (void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    ads_SendSimpleCommand (ADS_CMD_SDATAC);
 8001288:	2011      	movs	r0, #17
 800128a:	f000 f84d 	bl	8001328 <ads_SendSimpleCommand>
    ads_is_rdatac = false;
 800128e:	4b02      	ldr	r3, [pc, #8]	; (8001298 <adsCmd_sdatac+0x14>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000000 	.word	0x20000000

0800129c <adsCmd_wreg>:
        }
    comando[1] = (nRegs & 0b00011111) - 1; // mantener los bytes n
    HAL_SPI_Transmit (&hspi1, comando, 2, 100);
}
void adsCmd_wreg (ads_Registros_t regInit, uint8_t nRegs)
{ // 1er byte 001rrrrr, 2º byte 000nnnnn
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	460a      	mov	r2, r1
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4613      	mov	r3, r2
 80012aa:	71bb      	strb	r3, [r7, #6]
    uint8_t comando[2];
    HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2110      	movs	r1, #16
 80012b0:	4811      	ldr	r0, [pc, #68]	; (80012f8 <adsCmd_wreg+0x5c>)
 80012b2:	f005 feb9 	bl	8007028 <HAL_GPIO_WritePin>
    comando[0] = (regInit & 0b00011111) | ADS_WREG_MASK; // mantener los bytes r y convinarlos con la máscara de comando
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	733b      	strb	r3, [r7, #12]
    if (nRegs == 0)
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <adsCmd_wreg+0x38>
        {
            nRegs = 1; // mínimo 1 registro a escribir
 80012d0:	2301      	movs	r3, #1
 80012d2:	71bb      	strb	r3, [r7, #6]
        }
    comando[1] = (nRegs & 0b00011111) - 1; // mantener los bytes n
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	3b01      	subs	r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit (&hspi1, comando, 2, 100);
 80012e2:	f107 010c 	add.w	r1, r7, #12
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	2202      	movs	r2, #2
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <adsCmd_wreg+0x60>)
 80012ec:	f008 f926 	bl	800953c <HAL_SPI_Transmit>
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40020000 	.word	0x40020000
 80012fc:	20001ccc 	.word	0x20001ccc

08001300 <adsCmd_end>:
void adsCmd_end (uint16_t dly)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
    delay_us_tim13 (dly);
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fa59 	bl	80017c4 <delay_us_tim13>
    HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2110      	movs	r1, #16
 8001316:	4803      	ldr	r0, [pc, #12]	; (8001324 <adsCmd_end+0x24>)
 8001318:	f005 fe86 	bl	8007028 <HAL_GPIO_WritePin>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40020000 	.word	0x40020000

08001328 <ads_SendSimpleCommand>:
void ads_SendSimpleCommand (ads_Comandos_t cmd)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
    uint8_t comando = cmd;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	737b      	strb	r3, [r7, #13]
    uint16_t delay;
    if (comando == ADS_CMD_RESET)
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	2b06      	cmp	r3, #6
 800133a:	d102      	bne.n	8001342 <ads_SendSimpleCommand+0x1a>
        {
            delay = ADS_TCLK_18;
 800133c:	2328      	movs	r3, #40	; 0x28
 800133e:	81fb      	strh	r3, [r7, #14]
 8001340:	e001      	b.n	8001346 <ads_SendSimpleCommand+0x1e>
        }
    else
        {
            delay = ADS_TCLK_4;
 8001342:	2306      	movs	r3, #6
 8001344:	81fb      	strh	r3, [r7, #14]
        }
    adsCmd_pinStart_LOW();
 8001346:	2200      	movs	r2, #0
 8001348:	2120      	movs	r1, #32
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <ads_SendSimpleCommand+0x60>)
 800134c:	f005 fe6c 	bl	8007028 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2110      	movs	r1, #16
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <ads_SendSimpleCommand+0x64>)
 8001356:	f005 fe67 	bl	8007028 <HAL_GPIO_WritePin>
    flag_ADS_Write_Cplt = false;
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <ads_SendSimpleCommand+0x68>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit_IT (&hspi1, &comando, 1);
 8001360:	f107 030d 	add.w	r3, r7, #13
 8001364:	2201      	movs	r2, #1
 8001366:	4619      	mov	r1, r3
 8001368:	480a      	ldr	r0, [pc, #40]	; (8001394 <ads_SendSimpleCommand+0x6c>)
 800136a:	f008 fa33 	bl	80097d4 <HAL_SPI_Transmit_IT>
    while (!flag_ADS_Write_Cplt)
 800136e:	bf00      	nop
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <ads_SendSimpleCommand+0x68>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0fb      	beq.n	8001370 <ads_SendSimpleCommand+0x48>
        {
        }
    adsCmd_end (delay);
 8001378:	89fb      	ldrh	r3, [r7, #14]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ffc0 	bl	8001300 <adsCmd_end>
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40020800 	.word	0x40020800
 800138c:	40020000 	.word	0x40020000
 8001390:	200015bf 	.word	0x200015bf
 8001394:	20001ccc 	.word	0x20001ccc

08001398 <lecturaContinuaDatosAds>:
                    flag_ADS_Reading = false;
                }
        }
}
void lecturaContinuaDatosAds (void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
    // Identificar si hubo error en la lectura del ADS
    bool errorLectura = false;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    //Respaldo del dato anterior en el buffer de recepción.
    //En caso de error, reenviar el último dato válido
    uint8_t ads_bufferRx_Resp[ADS_BUFF_RX];
    for (uint8_t i = 0; i < ADS_BUFF_RX; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013aa:	e00e      	b.n	80013ca <lecturaContinuaDatosAds+0x32>
        {
            ads_bufferRx_Resp[i] = ads_bufferRx[i];
 80013ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80013b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013b4:	494a      	ldr	r1, [pc, #296]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 80013b6:	5c8a      	ldrb	r2, [r1, r2]
 80013b8:	3328      	adds	r3, #40	; 0x28
 80013ba:	443b      	add	r3, r7
 80013bc:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (uint8_t i = 0; i < ADS_BUFF_RX; i++)
 80013c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013c4:	3301      	adds	r3, #1
 80013c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ce:	2b1a      	cmp	r3, #26
 80013d0:	d9ec      	bls.n	80013ac <lecturaContinuaDatosAds+0x14>
        }

    // Borrar el buffer de lectura ADS (Evitar enviar datos de comandos)
    memset (ads_bufferRx, 0x00, ADS_BUFF_RX);
 80013d2:	221b      	movs	r2, #27
 80013d4:	2100      	movs	r1, #0
 80013d6:	4842      	ldr	r0, [pc, #264]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 80013d8:	f014 ff9f 	bl	801631a <memset>
    // Habilitar la lectura del ADS
    HAL_GPIO_WritePin (SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	4840      	ldr	r0, [pc, #256]	; (80014e4 <lecturaContinuaDatosAds+0x14c>)
 80013e2:	f005 fe21 	bl	8007028 <HAL_GPIO_WritePin>
    // Indicar al callback del SPI, que espero una lectura de datos
    flag_ADS_Reading = true;
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <lecturaContinuaDatosAds+0x150>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
    // Recibir los datos
    HAL_SPI_Receive_IT (&hspi1, ads_bufferRx, ADS_BUFF_RX);
 80013ec:	221b      	movs	r2, #27
 80013ee:	493c      	ldr	r1, [pc, #240]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 80013f0:	483e      	ldr	r0, [pc, #248]	; (80014ec <lecturaContinuaDatosAds+0x154>)
 80013f2:	f008 fa87 	bl	8009904 <HAL_SPI_Receive_IT>
    // En caso de que la lectura no se logre, no bloquearme en esta tarea.
    // Además la tarea de Lectura ADS requiere del valor leído del ADS
    uint32_t time = HAL_GetTick ();
 80013f6:	f004 fc77 	bl	8005ce8 <HAL_GetTick>
 80013fa:	6238      	str	r0, [r7, #32]
    while (flag_ADS_Reading)
 80013fc:	e00a      	b.n	8001414 <lecturaContinuaDatosAds+0x7c>
        {
            if ((HAL_GetTick () - time) > 1)
 80013fe:	f004 fc73 	bl	8005ce8 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d903      	bls.n	8001414 <lecturaContinuaDatosAds+0x7c>
                { //SOLO ESPERO 2 ms máximo y regreso el dato salvado previamente
                    errorLectura = true;
 800140c:	2301      	movs	r3, #1
 800140e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

//                    for (uint8_t i = 0; i < ADS_BUFF_RX; i++)
//                        {
//                            ads_bufferRx[i] = ads_bufferRx_Resp[i];
//                        }
                    break;
 8001412:	e003      	b.n	800141c <lecturaContinuaDatosAds+0x84>
    while (flag_ADS_Reading)
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <lecturaContinuaDatosAds+0x150>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f0      	bne.n	80013fe <lecturaContinuaDatosAds+0x66>
    // Acá ya se leyó el ADS, ahora hay que validar lo leído
    // Los 27 bytes leídos deben comenzar con 1100 y los canales no usados deben contener 0's
    // |           STATUS WORD              | RESP       | DERIVADA I | DERIVADA II|    NULL    |    NULL    |    NULL    |    NULL    |     V1     |
    // |             3 bytes                | 3Bytes CH1 | 3Bytes CH2 | 3Bytes CH3 | 3Bytes CH4 | 3Bytes CH5 | 3Bytes CH6 | 3Bytes CH7 | 3Bytes CH8 |
    // |1100 <statP[8]> <statN[8]> <GPIO[4]>| 0x......   | 0x......   | 0x......   | 0x000000   | 0x000000   | 0x000000   | 0x000000   | 0x......   |
    uint8_t bi0 = ads_bufferRx[0] >> 4;
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	77fb      	strb	r3, [r7, #31]
    uint8_t bytes12_23 = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	77bb      	strb	r3, [r7, #30]

    bytes12_23 = ads_bufferRx[12] | ads_bufferRx[13] | ads_bufferRx[14] // Algo en CH4
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 800142a:	7b1a      	ldrb	r2, [r3, #12]
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 800142e:	7b5b      	ldrb	r3, [r3, #13]
 8001430:	4313      	orrs	r3, r2
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 8001436:	7b9b      	ldrb	r3, [r3, #14]
 8001438:	4313      	orrs	r3, r2
 800143a:	b2da      	uxtb	r2, r3
               | ads_bufferRx[15] | ads_bufferRx[16] | ads_bufferRx[17] // Algo en CH5
 800143c:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 800143e:	7bdb      	ldrb	r3, [r3, #15]
    bytes12_23 = ads_bufferRx[12] | ads_bufferRx[13] | ads_bufferRx[14] // Algo en CH4
 8001440:	4313      	orrs	r3, r2
 8001442:	b2da      	uxtb	r2, r3
               | ads_bufferRx[15] | ads_bufferRx[16] | ads_bufferRx[17] // Algo en CH5
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 8001446:	7c1b      	ldrb	r3, [r3, #16]
    bytes12_23 = ads_bufferRx[12] | ads_bufferRx[13] | ads_bufferRx[14] // Algo en CH4
 8001448:	4313      	orrs	r3, r2
 800144a:	b2da      	uxtb	r2, r3
               | ads_bufferRx[15] | ads_bufferRx[16] | ads_bufferRx[17] // Algo en CH5
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 800144e:	7c5b      	ldrb	r3, [r3, #17]
    bytes12_23 = ads_bufferRx[12] | ads_bufferRx[13] | ads_bufferRx[14] // Algo en CH4
 8001450:	4313      	orrs	r3, r2
 8001452:	b2da      	uxtb	r2, r3
               | ads_bufferRx[18] | ads_bufferRx[19] | ads_bufferRx[20] // Algo en CH6
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 8001456:	7c9b      	ldrb	r3, [r3, #18]
    bytes12_23 = ads_bufferRx[12] | ads_bufferRx[13] | ads_bufferRx[14] // Algo en CH4
 8001458:	4313      	orrs	r3, r2
 800145a:	b2da      	uxtb	r2, r3
               | ads_bufferRx[18] | ads_bufferRx[19] | ads_bufferRx[20] // Algo en CH6
 800145c:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 800145e:	7cdb      	ldrb	r3, [r3, #19]
    bytes12_23 = ads_bufferRx[12] | ads_bufferRx[13] | ads_bufferRx[14] // Algo en CH4
 8001460:	4313      	orrs	r3, r2
 8001462:	b2da      	uxtb	r2, r3
               | ads_bufferRx[18] | ads_bufferRx[19] | ads_bufferRx[20] // Algo en CH6
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 8001466:	7d1b      	ldrb	r3, [r3, #20]
    bytes12_23 = ads_bufferRx[12] | ads_bufferRx[13] | ads_bufferRx[14] // Algo en CH4
 8001468:	4313      	orrs	r3, r2
 800146a:	b2da      	uxtb	r2, r3
               | ads_bufferRx[21] | ads_bufferRx[22] | ads_bufferRx[23]; // Algo en CH7
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 800146e:	7d5b      	ldrb	r3, [r3, #21]
    bytes12_23 = ads_bufferRx[12] | ads_bufferRx[13] | ads_bufferRx[14] // Algo en CH4
 8001470:	4313      	orrs	r3, r2
 8001472:	b2da      	uxtb	r2, r3
               | ads_bufferRx[21] | ads_bufferRx[22] | ads_bufferRx[23]; // Algo en CH7
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 8001476:	7d9b      	ldrb	r3, [r3, #22]
    bytes12_23 = ads_bufferRx[12] | ads_bufferRx[13] | ads_bufferRx[14] // Algo en CH4
 8001478:	4313      	orrs	r3, r2
 800147a:	b2da      	uxtb	r2, r3
               | ads_bufferRx[21] | ads_bufferRx[22] | ads_bufferRx[23]; // Algo en CH7
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 800147e:	7ddb      	ldrb	r3, [r3, #23]
    bytes12_23 = ads_bufferRx[12] | ads_bufferRx[13] | ads_bufferRx[14] // Algo en CH4
 8001480:	4313      	orrs	r3, r2
 8001482:	77bb      	strb	r3, [r7, #30]

    // Encabezado mal || Algo en los bytes 12:23
    if((bi0 != 0x0c) || (bytes12_23) // Algo en CH4
 8001484:	7ffb      	ldrb	r3, [r7, #31]
 8001486:	2b0c      	cmp	r3, #12
 8001488:	d102      	bne.n	8001490 <lecturaContinuaDatosAds+0xf8>
 800148a:	7fbb      	ldrb	r3, [r7, #30]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <lecturaContinuaDatosAds+0xfe>
       )
        {
            errorLectura = true;
 8001490:	2301      	movs	r3, #1
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        }

    if(errorLectura) //En caso de error devolver el dato anterior
 8001496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01b      	beq.n	80014d6 <lecturaContinuaDatosAds+0x13e>
        {
            error_cnt++;
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <lecturaContinuaDatosAds+0x158>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <lecturaContinuaDatosAds+0x158>)
 80014a6:	6013      	str	r3, [r2, #0]
            for (uint8_t i = 0; i < ADS_BUFF_RX; i++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80014ae:	e00e      	b.n	80014ce <lecturaContinuaDatosAds+0x136>
                {
                    ads_bufferRx[i] = ads_bufferRx_Resp[i];
 80014b0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80014b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014b8:	3228      	adds	r2, #40	; 0x28
 80014ba:	443a      	add	r2, r7
 80014bc:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <lecturaContinuaDatosAds+0x148>)
 80014c2:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 0; i < ADS_BUFF_RX; i++)
 80014c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014c8:	3301      	adds	r3, #1
 80014ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80014ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014d2:	2b1a      	cmp	r3, #26
 80014d4:	d9ec      	bls.n	80014b0 <lecturaContinuaDatosAds+0x118>
                }
        }

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20001584 	.word	0x20001584
 80014e4:	40020000 	.word	0x40020000
 80014e8:	200015c0 	.word	0x200015c0
 80014ec:	20001ccc 	.word	0x20001ccc
 80014f0:	20001634 	.word	0x20001634

080014f4 <leerValorCanal>:
int32_t leerValorCanal (uint32_t IndiceCanal) // Devuelve un valor de 24 bits. Canales desde 0 hasta 8. 0 -> palabra de estado
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    // Comenzamos con valores limpios para asegurar que no se corrompan con ruido
    ads_ChannelData_T channelData;    // Dónde se procesará el dato leído
    uint32_t indice = 0;              // Dónde comienza el dato del canal
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
    //uint8_t *pADSMsg = ads_bufferRx;  // Puntero buffer RX del ADS
    int32_t valor_final = 0;          // Valor calculado
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]

    // Variable de valor leído inicializada en 0
    channelData.data = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
    //Posición del byte a leer
    indice = IndiceCanal * 3;
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	617b      	str	r3, [r7, #20]
    //Copiar los bytes del canal a la variable temporal
    channelData.bytes.b0 = ads_bufferRx[indice];
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <leerValorCanal+0x70>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	73bb      	strb	r3, [r7, #14]
    channelData.bytes.b1 = ads_bufferRx[indice + 1];
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	4a10      	ldr	r2, [pc, #64]	; (8001564 <leerValorCanal+0x70>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	737b      	strb	r3, [r7, #13]
    channelData.bytes.b2 = ads_bufferRx[indice + 2];
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3302      	adds	r3, #2
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <leerValorCanal+0x70>)
 800152c:	5cd3      	ldrb	r3, [r2, r3]
 800152e:	733b      	strb	r3, [r7, #12]
//            {
//                bool flag;
//                flag = true;
//            }

    if (IndiceCanal) // al canal cero no se le aplica la conversión de números
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <leerValorCanal+0x58>
        { // Canales del 1 al 8 Máximo 0x7FFFFF, Negativos800000
            if (channelData.data & 0x00800000) // 0x800000 es la máscara de negativos el último bit es el indicador de negativo
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <leerValorCanal+0x58>
                {
                    channelData.data |= 0xFF800000; //Rellenar el 4bit con '1'
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8001546:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800154a:	60fb      	str	r3, [r7, #12]
                }
        }
    valor_final |= channelData.data;
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
//                }
//        }



    return valor_final;
 8001554:	693b      	ldr	r3, [r7, #16]
}
 8001556:	4618      	mov	r0, r3
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20001584 	.word	0x20001584

08001568 <ads_Init>:
 * Wakeup 9ms. Si ya están todas las alimentaciones y se usa el pin PWDN.
 * Treset 977ns. Si se ejecuta esta función por un comando reset o pin reset
 * no requiere retardo ya que las funciones internas ya tienen los tiempos requeridos
 */
void ads_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    ads_reset_byPin();
 800156c:	f000 f8f0 	bl	8001750 <ads_reset_byPin>
    //delay_us_tim13 (1);            // Retardo mínimo para el reset por pin
    // Preparar la configuración del ADS
    //ads_bufferTx[0] = 0b10000110;  // CONFIG1 V1.3.0+ //HR 500SPS
    ads_bufferTx[0] = 0b00000101;  // CONFIG1 V1.3.0+ //LP 500SPS
 8001570:	4b32      	ldr	r3, [pc, #200]	; (800163c <ads_Init+0xd4>)
 8001572:	2205      	movs	r2, #5
 8001574:	701a      	strb	r2, [r3, #0]
    ads_bufferTx[1] = 0b00010000;  // CONFIG2
 8001576:	4b31      	ldr	r3, [pc, #196]	; (800163c <ads_Init+0xd4>)
 8001578:	2210      	movs	r2, #16
 800157a:	705a      	strb	r2, [r3, #1]
    ads_bufferTx[2] = 0b11001110;  // CONFIG3 |1->en_int_ref_buf|1|0->vref=2.4v|0->rld_meas=Open|1->rld_ref=internal|1->rld_buff=on|1->rld_sense=enabled|x->soloLectura=rld_stat|
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <ads_Init+0xd4>)
 800157e:	22ce      	movs	r2, #206	; 0xce
 8001580:	709a      	strb	r2, [r3, #2]
    ads_bufferTx[3] = 0b10101111;  // LOFF
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <ads_Init+0xd4>)
 8001584:	22af      	movs	r2, #175	; 0xaf
 8001586:	70da      	strb	r2, [r3, #3]
    // Canales inicialmente apagados
    ads_bufferTx[4] = 0b10000001;  // CH1SET Gain [6:4] 000-6 001-1 010-2 011-3 100-4 101-8 110-12 Ganancia 4 (3 o 4 recomendada en datasheet)  0b11000001;
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <ads_Init+0xd4>)
 800158a:	2281      	movs	r2, #129	; 0x81
 800158c:	711a      	strb	r2, [r3, #4]
    ads_bufferTx[5] = 0b10000001;  // CH2SET Ganancia en 6
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <ads_Init+0xd4>)
 8001590:	2281      	movs	r2, #129	; 0x81
 8001592:	715a      	strb	r2, [r3, #5]
    ads_bufferTx[6] = 0b10000001;  // CH3SET
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <ads_Init+0xd4>)
 8001596:	2281      	movs	r2, #129	; 0x81
 8001598:	719a      	strb	r2, [r3, #6]
    ads_bufferTx[7] = 0b10000001;  // CH4SET Canal no usado
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <ads_Init+0xd4>)
 800159c:	2281      	movs	r2, #129	; 0x81
 800159e:	71da      	strb	r2, [r3, #7]
    ads_bufferTx[8] = 0b10000001;  // CH5SET Canal no usado
 80015a0:	4b26      	ldr	r3, [pc, #152]	; (800163c <ads_Init+0xd4>)
 80015a2:	2281      	movs	r2, #129	; 0x81
 80015a4:	721a      	strb	r2, [r3, #8]
    ads_bufferTx[9] = 0b10000001;  // CH6SET Canal no usado
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <ads_Init+0xd4>)
 80015a8:	2281      	movs	r2, #129	; 0x81
 80015aa:	725a      	strb	r2, [r3, #9]
    ads_bufferTx[10] = 0b10000001; // CH7SET Canal no usado
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <ads_Init+0xd4>)
 80015ae:	2281      	movs	r2, #129	; 0x81
 80015b0:	729a      	strb	r2, [r3, #10]
    ads_bufferTx[11] = 0b10000001; // CH8SET
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <ads_Init+0xd4>)
 80015b4:	2281      	movs	r2, #129	; 0x81
 80015b6:	72da      	strb	r2, [r3, #11]
    // Revisión de electrodos conectados
    //ads_bufferTx[12] = 0b00000100; // RLD_SENSP
    ads_bufferTx[12] = 0b00000110; // RLD_SENSP
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <ads_Init+0xd4>)
 80015ba:	2206      	movs	r2, #6
 80015bc:	731a      	strb	r2, [r3, #12]
    ads_bufferTx[13] = 0b00000110; // RLD_SENSN
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <ads_Init+0xd4>)
 80015c0:	2206      	movs	r2, #6
 80015c2:	735a      	strb	r2, [r3, #13]
    ads_bufferTx[14] = 0b10000110; // LOFF_SENSP V1-CH8 LL-CH3 LA-CH2
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <ads_Init+0xd4>)
 80015c6:	2286      	movs	r2, #134	; 0x86
 80015c8:	739a      	strb	r2, [r3, #14]
    ads_bufferTx[15] = 0b00000010; // LOFF_SENSN RA Detectado en CH2
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <ads_Init+0xd4>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	73da      	strb	r2, [r3, #15]
    ads_bufferTx[16] = 0b00000000; // LOFF_FLIP
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <ads_Init+0xd4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	741a      	strb	r2, [r3, #16]
    // Modo de lectura, respiración, marcapasos y extras
    ads_bufferTx[17] = 0b00000000; // GPIO
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <ads_Init+0xd4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	745a      	strb	r2, [r3, #17]
    ads_bufferTx[18] = 0b00000011; // PACE
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <ads_Init+0xd4>)
 80015de:	2203      	movs	r2, #3
 80015e0:	749a      	strb	r2, [r3, #18]
    ads_bufferTx[19] = 0b11110010; // RESP
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <ads_Init+0xd4>)
 80015e4:	22f2      	movs	r2, #242	; 0xf2
 80015e6:	74da      	strb	r2, [r3, #19]
    ads_bufferTx[20] = 0b00100010; // CONFIG4 //V1.3.0+ NO SINGLE SHOT
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <ads_Init+0xd4>)
 80015ea:	2222      	movs	r2, #34	; 0x22
 80015ec:	751a      	strb	r2, [r3, #20]
    ads_bufferTx[21] = 0b00001011; // WCT1
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <ads_Init+0xd4>)
 80015f0:	220b      	movs	r2, #11
 80015f2:	755a      	strb	r2, [r3, #21]
    ads_bufferTx[22] = 0b11010100; // WCT2
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <ads_Init+0xd4>)
 80015f6:	22d4      	movs	r2, #212	; 0xd4
 80015f8:	759a      	strb	r2, [r3, #22]

    // Configurar ADS - Envío de datos (paquete 1)
    adsCmd_sdatac (); // SDATAC para poder configurar el ADS
 80015fa:	f7ff fe43 	bl	8001284 <adsCmd_sdatac>
    adsCmd_wreg (ADS_REG_CONFIG1, 17);
 80015fe:	2111      	movs	r1, #17
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fe4b 	bl	800129c <adsCmd_wreg>
    HAL_SPI_Transmit (&hspi1, ads_bufferTx, 17, 100);
 8001606:	2364      	movs	r3, #100	; 0x64
 8001608:	2211      	movs	r2, #17
 800160a:	490c      	ldr	r1, [pc, #48]	; (800163c <ads_Init+0xd4>)
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <ads_Init+0xd8>)
 800160e:	f007 ff95 	bl	800953c <HAL_SPI_Transmit>
    adsCmd_end (ADS_TCLK_18);
 8001612:	2028      	movs	r0, #40	; 0x28
 8001614:	f7ff fe74 	bl	8001300 <adsCmd_end>
    // Configurar ADS - Envío de datos (paquete 2)
    adsCmd_wreg (ADS_REG_GPIO, 6);
 8001618:	2106      	movs	r1, #6
 800161a:	2014      	movs	r0, #20
 800161c:	f7ff fe3e 	bl	800129c <adsCmd_wreg>
    HAL_SPI_Transmit (&hspi1, &ads_bufferTx[17], 6, 100);
 8001620:	2364      	movs	r3, #100	; 0x64
 8001622:	2206      	movs	r2, #6
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <ads_Init+0xdc>)
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <ads_Init+0xd8>)
 8001628:	f007 ff88 	bl	800953c <HAL_SPI_Transmit>
    adsCmd_end (ADS_TCLK_18);
 800162c:	2028      	movs	r0, #40	; 0x28
 800162e:	f7ff fe67 	bl	8001300 <adsCmd_end>
    adsCmd_sdatac (); // Detener lecturas continuas
 8001632:	f7ff fe27 	bl	8001284 <adsCmd_sdatac>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200015a0 	.word	0x200015a0
 8001640:	20001ccc 	.word	0x20001ccc
 8001644:	200015b1 	.word	0x200015b1

08001648 <ads_Start>:
void ads_Start (void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
    adsCmd_pinStart_LOW();
 800164c:	2200      	movs	r2, #0
 800164e:	2120      	movs	r1, #32
 8001650:	481b      	ldr	r0, [pc, #108]	; (80016c0 <ads_Start+0x78>)
 8001652:	f005 fce9 	bl	8007028 <HAL_GPIO_WritePin>
    flag_ADS_DRDY = false;
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <ads_Start+0x7c>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
    //Activar ADS para lecturas
    adsCmd_sdatac (); // SDATAC para poder configurar el ADS
 800165c:	f7ff fe12 	bl	8001284 <adsCmd_sdatac>
    ads_bufferTx[4] = 0b00000000; // CH1SET Gain [6:4] 000-6 001-1 010-2 011-3 100-4 101-8 110-12  0b01010000;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <ads_Start+0x80>)
 8001662:	2200      	movs	r2, #0
 8001664:	711a      	strb	r2, [r3, #4]
    ads_bufferTx[5] = 0b00000000; // CH2SET Ganancia 6
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <ads_Start+0x80>)
 8001668:	2200      	movs	r2, #0
 800166a:	715a      	strb	r2, [r3, #5]
    ads_bufferTx[6] = 0b00000000; // CH3SET
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <ads_Start+0x80>)
 800166e:	2200      	movs	r2, #0
 8001670:	719a      	strb	r2, [r3, #6]
    ads_bufferTx[7] = 0b10000001; // CH4SET Canal no usado
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <ads_Start+0x80>)
 8001674:	2281      	movs	r2, #129	; 0x81
 8001676:	71da      	strb	r2, [r3, #7]
    ads_bufferTx[8] = 0b10000001; // CH5SET Canal no usado
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <ads_Start+0x80>)
 800167a:	2281      	movs	r2, #129	; 0x81
 800167c:	721a      	strb	r2, [r3, #8]
    ads_bufferTx[9] = 0b10000001; // CH6SET Canal no usado
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <ads_Start+0x80>)
 8001680:	2281      	movs	r2, #129	; 0x81
 8001682:	725a      	strb	r2, [r3, #9]
    ads_bufferTx[10] = 0b10000001; // CH7SET Canal no usado
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <ads_Start+0x80>)
 8001686:	2281      	movs	r2, #129	; 0x81
 8001688:	729a      	strb	r2, [r3, #10]
    ads_bufferTx[11] = 0b00000000; // CH8SET
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <ads_Start+0x80>)
 800168c:	2200      	movs	r2, #0
 800168e:	72da      	strb	r2, [r3, #11]
    adsCmd_wreg (ADS_REG_CH1SET, 8);
 8001690:	2108      	movs	r1, #8
 8001692:	2005      	movs	r0, #5
 8001694:	f7ff fe02 	bl	800129c <adsCmd_wreg>
    HAL_SPI_Transmit (&hspi1, &ads_bufferTx[4], 8, 100);
 8001698:	2364      	movs	r3, #100	; 0x64
 800169a:	2208      	movs	r2, #8
 800169c:	490b      	ldr	r1, [pc, #44]	; (80016cc <ads_Start+0x84>)
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <ads_Start+0x88>)
 80016a0:	f007 ff4c 	bl	800953c <HAL_SPI_Transmit>
    adsCmd_end (ADS_TCLK_18);
 80016a4:	2028      	movs	r0, #40	; 0x28
 80016a6:	f7ff fe2b 	bl	8001300 <adsCmd_end>
    adsCmd_sdatac (); // Detener lecturas continuas
 80016aa:	f7ff fdeb 	bl	8001284 <adsCmd_sdatac>
    adsCmd_rdatac (); // Modo de lecturas contínuas (Solicitar lectura con el pin start)
 80016ae:	f7ff fddd 	bl	800126c <adsCmd_rdatac>
    adsCmd_pinStart_HIGH();
 80016b2:	2201      	movs	r2, #1
 80016b4:	2120      	movs	r1, #32
 80016b6:	4802      	ldr	r0, [pc, #8]	; (80016c0 <ads_Start+0x78>)
 80016b8:	f005 fcb6 	bl	8007028 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40020800 	.word	0x40020800
 80016c4:	200015be 	.word	0x200015be
 80016c8:	200015a0 	.word	0x200015a0
 80016cc:	200015a4 	.word	0x200015a4
 80016d0:	20001ccc 	.word	0x20001ccc

080016d4 <ads_Stop>:
void ads_Stop(void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
    adsCmd_pinStart_LOW();
 80016d8:	2200      	movs	r2, #0
 80016da:	2120      	movs	r1, #32
 80016dc:	4817      	ldr	r0, [pc, #92]	; (800173c <ads_Stop+0x68>)
 80016de:	f005 fca3 	bl	8007028 <HAL_GPIO_WritePin>
    flag_ADS_DRDY = false;
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <ads_Stop+0x6c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
    //Desactivar el ADS
    adsCmd_sdatac (); // SDATAC para poder configurar el ADS
 80016e8:	f7ff fdcc 	bl	8001284 <adsCmd_sdatac>
    ads_bufferTx[4] = 0b10000001; // CH1SET Gain [6:4] 000-6 001-1 010-2 011-3 100-4 101-8 110-12   0b11010001;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <ads_Stop+0x70>)
 80016ee:	2281      	movs	r2, #129	; 0x81
 80016f0:	711a      	strb	r2, [r3, #4]
    ads_bufferTx[5] = 0b10000001; // CH2SET
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <ads_Stop+0x70>)
 80016f4:	2281      	movs	r2, #129	; 0x81
 80016f6:	715a      	strb	r2, [r3, #5]
    ads_bufferTx[6] = 0b10000001; // CH3SET
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <ads_Stop+0x70>)
 80016fa:	2281      	movs	r2, #129	; 0x81
 80016fc:	719a      	strb	r2, [r3, #6]
    ads_bufferTx[7] = 0b10000001; // CH4SET Canal no usado
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <ads_Stop+0x70>)
 8001700:	2281      	movs	r2, #129	; 0x81
 8001702:	71da      	strb	r2, [r3, #7]
    ads_bufferTx[8] = 0b10000001; // CH5SET Canal no usado
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <ads_Stop+0x70>)
 8001706:	2281      	movs	r2, #129	; 0x81
 8001708:	721a      	strb	r2, [r3, #8]
    ads_bufferTx[9] = 0b10000001; // CH6SET Canal no usado
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <ads_Stop+0x70>)
 800170c:	2281      	movs	r2, #129	; 0x81
 800170e:	725a      	strb	r2, [r3, #9]
    ads_bufferTx[10] = 0b10000001; // CH7SET Canal no usado
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <ads_Stop+0x70>)
 8001712:	2281      	movs	r2, #129	; 0x81
 8001714:	729a      	strb	r2, [r3, #10]
    ads_bufferTx[11] = 0b10000001; // CH8SET
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <ads_Stop+0x70>)
 8001718:	2281      	movs	r2, #129	; 0x81
 800171a:	72da      	strb	r2, [r3, #11]
    adsCmd_wreg (ADS_REG_CH1SET, 8);
 800171c:	2108      	movs	r1, #8
 800171e:	2005      	movs	r0, #5
 8001720:	f7ff fdbc 	bl	800129c <adsCmd_wreg>
    HAL_SPI_Transmit (&hspi1, &ads_bufferTx[4], 8, 100);
 8001724:	2364      	movs	r3, #100	; 0x64
 8001726:	2208      	movs	r2, #8
 8001728:	4907      	ldr	r1, [pc, #28]	; (8001748 <ads_Stop+0x74>)
 800172a:	4808      	ldr	r0, [pc, #32]	; (800174c <ads_Stop+0x78>)
 800172c:	f007 ff06 	bl	800953c <HAL_SPI_Transmit>
    adsCmd_end (ADS_TCLK_18);
 8001730:	2028      	movs	r0, #40	; 0x28
 8001732:	f7ff fde5 	bl	8001300 <adsCmd_end>
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40020800 	.word	0x40020800
 8001740:	200015be 	.word	0x200015be
 8001744:	200015a0 	.word	0x200015a0
 8001748:	200015a4 	.word	0x200015a4
 800174c:	20001ccc 	.word	0x20001ccc

08001750 <ads_reset_byPin>:
void ads_reset_byPin(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADS_RST_GPIO_Port, ADS_RST_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	2101      	movs	r1, #1
 8001758:	4807      	ldr	r0, [pc, #28]	; (8001778 <ads_reset_byPin+0x28>)
 800175a:	f005 fc65 	bl	8007028 <HAL_GPIO_WritePin>
    delay_us_tim13(6);
 800175e:	2006      	movs	r0, #6
 8001760:	f000 f830 	bl	80017c4 <delay_us_tim13>
    HAL_GPIO_WritePin(ADS_RST_GPIO_Port, ADS_RST_Pin, GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	2101      	movs	r1, #1
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <ads_reset_byPin+0x28>)
 800176a:	f005 fc5d 	bl	8007028 <HAL_GPIO_WritePin>
    delay_us_tim13(ADS_TCLK_18);
 800176e:	2028      	movs	r0, #40	; 0x28
 8001770:	f000 f828 	bl	80017c4 <delay_us_tim13>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40020400 	.word	0x40020400

0800177c <ads_IntTrue>:

void ads_IntTrue(void){
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
    flag_ADS_DRDY = true;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <ads_IntTrue+0x14>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	200015be 	.word	0x200015be

08001794 <ads_IntFalse>:
void ads_IntFalse(void){
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
    flag_ADS_DRDY = false;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <ads_IntFalse+0x14>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	200015be 	.word	0x200015be

080017ac <ads_IntStat>:
bool ads_IntStat(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
    return flag_ADS_DRDY;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <ads_IntStat+0x14>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	200015be 	.word	0x200015be

080017c4 <delay_us_tim13>:
void delay_us_tim13 (uint16_t us)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim13, 0); // set the counter value a 0
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <delay_us_tim13+0x30>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim13) < us)
 80017d6:	bf00      	nop
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <delay_us_tim13+0x30>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d3f9      	bcc.n	80017d8 <delay_us_tim13+0x14>
        {
        }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2000485c 	.word	0x2000485c

080017f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_DMA_Init+0x3c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <MX_DMA_Init+0x3c>)
 8001808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_DMA_Init+0x3c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2105      	movs	r1, #5
 800181e:	2010      	movs	r0, #16
 8001820:	f004 fb60 	bl	8005ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001824:	2010      	movs	r0, #16
 8001826:	f004 fb89 	bl	8005f3c <HAL_NVIC_EnableIRQ>

}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <vApplicationGetIdleTaskMemory>:
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <vApplicationGetIdleTaskMemory+0x2c>)
 8001848:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <vApplicationGetIdleTaskMemory+0x30>)
 800184e:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2240      	movs	r2, #64	; 0x40
 8001854:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000166c 	.word	0x2000166c
 8001868:	2000171c 	.word	0x2000171c

0800186c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <vApplicationGetTimerTaskMemory+0x2c>)
 800187c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <vApplicationGetTimerTaskMemory+0x30>)
 8001882:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800188a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	2000181c 	.word	0x2000181c
 800189c:	200018cc 	.word	0x200018cc

080018a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b0d0      	sub	sp, #320	; 0x140
 80018a4:	af00      	add	r7, sp, #0
    /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of timerOne */
  osTimerDef(timerOne, timerOneCallback);
 80018a6:	4b80      	ldr	r3, [pc, #512]	; (8001aa8 <MX_FREERTOS_Init+0x208>)
 80018a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  timerOneHandle = osTimerCreate(osTimer(timerOne), osTimerPeriodic, NULL);
 80018b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018b6:	2200      	movs	r2, #0
 80018b8:	2101      	movs	r1, #1
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00f feaa 	bl	8011614 <osTimerCreate>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a7a      	ldr	r2, [pc, #488]	; (8001aac <MX_FREERTOS_Init+0x20c>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
    /* start timers, add new ones, ... */
  osTimerStart(timerOneHandle, TIM_ONE_RESET_VALUE);
 80018c6:	4b79      	ldr	r3, [pc, #484]	; (8001aac <MX_FREERTOS_Init+0x20c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00f fed4 	bl	801167c <osTimerStart>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of ecgGraph1 */
  osMessageQDef(ecgGraph1, 3, float32_t);
 80018d4:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <MX_FREERTOS_Init+0x210>)
 80018d6:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80018da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ecgGraph1Handle = osMessageCreate(osMessageQ(ecgGraph1), NULL);
 80018e0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00f ff98 	bl	801181c <osMessageCreate>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a71      	ldr	r2, [pc, #452]	; (8001ab4 <MX_FREERTOS_Init+0x214>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of ecgGraph2 */
  osMessageQDef(ecgGraph2, 3, float32_t);
 80018f2:	4b6f      	ldr	r3, [pc, #444]	; (8001ab0 <MX_FREERTOS_Init+0x210>)
 80018f4:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80018f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ecgGraph2Handle = osMessageCreate(osMessageQ(ecgGraph2), NULL);
 80018fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f00f ff89 	bl	801181c <osMessageCreate>
 800190a:	4603      	mov	r3, r0
 800190c:	4a6a      	ldr	r2, [pc, #424]	; (8001ab8 <MX_FREERTOS_Init+0x218>)
 800190e:	6013      	str	r3, [r2, #0]
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GraficarECG */
  osThreadDef(GraficarECG, tarea1, osPriorityAboveNormal, 0, 256);
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <MX_FREERTOS_Init+0x21c>)
 8001912:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8001916:	461d      	mov	r5, r3
 8001918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001920:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GraficarECGHandle = osThreadCreate(osThread(GraficarECG), NULL);
 8001924:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f00f fe11 	bl	8011552 <osThreadCreate>
 8001930:	4603      	mov	r3, r0
 8001932:	4a63      	ldr	r2, [pc, #396]	; (8001ac0 <MX_FREERTOS_Init+0x220>)
 8001934:	6013      	str	r3, [r2, #0]

  /* definition and creation of RevisarComandos */
  osThreadDef(RevisarComandos, tarea2, osPriorityAboveNormal, 0, 128);
 8001936:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <MX_FREERTOS_Init+0x224>)
 8001938:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 800193c:	461d      	mov	r5, r3
 800193e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001942:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001946:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RevisarComandosHandle = osThreadCreate(osThread(RevisarComandos), NULL);
 800194a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f00f fdfe 	bl	8011552 <osThreadCreate>
 8001956:	4603      	mov	r3, r0
 8001958:	4a5b      	ldr	r2, [pc, #364]	; (8001ac8 <MX_FREERTOS_Init+0x228>)
 800195a:	6013      	str	r3, [r2, #0]

  /* definition and creation of RevisarElectrodos */
  osThreadDef(RevisarElectrodos, tarea3, osPriorityNormal, 0, 128);
 800195c:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <MX_FREERTOS_Init+0x22c>)
 800195e:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001962:	461d      	mov	r5, r3
 8001964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001968:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800196c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RevisarElectrodosHandle = osThreadCreate(osThread(RevisarElectrodos), NULL);
 8001970:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f00f fdeb 	bl	8011552 <osThreadCreate>
 800197c:	4603      	mov	r3, r0
 800197e:	4a54      	ldr	r2, [pc, #336]	; (8001ad0 <MX_FREERTOS_Init+0x230>)
 8001980:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlNeopixel */
  osThreadDef(ControlNeopixel, tarea4, osPriorityNormal, 0, 128);
 8001982:	4b54      	ldr	r3, [pc, #336]	; (8001ad4 <MX_FREERTOS_Init+0x234>)
 8001984:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001988:	461d      	mov	r5, r3
 800198a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800198c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800198e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlNeopixelHandle = osThreadCreate(osThread(ControlNeopixel), NULL);
 8001996:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f00f fdd8 	bl	8011552 <osThreadCreate>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <MX_FREERTOS_Init+0x238>)
 80019a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Normalizacion */
  osThreadDef(Normalizacion, tarea5, osPriorityNormal, 0, 256);
 80019a8:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <MX_FREERTOS_Init+0x23c>)
 80019aa:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80019ae:	461d      	mov	r5, r3
 80019b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NormalizacionHandle = osThreadCreate(osThread(Normalizacion), NULL);
 80019bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00f fdc5 	bl	8011552 <osThreadCreate>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a45      	ldr	r2, [pc, #276]	; (8001ae0 <MX_FREERTOS_Init+0x240>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlUSB */
  osThreadDef(ControlUSB, tarea6, osPriorityAboveNormal, 0, 256);
 80019ce:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <MX_FREERTOS_Init+0x244>)
 80019d0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80019d4:	461d      	mov	r5, r3
 80019d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlUSBHandle = osThreadCreate(osThread(ControlUSB), NULL);
 80019e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f00f fdb2 	bl	8011552 <osThreadCreate>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a3d      	ldr	r2, [pc, #244]	; (8001ae8 <MX_FREERTOS_Init+0x248>)
 80019f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of LeerADS */
  osThreadDef(LeerADS, tarea0, osPriorityHigh, 0, 256);
 80019f4:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <MX_FREERTOS_Init+0x24c>)
 80019f6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80019fa:	461d      	mov	r5, r3
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LeerADSHandle = osThreadCreate(osThread(LeerADS), NULL);
 8001a08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00f fd9f 	bl	8011552 <osThreadCreate>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a36      	ldr	r2, [pc, #216]	; (8001af0 <MX_FREERTOS_Init+0x250>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* definition and creation of Respiracion */
  osThreadDef(Respiracion, tarea7, osPriorityNormal, 0, 256);
 8001a1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a22:	4a34      	ldr	r2, [pc, #208]	; (8001af4 <MX_FREERTOS_Init+0x254>)
 8001a24:	461c      	mov	r4, r3
 8001a26:	4615      	mov	r5, r2
 8001a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RespiracionHandle = osThreadCreate(osThread(Respiracion), NULL);
 8001a34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00f fd89 	bl	8011552 <osThreadCreate>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a2d      	ldr	r2, [pc, #180]	; (8001af8 <MX_FREERTOS_Init+0x258>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* definition and creation of FrecuenciaCardiaca */
  osThreadDef(FrecuenciaCardiaca, tarea8, osPriorityNormal, 0, 256);
 8001a46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a4a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a4e:	4a2b      	ldr	r2, [pc, #172]	; (8001afc <MX_FREERTOS_Init+0x25c>)
 8001a50:	461c      	mov	r4, r3
 8001a52:	4615      	mov	r5, r2
 8001a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FrecuenciaCardiacaHandle = osThreadCreate(osThread(FrecuenciaCardiaca), NULL);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00f fd73 	bl	8011552 <osThreadCreate>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <MX_FREERTOS_Init+0x260>)
 8001a70:	6013      	str	r3, [r2, #0]

  /* definition and creation of CalcularOffset */
  osThreadDef(CalcularOffset, tarea9, osPriorityAboveNormal, 0, 128);
 8001a72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a76:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a7a:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <MX_FREERTOS_Init+0x264>)
 8001a7c:	461c      	mov	r4, r3
 8001a7e:	4615      	mov	r5, r2
 8001a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CalcularOffsetHandle = osThreadCreate(osThread(CalcularOffset), NULL);
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00f fd5e 	bl	8011552 <osThreadCreate>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <MX_FREERTOS_Init+0x268>)
 8001a9a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001a9c:	bf00      	nop
 8001a9e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	08001c55 	.word	0x08001c55
 8001aac:	20001668 	.word	0x20001668
 8001ab0:	08018618 	.word	0x08018618
 8001ab4:	20001660 	.word	0x20001660
 8001ab8:	20001664 	.word	0x20001664
 8001abc:	08018634 	.word	0x08018634
 8001ac0:	20001638 	.word	0x20001638
 8001ac4:	08018660 	.word	0x08018660
 8001ac8:	2000163c 	.word	0x2000163c
 8001acc:	08018690 	.word	0x08018690
 8001ad0:	20001640 	.word	0x20001640
 8001ad4:	080186bc 	.word	0x080186bc
 8001ad8:	20001644 	.word	0x20001644
 8001adc:	080186e8 	.word	0x080186e8
 8001ae0:	20001648 	.word	0x20001648
 8001ae4:	08018710 	.word	0x08018710
 8001ae8:	2000164c 	.word	0x2000164c
 8001aec:	08018734 	.word	0x08018734
 8001af0:	20001650 	.word	0x20001650
 8001af4:	0801875c 	.word	0x0801875c
 8001af8:	20001654 	.word	0x20001654
 8001afc:	0801878c 	.word	0x0801878c
 8001b00:	20001658 	.word	0x20001658
 8001b04:	080187b8 	.word	0x080187b8
 8001b08:	2000165c 	.word	0x2000165c

08001b0c <tarea1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tarea1 */
void tarea1(void const * argument)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6178      	str	r0, [r7, #20]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001b14:	f012 fe12 	bl	801473c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN tarea1 */
    tarea_GraficarECG_Setup ();
 8001b18:	f001 fb2a 	bl	8003170 <tarea_GraficarECG_Setup>
    for (;;)
        {
            osSignalWait (1, osWaitForever);
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b22:	2101      	movs	r1, #1
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00f fe2d 	bl	8011784 <osSignalWait>
            tarea_GraficarECG_Loop ();
 8001b2a:	f001 fb9f 	bl	800326c <tarea_GraficarECG_Loop>
            osSignalWait (1, osWaitForever);
 8001b2e:	e7f5      	b.n	8001b1c <tarea1+0x10>

08001b30 <tarea2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tarea2 */
void tarea2(void const * argument)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea2 */
    tarea_RevisarComandos_Setup ();
 8001b38:	f003 fb52 	bl	80051e0 <tarea_RevisarComandos_Setup>

    for (;;)
        {
            tarea_RevisarComandos_Loop();
 8001b3c:	f003 fb98 	bl	8005270 <tarea_RevisarComandos_Loop>
 8001b40:	e7fc      	b.n	8001b3c <tarea2+0xc>

08001b42 <tarea3>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tarea3 */
void tarea3(void const * argument)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN tarea3 */
    tarea_RevisarElectrodos_Setup();
 8001b4a:	f003 fe49 	bl	80057e0 <tarea_RevisarElectrodos_Setup>
    for (;;)
        {
            osSignalWait (1, osWaitForever);
 8001b4e:	463b      	mov	r3, r7
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	2101      	movs	r1, #1
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00f fe14 	bl	8011784 <osSignalWait>
            tarea_RevisarElectrodos_Loop();
 8001b5c:	f003 fe48 	bl	80057f0 <tarea_RevisarElectrodos_Loop>
            osSignalWait (1, osWaitForever);
 8001b60:	e7f5      	b.n	8001b4e <tarea3+0xc>

08001b62 <tarea4>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tarea4 */
void tarea4(void const * argument)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea4 */
    tarea_ControlNeopixel_Setup();
 8001b6a:	f000 fea1 	bl	80028b0 <tarea_ControlNeopixel_Setup>
    for (;;)
        {
            tarea_ControlNeopixel_Loop ();
 8001b6e:	f000 ff01 	bl	8002974 <tarea_ControlNeopixel_Loop>
 8001b72:	e7fc      	b.n	8001b6e <tarea4+0xc>

08001b74 <tarea5>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tarea5 */
void tarea5(void const * argument)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN tarea5 */
    tarea_Normalizacion_Setup();
 8001b7c:	f002 f87c 	bl	8003c78 <tarea_Normalizacion_Setup>
    for (;;)
        {
            osSignalWait(1, osWaitForever);
 8001b80:	463b      	mov	r3, r7
 8001b82:	f04f 32ff 	mov.w	r2, #4294967295
 8001b86:	2101      	movs	r1, #1
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00f fdfb 	bl	8011784 <osSignalWait>
            tarea_Normalizacion_Loop();
 8001b8e:	f002 f87b 	bl	8003c88 <tarea_Normalizacion_Loop>
            osSignalWait(1, osWaitForever);
 8001b92:	e7f5      	b.n	8001b80 <tarea5+0xc>

08001b94 <tarea6>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tarea6 */
void tarea6(void const * argument)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea6 */

    tarea_EnvioUSB_Setup();
 8001b9c:	f000 ff52 	bl	8002a44 <tarea_EnvioUSB_Setup>
    for (;;)
        {
            tarea_EnvioUSB_Loop();
 8001ba0:	f000 ff76 	bl	8002a90 <tarea_EnvioUSB_Loop>
 8001ba4:	e7fc      	b.n	8001ba0 <tarea6+0xc>
	...

08001ba8 <tarea0>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tarea0 */
void tarea0(void const * argument)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN tarea0 */
    //Setup
	debug_ads=804;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <tarea0+0x48>)
 8001bb2:	f44f 7249 	mov.w	r2, #804	; 0x324
 8001bb6:	601a      	str	r2, [r3, #0]
    tarea_LeerADS_Setup ();
 8001bb8:	f001 fe4c 	bl	8003854 <tarea_LeerADS_Setup>
    debug_ads=805;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <tarea0+0x48>)
 8001bbe:	f240 3225 	movw	r2, #805	; 0x325
 8001bc2:	601a      	str	r2, [r3, #0]
    //Loop
    for (;;)
        {
    		debug_ads=806;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <tarea0+0x48>)
 8001bc6:	f240 3226 	movw	r2, #806	; 0x326
 8001bca:	601a      	str	r2, [r3, #0]
            osSignalWait (1, osWaitForever);
 8001bcc:	463b      	mov	r3, r7
 8001bce:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f00f fdd5 	bl	8011784 <osSignalWait>
            debug_ads=807;
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <tarea0+0x48>)
 8001bdc:	f240 3227 	movw	r2, #807	; 0x327
 8001be0:	601a      	str	r2, [r3, #0]
            tarea_LeerADS_Loop ();
 8001be2:	f001 fe69 	bl	80038b8 <tarea_LeerADS_Loop>
            debug_ads=808;
 8001be6:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <tarea0+0x48>)
 8001be8:	f44f 724a 	mov.w	r2, #808	; 0x328
 8001bec:	601a      	str	r2, [r3, #0]
    		debug_ads=806;
 8001bee:	e7e9      	b.n	8001bc4 <tarea0+0x1c>
 8001bf0:	2000000c 	.word	0x2000000c

08001bf4 <tarea7>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_tarea7 */
void tarea7(void const * argument)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN tarea7 */
    tarea_Respiracion_Setup ();
 8001bfc:	f002 fcbc 	bl	8004578 <tarea_Respiracion_Setup>
    for (;;)
        {
            osSignalWait (1, osWaitForever);
 8001c00:	463b      	mov	r3, r7
 8001c02:	f04f 32ff 	mov.w	r2, #4294967295
 8001c06:	2101      	movs	r1, #1
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f00f fdbb 	bl	8011784 <osSignalWait>
            tarea_Respiracion_Loop ();
 8001c0e:	f002 fcef 	bl	80045f0 <tarea_Respiracion_Loop>
            osSignalWait (1, osWaitForever);
 8001c12:	e7f5      	b.n	8001c00 <tarea7+0xc>

08001c14 <tarea8>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea8 */
void tarea8(void const * argument)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN tarea8 */
    tarea_FrecuenciaCardiaca_Setup();
 8001c1c:	f001 f940 	bl	8002ea0 <tarea_FrecuenciaCardiaca_Setup>
  for(;;)
  {
          osSignalWait(1, osWaitForever);
 8001c20:	463b      	mov	r3, r7
 8001c22:	f04f 32ff 	mov.w	r2, #4294967295
 8001c26:	2101      	movs	r1, #1
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00f fdab 	bl	8011784 <osSignalWait>
          tarea_FrecuenciaCardiaca_Loop ();
 8001c2e:	f001 f93f 	bl	8002eb0 <tarea_FrecuenciaCardiaca_Loop>
          osSignalWait(1, osWaitForever);
 8001c32:	e7f5      	b.n	8001c20 <tarea8+0xc>

08001c34 <tarea9>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea9 */
void tarea9(void const * argument)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN tarea9 */
    //Tarea cada 250sps en el ciclo don de NO está Calcular Frecuencia Cardiaca
    tarea_CalcularOffset_Setup ();
 8001c3c:	f000 fdca 	bl	80027d4 <tarea_CalcularOffset_Setup>
  for(;;)
  {
    osSignalWait(1, osWaitForever);
 8001c40:	463b      	mov	r3, r7
 8001c42:	f04f 32ff 	mov.w	r2, #4294967295
 8001c46:	2101      	movs	r1, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f00f fd9b 	bl	8011784 <osSignalWait>
    tarea_CalcularOffset_Loop ();
 8001c4e:	f000 fdc9 	bl	80027e4 <tarea_CalcularOffset_Loop>
    osSignalWait(1, osWaitForever);
 8001c52:	e7f5      	b.n	8001c40 <tarea9+0xc>

08001c54 <timerOneCallback>:
  /* USER CODE END tarea9 */
}

/* timerOneCallback function */
void timerOneCallback(void const * argument)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN timerOneCallback */
    /* Este timer se encarga de detener e iniciar las lecturas en el ADS1298R
     * de manera que evitamos el error de cada 22 segundos*/
    if (flag_MSV_graficar)
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <timerOneCallback+0x50>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01b      	beq.n	8001c9c <timerOneCallback+0x48>
            */

            ////////////////////////////////////////
            // Reset completo del ADS

            flag_MSV_graficar = false;      // Evitar interrupciones
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <timerOneCallback+0x50>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
            bool tmp_stat = ads_IntStat (); // Esperar que se desocupe el ADS en caso de estar ocupado
 8001c6a:	f7ff fd9f 	bl	80017ac <ads_IntStat>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
            while (tmp_stat)
 8001c72:	e006      	b.n	8001c82 <timerOneCallback+0x2e>
                {
                    osDelay (1);
 8001c74:	2001      	movs	r0, #1
 8001c76:	f00f fcb8 	bl	80115ea <osDelay>
                    tmp_stat = ads_IntStat ();
 8001c7a:	f7ff fd97 	bl	80017ac <ads_IntStat>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	73fb      	strb	r3, [r7, #15]
            while (tmp_stat)
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f5      	bne.n	8001c74 <timerOneCallback+0x20>
            //adsCmd_reset();                 // Reset por software. ya incluye el tiempo requerido por el reset
            //ads_reset_byPin();
            //HAL_GPIO_WritePin(ADS_RST_GPIO_Port, ADS_RST_Pin, GPIO_PIN_RESET);
            //HAL_GPIO_TogglePin(RGB_R2_GPIO_Port,RGB_R2_Pin);
            //osDelay(1);
            ads_Init();                     // Inicializar nuevamente el ADS
 8001c88:	f7ff fc6e 	bl	8001568 <ads_Init>
            error_cnt = 0;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <timerOneCallback+0x54>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
            ads_Start ();                   // Iniciar las lecturas otra vez
 8001c92:	f7ff fcd9 	bl	8001648 <ads_Start>
            flag_MSV_graficar = true;       // Volver a habilitar interrupciones y lecturas del ADS
 8001c96:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <timerOneCallback+0x50>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]


        }

  /* USER CODE END timerOneCallback */
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200015c1 	.word	0x200015c1
 8001ca8:	20001634 	.word	0x20001634

08001cac <HAL_GPIO_EXTI_Callback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* Podemos tener interrupción por el ADS o por el marcapasos */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
    // En caso del marcapasos y ADS, solo se informará cuando se habilite la lectura
	//HAL_GPIO_WritePin(GPIOE,RGB_B1_Pin, GPIO_PIN_SET);
	//HAL_GPIO_TogglePin(GPIOE, RGB_B1_Pin);
    // 'flag_MSV_graficar == true'
    if (flag_MSV_graficar)
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x48>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d016      	beq.n	8001cec <HAL_GPIO_EXTI_Callback+0x40>
        {
            // Interrupción de ADS
            if (GPIO_Pin == SPI1_DRDY_Pin)
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d107      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x28>
                {
                    ads_IntTrue ();
 8001cc4:	f7ff fd5a 	bl	800177c <ads_IntTrue>
                    osSignalSet (LeerADSHandle, 1);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f00f fd18 	bl	8011704 <osSignalSet>
                }
            //Interrupción por marcapasos
            if (GPIO_Pin == INTERUPT1_Pin)
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d108      	bne.n	8001cec <HAL_GPIO_EXTI_Callback+0x40>
                {
                    flag_marcapasos = true;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x50>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
                    flag_marcapasos_norm = true;
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x54>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
                    cont_flag_mk=0;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <HAL_GPIO_EXTI_Callback+0x58>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
                }
        }
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200015c1 	.word	0x200015c1
 8001cf8:	20001650 	.word	0x20001650
 8001cfc:	20001601 	.word	0x20001601
 8001d00:	20001602 	.word	0x20001602
 8001d04:	20001604 	.word	0x20001604

08001d08 <findStr>:
//void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef *hi2c)
//{
//}

int8_t findStr (const char *str1, const char *str2)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
    int8_t indice = -1;
 8001d12:	23ff      	movs	r3, #255	; 0xff
 8001d14:	73fb      	strb	r3, [r7, #15]
    if (strstr (str1, str2) == NULL)
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f014 fb13 	bl	8016344 <strstr>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <findStr+0x22>
        {
            return indice;
 8001d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d28:	e00a      	b.n	8001d40 <findStr+0x38>
        }
    else
        {
            char *pos = strstr (str1, str2);
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f014 fb09 	bl	8016344 <strstr>
 8001d32:	60b8      	str	r0, [r7, #8]
            indice = (pos - str1);
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	73fb      	strb	r3, [r7, #15]
            return indice;
 8001d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
        }
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	4ba7      	ldr	r3, [pc, #668]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4aa6      	ldr	r2, [pc, #664]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001d68:	f043 0310 	orr.w	r3, r3, #16
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4ba4      	ldr	r3, [pc, #656]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	4ba0      	ldr	r3, [pc, #640]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a9f      	ldr	r2, [pc, #636]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b9d      	ldr	r3, [pc, #628]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b99      	ldr	r3, [pc, #612]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a98      	ldr	r2, [pc, #608]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b96      	ldr	r3, [pc, #600]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b92      	ldr	r3, [pc, #584]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a91      	ldr	r2, [pc, #580]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b8f      	ldr	r3, [pc, #572]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a8a      	ldr	r2, [pc, #552]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b88      	ldr	r3, [pc, #544]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	4b84      	ldr	r3, [pc, #528]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a83      	ldr	r2, [pc, #524]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <MX_GPIO_Init+0x2b8>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RGB_R1_Pin|RGB_B2_Pin|RGB_G2_Pin|RGB_R2_Pin
 8001e06:	2201      	movs	r2, #1
 8001e08:	213f      	movs	r1, #63	; 0x3f
 8001e0a:	487e      	ldr	r0, [pc, #504]	; (8002004 <MX_GPIO_Init+0x2bc>)
 8001e0c:	f005 f90c 	bl	8007028 <HAL_GPIO_WritePin>
                          |RGB_B1_Pin|RGB_G1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	2110      	movs	r1, #16
 8001e14:	487c      	ldr	r0, [pc, #496]	; (8002008 <MX_GPIO_Init+0x2c0>)
 8001e16:	f005 f907 	bl	8007028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_START_GPIO_Port, SPI1_START_Pin, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	487b      	ldr	r0, [pc, #492]	; (800200c <MX_GPIO_Init+0x2c4>)
 8001e20:	f005 f902 	bl	8007028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_RST_GPIO_Port, ADS_RST_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2101      	movs	r1, #1
 8001e28:	4879      	ldr	r0, [pc, #484]	; (8002010 <MX_GPIO_Init+0x2c8>)
 8001e2a:	f005 f8fd 	bl	8007028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN_3_Pin|MK_Reset_Pin|IN_4_Pin|IN_2_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001e34:	4877      	ldr	r0, [pc, #476]	; (8002014 <MX_GPIO_Init+0x2cc>)
 8001e36:	f005 f8f7 	bl	8007028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN_1_GPIO_Port, IN_1_Pin, GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	4875      	ldr	r0, [pc, #468]	; (8002014 <MX_GPIO_Init+0x2cc>)
 8001e40:	f005 f8f2 	bl	8007028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = RGB_R1_Pin|RGB_B2_Pin|RGB_G2_Pin|RGB_R2_Pin
 8001e44:	233f      	movs	r3, #63	; 0x3f
 8001e46:	61fb      	str	r3, [r7, #28]
                          |RGB_B1_Pin|RGB_G1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	486a      	ldr	r0, [pc, #424]	; (8002004 <MX_GPIO_Init+0x2bc>)
 8001e5c:	f004 fe02 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001e60:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001e64:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	4863      	ldr	r0, [pc, #396]	; (8002004 <MX_GPIO_Init+0x2bc>)
 8001e76:	f004 fdf5 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001e7a:	f64f 73cf 	movw	r3, #65487	; 0xffcf
 8001e7e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e80:	2303      	movs	r3, #3
 8001e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	485f      	ldr	r0, [pc, #380]	; (800200c <MX_GPIO_Init+0x2c4>)
 8001e90:	f004 fde8 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8001e94:	f240 7303 	movw	r3, #1795	; 0x703
 8001e98:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4857      	ldr	r0, [pc, #348]	; (8002008 <MX_GPIO_Init+0x2c0>)
 8001eaa:	f004 fddb 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001eae:	2310      	movs	r3, #16
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4850      	ldr	r0, [pc, #320]	; (8002008 <MX_GPIO_Init+0x2c0>)
 8001ec6:	f004 fdcd 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_DRDY_Pin;
 8001eca:	2310      	movs	r3, #16
 8001ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ece:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	484b      	ldr	r0, [pc, #300]	; (800200c <MX_GPIO_Init+0x2c4>)
 8001ee0:	f004 fdc0 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_START_Pin;
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_START_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4844      	ldr	r0, [pc, #272]	; (800200c <MX_GPIO_Init+0x2c4>)
 8001efc:	f004 fdb2 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADS_RST_Pin;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ADS_RST_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	483e      	ldr	r0, [pc, #248]	; (8002010 <MX_GPIO_Init+0x2c8>)
 8001f18:	f004 fda4 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INTERUPT1_Pin|INT_BATT_Pin;
 8001f1c:	f240 2302 	movw	r3, #514	; 0x202
 8001f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	4837      	ldr	r0, [pc, #220]	; (8002010 <MX_GPIO_Init+0x2c8>)
 8001f34:	f004 fd96 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001f38:	f641 53fc 	movw	r3, #7676	; 0x1dfc
 8001f3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4830      	ldr	r0, [pc, #192]	; (8002010 <MX_GPIO_Init+0x2c8>)
 8001f4e:	f004 fd89 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f52:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f64:	2305      	movs	r3, #5
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4828      	ldr	r0, [pc, #160]	; (8002010 <MX_GPIO_Init+0x2c8>)
 8001f70:	f004 fd78 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = IN_3_Pin|MK_Reset_Pin|IN_4_Pin|IN_2_Pin;
 8001f74:	f240 13c1 	movw	r3, #449	; 0x1c1
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4821      	ldr	r0, [pc, #132]	; (8002014 <MX_GPIO_Init+0x2cc>)
 8001f8e:	f004 fd69 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 PD1
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001f92:	f64f 631e 	movw	r3, #65054	; 0xfe1e
 8001f96:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	481b      	ldr	r0, [pc, #108]	; (8002014 <MX_GPIO_Init+0x2cc>)
 8001fa8:	f004 fd5c 	bl	8006a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_1_Pin;
 8001fac:	2320      	movs	r3, #32
 8001fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IN_1_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4814      	ldr	r0, [pc, #80]	; (8002014 <MX_GPIO_Init+0x2cc>)
 8001fc4:	f004 fd4e 	bl	8006a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2105      	movs	r1, #5
 8001fcc:	2007      	movs	r0, #7
 8001fce:	f003 ff89 	bl	8005ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fd2:	2007      	movs	r0, #7
 8001fd4:	f003 ffb2 	bl	8005f3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2105      	movs	r1, #5
 8001fdc:	200a      	movs	r0, #10
 8001fde:	f003 ff81 	bl	8005ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f003 ffaa 	bl	8005f3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2105      	movs	r1, #5
 8001fec:	2017      	movs	r0, #23
 8001fee:	f003 ff79 	bl	8005ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ff2:	2017      	movs	r0, #23
 8001ff4:	f003 ffa2 	bl	8005f3c <HAL_NVIC_EnableIRQ>

}
 8001ff8:	bf00      	nop
 8001ffa:	3730      	adds	r7, #48	; 0x30
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	40021000 	.word	0x40021000
 8002008:	40020000 	.word	0x40020000
 800200c:	40020800 	.word	0x40020800
 8002010:	40020400 	.word	0x40020400
 8002014:	40020c00 	.word	0x40020c00

08002018 <neopixel_Init>:
                    TIM_HandleTypeDef    * pTimerNeopixel,
                    uint32_t               canalTimer,
                    uint32_t               uCantidadLeds,
                    neoPixel_ColorData_t * pColorDataBuff,
                    uint32_t             * pDmaBuffer)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
    pInstanciaNeopixel -> htim = pTimerNeopixel;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	601a      	str	r2, [r3, #0]
    pInstanciaNeopixel -> timerChannel = canalTimer;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	605a      	str	r2, [r3, #4]
    pInstanciaNeopixel -> ledCount = uCantidadLeds;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	609a      	str	r2, [r3, #8]
    pInstanciaNeopixel -> led = pColorDataBuff;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	60da      	str	r2, [r3, #12]
    pInstanciaNeopixel -> dmaBuffSize = (uCantidadLeds * 24) + 1;
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	611a      	str	r2, [r3, #16]
    pInstanciaNeopixel -> dmaBuffer = pDmaBuffer;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	615a      	str	r2, [r3, #20]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <neopixel_LoadColor>:
void neopixel_LoadColor (neoPixel_ColorData_t *colorDataArray, uint32_t colorPixel, uint32_t numPixels)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
    for (uint16_t i = 0; i < numPixels; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	82fb      	strh	r3, [r7, #22]
 8002070:	e008      	b.n	8002084 <neopixel_LoadColor+0x24>
        {
            colorDataArray[i].data = colorPixel;
 8002072:	8afb      	ldrh	r3, [r7, #22]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4413      	add	r3, r2
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < numPixels; i++)
 800207e:	8afb      	ldrh	r3, [r7, #22]
 8002080:	3301      	adds	r3, #1
 8002082:	82fb      	strh	r3, [r7, #22]
 8002084:	8afb      	ldrh	r3, [r7, #22]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f2      	bhi.n	8002072 <neopixel_LoadColor+0x12>
        }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	371c      	adds	r7, #28
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <neopixel_ShowLeds>:
void neopixel_ShowLeds (neoPixel_Instancia_t *pInstanciaNeopixel)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
    // Variable para salvar la dirección del puntero, mas seguro que usar el puntero por sí mismo
    uint32_t *pBuff;
    pBuff = pInstanciaNeopixel -> dmaBuffer;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	617b      	str	r3, [r7, #20]

    for (uint32_t i = 0; i < pInstanciaNeopixel -> ledCount; i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	e022      	b.n	80020f4 <neopixel_ShowLeds+0x5a>
        {
            for (int j = 23; j >= 0; j--) //24 bits de información de color
 80020ae:	2317      	movs	r3, #23
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	e019      	b.n	80020e8 <neopixel_ShowLeds+0x4e>
                {
                    if ((pInstanciaNeopixel -> led[i].data >> j) & 0x01)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <neopixel_ShowLeds+0x3c>
                        {
                            *pBuff = NEOPIXEL_ONE;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2243      	movs	r2, #67	; 0x43
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e002      	b.n	80020dc <neopixel_ShowLeds+0x42>
                        }
                    else
                        {
                            *pBuff = NEOPIXEL_ZERO;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2221      	movs	r2, #33	; 0x21
 80020da:	601a      	str	r2, [r3, #0]
                        }
                    pBuff++;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3304      	adds	r3, #4
 80020e0:	617b      	str	r3, [r7, #20]
            for (int j = 23; j >= 0; j--) //24 bits de información de color
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	dae2      	bge.n	80020b4 <neopixel_ShowLeds+0x1a>
    for (uint32_t i = 0; i < pInstanciaNeopixel -> ledCount; i++)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	3301      	adds	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d3d7      	bcc.n	80020ae <neopixel_ShowLeds+0x14>
                }
        }
    // El último valor del DMA debe ser 0
    pInstanciaNeopixel -> dmaBuffer [pInstanciaNeopixel -> dmaBuffSize -1] = 0;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800210a:	3b01      	subs	r3, #1
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

    // Ejecutar el timer con la información del buffer DMA
    HAL_TIM_PWM_Start_DMA (pInstanciaNeopixel -> htim,        // Timer
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695a      	ldr	r2, [r3, #20]
                           pInstanciaNeopixel -> timerChannel, // Canal
                           pInstanciaNeopixel -> dmaBuffer,    // Buffer DMA
                           pInstanciaNeopixel -> dmaBuffSize); // Tamaño del buffer
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
    HAL_TIM_PWM_Start_DMA (pInstanciaNeopixel -> htim,        // Timer
 8002124:	b29b      	uxth	r3, r3
 8002126:	f008 fd47 	bl	800abb8 <HAL_TIM_PWM_Start_DMA>
    //delay_us_tim13 (60); //Debe esperar al menos 60 us entre datos en la tira. Como de por sí no lo hacemos tan seguido, elimino esta pausa
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <rgbSetLedColor>:
#include "main.h"
#include "led_rgb_simple.h"


void rgbSetLedColor (ledRGB_Instancia_t *led, ledRGB_Colors_t color)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	70fb      	strb	r3, [r7, #3]
    led->R = (0b100 & color) >> 2;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	759a      	strb	r2, [r3, #22]
    led->G = (0b010 & color) >> 1;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	75da      	strb	r2, [r3, #23]
    led->B = 0b001 & color;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	761a      	strb	r2, [r3, #24]
    HAL_GPIO_WritePin (led->PuertoR, led->PinR, !led->R);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	8899      	ldrh	r1, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7d9b      	ldrb	r3, [r3, #22]
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	f004 ff51 	bl	8007028 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin (led->PuertoG, led->PinG, !led->G);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6898      	ldr	r0, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	8999      	ldrh	r1, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7ddb      	ldrb	r3, [r3, #23]
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf0c      	ite	eq
 8002196:	2301      	moveq	r3, #1
 8002198:	2300      	movne	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	f004 ff43 	bl	8007028 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin (led->PuertoB, led->PinB, !led->B);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6918      	ldr	r0, [r3, #16]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8a99      	ldrh	r1, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7e1b      	ldrb	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	f004 ff35 	bl	8007028 <HAL_GPIO_WritePin>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ca:	f003 fd57 	bl	8005c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ce:	f000 f811 	bl	80021f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d2:	f7ff fdb9 	bl	8001d48 <MX_GPIO_Init>
  MX_DMA_Init();
 80021d6:	f7ff fb0f 	bl	80017f8 <MX_DMA_Init>
  MX_SPI1_Init();
 80021da:	f000 f897 	bl	800230c <MX_SPI1_Init>
  MX_TIM13_Init();
 80021de:	f003 fbe5 	bl	80059ac <MX_TIM13_Init>
  MX_TIM2_Init();
 80021e2:	f003 fb6f 	bl	80058c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80021e6:	f003 fca5 	bl	8005b34 <MX_USART2_UART_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80021ea:	f7ff fb59 	bl	80018a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80021ee:	f00f f9a9 	bl	8011544 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <main+0x2c>

080021f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b094      	sub	sp, #80	; 0x50
 80021f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fa:	f107 0320 	add.w	r3, r7, #32
 80021fe:	2230      	movs	r2, #48	; 0x30
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f014 f889 	bl	801631a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <SystemClock_Config+0xcc>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <SystemClock_Config+0xcc>)
 8002222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002226:	6413      	str	r3, [r2, #64]	; 0x40
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <SystemClock_Config+0xcc>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <SystemClock_Config+0xd0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <SystemClock_Config+0xd0>)
 800223e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <SystemClock_Config+0xd0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002250:	2301      	movs	r3, #1
 8002252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800225a:	2302      	movs	r3, #2
 800225c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800225e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002264:	2304      	movs	r3, #4
 8002266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002268:	23a8      	movs	r3, #168	; 0xa8
 800226a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800226c:	2302      	movs	r3, #2
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002270:	2307      	movs	r3, #7
 8002272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002274:	f107 0320 	add.w	r3, r7, #32
 8002278:	4618      	mov	r0, r3
 800227a:	f006 f9af 	bl	80085dc <HAL_RCC_OscConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002284:	f000 f832 	bl	80022ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002288:	230f      	movs	r3, #15
 800228a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800228c:	2302      	movs	r3, #2
 800228e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002294:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800229a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	2105      	movs	r1, #5
 80022a6:	4618      	mov	r0, r3
 80022a8:	f006 fcc0 	bl	8008c2c <HAL_RCC_ClockConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022b2:	f000 f81b 	bl	80022ec <Error_Handler>
  }
}
 80022b6:	bf00      	nop
 80022b8:	3750      	adds	r7, #80	; 0x50
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000

080022c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022da:	f003 fcf1 	bl	8005cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40002000 	.word	0x40002000

080022ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f0:	b672      	cpsid	i
}
 80022f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <Error_Handler+0x8>

080022f6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <MX_SPI1_Init+0x64>)
 8002312:	4a18      	ldr	r2, [pc, #96]	; (8002374 <MX_SPI1_Init+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <MX_SPI1_Init+0x64>)
 8002318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800231c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_SPI1_Init+0x64>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_SPI1_Init+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_SPI1_Init+0x64>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_SPI1_Init+0x64>)
 8002332:	2201      	movs	r2, #1
 8002334:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_SPI1_Init+0x64>)
 8002338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_SPI1_Init+0x64>)
 8002340:	2220      	movs	r2, #32
 8002342:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <MX_SPI1_Init+0x64>)
 8002346:	2200      	movs	r2, #0
 8002348:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_SPI1_Init+0x64>)
 800234c:	2200      	movs	r2, #0
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <MX_SPI1_Init+0x64>)
 8002352:	2200      	movs	r2, #0
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_SPI1_Init+0x64>)
 8002358:	220a      	movs	r2, #10
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800235c:	4804      	ldr	r0, [pc, #16]	; (8002370 <MX_SPI1_Init+0x64>)
 800235e:	f006 ff5f 	bl	8009220 <HAL_SPI_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002368:	f7ff ffc0 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20001ccc 	.word	0x20001ccc
 8002374:	40013000 	.word	0x40013000

08002378 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_SPI_MspInit+0x94>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d133      	bne.n	8002402 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <HAL_SPI_MspInit+0x98>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <HAL_SPI_MspInit+0x98>)
 80023a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_SPI_MspInit+0x98>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_SPI_MspInit+0x98>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a14      	ldr	r2, [pc, #80]	; (8002410 <HAL_SPI_MspInit+0x98>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_SPI_MspInit+0x98>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023d2:	23e0      	movs	r3, #224	; 0xe0
 80023d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023e2:	2305      	movs	r3, #5
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	4809      	ldr	r0, [pc, #36]	; (8002414 <HAL_SPI_MspInit+0x9c>)
 80023ee:	f004 fb39 	bl	8006a64 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2105      	movs	r1, #5
 80023f6:	2023      	movs	r0, #35	; 0x23
 80023f8:	f003 fd74 	bl	8005ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80023fc:	2023      	movs	r0, #35	; 0x23
 80023fe:	f003 fd9d 	bl	8005f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40013000 	.word	0x40013000
 8002410:	40023800 	.word	0x40023800
 8002414:	40020000 	.word	0x40020000

08002418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_MspInit+0x54>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	4a11      	ldr	r2, [pc, #68]	; (800246c <HAL_MspInit+0x54>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242c:	6453      	str	r3, [r2, #68]	; 0x44
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <HAL_MspInit+0x54>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_MspInit+0x54>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_MspInit+0x54>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_MspInit+0x54>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	210f      	movs	r1, #15
 800245a:	f06f 0001 	mvn.w	r0, #1
 800245e:	f003 fd41 	bl	8005ee4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800

08002470 <HAL_InitTick>:
 8002470:	b580      	push	{r7, lr}
 8002472:	b08e      	sub	sp, #56	; 0x38
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800247c:	2300      	movs	r3, #0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_InitTick+0xe4>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_InitTick+0xe4>)
 800248a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248e:	6413      	str	r3, [r2, #64]	; 0x40
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_InitTick+0xe4>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f107 0210 	add.w	r2, r7, #16
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f006 fe88 	bl	80091bc <HAL_RCC_GetClockConfig>
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <HAL_InitTick+0x4e>
 80024b6:	f006 fe59 	bl	800916c <HAL_RCC_GetPCLK1Freq>
 80024ba:	6378      	str	r0, [r7, #52]	; 0x34
 80024bc:	e004      	b.n	80024c8 <HAL_InitTick+0x58>
 80024be:	f006 fe55 	bl	800916c <HAL_RCC_GetPCLK1Freq>
 80024c2:	4603      	mov	r3, r0
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	4a23      	ldr	r2, [pc, #140]	; (8002558 <HAL_InitTick+0xe8>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	0c9b      	lsrs	r3, r3, #18
 80024d2:	3b01      	subs	r3, #1
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <HAL_InitTick+0xec>)
 80024d8:	4a21      	ldr	r2, [pc, #132]	; (8002560 <HAL_InitTick+0xf0>)
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <HAL_InitTick+0xec>)
 80024de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	4a1d      	ldr	r2, [pc, #116]	; (800255c <HAL_InitTick+0xec>)
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	6053      	str	r3, [r2, #4]
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_InitTick+0xec>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_InitTick+0xec>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_InitTick+0xec>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
 80024fc:	4817      	ldr	r0, [pc, #92]	; (800255c <HAL_InitTick+0xec>)
 80024fe:	f007 ffed 	bl	800a4dc <HAL_TIM_Base_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11b      	bne.n	8002548 <HAL_InitTick+0xd8>
 8002510:	4812      	ldr	r0, [pc, #72]	; (800255c <HAL_InitTick+0xec>)
 8002512:	f008 f991 	bl	800a838 <HAL_TIM_Base_Start_IT>
 8002516:	4603      	mov	r3, r0
 8002518:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800251c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002520:	2b00      	cmp	r3, #0
 8002522:	d111      	bne.n	8002548 <HAL_InitTick+0xd8>
 8002524:	202d      	movs	r0, #45	; 0x2d
 8002526:	f003 fd09 	bl	8005f3c <HAL_NVIC_EnableIRQ>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d808      	bhi.n	8002542 <HAL_InitTick+0xd2>
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	202d      	movs	r0, #45	; 0x2d
 8002536:	f003 fcd5 	bl	8005ee4 <HAL_NVIC_SetPriority>
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_InitTick+0xf4>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	e002      	b.n	8002548 <HAL_InitTick+0xd8>
 8002542:	2301      	movs	r3, #1
 8002544:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002548:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800254c:	4618      	mov	r0, r3
 800254e:	3738      	adds	r7, #56	; 0x38
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	431bde83 	.word	0x431bde83
 800255c:	20001d24 	.word	0x20001d24
 8002560:	40002000 	.word	0x40002000
 8002564:	200012a0 	.word	0x200012a0

08002568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800256c:	e7fe      	b.n	800256c <NMI_Handler+0x4>

0800256e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <HardFault_Handler+0x4>

08002574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <MemManage_Handler+0x4>

0800257a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <BusFault_Handler+0x4>

08002580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <UsageFault_Handler+0x4>

08002586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERUPT1_Pin);
 8002598:	2002      	movs	r0, #2
 800259a:	f004 fd77 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI1_DRDY_Pin);
 80025a6:	2010      	movs	r0, #16
 80025a8:	f004 fd70 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <DMA1_Stream5_IRQHandler+0x10>)
 80025b6:	f003 ffeb 	bl	8006590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200048a4 	.word	0x200048a4

080025c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_BATT_Pin);
 80025c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025cc:	f004 fd5e 	bl	800708c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <SPI1_IRQHandler+0x10>)
 80025da:	f007 facf 	bl	8009b7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20001ccc 	.word	0x20001ccc

080025e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <USART2_IRQHandler+0x10>)
 80025ee:	f00a fc5d 	bl	800ceac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20004904 	.word	0x20004904

080025fc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002602:	f008 feef 	bl	800b3e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20001d24 	.word	0x20001d24

08002610 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <OTG_FS_IRQHandler+0x10>)
 8002616:	f004 feb4 	bl	8007382 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20009c74 	.word	0x20009c74

08002624 <_getpid>:
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
 8002628:	2301      	movs	r3, #1
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_kill>:
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	f013 ff37 	bl	80164b0 <__errno>
 8002642:	4603      	mov	r3, r0
 8002644:	2216      	movs	r2, #22
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_exit>:
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ffe7 	bl	8002634 <_kill>
 8002666:	e7fe      	b.n	8002666 <_exit+0x12>

08002668 <_read>:
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e00a      	b.n	8002690 <_read+0x28>
 800267a:	f3af 8000 	nop.w
 800267e:	4601      	mov	r1, r0
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	60ba      	str	r2, [r7, #8]
 8002686:	b2ca      	uxtb	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3301      	adds	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	dbf0      	blt.n	800267a <_read+0x12>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_write>:
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e009      	b.n	80026c8 <_write+0x26>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60ba      	str	r2, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f3af 8000 	nop.w
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dbf1      	blt.n	80026b4 <_write+0x12>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <_close>:
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_fstat>:
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	2300      	movs	r3, #0
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_isatty>:
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	2301      	movs	r3, #1
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_lseek>:
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	2300      	movs	r3, #0
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <_sbrk>:
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
 8002774:	f013 fe9c 	bl	80164b0 <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20020000 	.word	0x20020000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	20001d6c 	.word	0x20001d6c
 80027ac:	2000a4f0 	.word	0x2000a4f0

080027b0 <SystemInit>:
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <SystemInit+0x20>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <SystemInit+0x20>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <tarea_CalcularOffset_Setup>:
int64_t ads_Lead_I_SUM = 0;
uint32_t ads_count = 1;
extern int64_t offsetRaw;

void tarea_CalcularOffset_Setup (void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <tarea_CalcularOffset_Loop>:



void tarea_CalcularOffset_Loop (void)
{
 80027e4:	b5b0      	push	{r4, r5, r7, lr}
 80027e6:	af00      	add	r7, sp, #0
    // Caĺculo de offset en el latido actual
    // Promedio de la señal en el periodo de 1 latido completo
    if(flag_Latido_Offset)
 80027e8:	4b20      	ldr	r3, [pc, #128]	; (800286c <tarea_CalcularOffset_Loop+0x88>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d027      	beq.n	8002840 <tarea_CalcularOffset_Loop+0x5c>
        {
            // Borrar bandera
            flag_Latido_Offset = false;
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <tarea_CalcularOffset_Loop+0x88>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
            // Calcular offset
            offsetRaw = (int64_t)((float)ads_Lead_I_SUM /(float)ads_count);
 80027f6:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <tarea_CalcularOffset_Loop+0x8c>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe faf2 	bl	8000de8 <__aeabi_l2f>
 8002804:	ee06 0a90 	vmov	s13, r0
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <tarea_CalcularOffset_Loop+0x90>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002818:	ee17 0a10 	vmov	r0, s14
 800281c:	f7fe fb3a 	bl	8000e94 <__aeabi_f2lz>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4914      	ldr	r1, [pc, #80]	; (8002878 <tarea_CalcularOffset_Loop+0x94>)
 8002826:	e9c1 2300 	strd	r2, r3, [r1]
            // Reiniciar variables del cálculo
            ads_Lead_I_SUM = 0;
 800282a:	4911      	ldr	r1, [pc, #68]	; (8002870 <tarea_CalcularOffset_Loop+0x8c>)
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9c1 2300 	strd	r2, r3, [r1]
            ads_count = 1; //Evitar división entre 0, en grandes cantidades de muestras, este 1 es despreciable
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <tarea_CalcularOffset_Loop+0x90>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]
        {
            ads_Lead_I_SUM += ads_I_i;
            ads_count++;
        }

}
 800283e:	e012      	b.n	8002866 <tarea_CalcularOffset_Loop+0x82>
            ads_Lead_I_SUM += ads_I_i;
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <tarea_CalcularOffset_Loop+0x98>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	17da      	asrs	r2, r3, #31
 8002846:	4618      	mov	r0, r3
 8002848:	4611      	mov	r1, r2
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <tarea_CalcularOffset_Loop+0x8c>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	1884      	adds	r4, r0, r2
 8002852:	eb41 0503 	adc.w	r5, r1, r3
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <tarea_CalcularOffset_Loop+0x8c>)
 8002858:	e9c3 4500 	strd	r4, r5, [r3]
            ads_count++;
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <tarea_CalcularOffset_Loop+0x90>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	4a04      	ldr	r2, [pc, #16]	; (8002874 <tarea_CalcularOffset_Loop+0x90>)
 8002864:	6013      	str	r3, [r2, #0]
}
 8002866:	bf00      	nop
 8002868:	bdb0      	pop	{r4, r5, r7, pc}
 800286a:	bf00      	nop
 800286c:	200015e0 	.word	0x200015e0
 8002870:	20001d70 	.word	0x20001d70
 8002874:	20000014 	.word	0x20000014
 8002878:	200015d8 	.word	0x200015d8
 800287c:	200015e4 	.word	0x200015e4

08002880 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t timeActLeds;
bool flag_ActualizarLeds = false;

// Callback ajustado como indica la librería led_neopixel.h
void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
    if (htim->Instance == tiraDeLedsNeopixel.htim->Instance)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d105      	bne.n	80028a2 <HAL_TIM_PWM_PulseFinishedCallback+0x22>
        {
            HAL_TIM_PWM_Stop_DMA (htim, tiraDeLedsNeopixel.timerChannel);
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f008 fc13 	bl	800b0c8 <HAL_TIM_PWM_Stop_DMA>
        }

}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20001d78 	.word	0x20001d78

080028b0 <tarea_ControlNeopixel_Setup>:

// Función de la tarea5

void tarea_ControlNeopixel_Setup(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af02      	add	r7, sp, #8
    neopixel_Init (&tiraDeLedsNeopixel, &htim2, TIM_CHANNEL_1, NUM_PIXELS, neopixelColorData, neopixelDmaBuffer);
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <tarea_ControlNeopixel_Setup+0xac>)
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <tarea_ControlNeopixel_Setup+0xb0>)
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	230b      	movs	r3, #11
 80028c0:	2200      	movs	r2, #0
 80028c2:	4928      	ldr	r1, [pc, #160]	; (8002964 <tarea_ControlNeopixel_Setup+0xb4>)
 80028c4:	4828      	ldr	r0, [pc, #160]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 80028c6:	f7ff fba7 	bl	8002018 <neopixel_Init>
        // Cargar leds al inicio arrancar el equipo, sirve como un test de la tira
        tiraDeLedsNeopixel.led[0].data = C_ROJO;
 80028ca:	4b27      	ldr	r3, [pc, #156]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80028d2:	601a      	str	r2, [r3, #0]
        tiraDeLedsNeopixel.led[1].data = C_VERDE;
 80028d4:	4b24      	ldr	r3, [pc, #144]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	3304      	adds	r3, #4
 80028da:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80028de:	601a      	str	r2, [r3, #0]
        tiraDeLedsNeopixel.led[2].data = C_AZUL;
 80028e0:	4b21      	ldr	r3, [pc, #132]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	3308      	adds	r3, #8
 80028e6:	22ff      	movs	r2, #255	; 0xff
 80028e8:	601a      	str	r2, [r3, #0]
        tiraDeLedsNeopixel.led[3].data = C_CYAN;
 80028ea:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	330c      	adds	r3, #12
 80028f0:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 80028f4:	601a      	str	r2, [r3, #0]
        tiraDeLedsNeopixel.led[4].data = C_MAGENTA;
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	3310      	adds	r3, #16
 80028fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002900:	601a      	str	r2, [r3, #0]
        tiraDeLedsNeopixel.led[5].data = C_AMARILLO;
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	3314      	adds	r3, #20
 8002908:	4a18      	ldr	r2, [pc, #96]	; (800296c <tarea_ControlNeopixel_Setup+0xbc>)
 800290a:	601a      	str	r2, [r3, #0]
        tiraDeLedsNeopixel.led[6].data = C_MAGENTA;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	3318      	adds	r3, #24
 8002912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002916:	601a      	str	r2, [r3, #0]
        tiraDeLedsNeopixel.led[7].data = C_CYAN;
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	331c      	adds	r3, #28
 800291e:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 8002922:	601a      	str	r2, [r3, #0]
        tiraDeLedsNeopixel.led[8].data = C_AZUL;
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	3320      	adds	r3, #32
 800292a:	22ff      	movs	r2, #255	; 0xff
 800292c:	601a      	str	r2, [r3, #0]
        tiraDeLedsNeopixel.led[9].data = C_VERDE;
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8002938:	601a      	str	r2, [r3, #0]
        tiraDeLedsNeopixel.led[10].data = C_ROJO;
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	3328      	adds	r3, #40	; 0x28
 8002940:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002944:	601a      	str	r2, [r3, #0]
        neopixel_ShowLeds (&tiraDeLedsNeopixel);
 8002946:	4808      	ldr	r0, [pc, #32]	; (8002968 <tarea_ControlNeopixel_Setup+0xb8>)
 8002948:	f7ff fba7 	bl	800209a <neopixel_ShowLeds>
        timeActLeds = HAL_GetTick();
 800294c:	f003 f9cc 	bl	8005ce8 <HAL_GetTick>
 8002950:	4603      	mov	r3, r0
 8002952:	4a07      	ldr	r2, [pc, #28]	; (8002970 <tarea_ControlNeopixel_Setup+0xc0>)
 8002954:	6013      	str	r3, [r2, #0]
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20001dbc 	.word	0x20001dbc
 8002960:	20001d90 	.word	0x20001d90
 8002964:	20004814 	.word	0x20004814
 8002968:	20001d78 	.word	0x20001d78
 800296c:	00ffff00 	.word	0x00ffff00
 8002970:	200021e0 	.word	0x200021e0

08002974 <tarea_ControlNeopixel_Loop>:

void tarea_ControlNeopixel_Loop(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
    if ((HAL_GetTick () - timeActLeds) > (prioridadNeopixel)) // Activar la bandera dependiendo de la prioridad de la alarma
 8002978:	f003 f9b6 	bl	8005ce8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <tarea_ControlNeopixel_Loop+0xb4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <tarea_ControlNeopixel_Loop+0xb8>)
 8002986:	8812      	ldrh	r2, [r2, #0]
 8002988:	4293      	cmp	r3, r2
 800298a:	d907      	bls.n	800299c <tarea_ControlNeopixel_Loop+0x28>
        {
            timeActLeds = HAL_GetTick ();
 800298c:	f003 f9ac 	bl	8005ce8 <HAL_GetTick>
 8002990:	4603      	mov	r3, r0
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <tarea_ControlNeopixel_Loop+0xb4>)
 8002994:	6013      	str	r3, [r2, #0]
            flag_ActualizarLeds = true;
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <tarea_ControlNeopixel_Loop+0xbc>)
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
        }
    if (flag_ActualizarLeds && modoLeds) //modoLeds Verdadero para MODO_SOLIDO y MODO_PARPADEO
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <tarea_ControlNeopixel_Loop+0xbc>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d03b      	beq.n	8002a1c <tarea_ControlNeopixel_Loop+0xa8>
 80029a4:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <tarea_ControlNeopixel_Loop+0xc0>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d037      	beq.n	8002a1c <tarea_ControlNeopixel_Loop+0xa8>
        {
            flag_ActualizarLeds = false; // Limpiar bandera
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <tarea_ControlNeopixel_Loop+0xbc>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
            if (modoLeds == MODO_SOLIDO)
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <tarea_ControlNeopixel_Loop+0xc0>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d10c      	bne.n	80029d4 <tarea_ControlNeopixel_Loop+0x60>
                {
                    neopixel_LoadColor (tiraDeLedsNeopixel.led, colorLeds, tiraDeLedsNeopixel.ledCount);
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <tarea_ControlNeopixel_Loop+0xc4>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <tarea_ControlNeopixel_Loop+0xc8>)
 80029c0:	6811      	ldr	r1, [r2, #0]
 80029c2:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <tarea_ControlNeopixel_Loop+0xc4>)
 80029c4:	6892      	ldr	r2, [r2, #8]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fb4a 	bl	8002060 <neopixel_LoadColor>
                    modoLeds = MODO_NULO;
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <tarea_ControlNeopixel_Loop+0xc0>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e01f      	b.n	8002a14 <tarea_ControlNeopixel_Loop+0xa0>
                }
            else if (modoLeds == MODO_PARPADEO)
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <tarea_ControlNeopixel_Loop+0xc0>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d11b      	bne.n	8002a14 <tarea_ControlNeopixel_Loop+0xa0>
                {
                    if (blink_ON)
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <tarea_ControlNeopixel_Loop+0xcc>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00c      	beq.n	80029fe <tarea_ControlNeopixel_Loop+0x8a>
                        {
                            blink_ON = false; //Apagar los leds en la siguiente interrupción
 80029e4:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <tarea_ControlNeopixel_Loop+0xcc>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
                            neopixel_LoadColor (tiraDeLedsNeopixel.led, colorLeds, tiraDeLedsNeopixel.ledCount);
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <tarea_ControlNeopixel_Loop+0xc4>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <tarea_ControlNeopixel_Loop+0xc8>)
 80029f0:	6811      	ldr	r1, [r2, #0]
 80029f2:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <tarea_ControlNeopixel_Loop+0xc4>)
 80029f4:	6892      	ldr	r2, [r2, #8]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fb32 	bl	8002060 <neopixel_LoadColor>
 80029fc:	e00a      	b.n	8002a14 <tarea_ControlNeopixel_Loop+0xa0>
                        }
                    else
                        {
                            blink_ON = true; //Encender los leds en la siguiente interrupción
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <tarea_ControlNeopixel_Loop+0xcc>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
                            neopixel_LoadColor (tiraDeLedsNeopixel.led, C_NEGRO, tiraDeLedsNeopixel.ledCount);
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <tarea_ControlNeopixel_Loop+0xc4>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <tarea_ControlNeopixel_Loop+0xc4>)
 8002a0a:	6892      	ldr	r2, [r2, #8]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fb26 	bl	8002060 <neopixel_LoadColor>
                        }
                }
            neopixel_ShowLeds (&tiraDeLedsNeopixel);
 8002a14:	4808      	ldr	r0, [pc, #32]	; (8002a38 <tarea_ControlNeopixel_Loop+0xc4>)
 8002a16:	f7ff fb40 	bl	800209a <neopixel_ShowLeds>
 8002a1a:	e003      	b.n	8002a24 <tarea_ControlNeopixel_Loop+0xb0>
        }
    else
        {
            osDelay (10);
 8002a1c:	200a      	movs	r0, #10
 8002a1e:	f00e fde4 	bl	80115ea <osDelay>
        }
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200021e0 	.word	0x200021e0
 8002a2c:	20000008 	.word	0x20000008
 8002a30:	200021e4 	.word	0x200021e4
 8002a34:	200015ca 	.word	0x200015ca
 8002a38:	20001d78 	.word	0x20001d78
 8002a3c:	200015cc 	.word	0x200015cc
 8002a40:	200015d0 	.word	0x200015d0

08002a44 <tarea_EnvioUSB_Setup>:

int cont_rest_mk = 0,cont_on_mk=0, cont_rest_ECG=0;


void tarea_EnvioUSB_Setup(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
    memset (usbMsgTotal, 0x00, BUFF_MSG_TOT); // Limpiar todo el buffer
 8002a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	480d      	ldr	r0, [pc, #52]	; (8002a84 <tarea_EnvioUSB_Setup+0x40>)
 8002a50:	f013 fc63 	bl	801631a <memset>
    osDelay(500);
 8002a54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a58:	f00e fdc7 	bl	80115ea <osDelay>
    pMSG = usbMsgTotal;             // Primera posición del buffer de transmisión USB
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <tarea_EnvioUSB_Setup+0x44>)
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <tarea_EnvioUSB_Setup+0x40>)
 8002a60:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(RGB_R2_GPIO_Port, RGB_R2_Pin, GPIO_PIN_SET);
 8002a62:	2201      	movs	r2, #1
 8002a64:	2120      	movs	r1, #32
 8002a66:	4809      	ldr	r0, [pc, #36]	; (8002a8c <tarea_EnvioUSB_Setup+0x48>)
 8002a68:	f004 fade 	bl	8007028 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB_G2_GPIO_Port, RGB_G2_Pin, GPIO_PIN_SET);
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	2110      	movs	r1, #16
 8002a70:	4806      	ldr	r0, [pc, #24]	; (8002a8c <tarea_EnvioUSB_Setup+0x48>)
 8002a72:	f004 fad9 	bl	8007028 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB_B2_GPIO_Port, RGB_B2_Pin, GPIO_PIN_SET);
 8002a76:	2201      	movs	r2, #1
 8002a78:	2108      	movs	r1, #8
 8002a7a:	4804      	ldr	r0, [pc, #16]	; (8002a8c <tarea_EnvioUSB_Setup+0x48>)
 8002a7c:	f004 fad4 	bl	8007028 <HAL_GPIO_WritePin>
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200021f8 	.word	0x200021f8
 8002a88:	200022fc 	.word	0x200022fc
 8002a8c:	40021000 	.word	0x40021000

08002a90 <tarea_EnvioUSB_Loop>:

void tarea_EnvioUSB_Loop(void)
{
 8002a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af04      	add	r7, sp, #16
    usbCountTotal = 0;              // Contador de caracteres a enviar en Cero
 8002a96:	4b9a      	ldr	r3, [pc, #616]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	801a      	strh	r2, [r3, #0]

    //ECG gráfica 1 (250sps, 4ms)
    cont_E++;
 8002a9c:	4b99      	ldr	r3, [pc, #612]	; (8002d04 <tarea_EnvioUSB_Loop+0x274>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	4a98      	ldr	r2, [pc, #608]	; (8002d04 <tarea_EnvioUSB_Loop+0x274>)
 8002aa4:	6013      	str	r3, [r2, #0]
    if (cont_E>3)
 8002aa6:	4b97      	ldr	r3, [pc, #604]	; (8002d04 <tarea_EnvioUSB_Loop+0x274>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	dd15      	ble.n	8002ada <tarea_EnvioUSB_Loop+0x4a>
        {
            cont_E=0;
 8002aae:	4b95      	ldr	r3, [pc, #596]	; (8002d04 <tarea_EnvioUSB_Loop+0x274>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
            usbCountTotal += sprintf ((char*)pMSG + usbCountTotal,"E:%i\n",debug_ads);
 8002ab4:	4b94      	ldr	r3, [pc, #592]	; (8002d08 <tarea_EnvioUSB_Loop+0x278>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a91      	ldr	r2, [pc, #580]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002aba:	8812      	ldrh	r2, [r2, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	4a93      	ldr	r2, [pc, #588]	; (8002d0c <tarea_EnvioUSB_Loop+0x27c>)
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	4993      	ldr	r1, [pc, #588]	; (8002d10 <tarea_EnvioUSB_Loop+0x280>)
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f013 fbc5 	bl	8016254 <siprintf>
 8002aca:	4603      	mov	r3, r0
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	4b8c      	ldr	r3, [pc, #560]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b8a      	ldr	r3, [pc, #552]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002ad8:	801a      	strh	r2, [r3, #0]
        }
    if(osMessageWaiting(ecgGraph1Handle))
 8002ada:	4b8e      	ldr	r3, [pc, #568]	; (8002d14 <tarea_EnvioUSB_Loop+0x284>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00e fec4 	bl	801186c <osMessageWaiting>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d04a      	beq.n	8002b80 <tarea_EnvioUSB_Loop+0xf0>
        {
            xQueueReceive(ecgGraph1Handle, &g_queue1, 0);
 8002aea:	4b8a      	ldr	r3, [pc, #552]	; (8002d14 <tarea_EnvioUSB_Loop+0x284>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	4989      	ldr	r1, [pc, #548]	; (8002d18 <tarea_EnvioUSB_Loop+0x288>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	f00f fa58 	bl	8011fa8 <xQueueReceive>
            //Envio original
            //g_queue1
            if(flag_asistole==0)
 8002af8:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <tarea_EnvioUSB_Loop+0x28c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d103      	bne.n	8002b08 <tarea_EnvioUSB_Loop+0x78>
            {
            	aux_g_queue1=g_queue1;
 8002b00:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <tarea_EnvioUSB_Loop+0x288>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a86      	ldr	r2, [pc, #536]	; (8002d20 <tarea_EnvioUSB_Loop+0x290>)
 8002b06:	6013      	str	r3, [r2, #0]
            }
            usbCountTotal += sprintf ((char*)pMSG + usbCountTotal,"A:%.3f\n",aux_g_queue1);
 8002b08:	4b7f      	ldr	r3, [pc, #508]	; (8002d08 <tarea_EnvioUSB_Loop+0x278>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002b0e:	8812      	ldrh	r2, [r2, #0]
 8002b10:	189c      	adds	r4, r3, r2
 8002b12:	4b83      	ldr	r3, [pc, #524]	; (8002d20 <tarea_EnvioUSB_Loop+0x290>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fd16 	bl	8000548 <__aeabi_f2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4980      	ldr	r1, [pc, #512]	; (8002d24 <tarea_EnvioUSB_Loop+0x294>)
 8002b22:	4620      	mov	r0, r4
 8002b24:	f013 fb96 	bl	8016254 <siprintf>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	4b74      	ldr	r3, [pc, #464]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	4413      	add	r3, r2
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	4b72      	ldr	r3, [pc, #456]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002b36:	801a      	strh	r2, [r3, #0]

            //Envío DEBUG
         //   usbCountTotal += sprintf ((char*)pMSG + usbCountTotal,"e,%li,%li,%lli\n",error_cnt,ads_I_i,offsetRaw);
            // Información de marcapasos (Acorde a FC: Máximo 350lat/min, 171ms; Mínimo 15lat/min, 4seg)
            if(flag_marcapasos)
 8002b38:	4b7b      	ldr	r3, [pc, #492]	; (8002d28 <tarea_EnvioUSB_Loop+0x298>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01f      	beq.n	8002b80 <tarea_EnvioUSB_Loop+0xf0>
                {
                    cont_on_mk++;
 8002b40:	4b7a      	ldr	r3, [pc, #488]	; (8002d2c <tarea_EnvioUSB_Loop+0x29c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	4a79      	ldr	r2, [pc, #484]	; (8002d2c <tarea_EnvioUSB_Loop+0x29c>)
 8002b48:	6013      	str	r3, [r2, #0]
                    if(cont_on_mk>30)
 8002b4a:	4b78      	ldr	r3, [pc, #480]	; (8002d2c <tarea_EnvioUSB_Loop+0x29c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b1e      	cmp	r3, #30
 8002b50:	dd16      	ble.n	8002b80 <tarea_EnvioUSB_Loop+0xf0>
                        {
                            usbCountTotal += sprintf ((char*)pMSG + usbCountTotal,"M:\n"); //Cabecera
 8002b52:	4b6d      	ldr	r3, [pc, #436]	; (8002d08 <tarea_EnvioUSB_Loop+0x278>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6a      	ldr	r2, [pc, #424]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002b58:	8812      	ldrh	r2, [r2, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	4974      	ldr	r1, [pc, #464]	; (8002d30 <tarea_EnvioUSB_Loop+0x2a0>)
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f013 fb78 	bl	8016254 <siprintf>
 8002b64:	4603      	mov	r3, r0
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b65      	ldr	r3, [pc, #404]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002b72:	801a      	strh	r2, [r3, #0]
                            flag_marcapasos = false;
 8002b74:	4b6c      	ldr	r3, [pc, #432]	; (8002d28 <tarea_EnvioUSB_Loop+0x298>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
                            cont_on_mk=0;
 8002b7a:	4b6c      	ldr	r3, [pc, #432]	; (8002d2c <tarea_EnvioUSB_Loop+0x29c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
                        }
                }
        }
    //ECG gráfica 2 (250sps, 2ms)
    if(osMessageWaiting(ecgGraph2Handle))
 8002b80:	4b6c      	ldr	r3, [pc, #432]	; (8002d34 <tarea_EnvioUSB_Loop+0x2a4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f00e fe71 	bl	801186c <osMessageWaiting>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d026      	beq.n	8002bde <tarea_EnvioUSB_Loop+0x14e>
        {
        	xQueueReceive(ecgGraph2Handle, &g_queue2, 0);
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <tarea_EnvioUSB_Loop+0x2a4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2200      	movs	r2, #0
 8002b96:	4968      	ldr	r1, [pc, #416]	; (8002d38 <tarea_EnvioUSB_Loop+0x2a8>)
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f00f fa05 	bl	8011fa8 <xQueueReceive>
			if(flag_asistole==0)
 8002b9e:	4b5f      	ldr	r3, [pc, #380]	; (8002d1c <tarea_EnvioUSB_Loop+0x28c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d103      	bne.n	8002bae <tarea_EnvioUSB_Loop+0x11e>
			{
				aux_g_queue2=g_queue2;
 8002ba6:	4b64      	ldr	r3, [pc, #400]	; (8002d38 <tarea_EnvioUSB_Loop+0x2a8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a64      	ldr	r2, [pc, #400]	; (8002d3c <tarea_EnvioUSB_Loop+0x2ac>)
 8002bac:	6013      	str	r3, [r2, #0]
			}
            usbCountTotal += sprintf ((char*)pMSG + usbCountTotal,"B:%.3f\n",aux_g_queue2);
 8002bae:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <tarea_EnvioUSB_Loop+0x278>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a53      	ldr	r2, [pc, #332]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002bb4:	8812      	ldrh	r2, [r2, #0]
 8002bb6:	189c      	adds	r4, r3, r2
 8002bb8:	4b60      	ldr	r3, [pc, #384]	; (8002d3c <tarea_EnvioUSB_Loop+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fcc3 	bl	8000548 <__aeabi_f2d>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	495e      	ldr	r1, [pc, #376]	; (8002d40 <tarea_EnvioUSB_Loop+0x2b0>)
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f013 fb43 	bl	8016254 <siprintf>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b49      	ldr	r3, [pc, #292]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002bdc:	801a      	strh	r2, [r3, #0]
        }

    // Respiración (100sps, 10ms)
    if(flag_Resp_RDY)
 8002bde:	4b59      	ldr	r3, [pc, #356]	; (8002d44 <tarea_EnvioUSB_Loop+0x2b4>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d028      	beq.n	8002c38 <tarea_EnvioUSB_Loop+0x1a8>
        {
            usbCountTotal += sprintf ((char*)pMSG + usbCountTotal,"C:%.3f\nR:%.3f\nW:%i\n",graph3, Respiration_Rate, msgApnea);
 8002be6:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <tarea_EnvioUSB_Loop+0x278>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a45      	ldr	r2, [pc, #276]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	189e      	adds	r6, r3, r2
 8002bf0:	4b55      	ldr	r3, [pc, #340]	; (8002d48 <tarea_EnvioUSB_Loop+0x2b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fca7 	bl	8000548 <__aeabi_f2d>
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	460d      	mov	r5, r1
 8002bfe:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <tarea_EnvioUSB_Loop+0x2bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fca0 	bl	8000548 <__aeabi_f2d>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4950      	ldr	r1, [pc, #320]	; (8002d50 <tarea_EnvioUSB_Loop+0x2c0>)
 8002c0e:	7809      	ldrb	r1, [r1, #0]
 8002c10:	9102      	str	r1, [sp, #8]
 8002c12:	e9cd 2300 	strd	r2, r3, [sp]
 8002c16:	4622      	mov	r2, r4
 8002c18:	462b      	mov	r3, r5
 8002c1a:	494e      	ldr	r1, [pc, #312]	; (8002d54 <tarea_EnvioUSB_Loop+0x2c4>)
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	f013 fb19 	bl	8016254 <siprintf>
 8002c22:	4603      	mov	r3, r0
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002c30:	801a      	strh	r2, [r3, #0]
    		//debug
    		//usbCountTotal += sprintf ((char*)pMSG + usbCountTotal,"C:%.3f\nR:%li\nW:%i\n",graph3, aux_send, msgApnea);
            flag_Resp_RDY = false;
 8002c32:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <tarea_EnvioUSB_Loop+0x2b4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
        }
    // Frecuencia Cardiaca (Máximo 350lat/min, 171ms; Mínimo 15lat/min, 4seg)
    if(flag_FrecC_BEEP_RDY)
 8002c38:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <tarea_EnvioUSB_Loop+0x2c8>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d036      	beq.n	8002cae <tarea_EnvioUSB_Loop+0x21e>
        {
            //DEBUG start
            usbCountTotal += sprintf ((char*)pMSG + usbCountTotal,"bip%i\nF:%i\n",frecuenciaCardiaca,frecuenciaCardiaca);
 8002c40:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <tarea_EnvioUSB_Loop+0x278>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002c46:	8812      	ldrh	r2, [r2, #0]
 8002c48:	1898      	adds	r0, r3, r2
 8002c4a:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <tarea_EnvioUSB_Loop+0x2cc>)
 8002c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b42      	ldr	r3, [pc, #264]	; (8002d5c <tarea_EnvioUSB_Loop+0x2cc>)
 8002c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c58:	4941      	ldr	r1, [pc, #260]	; (8002d60 <tarea_EnvioUSB_Loop+0x2d0>)
 8002c5a:	f013 fafb 	bl	8016254 <siprintf>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002c6c:	801a      	strh	r2, [r3, #0]
//            HAL_GPIO_TogglePin(RGB_R2_GPIO_Port, RGB_R2_Pin);
            //DEBUG end
            //usbCountTotal += sprintf ((char*)pMSG + usbCountTotal,"F:%li\n",aux_send);	//  frecuenciaCardiaca);  //
            flag_FrecC_BEEP_RDY = false;
 8002c6e:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <tarea_EnvioUSB_Loop+0x2c8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
            if(cont_rest_mk>12)
 8002c74:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <tarea_EnvioUSB_Loop+0x2d4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	dd18      	ble.n	8002cae <tarea_EnvioUSB_Loop+0x21e>
            {
            	cont_rest_ECG++;
 8002c7c:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <tarea_EnvioUSB_Loop+0x2d8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <tarea_EnvioUSB_Loop+0x2d8>)
 8002c84:	6013      	str	r3, [r2, #0]
            	if(cont_rest_ECG>5)
 8002c86:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <tarea_EnvioUSB_Loop+0x2d8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	dd0f      	ble.n	8002cae <tarea_EnvioUSB_Loop+0x21e>
            	{
            		cont_rest_ECG=0;
 8002c8e:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <tarea_EnvioUSB_Loop+0x2d8>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
            		HAL_GPIO_WritePin(MK_Reset_GPIO_Port, MK_Reset_Pin, GPIO_PIN_SET);
 8002c94:	2201      	movs	r2, #1
 8002c96:	2101      	movs	r1, #1
 8002c98:	4834      	ldr	r0, [pc, #208]	; (8002d6c <tarea_EnvioUSB_Loop+0x2dc>)
 8002c9a:	f004 f9c5 	bl	8007028 <HAL_GPIO_WritePin>
            		osDelay(3);
 8002c9e:	2003      	movs	r0, #3
 8002ca0:	f00e fca3 	bl	80115ea <osDelay>
            		HAL_GPIO_WritePin(MK_Reset_GPIO_Port, MK_Reset_Pin, GPIO_PIN_RESET);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4830      	ldr	r0, [pc, #192]	; (8002d6c <tarea_EnvioUSB_Loop+0x2dc>)
 8002caa:	f004 f9bd 	bl	8007028 <HAL_GPIO_WritePin>
            	}
            }
        }
    // Información de electrodos (1 c/5seg)
    if(flag_RevElec_RDY)
 8002cae:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <tarea_EnvioUSB_Loop+0x2e0>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8097 	beq.w	8002de6 <tarea_EnvioUSB_Loop+0x356>
        {
            usbCountTotal += sprintf ((char*)pMSG + usbCountTotal, "L:%i%i%i%i%i\n", lead_1_RA, lead_2_LA, lead_3_RL, lead_4_LL, lead_5_V1);
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <tarea_EnvioUSB_Loop+0x278>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002cbe:	8812      	ldrh	r2, [r2, #0]
 8002cc0:	1898      	adds	r0, r3, r2
 8002cc2:	4b2c      	ldr	r3, [pc, #176]	; (8002d74 <tarea_EnvioUSB_Loop+0x2e4>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461c      	mov	r4, r3
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <tarea_EnvioUSB_Loop+0x2e8>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461d      	mov	r5, r3
 8002cce:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <tarea_EnvioUSB_Loop+0x2ec>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <tarea_EnvioUSB_Loop+0x2f0>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <tarea_EnvioUSB_Loop+0x2f4>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	9302      	str	r3, [sp, #8]
 8002ce0:	9101      	str	r1, [sp, #4]
 8002ce2:	9200      	str	r2, [sp, #0]
 8002ce4:	462b      	mov	r3, r5
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	4927      	ldr	r1, [pc, #156]	; (8002d88 <tarea_EnvioUSB_Loop+0x2f8>)
 8002cea:	f013 fab3 	bl	8016254 <siprintf>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	4b01      	ldr	r3, [pc, #4]	; (8002d00 <tarea_EnvioUSB_Loop+0x270>)
 8002cfc:	801a      	strh	r2, [r3, #0]
 8002cfe:	e045      	b.n	8002d8c <tarea_EnvioUSB_Loop+0x2fc>
 8002d00:	200022f8 	.word	0x200022f8
 8002d04:	20002300 	.word	0x20002300
 8002d08:	200022fc 	.word	0x200022fc
 8002d0c:	2000000c 	.word	0x2000000c
 8002d10:	080187d4 	.word	0x080187d4
 8002d14:	20001660 	.word	0x20001660
 8002d18:	200021e8 	.word	0x200021e8
 8002d1c:	20003458 	.word	0x20003458
 8002d20:	200021ec 	.word	0x200021ec
 8002d24:	080187dc 	.word	0x080187dc
 8002d28:	20001601 	.word	0x20001601
 8002d2c:	20002308 	.word	0x20002308
 8002d30:	080187e4 	.word	0x080187e4
 8002d34:	20001664 	.word	0x20001664
 8002d38:	200021f0 	.word	0x200021f0
 8002d3c:	200021f4 	.word	0x200021f4
 8002d40:	080187e8 	.word	0x080187e8
 8002d44:	2000160c 	.word	0x2000160c
 8002d48:	20001610 	.word	0x20001610
 8002d4c:	20001618 	.word	0x20001618
 8002d50:	20001624 	.word	0x20001624
 8002d54:	080187f0 	.word	0x080187f0
 8002d58:	20001608 	.word	0x20001608
 8002d5c:	2000160a 	.word	0x2000160a
 8002d60:	08018804 	.word	0x08018804
 8002d64:	20002304 	.word	0x20002304
 8002d68:	2000230c 	.word	0x2000230c
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	20001625 	.word	0x20001625
 8002d74:	20001626 	.word	0x20001626
 8002d78:	20001627 	.word	0x20001627
 8002d7c:	20001628 	.word	0x20001628
 8002d80:	20001629 	.word	0x20001629
 8002d84:	2000162a 	.word	0x2000162a
 8002d88:	08018810 	.word	0x08018810
            flag_RevElec_RDY = false;
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <tarea_EnvioUSB_Loop+0x3d8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
            //HAL_GPIO_TogglePin(MK_Reset_GPIO_Port, MK_Reset_Pin);
            if ((lead_1_RA)&&(lead_2_LA)&&(lead_4_LL)&&(lead_5_V1))
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <tarea_EnvioUSB_Loop+0x3dc>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01d      	beq.n	8002dd6 <tarea_EnvioUSB_Loop+0x346>
 8002d9a:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <tarea_EnvioUSB_Loop+0x3e0>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d019      	beq.n	8002dd6 <tarea_EnvioUSB_Loop+0x346>
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <tarea_EnvioUSB_Loop+0x3e4>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d015      	beq.n	8002dd6 <tarea_EnvioUSB_Loop+0x346>
 8002daa:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <tarea_EnvioUSB_Loop+0x3e8>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d011      	beq.n	8002dd6 <tarea_EnvioUSB_Loop+0x346>
                {
                    cont_rest_mk++;
 8002db2:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <tarea_EnvioUSB_Loop+0x3ec>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	4a30      	ldr	r2, [pc, #192]	; (8002e7c <tarea_EnvioUSB_Loop+0x3ec>)
 8002dba:	6013      	str	r3, [r2, #0]
                    if (cont_rest_mk>12)
 8002dbc:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <tarea_EnvioUSB_Loop+0x3ec>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b0c      	cmp	r3, #12
 8002dc2:	dd10      	ble.n	8002de6 <tarea_EnvioUSB_Loop+0x356>
                        {
                            cont_rest_mk=15;
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <tarea_EnvioUSB_Loop+0x3ec>)
 8002dc6:	220f      	movs	r2, #15
 8002dc8:	601a      	str	r2, [r3, #0]
                            //cont_rest_ECG++;
                            HAL_GPIO_WritePin(MK_Reset_GPIO_Port, MK_Reset_Pin, GPIO_PIN_RESET);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2101      	movs	r1, #1
 8002dce:	482c      	ldr	r0, [pc, #176]	; (8002e80 <tarea_EnvioUSB_Loop+0x3f0>)
 8002dd0:	f004 f92a 	bl	8007028 <HAL_GPIO_WritePin>
                    if (cont_rest_mk>12)
 8002dd4:	e007      	b.n	8002de6 <tarea_EnvioUSB_Loop+0x356>
                        }
                }
            else
                {
                    cont_rest_mk = 0;
 8002dd6:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <tarea_EnvioUSB_Loop+0x3ec>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
                    HAL_GPIO_WritePin(MK_Reset_GPIO_Port, MK_Reset_Pin, GPIO_PIN_SET);
 8002ddc:	2201      	movs	r2, #1
 8002dde:	2101      	movs	r1, #1
 8002de0:	4827      	ldr	r0, [pc, #156]	; (8002e80 <tarea_EnvioUSB_Loop+0x3f0>)
 8002de2:	f004 f921 	bl	8007028 <HAL_GPIO_WritePin>
                }
        }

    // Solicitud de información de versión de firmware (muy ocasional, información inmutable)

    if(flag_show_info)
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <tarea_EnvioUSB_Loop+0x3f4>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d013      	beq.n	8002e16 <tarea_EnvioUSB_Loop+0x386>
        {
            // Nuevo mensaje de información
            //usbCountTotal += sprintf ((char*)pMSG + usbCountTotal, "I:STM,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n", versionMain, taskCount, versionLeerADS, versionGraficarECG, versionRevisarComandos, versionRevisarElectrodos, versionControlNeopixel, versionNormalizacion, versionControlUSB, versionRespiracion, versionFrecuenciaCardiaca);
            //Mensaje de compatibilidad para pruebas
            usbCountTotal += sprintf ((char*)pMSG + usbCountTotal, "I:STM,1.4.0\n");
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <tarea_EnvioUSB_Loop+0x3f8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a26      	ldr	r2, [pc, #152]	; (8002e8c <tarea_EnvioUSB_Loop+0x3fc>)
 8002df4:	8812      	ldrh	r2, [r2, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	4925      	ldr	r1, [pc, #148]	; (8002e90 <tarea_EnvioUSB_Loop+0x400>)
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f013 fa2a 	bl	8016254 <siprintf>
 8002e00:	4603      	mov	r3, r0
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <tarea_EnvioUSB_Loop+0x3fc>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	4413      	add	r3, r2
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <tarea_EnvioUSB_Loop+0x3fc>)
 8002e0e:	801a      	strh	r2, [r3, #0]
            flag_show_info = false;
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <tarea_EnvioUSB_Loop+0x3f4>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
        }
    // Ping-Pong, cada que el MSV lo solicite (va a ser periódico)
    if(flag_Ping)
 8002e16:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <tarea_EnvioUSB_Loop+0x404>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d013      	beq.n	8002e46 <tarea_EnvioUSB_Loop+0x3b6>
        {
            usbCountTotal += sprintf ((char*)pMSG + usbCountTotal,"P\n"); //Cabecera
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <tarea_EnvioUSB_Loop+0x3f8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1a      	ldr	r2, [pc, #104]	; (8002e8c <tarea_EnvioUSB_Loop+0x3fc>)
 8002e24:	8812      	ldrh	r2, [r2, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	491b      	ldr	r1, [pc, #108]	; (8002e98 <tarea_EnvioUSB_Loop+0x408>)
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f013 fa12 	bl	8016254 <siprintf>
 8002e30:	4603      	mov	r3, r0
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <tarea_EnvioUSB_Loop+0x3fc>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	4413      	add	r3, r2
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <tarea_EnvioUSB_Loop+0x3fc>)
 8002e3e:	801a      	strh	r2, [r3, #0]
            flag_Ping = false;
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <tarea_EnvioUSB_Loop+0x404>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]

            flag_Resp_RDY = false;
        }     //  */

    // Envio del mensaje calculado
    if(usbCountTotal) //si hay algo por enviar
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <tarea_EnvioUSB_Loop+0x3fc>)
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <tarea_EnvioUSB_Loop+0x3ca>
        {
            //usbCountTotal += sprintf ((char*)pMSG + usbCountTotal, "\r\n");
            CDC_Transmit_FS (usbMsgTotal, usbCountTotal); // Transmitir
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <tarea_EnvioUSB_Loop+0x3fc>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	4619      	mov	r1, r3
 8002e54:	4811      	ldr	r0, [pc, #68]	; (8002e9c <tarea_EnvioUSB_Loop+0x40c>)
 8002e56:	f011 fd3f 	bl	80148d8 <CDC_Transmit_FS>
        }
    osDelay (1);//Si hay o no hay mensaje esperar 1 ms
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f00e fbc5 	bl	80115ea <osDelay>

}
 8002e60:	bf00      	nop
 8002e62:	3704      	adds	r7, #4
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e68:	20001625 	.word	0x20001625
 8002e6c:	20001626 	.word	0x20001626
 8002e70:	20001627 	.word	0x20001627
 8002e74:	20001629 	.word	0x20001629
 8002e78:	2000162a 	.word	0x2000162a
 8002e7c:	20002304 	.word	0x20002304
 8002e80:	40020c00 	.word	0x40020c00
 8002e84:	20001600 	.word	0x20001600
 8002e88:	200022fc 	.word	0x200022fc
 8002e8c:	200022f8 	.word	0x200022f8
 8002e90:	08018820 	.word	0x08018820
 8002e94:	2000162b 	.word	0x2000162b
 8002e98:	08018830 	.word	0x08018830
 8002e9c:	200021f8 	.word	0x200021f8

08002ea0 <tarea_FrecuenciaCardiaca_Setup>:
float prom_fc;



void tarea_FrecuenciaCardiaca_Setup(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0

}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <tarea_FrecuenciaCardiaca_Loop>:

void tarea_FrecuenciaCardiaca_Loop (void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
    //Cálculo de frecuencia cardiaca
  ///////////////////////nuevo calculo
    valor_fc0 = ads_II_f;
 8002eb6:	4b7e      	ldr	r3, [pc, #504]	; (80030b0 <tarea_FrecuenciaCardiaca_Loop+0x200>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7e      	ldr	r2, [pc, #504]	; (80030b4 <tarea_FrecuenciaCardiaca_Loop+0x204>)
 8002ebc:	6013      	str	r3, [r2, #0]
    aux_der=DerivadaFuncion(ads_II_i);
 8002ebe:	4b7e      	ldr	r3, [pc, #504]	; (80030b8 <tarea_FrecuenciaCardiaca_Loop+0x208>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f922 	bl	800310c <DerivadaFuncion>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4a7c      	ldr	r2, [pc, #496]	; (80030bc <tarea_FrecuenciaCardiaca_Loop+0x20c>)
 8002ecc:	6013      	str	r3, [r2, #0]
    grad_ecg = (float)flag_ini_pulso;
 8002ece:	4b7c      	ldr	r3, [pc, #496]	; (80030c0 <tarea_FrecuenciaCardiaca_Loop+0x210>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eda:	4b7a      	ldr	r3, [pc, #488]	; (80030c4 <tarea_FrecuenciaCardiaca_Loop+0x214>)
 8002edc:	edc3 7a00 	vstr	s15, [r3]
    if (aux_der>-1000)
 8002ee0:	4b76      	ldr	r3, [pc, #472]	; (80030bc <tarea_FrecuenciaCardiaca_Loop+0x20c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002ee8:	f340 80c7 	ble.w	800307a <tarea_FrecuenciaCardiaca_Loop+0x1ca>
        {
            cont_neg=0;
 8002eec:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <tarea_FrecuenciaCardiaca_Loop+0x218>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
            if (flag_ini_pulso)
 8002ef2:	4b73      	ldr	r3, [pc, #460]	; (80030c0 <tarea_FrecuenciaCardiaca_Loop+0x210>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80d0 	beq.w	800309c <tarea_FrecuenciaCardiaca_Loop+0x1ec>
                {
                    if (t_fc0 > 0.02)
 8002efc:	4b73      	ldr	r3, [pc, #460]	; (80030cc <tarea_FrecuenciaCardiaca_Loop+0x21c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fb21 	bl	8000548 <__aeabi_f2d>
 8002f06:	a368      	add	r3, pc, #416	; (adr r3, 80030a8 <tarea_FrecuenciaCardiaca_Loop+0x1f8>)
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f7fd fe04 	bl	8000b18 <__aeabi_dcmpgt>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80a7 	beq.w	8003066 <tarea_FrecuenciaCardiaca_Loop+0x1b6>
                        {
                            t_fc1 = HAL_GetTick();
 8002f18:	f002 fee6 	bl	8005ce8 <HAL_GetTick>
 8002f1c:	ee07 0a90 	vmov	s15, r0
 8002f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f24:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <tarea_FrecuenciaCardiaca_Loop+0x220>)
 8002f26:	edc3 7a00 	vstr	s15, [r3]
                            dif_tfc = (t_fc1 - t_fc0) / 1000;
 8002f2a:	4b69      	ldr	r3, [pc, #420]	; (80030d0 <tarea_FrecuenciaCardiaca_Loop+0x220>)
 8002f2c:	ed93 7a00 	vldr	s14, [r3]
 8002f30:	4b66      	ldr	r3, [pc, #408]	; (80030cc <tarea_FrecuenciaCardiaca_Loop+0x21c>)
 8002f32:	edd3 7a00 	vldr	s15, [r3]
 8002f36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f3a:	eddf 6a66 	vldr	s13, [pc, #408]	; 80030d4 <tarea_FrecuenciaCardiaca_Loop+0x224>
 8002f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f42:	4b65      	ldr	r3, [pc, #404]	; (80030d8 <tarea_FrecuenciaCardiaca_Loop+0x228>)
 8002f44:	edc3 7a00 	vstr	s15, [r3]
                            //array_fc[index_array_fc]=dif_tfc;
                            //index_array_fc++;
                            frec_card = 60 / dif_tfc;
 8002f48:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <tarea_FrecuenciaCardiaca_Loop+0x228>)
 8002f4a:	ed93 7a00 	vldr	s14, [r3]
 8002f4e:	eddf 6a63 	vldr	s13, [pc, #396]	; 80030dc <tarea_FrecuenciaCardiaca_Loop+0x22c>
 8002f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f56:	4b62      	ldr	r3, [pc, #392]	; (80030e0 <tarea_FrecuenciaCardiaca_Loop+0x230>)
 8002f58:	edc3 7a00 	vstr	s15, [r3]
                            flag_ini_pulso = false;
 8002f5c:	4b58      	ldr	r3, [pc, #352]	; (80030c0 <tarea_FrecuenciaCardiaca_Loop+0x210>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]

                            if (frec_card < 300)
 8002f62:	4b5f      	ldr	r3, [pc, #380]	; (80030e0 <tarea_FrecuenciaCardiaca_Loop+0x230>)
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80030e4 <tarea_FrecuenciaCardiaca_Loop+0x234>
 8002f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f74:	d50c      	bpl.n	8002f90 <tarea_FrecuenciaCardiaca_Loop+0xe0>
                                {
                                    //array_fc[cont_array_fc] = frec_card;
                                    array_fc[cont_array_fc] = dif_tfc;
 8002f76:	4b5c      	ldr	r3, [pc, #368]	; (80030e8 <tarea_FrecuenciaCardiaca_Loop+0x238>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a57      	ldr	r2, [pc, #348]	; (80030d8 <tarea_FrecuenciaCardiaca_Loop+0x228>)
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	495b      	ldr	r1, [pc, #364]	; (80030ec <tarea_FrecuenciaCardiaca_Loop+0x23c>)
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	601a      	str	r2, [r3, #0]
                                    cont_array_fc++;
 8002f86:	4b58      	ldr	r3, [pc, #352]	; (80030e8 <tarea_FrecuenciaCardiaca_Loop+0x238>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	4a56      	ldr	r2, [pc, #344]	; (80030e8 <tarea_FrecuenciaCardiaca_Loop+0x238>)
 8002f8e:	6013      	str	r3, [r2, #0]
                                }

                            if (cont_array_fc >= LIM_AR_CARD)
 8002f90:	4b55      	ldr	r3, [pc, #340]	; (80030e8 <tarea_FrecuenciaCardiaca_Loop+0x238>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b0b      	cmp	r3, #11
 8002f96:	dd02      	ble.n	8002f9e <tarea_FrecuenciaCardiaca_Loop+0xee>
                                {
                                    cont_array_fc = 0;
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <tarea_FrecuenciaCardiaca_Loop+0x238>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
                                }
                             ///////////////******************************************************//////////////////
                            sum_fc = 0;
 8002f9e:	4b54      	ldr	r3, [pc, #336]	; (80030f0 <tarea_FrecuenciaCardiaca_Loop+0x240>)
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
                            float max_fc = 0;
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	607b      	str	r3, [r7, #4]
                            for (int ij = 0; ij < LIM_AR_CARD; ij++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	e023      	b.n	8002ffa <tarea_FrecuenciaCardiaca_Loop+0x14a>
                                {
                                    if (array_fc[ij] > max_fc)
 8002fb2:	4a4e      	ldr	r2, [pc, #312]	; (80030ec <tarea_FrecuenciaCardiaca_Loop+0x23c>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fca:	d505      	bpl.n	8002fd8 <tarea_FrecuenciaCardiaca_Loop+0x128>
                                        {
                                            max_fc = array_fc[ij];
 8002fcc:	4a47      	ldr	r2, [pc, #284]	; (80030ec <tarea_FrecuenciaCardiaca_Loop+0x23c>)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	607b      	str	r3, [r7, #4]
                                        }
                                    sum_fc += array_fc[ij];
 8002fd8:	4a44      	ldr	r2, [pc, #272]	; (80030ec <tarea_FrecuenciaCardiaca_Loop+0x23c>)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	ed93 7a00 	vldr	s14, [r3]
 8002fe4:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <tarea_FrecuenciaCardiaca_Loop+0x240>)
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fee:	4b40      	ldr	r3, [pc, #256]	; (80030f0 <tarea_FrecuenciaCardiaca_Loop+0x240>)
 8002ff0:	edc3 7a00 	vstr	s15, [r3]
                            for (int ij = 0; ij < LIM_AR_CARD; ij++)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b0b      	cmp	r3, #11
 8002ffe:	ddd8      	ble.n	8002fb2 <tarea_FrecuenciaCardiaca_Loop+0x102>
                                }
                            //sum_fc = sum_fc - max_fc;
                            prom_fc = sum_fc / (LIM_AR_CARD );
 8003000:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <tarea_FrecuenciaCardiaca_Loop+0x240>)
 8003002:	ed93 7a00 	vldr	s14, [r3]
 8003006:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800300a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800300e:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <tarea_FrecuenciaCardiaca_Loop+0x244>)
 8003010:	edc3 7a00 	vstr	s15, [r3]
                            prom_fc = 60/prom_fc;
 8003014:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <tarea_FrecuenciaCardiaca_Loop+0x244>)
 8003016:	ed93 7a00 	vldr	s14, [r3]
 800301a:	eddf 6a30 	vldr	s13, [pc, #192]	; 80030dc <tarea_FrecuenciaCardiaca_Loop+0x22c>
 800301e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003022:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <tarea_FrecuenciaCardiaca_Loop+0x244>)
 8003024:	edc3 7a00 	vstr	s15, [r3]
                            ///////////////////////nuevo calculo
                            valor_fc1=valor_fc0;
 8003028:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <tarea_FrecuenciaCardiaca_Loop+0x204>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a32      	ldr	r2, [pc, #200]	; (80030f8 <tarea_FrecuenciaCardiaca_Loop+0x248>)
 800302e:	6013      	str	r3, [r2, #0]
                            ///////////////******************************************************//////////////////
                            //Envío de señal de sincronización
                            //msgFrecuenciaCardiaca_cnt = sprintf ((char*) msgFrecuenciaCardiaca, "F:%.1f\n",round (prom_fc));
                            frecuenciaCardiaca =  (int16_t)round(prom_fc);
 8003030:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <tarea_FrecuenciaCardiaca_Loop+0x244>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fa87 	bl	8000548 <__aeabi_f2d>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	ec43 2b10 	vmov	d0, r2, r3
 8003042:	f012 fb1b 	bl	801567c <round>
 8003046:	ec53 2b10 	vmov	r2, r3, d0
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	f7fd fd83 	bl	8000b58 <__aeabi_d2iz>
 8003052:	4603      	mov	r3, r0
 8003054:	b21a      	sxth	r2, r3
 8003056:	4b29      	ldr	r3, [pc, #164]	; (80030fc <tarea_FrecuenciaCardiaca_Loop+0x24c>)
 8003058:	801a      	strh	r2, [r3, #0]
                            flag_FrecC_BEEP_RDY = true;
 800305a:	4b29      	ldr	r3, [pc, #164]	; (8003100 <tarea_FrecuenciaCardiaca_Loop+0x250>)
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
                            flag_Latido_Offset = true;
 8003060:	4b28      	ldr	r3, [pc, #160]	; (8003104 <tarea_FrecuenciaCardiaca_Loop+0x254>)
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
                        }
                    t_fc0 = HAL_GetTick();
 8003066:	f002 fe3f 	bl	8005ce8 <HAL_GetTick>
 800306a:	ee07 0a90 	vmov	s15, r0
 800306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003072:	4b16      	ldr	r3, [pc, #88]	; (80030cc <tarea_FrecuenciaCardiaca_Loop+0x21c>)
 8003074:	edc3 7a00 	vstr	s15, [r3]
                }
        }



}
 8003078:	e010      	b.n	800309c <tarea_FrecuenciaCardiaca_Loop+0x1ec>
    else if (aux_der<-1500)
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <tarea_FrecuenciaCardiaca_Loop+0x20c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a22      	ldr	r2, [pc, #136]	; (8003108 <tarea_FrecuenciaCardiaca_Loop+0x258>)
 8003080:	4293      	cmp	r3, r2
 8003082:	da0b      	bge.n	800309c <tarea_FrecuenciaCardiaca_Loop+0x1ec>
            cont_neg++;
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <tarea_FrecuenciaCardiaca_Loop+0x218>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <tarea_FrecuenciaCardiaca_Loop+0x218>)
 800308c:	6013      	str	r3, [r2, #0]
            if(cont_neg>2)
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <tarea_FrecuenciaCardiaca_Loop+0x218>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b02      	cmp	r3, #2
 8003094:	dd02      	ble.n	800309c <tarea_FrecuenciaCardiaca_Loop+0x1ec>
                    flag_ini_pulso = true;
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <tarea_FrecuenciaCardiaca_Loop+0x210>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	f3af 8000 	nop.w
 80030a8:	47ae147b 	.word	0x47ae147b
 80030ac:	3f947ae1 	.word	0x3f947ae1
 80030b0:	200015f0 	.word	0x200015f0
 80030b4:	20002310 	.word	0x20002310
 80030b8:	200015e8 	.word	0x200015e8
 80030bc:	2000162c 	.word	0x2000162c
 80030c0:	20002320 	.word	0x20002320
 80030c4:	20002318 	.word	0x20002318
 80030c8:	20002334 	.word	0x20002334
 80030cc:	20002324 	.word	0x20002324
 80030d0:	20002328 	.word	0x20002328
 80030d4:	447a0000 	.word	0x447a0000
 80030d8:	2000231c 	.word	0x2000231c
 80030dc:	42700000 	.word	0x42700000
 80030e0:	2000232c 	.word	0x2000232c
 80030e4:	43960000 	.word	0x43960000
 80030e8:	20002330 	.word	0x20002330
 80030ec:	20000018 	.word	0x20000018
 80030f0:	20002338 	.word	0x20002338
 80030f4:	2000233c 	.word	0x2000233c
 80030f8:	20002314 	.word	0x20002314
 80030fc:	2000160a 	.word	0x2000160a
 8003100:	20001608 	.word	0x20001608
 8003104:	200015e0 	.word	0x200015e0
 8003108:	fffffa24 	.word	0xfffffa24

0800310c <DerivadaFuncion>:
int32_t DerivadaFuncion (int derivacion)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    int y, i;
    static int fx_derv[4];

    /*y = 1/8 (2x( nT) + x( nT - T) - x( nT - 3T) - 2x( nT - 4T))*/
    y = (derivacion << 1) + fx_derv[3] - fx_derv[1] - (fx_derv[0] << 1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	005a      	lsls	r2, r3, #1
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <DerivadaFuncion+0x60>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	441a      	add	r2, r3
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <DerivadaFuncion+0x60>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	1ad2      	subs	r2, r2, r3
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <DerivadaFuncion+0x60>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	60bb      	str	r3, [r7, #8]
    y >>= 3;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	10db      	asrs	r3, r3, #3
 8003132:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++)
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e00b      	b.n	8003152 <DerivadaFuncion+0x46>
        fx_derv[i] = fx_derv[i + 1];
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3301      	adds	r3, #1
 800313e:	4a0b      	ldr	r2, [pc, #44]	; (800316c <DerivadaFuncion+0x60>)
 8003140:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003144:	4909      	ldr	r1, [pc, #36]	; (800316c <DerivadaFuncion+0x60>)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (i = 0; i < 3; i++)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3301      	adds	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b02      	cmp	r3, #2
 8003156:	ddf0      	ble.n	800313a <DerivadaFuncion+0x2e>
    fx_derv[3] = derivacion;
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <DerivadaFuncion+0x60>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	60d3      	str	r3, [r2, #12]

    return(y);
 800315e:	68bb      	ldr	r3, [r7, #8]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	20002340 	.word	0x20002340

08003170 <tarea_GraficarECG_Setup>:
        };



void tarea_GraficarECG_Setup(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af02      	add	r7, sp, #8
    // Inicialización de los filtros ECG 1
    arm_fir_init_f32 (&filtroDiag1_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroDiag1_Coeficientes[0], &filtroDiag1_Estados[0], FILTRO_ECG_TAM_BLOQUE);
 8003176:	2301      	movs	r3, #1
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	4b23      	ldr	r3, [pc, #140]	; (8003208 <tarea_GraficarECG_Setup+0x98>)
 800317c:	4a23      	ldr	r2, [pc, #140]	; (800320c <tarea_GraficarECG_Setup+0x9c>)
 800317e:	2181      	movs	r1, #129	; 0x81
 8003180:	4823      	ldr	r0, [pc, #140]	; (8003210 <tarea_GraficarECG_Setup+0xa0>)
 8003182:	f012 f805 	bl	8015190 <arm_fir_init_f32>
    arm_fir_init_f32 (&filtroMoni1_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroMoni1_Coeficientes[0], &filtroMoni1_Estados[0], FILTRO_ECG_TAM_BLOQUE);
 8003186:	2301      	movs	r3, #1
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	4b22      	ldr	r3, [pc, #136]	; (8003214 <tarea_GraficarECG_Setup+0xa4>)
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <tarea_GraficarECG_Setup+0xa8>)
 800318e:	2181      	movs	r1, #129	; 0x81
 8003190:	4822      	ldr	r0, [pc, #136]	; (800321c <tarea_GraficarECG_Setup+0xac>)
 8003192:	f011 fffd 	bl	8015190 <arm_fir_init_f32>
    arm_fir_init_f32 (&filtroMaxi1_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroMaxi1_Coeficientes[0], &filtroMaxi1_Estados[0], FILTRO_ECG_TAM_BLOQUE);
 8003196:	2301      	movs	r3, #1
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	4b21      	ldr	r3, [pc, #132]	; (8003220 <tarea_GraficarECG_Setup+0xb0>)
 800319c:	4a21      	ldr	r2, [pc, #132]	; (8003224 <tarea_GraficarECG_Setup+0xb4>)
 800319e:	2181      	movs	r1, #129	; 0x81
 80031a0:	4821      	ldr	r0, [pc, #132]	; (8003228 <tarea_GraficarECG_Setup+0xb8>)
 80031a2:	f011 fff5 	bl	8015190 <arm_fir_init_f32>
    arm_fir_init_f32 (&filtro60Hz1_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtro60Hz1_Coeficientes[0], &filtro60Hz1_Estados[0], FILTRO_ECG_TAM_BLOQUE);
 80031a6:	2301      	movs	r3, #1
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <tarea_GraficarECG_Setup+0xbc>)
 80031ac:	4a20      	ldr	r2, [pc, #128]	; (8003230 <tarea_GraficarECG_Setup+0xc0>)
 80031ae:	2181      	movs	r1, #129	; 0x81
 80031b0:	4820      	ldr	r0, [pc, #128]	; (8003234 <tarea_GraficarECG_Setup+0xc4>)
 80031b2:	f011 ffed 	bl	8015190 <arm_fir_init_f32>

    // Inicialización de los filtros ECG 2
    arm_fir_init_f32 (&filtroDiag2_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroDiag2_Coeficientes[0], &filtroDiag2_Estados[0], FILTRO_ECG_TAM_BLOQUE);
 80031b6:	2301      	movs	r3, #1
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <tarea_GraficarECG_Setup+0xc8>)
 80031bc:	4a1f      	ldr	r2, [pc, #124]	; (800323c <tarea_GraficarECG_Setup+0xcc>)
 80031be:	2181      	movs	r1, #129	; 0x81
 80031c0:	481f      	ldr	r0, [pc, #124]	; (8003240 <tarea_GraficarECG_Setup+0xd0>)
 80031c2:	f011 ffe5 	bl	8015190 <arm_fir_init_f32>
    arm_fir_init_f32 (&filtroMoni2_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroMoni2_Coeficientes[0], &filtroMoni2_Estados[0], FILTRO_ECG_TAM_BLOQUE);
 80031c6:	2301      	movs	r3, #1
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <tarea_GraficarECG_Setup+0xd4>)
 80031cc:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <tarea_GraficarECG_Setup+0xd8>)
 80031ce:	2181      	movs	r1, #129	; 0x81
 80031d0:	481e      	ldr	r0, [pc, #120]	; (800324c <tarea_GraficarECG_Setup+0xdc>)
 80031d2:	f011 ffdd 	bl	8015190 <arm_fir_init_f32>
    arm_fir_init_f32 (&filtroMaxi2_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtroMaxi2_Coeficientes[0], &filtroMaxi2_Estados[0], FILTRO_ECG_TAM_BLOQUE);
 80031d6:	2301      	movs	r3, #1
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <tarea_GraficarECG_Setup+0xe0>)
 80031dc:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <tarea_GraficarECG_Setup+0xe4>)
 80031de:	2181      	movs	r1, #129	; 0x81
 80031e0:	481d      	ldr	r0, [pc, #116]	; (8003258 <tarea_GraficarECG_Setup+0xe8>)
 80031e2:	f011 ffd5 	bl	8015190 <arm_fir_init_f32>
    arm_fir_init_f32 (&filtro60Hz2_Instancia, FILTRO_ECG_ORDEN, (float32_t*) &filtro60Hz2_Coeficientes[0], &filtro60Hz2_Estados[0], FILTRO_ECG_TAM_BLOQUE);
 80031e6:	2301      	movs	r3, #1
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	4b1c      	ldr	r3, [pc, #112]	; (800325c <tarea_GraficarECG_Setup+0xec>)
 80031ec:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <tarea_GraficarECG_Setup+0xf0>)
 80031ee:	2181      	movs	r1, #129	; 0x81
 80031f0:	481c      	ldr	r0, [pc, #112]	; (8003264 <tarea_GraficarECG_Setup+0xf4>)
 80031f2:	f011 ffcd 	bl	8015190 <arm_fir_init_f32>

    // Seleccionar un filtro por default
    derivacionesAGraficar.ecg_FiltroG1 = FILTRO_DIAGNOSTICO;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <tarea_GraficarECG_Setup+0xf8>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	709a      	strb	r2, [r3, #2]
    derivacionesAGraficar.ecg_FiltroG2 = FILTRO_DIAGNOSTICO;
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <tarea_GraficarECG_Setup+0xf8>)
 80031fe:	2201      	movs	r2, #1
 8003200:	70da      	strb	r2, [r3, #3]
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200023c4 	.word	0x200023c4
 800320c:	20000068 	.word	0x20000068
 8003210:	20002364 	.word	0x20002364
 8003214:	200025c8 	.word	0x200025c8
 8003218:	20000470 	.word	0x20000470
 800321c:	20002370 	.word	0x20002370
 8003220:	200027cc 	.word	0x200027cc
 8003224:	20000878 	.word	0x20000878
 8003228:	2000237c 	.word	0x2000237c
 800322c:	200029d0 	.word	0x200029d0
 8003230:	20000c80 	.word	0x20000c80
 8003234:	20002388 	.word	0x20002388
 8003238:	20002bd4 	.word	0x20002bd4
 800323c:	2000026c 	.word	0x2000026c
 8003240:	20002394 	.word	0x20002394
 8003244:	20002dd8 	.word	0x20002dd8
 8003248:	20000674 	.word	0x20000674
 800324c:	200023a0 	.word	0x200023a0
 8003250:	20002fdc 	.word	0x20002fdc
 8003254:	20000a7c 	.word	0x20000a7c
 8003258:	200023ac 	.word	0x200023ac
 800325c:	200031e0 	.word	0x200031e0
 8003260:	20000e84 	.word	0x20000e84
 8003264:	200023b8 	.word	0x200023b8
 8003268:	200015c4 	.word	0x200015c4

0800326c <tarea_GraficarECG_Loop>:
void tarea_GraficarECG_Loop(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
    // Calcular el valor a graficar, primero el valor de la derivación
    switch (derivacionesAGraficar.g1)
 8003270:	4bc2      	ldr	r3, [pc, #776]	; (800357c <tarea_GraficarECG_Loop+0x310>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	f200 811d 	bhi.w	80034b4 <tarea_GraficarECG_Loop+0x248>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <tarea_GraficarECG_Loop+0x14>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032b5 	.word	0x080032b5
 8003284:	080032bf 	.word	0x080032bf
 8003288:	080032c9 	.word	0x080032c9
 800328c:	080032d3 	.word	0x080032d3
 8003290:	080032dd 	.word	0x080032dd
 8003294:	08003301 	.word	0x08003301
 8003298:	08003321 	.word	0x08003321
 800329c:	08003341 	.word	0x08003341
 80032a0:	0800337f 	.word	0x0800337f
 80032a4:	080033bd 	.word	0x080033bd
 80032a8:	080033fb 	.word	0x080033fb
 80032ac:	08003439 	.word	0x08003439
 80032b0:	08003477 	.word	0x08003477
    {
        case DERIVACION_NULL:
            g1_Derivacion1 = 0;
 80032b4:	4bb2      	ldr	r3, [pc, #712]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
            break;
 80032bc:	e0fb      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_I:
            g1_Derivacion1 = ads_I_f;
 80032be:	4bb1      	ldr	r3, [pc, #708]	; (8003584 <tarea_GraficarECG_Loop+0x318>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4aaf      	ldr	r2, [pc, #700]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 80032c4:	6013      	str	r3, [r2, #0]
            break;
 80032c6:	e0f6      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_II:
            g1_Derivacion1 = ads_II_f;
 80032c8:	4baf      	ldr	r3, [pc, #700]	; (8003588 <tarea_GraficarECG_Loop+0x31c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4aac      	ldr	r2, [pc, #688]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 80032ce:	6013      	str	r3, [r2, #0]
            break;
 80032d0:	e0f1      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_III:
            g1_Derivacion1 = ads_III_f;
 80032d2:	4bae      	ldr	r3, [pc, #696]	; (800358c <tarea_GraficarECG_Loop+0x320>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4aaa      	ldr	r2, [pc, #680]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 80032d8:	6013      	str	r3, [r2, #0]
            break;
 80032da:	e0ec      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_AVR:
            g1_Derivacion1 = -(ads_I_f + ads_II_f) / 2;
 80032dc:	4ba9      	ldr	r3, [pc, #676]	; (8003584 <tarea_GraficarECG_Loop+0x318>)
 80032de:	ed93 7a00 	vldr	s14, [r3]
 80032e2:	4ba9      	ldr	r3, [pc, #676]	; (8003588 <tarea_GraficarECG_Loop+0x31c>)
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ec:	eeb1 7a67 	vneg.f32	s14, s15
 80032f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80032f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032f8:	4ba1      	ldr	r3, [pc, #644]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 80032fa:	edc3 7a00 	vstr	s15, [r3]
            break;
 80032fe:	e0da      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_AVL:
            g1_Derivacion1 = (ads_I_f - ads_III_f) / 2;
 8003300:	4ba0      	ldr	r3, [pc, #640]	; (8003584 <tarea_GraficarECG_Loop+0x318>)
 8003302:	ed93 7a00 	vldr	s14, [r3]
 8003306:	4ba1      	ldr	r3, [pc, #644]	; (800358c <tarea_GraficarECG_Loop+0x320>)
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003310:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003318:	4b99      	ldr	r3, [pc, #612]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 800331a:	edc3 7a00 	vstr	s15, [r3]
            break;
 800331e:	e0ca      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_AVF:
            g1_Derivacion1 = (ads_II_f + ads_III_f) / 2;
 8003320:	4b99      	ldr	r3, [pc, #612]	; (8003588 <tarea_GraficarECG_Loop+0x31c>)
 8003322:	ed93 7a00 	vldr	s14, [r3]
 8003326:	4b99      	ldr	r3, [pc, #612]	; (800358c <tarea_GraficarECG_Loop+0x320>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003330:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003334:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003338:	4b91      	ldr	r3, [pc, #580]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 800333a:	edc3 7a00 	vstr	s15, [r3]
            break;
 800333e:	e0ba      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_V1:
            g1_Derivacion1 = (leerValorCanal (8) / ADS_RESOLUTION)
 8003340:	2008      	movs	r0, #8
 8003342:	f7fe f8d7 	bl	80014f4 <leerValorCanal>
 8003346:	4603      	mov	r3, r0
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd f8eb 	bl	8000524 <__aeabi_i2d>
 800334e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003352:	4b8f      	ldr	r3, [pc, #572]	; (8003590 <tarea_GraficarECG_Loop+0x324>)
 8003354:	f7fd fa7a 	bl	800084c <__aeabi_ddiv>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
            * ADS_MULT_OUT;
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	4b8b      	ldr	r3, [pc, #556]	; (8003594 <tarea_GraficarECG_Loop+0x328>)
 8003366:	f7fd f947 	bl	80005f8 <__aeabi_dmul>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	f7fd fc19 	bl	8000ba8 <__aeabi_d2f>
 8003376:	4603      	mov	r3, r0
            g1_Derivacion1 = (leerValorCanal (8) / ADS_RESOLUTION)
 8003378:	4a81      	ldr	r2, [pc, #516]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 800337a:	6013      	str	r3, [r2, #0]
            break;
 800337c:	e09b      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_V2:
            g1_Derivacion1 = (leerValorCanal (4) / ADS_RESOLUTION)
 800337e:	2004      	movs	r0, #4
 8003380:	f7fe f8b8 	bl	80014f4 <leerValorCanal>
 8003384:	4603      	mov	r3, r0
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8cc 	bl	8000524 <__aeabi_i2d>
 800338c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003390:	4b7f      	ldr	r3, [pc, #508]	; (8003590 <tarea_GraficarECG_Loop+0x324>)
 8003392:	f7fd fa5b 	bl	800084c <__aeabi_ddiv>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
            * ADS_MULT_OUT;
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	4b7c      	ldr	r3, [pc, #496]	; (8003594 <tarea_GraficarECG_Loop+0x328>)
 80033a4:	f7fd f928 	bl	80005f8 <__aeabi_dmul>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f7fd fbfa 	bl	8000ba8 <__aeabi_d2f>
 80033b4:	4603      	mov	r3, r0
            g1_Derivacion1 = (leerValorCanal (4) / ADS_RESOLUTION)
 80033b6:	4a72      	ldr	r2, [pc, #456]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 80033b8:	6013      	str	r3, [r2, #0]
            break;
 80033ba:	e07c      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_V3:
            g1_Derivacion1 = (leerValorCanal (5) / ADS_RESOLUTION)
 80033bc:	2005      	movs	r0, #5
 80033be:	f7fe f899 	bl	80014f4 <leerValorCanal>
 80033c2:	4603      	mov	r3, r0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd f8ad 	bl	8000524 <__aeabi_i2d>
 80033ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80033ce:	4b70      	ldr	r3, [pc, #448]	; (8003590 <tarea_GraficarECG_Loop+0x324>)
 80033d0:	f7fd fa3c 	bl	800084c <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
            * ADS_MULT_OUT;
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <tarea_GraficarECG_Loop+0x328>)
 80033e2:	f7fd f909 	bl	80005f8 <__aeabi_dmul>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7fd fbdb 	bl	8000ba8 <__aeabi_d2f>
 80033f2:	4603      	mov	r3, r0
            g1_Derivacion1 = (leerValorCanal (5) / ADS_RESOLUTION)
 80033f4:	4a62      	ldr	r2, [pc, #392]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 80033f6:	6013      	str	r3, [r2, #0]
            break;
 80033f8:	e05d      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_V4:
            g1_Derivacion1 = (leerValorCanal (6) / ADS_RESOLUTION)
 80033fa:	2006      	movs	r0, #6
 80033fc:	f7fe f87a 	bl	80014f4 <leerValorCanal>
 8003400:	4603      	mov	r3, r0
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd f88e 	bl	8000524 <__aeabi_i2d>
 8003408:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800340c:	4b60      	ldr	r3, [pc, #384]	; (8003590 <tarea_GraficarECG_Loop+0x324>)
 800340e:	f7fd fa1d 	bl	800084c <__aeabi_ddiv>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
            * ADS_MULT_OUT;
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	4b5d      	ldr	r3, [pc, #372]	; (8003594 <tarea_GraficarECG_Loop+0x328>)
 8003420:	f7fd f8ea 	bl	80005f8 <__aeabi_dmul>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f7fd fbbc 	bl	8000ba8 <__aeabi_d2f>
 8003430:	4603      	mov	r3, r0
            g1_Derivacion1 = (leerValorCanal (6) / ADS_RESOLUTION)
 8003432:	4a53      	ldr	r2, [pc, #332]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 8003434:	6013      	str	r3, [r2, #0]
            break;
 8003436:	e03e      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_V5:
            g1_Derivacion1 = (leerValorCanal (7) / ADS_RESOLUTION)
 8003438:	2007      	movs	r0, #7
 800343a:	f7fe f85b 	bl	80014f4 <leerValorCanal>
 800343e:	4603      	mov	r3, r0
 8003440:	4618      	mov	r0, r3
 8003442:	f7fd f86f 	bl	8000524 <__aeabi_i2d>
 8003446:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800344a:	4b51      	ldr	r3, [pc, #324]	; (8003590 <tarea_GraficarECG_Loop+0x324>)
 800344c:	f7fd f9fe 	bl	800084c <__aeabi_ddiv>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
            * ADS_MULT_OUT;
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	4b4d      	ldr	r3, [pc, #308]	; (8003594 <tarea_GraficarECG_Loop+0x328>)
 800345e:	f7fd f8cb 	bl	80005f8 <__aeabi_dmul>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f7fd fb9d 	bl	8000ba8 <__aeabi_d2f>
 800346e:	4603      	mov	r3, r0
            g1_Derivacion1 = (leerValorCanal (7) / ADS_RESOLUTION)
 8003470:	4a43      	ldr	r2, [pc, #268]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 8003472:	6013      	str	r3, [r2, #0]
            break;
 8003474:	e01f      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        case DERIVACION_V6:
            g1_Derivacion1 = (leerValorCanal (1) / ADS_RESOLUTION)
 8003476:	2001      	movs	r0, #1
 8003478:	f7fe f83c 	bl	80014f4 <leerValorCanal>
 800347c:	4603      	mov	r3, r0
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd f850 	bl	8000524 <__aeabi_i2d>
 8003484:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003488:	4b41      	ldr	r3, [pc, #260]	; (8003590 <tarea_GraficarECG_Loop+0x324>)
 800348a:	f7fd f9df 	bl	800084c <__aeabi_ddiv>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
            * ADS_MULT_OUT;
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	4b3e      	ldr	r3, [pc, #248]	; (8003594 <tarea_GraficarECG_Loop+0x328>)
 800349c:	f7fd f8ac 	bl	80005f8 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	f7fd fb7e 	bl	8000ba8 <__aeabi_d2f>
 80034ac:	4603      	mov	r3, r0
            g1_Derivacion1 = (leerValorCanal (1) / ADS_RESOLUTION)
 80034ae:	4a34      	ldr	r2, [pc, #208]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 80034b0:	6013      	str	r3, [r2, #0]
            break;
 80034b2:	e000      	b.n	80034b6 <tarea_GraficarECG_Loop+0x24a>
        default:
            break;
 80034b4:	bf00      	nop
    }
    //si la grafica 2 es igual a la 1, no hace falta calcularla, sólo la copio.
    if (derivacionesAGraficar.g2 == derivacionesAGraficar.g1)
 80034b6:	4b31      	ldr	r3, [pc, #196]	; (800357c <tarea_GraficarECG_Loop+0x310>)
 80034b8:	785a      	ldrb	r2, [r3, #1]
 80034ba:	4b30      	ldr	r3, [pc, #192]	; (800357c <tarea_GraficarECG_Loop+0x310>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d104      	bne.n	80034cc <tarea_GraficarECG_Loop+0x260>
        {
            g2_Derivacion2 = g1_Derivacion1;
 80034c2:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <tarea_GraficarECG_Loop+0x314>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a34      	ldr	r2, [pc, #208]	; (8003598 <tarea_GraficarECG_Loop+0x32c>)
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	e132      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
        }
    else
        {
            switch (derivacionesAGraficar.g2)
 80034cc:	4b2b      	ldr	r3, [pc, #172]	; (800357c <tarea_GraficarECG_Loop+0x310>)
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	f200 812d 	bhi.w	8003730 <tarea_GraficarECG_Loop+0x4c4>
 80034d6:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <tarea_GraficarECG_Loop+0x270>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	08003511 	.word	0x08003511
 80034e0:	0800351b 	.word	0x0800351b
 80034e4:	08003525 	.word	0x08003525
 80034e8:	0800352f 	.word	0x0800352f
 80034ec:	08003539 	.word	0x08003539
 80034f0:	0800355d 	.word	0x0800355d
 80034f4:	0800359d 	.word	0x0800359d
 80034f8:	080035bd 	.word	0x080035bd
 80034fc:	080035fb 	.word	0x080035fb
 8003500:	08003639 	.word	0x08003639
 8003504:	08003677 	.word	0x08003677
 8003508:	080036b5 	.word	0x080036b5
 800350c:	080036f3 	.word	0x080036f3
            {
                case DERIVACION_NULL:
                    g2_Derivacion2 = 0;
 8003510:	4b21      	ldr	r3, [pc, #132]	; (8003598 <tarea_GraficarECG_Loop+0x32c>)
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
                    break;
 8003518:	e10b      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_I:
                    g2_Derivacion2 = ads_I_f;
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <tarea_GraficarECG_Loop+0x318>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1e      	ldr	r2, [pc, #120]	; (8003598 <tarea_GraficarECG_Loop+0x32c>)
 8003520:	6013      	str	r3, [r2, #0]
                    break;
 8003522:	e106      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_II:
                    g2_Derivacion2 = ads_II_f;
 8003524:	4b18      	ldr	r3, [pc, #96]	; (8003588 <tarea_GraficarECG_Loop+0x31c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <tarea_GraficarECG_Loop+0x32c>)
 800352a:	6013      	str	r3, [r2, #0]
                    break;
 800352c:	e101      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_III:
                    g2_Derivacion2 = ads_III_f;
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <tarea_GraficarECG_Loop+0x320>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a19      	ldr	r2, [pc, #100]	; (8003598 <tarea_GraficarECG_Loop+0x32c>)
 8003534:	6013      	str	r3, [r2, #0]
                    break;
 8003536:	e0fc      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_AVR:
                    g2_Derivacion2 = -(ads_I_f + ads_II_f) / 2;
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <tarea_GraficarECG_Loop+0x318>)
 800353a:	ed93 7a00 	vldr	s14, [r3]
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <tarea_GraficarECG_Loop+0x31c>)
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003548:	eeb1 7a67 	vneg.f32	s14, s15
 800354c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003554:	4b10      	ldr	r3, [pc, #64]	; (8003598 <tarea_GraficarECG_Loop+0x32c>)
 8003556:	edc3 7a00 	vstr	s15, [r3]
                    break;
 800355a:	e0ea      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_AVL:
                    g2_Derivacion2 = (ads_I_f - ads_III_f) / 2;
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <tarea_GraficarECG_Loop+0x318>)
 800355e:	ed93 7a00 	vldr	s14, [r3]
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <tarea_GraficarECG_Loop+0x320>)
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	ee37 7a67 	vsub.f32	s14, s14, s15
 800356c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <tarea_GraficarECG_Loop+0x32c>)
 8003576:	edc3 7a00 	vstr	s15, [r3]
                    break;
 800357a:	e0da      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
 800357c:	200015c4 	.word	0x200015c4
 8003580:	20002358 	.word	0x20002358
 8003584:	200015ec 	.word	0x200015ec
 8003588:	200015f0 	.word	0x200015f0
 800358c:	200015f4 	.word	0x200015f4
 8003590:	415fffff 	.word	0x415fffff
 8003594:	408f4000 	.word	0x408f4000
 8003598:	2000235c 	.word	0x2000235c
                case DERIVACION_AVF:
                    g2_Derivacion2 = (ads_II_f + ads_III_f) / 2;
 800359c:	4b9b      	ldr	r3, [pc, #620]	; (800380c <tarea_GraficarECG_Loop+0x5a0>)
 800359e:	ed93 7a00 	vldr	s14, [r3]
 80035a2:	4b9b      	ldr	r3, [pc, #620]	; (8003810 <tarea_GraficarECG_Loop+0x5a4>)
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80035b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035b4:	4b97      	ldr	r3, [pc, #604]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 80035b6:	edc3 7a00 	vstr	s15, [r3]
                    break;
 80035ba:	e0ba      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_V1:
                    g2_Derivacion2 = (leerValorCanal (8) / ADS_RESOLUTION)
 80035bc:	2008      	movs	r0, #8
 80035be:	f7fd ff99 	bl	80014f4 <leerValorCanal>
 80035c2:	4603      	mov	r3, r0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ffad 	bl	8000524 <__aeabi_i2d>
 80035ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80035ce:	4b92      	ldr	r3, [pc, #584]	; (8003818 <tarea_GraficarECG_Loop+0x5ac>)
 80035d0:	f7fd f93c 	bl	800084c <__aeabi_ddiv>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
                    * ADS_MULT_OUT;
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	4b8e      	ldr	r3, [pc, #568]	; (800381c <tarea_GraficarECG_Loop+0x5b0>)
 80035e2:	f7fd f809 	bl	80005f8 <__aeabi_dmul>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fadb 	bl	8000ba8 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
                    g2_Derivacion2 = (leerValorCanal (8) / ADS_RESOLUTION)
 80035f4:	4a87      	ldr	r2, [pc, #540]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 80035f6:	6013      	str	r3, [r2, #0]
                    break;
 80035f8:	e09b      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_V2:
                    g2_Derivacion2 = (leerValorCanal (4) / ADS_RESOLUTION)
 80035fa:	2004      	movs	r0, #4
 80035fc:	f7fd ff7a 	bl	80014f4 <leerValorCanal>
 8003600:	4603      	mov	r3, r0
 8003602:	4618      	mov	r0, r3
 8003604:	f7fc ff8e 	bl	8000524 <__aeabi_i2d>
 8003608:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800360c:	4b82      	ldr	r3, [pc, #520]	; (8003818 <tarea_GraficarECG_Loop+0x5ac>)
 800360e:	f7fd f91d 	bl	800084c <__aeabi_ddiv>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
                    * ADS_MULT_OUT;
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	4b7f      	ldr	r3, [pc, #508]	; (800381c <tarea_GraficarECG_Loop+0x5b0>)
 8003620:	f7fc ffea 	bl	80005f8 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	f7fd fabc 	bl	8000ba8 <__aeabi_d2f>
 8003630:	4603      	mov	r3, r0
                    g2_Derivacion2 = (leerValorCanal (4) / ADS_RESOLUTION)
 8003632:	4a78      	ldr	r2, [pc, #480]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 8003634:	6013      	str	r3, [r2, #0]
                    break;
 8003636:	e07c      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_V3:
                    g2_Derivacion2 = (leerValorCanal (5) / ADS_RESOLUTION)
 8003638:	2005      	movs	r0, #5
 800363a:	f7fd ff5b 	bl	80014f4 <leerValorCanal>
 800363e:	4603      	mov	r3, r0
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc ff6f 	bl	8000524 <__aeabi_i2d>
 8003646:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800364a:	4b73      	ldr	r3, [pc, #460]	; (8003818 <tarea_GraficarECG_Loop+0x5ac>)
 800364c:	f7fd f8fe 	bl	800084c <__aeabi_ddiv>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4610      	mov	r0, r2
 8003656:	4619      	mov	r1, r3
                    * ADS_MULT_OUT;
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	4b6f      	ldr	r3, [pc, #444]	; (800381c <tarea_GraficarECG_Loop+0x5b0>)
 800365e:	f7fc ffcb 	bl	80005f8 <__aeabi_dmul>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	f7fd fa9d 	bl	8000ba8 <__aeabi_d2f>
 800366e:	4603      	mov	r3, r0
                    g2_Derivacion2 = (leerValorCanal (5) / ADS_RESOLUTION)
 8003670:	4a68      	ldr	r2, [pc, #416]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 8003672:	6013      	str	r3, [r2, #0]
                    break;
 8003674:	e05d      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_V4:
                    g2_Derivacion2 = (leerValorCanal (6) / ADS_RESOLUTION)
 8003676:	2006      	movs	r0, #6
 8003678:	f7fd ff3c 	bl	80014f4 <leerValorCanal>
 800367c:	4603      	mov	r3, r0
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff50 	bl	8000524 <__aeabi_i2d>
 8003684:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003688:	4b63      	ldr	r3, [pc, #396]	; (8003818 <tarea_GraficarECG_Loop+0x5ac>)
 800368a:	f7fd f8df 	bl	800084c <__aeabi_ddiv>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
                    * ADS_MULT_OUT;
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	4b60      	ldr	r3, [pc, #384]	; (800381c <tarea_GraficarECG_Loop+0x5b0>)
 800369c:	f7fc ffac 	bl	80005f8 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	f7fd fa7e 	bl	8000ba8 <__aeabi_d2f>
 80036ac:	4603      	mov	r3, r0
                    g2_Derivacion2 = (leerValorCanal (6) / ADS_RESOLUTION)
 80036ae:	4a59      	ldr	r2, [pc, #356]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 80036b0:	6013      	str	r3, [r2, #0]
                    break;
 80036b2:	e03e      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_V5:
                    g2_Derivacion2 = (leerValorCanal (7) / ADS_RESOLUTION)
 80036b4:	2007      	movs	r0, #7
 80036b6:	f7fd ff1d 	bl	80014f4 <leerValorCanal>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fc ff31 	bl	8000524 <__aeabi_i2d>
 80036c2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80036c6:	4b54      	ldr	r3, [pc, #336]	; (8003818 <tarea_GraficarECG_Loop+0x5ac>)
 80036c8:	f7fd f8c0 	bl	800084c <__aeabi_ddiv>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
                    * ADS_MULT_OUT;
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	4b50      	ldr	r3, [pc, #320]	; (800381c <tarea_GraficarECG_Loop+0x5b0>)
 80036da:	f7fc ff8d 	bl	80005f8 <__aeabi_dmul>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7fd fa5f 	bl	8000ba8 <__aeabi_d2f>
 80036ea:	4603      	mov	r3, r0
                    g2_Derivacion2 = (leerValorCanal (7) / ADS_RESOLUTION)
 80036ec:	4a49      	ldr	r2, [pc, #292]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 80036ee:	6013      	str	r3, [r2, #0]
                    break;
 80036f0:	e01f      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                case DERIVACION_V6:
                    g2_Derivacion2 = (leerValorCanal (1) / ADS_RESOLUTION)
 80036f2:	2001      	movs	r0, #1
 80036f4:	f7fd fefe 	bl	80014f4 <leerValorCanal>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc ff12 	bl	8000524 <__aeabi_i2d>
 8003700:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003704:	4b44      	ldr	r3, [pc, #272]	; (8003818 <tarea_GraficarECG_Loop+0x5ac>)
 8003706:	f7fd f8a1 	bl	800084c <__aeabi_ddiv>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
                    * ADS_MULT_OUT;
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	4b41      	ldr	r3, [pc, #260]	; (800381c <tarea_GraficarECG_Loop+0x5b0>)
 8003718:	f7fc ff6e 	bl	80005f8 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	f7fd fa40 	bl	8000ba8 <__aeabi_d2f>
 8003728:	4603      	mov	r3, r0
                    g2_Derivacion2 = (leerValorCanal (1) / ADS_RESOLUTION)
 800372a:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 800372c:	6013      	str	r3, [r2, #0]
                    break;
 800372e:	e000      	b.n	8003732 <tarea_GraficarECG_Loop+0x4c6>
                default:
                    break;
 8003730:	bf00      	nop
        }
    // Acá se tiene el primer valor de las derivaciones a graficar
    // Ahora se deben de filtrar en caso de ser necesario
    // Retraso máximo: FILTRO_RESP_ORDEN 128 [0.64seg]
    //Selección del filtro a utilizar para ECG 1:
    if (derivacionesAGraficar.ecg_FiltroG1 == FILTRO_NULL)
 8003732:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <tarea_GraficarECG_Loop+0x5b4>)
 8003734:	789b      	ldrb	r3, [r3, #2]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <tarea_GraficarECG_Loop+0x4d8>
        {

            //arm_fir_f32 (&filtro60Hz1_Instancia, &g1_Derivacion1, &graph1, FILTRO_ECG_TAM_BLOQUE);
            graph1 = g1_Derivacion1;
 800373a:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <tarea_GraficarECG_Loop+0x5b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a3a      	ldr	r2, [pc, #232]	; (8003828 <tarea_GraficarECG_Loop+0x5bc>)
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e01f      	b.n	8003784 <tarea_GraficarECG_Loop+0x518>

        }
    else if (derivacionesAGraficar.ecg_FiltroG1 == FILTRO_DIAGNOSTICO)
 8003744:	4b36      	ldr	r3, [pc, #216]	; (8003820 <tarea_GraficarECG_Loop+0x5b4>)
 8003746:	789b      	ldrb	r3, [r3, #2]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d106      	bne.n	800375a <tarea_GraficarECG_Loop+0x4ee>
        {
            arm_fir_f32 (&filtroDiag1_Instancia, // Instancia de filtro
 800374c:	2301      	movs	r3, #1
 800374e:	4a36      	ldr	r2, [pc, #216]	; (8003828 <tarea_GraficarECG_Loop+0x5bc>)
 8003750:	4934      	ldr	r1, [pc, #208]	; (8003824 <tarea_GraficarECG_Loop+0x5b8>)
 8003752:	4836      	ldr	r0, [pc, #216]	; (800382c <tarea_GraficarECG_Loop+0x5c0>)
 8003754:	f011 fd2e 	bl	80151b4 <arm_fir_f32>
 8003758:	e014      	b.n	8003784 <tarea_GraficarECG_Loop+0x518>
                         &g1_Derivacion1,        // Dato de entrada
                         &graph1,                // Dato de salida
                         FILTRO_ECG_TAM_BLOQUE); // Tamaño de bloque
        }
    else if (derivacionesAGraficar.ecg_FiltroG1 == FILTRO_MONITOR)
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <tarea_GraficarECG_Loop+0x5b4>)
 800375c:	789b      	ldrb	r3, [r3, #2]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d106      	bne.n	8003770 <tarea_GraficarECG_Loop+0x504>
        {
            arm_fir_f32 (&filtroMoni1_Instancia, &g1_Derivacion1, &graph1, FILTRO_ECG_TAM_BLOQUE);
 8003762:	2301      	movs	r3, #1
 8003764:	4a30      	ldr	r2, [pc, #192]	; (8003828 <tarea_GraficarECG_Loop+0x5bc>)
 8003766:	492f      	ldr	r1, [pc, #188]	; (8003824 <tarea_GraficarECG_Loop+0x5b8>)
 8003768:	4831      	ldr	r0, [pc, #196]	; (8003830 <tarea_GraficarECG_Loop+0x5c4>)
 800376a:	f011 fd23 	bl	80151b4 <arm_fir_f32>
 800376e:	e009      	b.n	8003784 <tarea_GraficarECG_Loop+0x518>
        }
    else if (derivacionesAGraficar.ecg_FiltroG1 == FILTRO_MAXIMO)
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <tarea_GraficarECG_Loop+0x5b4>)
 8003772:	789b      	ldrb	r3, [r3, #2]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d105      	bne.n	8003784 <tarea_GraficarECG_Loop+0x518>
        {
            arm_fir_f32 (&filtroMaxi1_Instancia, &g1_Derivacion1, &graph1, FILTRO_ECG_TAM_BLOQUE);
 8003778:	2301      	movs	r3, #1
 800377a:	4a2b      	ldr	r2, [pc, #172]	; (8003828 <tarea_GraficarECG_Loop+0x5bc>)
 800377c:	4929      	ldr	r1, [pc, #164]	; (8003824 <tarea_GraficarECG_Loop+0x5b8>)
 800377e:	482d      	ldr	r0, [pc, #180]	; (8003834 <tarea_GraficarECG_Loop+0x5c8>)
 8003780:	f011 fd18 	bl	80151b4 <arm_fir_f32>
        }
    //Selección del filtro a utilizar para ECG 2:
    if (derivacionesAGraficar.ecg_FiltroG2 == FILTRO_NULL)
 8003784:	4b26      	ldr	r3, [pc, #152]	; (8003820 <tarea_GraficarECG_Loop+0x5b4>)
 8003786:	78db      	ldrb	r3, [r3, #3]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <tarea_GraficarECG_Loop+0x52a>
        {
            //arm_fir_f32 (&filtro60Hz2_Instancia, &g2_Derivacion2, &graph2, FILTRO_ECG_TAM_BLOQUE);
            graph2 = g2_Derivacion2;
 800378c:	4b21      	ldr	r3, [pc, #132]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a29      	ldr	r2, [pc, #164]	; (8003838 <tarea_GraficarECG_Loop+0x5cc>)
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	e01f      	b.n	80037d6 <tarea_GraficarECG_Loop+0x56a>

        }
    else if (derivacionesAGraficar.ecg_FiltroG2 == FILTRO_DIAGNOSTICO)
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <tarea_GraficarECG_Loop+0x5b4>)
 8003798:	78db      	ldrb	r3, [r3, #3]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d106      	bne.n	80037ac <tarea_GraficarECG_Loop+0x540>
        {
            arm_fir_f32 (&filtroDiag2_Instancia, &g2_Derivacion2, &graph2, FILTRO_ECG_TAM_BLOQUE);
 800379e:	2301      	movs	r3, #1
 80037a0:	4a25      	ldr	r2, [pc, #148]	; (8003838 <tarea_GraficarECG_Loop+0x5cc>)
 80037a2:	491c      	ldr	r1, [pc, #112]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 80037a4:	4825      	ldr	r0, [pc, #148]	; (800383c <tarea_GraficarECG_Loop+0x5d0>)
 80037a6:	f011 fd05 	bl	80151b4 <arm_fir_f32>
 80037aa:	e014      	b.n	80037d6 <tarea_GraficarECG_Loop+0x56a>
        }
    else if (derivacionesAGraficar.ecg_FiltroG2 == FILTRO_MONITOR)
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <tarea_GraficarECG_Loop+0x5b4>)
 80037ae:	78db      	ldrb	r3, [r3, #3]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d106      	bne.n	80037c2 <tarea_GraficarECG_Loop+0x556>
        {
            arm_fir_f32 (&filtroMoni2_Instancia, &g2_Derivacion2, &graph2, FILTRO_ECG_TAM_BLOQUE);
 80037b4:	2301      	movs	r3, #1
 80037b6:	4a20      	ldr	r2, [pc, #128]	; (8003838 <tarea_GraficarECG_Loop+0x5cc>)
 80037b8:	4916      	ldr	r1, [pc, #88]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 80037ba:	4821      	ldr	r0, [pc, #132]	; (8003840 <tarea_GraficarECG_Loop+0x5d4>)
 80037bc:	f011 fcfa 	bl	80151b4 <arm_fir_f32>
 80037c0:	e009      	b.n	80037d6 <tarea_GraficarECG_Loop+0x56a>
        }
    else if (derivacionesAGraficar.ecg_FiltroG2 == FILTRO_MAXIMO)
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <tarea_GraficarECG_Loop+0x5b4>)
 80037c4:	78db      	ldrb	r3, [r3, #3]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d105      	bne.n	80037d6 <tarea_GraficarECG_Loop+0x56a>
        {
            arm_fir_f32 (&filtroMaxi2_Instancia, &g2_Derivacion2, &graph2, FILTRO_ECG_TAM_BLOQUE);
 80037ca:	2301      	movs	r3, #1
 80037cc:	4a1a      	ldr	r2, [pc, #104]	; (8003838 <tarea_GraficarECG_Loop+0x5cc>)
 80037ce:	4911      	ldr	r1, [pc, #68]	; (8003814 <tarea_GraficarECG_Loop+0x5a8>)
 80037d0:	481c      	ldr	r0, [pc, #112]	; (8003844 <tarea_GraficarECG_Loop+0x5d8>)
 80037d2:	f011 fcef 	bl	80151b4 <arm_fir_f32>
        }
    // Muestreo original 500 sps, omitir 1 muestra para lograr un envío de 250 sps
    if (!omitirMuestra)
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <tarea_GraficarECG_Loop+0x5dc>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d111      	bne.n	8003802 <tarea_GraficarECG_Loop+0x596>
        {
            omitirMuestra = true;
 80037de:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <tarea_GraficarECG_Loop+0x5dc>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	701a      	strb	r2, [r3, #0]
            xQueueSend(ecgGraph1Handle,&graph1, 0);
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <tarea_GraficarECG_Loop+0x5e0>)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	2300      	movs	r3, #0
 80037ea:	2200      	movs	r2, #0
 80037ec:	490e      	ldr	r1, [pc, #56]	; (8003828 <tarea_GraficarECG_Loop+0x5bc>)
 80037ee:	f00e fa41 	bl	8011c74 <xQueueGenericSend>
            xQueueSend(ecgGraph2Handle,&graph2, 0);
 80037f2:	4b17      	ldr	r3, [pc, #92]	; (8003850 <tarea_GraficarECG_Loop+0x5e4>)
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	2200      	movs	r2, #0
 80037fa:	490f      	ldr	r1, [pc, #60]	; (8003838 <tarea_GraficarECG_Loop+0x5cc>)
 80037fc:	f00e fa3a 	bl	8011c74 <xQueueGenericSend>
        }
    else
        {
            omitirMuestra = false;
        }
}
 8003800:	e002      	b.n	8003808 <tarea_GraficarECG_Loop+0x59c>
            omitirMuestra = false;
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <tarea_GraficarECG_Loop+0x5dc>)
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
}
 8003808:	bf00      	nop
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200015f0 	.word	0x200015f0
 8003810:	200015f4 	.word	0x200015f4
 8003814:	2000235c 	.word	0x2000235c
 8003818:	415fffff 	.word	0x415fffff
 800381c:	408f4000 	.word	0x408f4000
 8003820:	200015c4 	.word	0x200015c4
 8003824:	20002358 	.word	0x20002358
 8003828:	20002350 	.word	0x20002350
 800382c:	20002364 	.word	0x20002364
 8003830:	20002370 	.word	0x20002370
 8003834:	2000237c 	.word	0x2000237c
 8003838:	20002354 	.word	0x20002354
 800383c:	20002394 	.word	0x20002394
 8003840:	200023a0 	.word	0x200023a0
 8003844:	200023ac 	.word	0x200023ac
 8003848:	20002360 	.word	0x20002360
 800384c:	20001660 	.word	0x20001660
 8003850:	20001664 	.word	0x20001664

08003854 <tarea_LeerADS_Setup>:


/* Private application code --------------------------------------------------*/

void tarea_LeerADS_Setup(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
//    HAL_TIM_Base_Start (&htim13);
//    osDelay(500);
//    ads_Init();
//    timeMark = HAL_GetTick();
	debug_ads=800;
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <tarea_LeerADS_Setup+0x58>)
 800385a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800385e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start (&htim13);
 8003860:	4813      	ldr	r0, [pc, #76]	; (80038b0 <tarea_LeerADS_Setup+0x5c>)
 8003862:	f006 ff2b 	bl	800a6bc <HAL_TIM_Base_Start>
	osDelay(160);                  // POR 128ms  (Typ: 2^18 x Tclk)
 8003866:	20a0      	movs	r0, #160	; 0xa0
 8003868:	f00d febf 	bl	80115ea <osDelay>
	ads_Init();                    // Establece la referencia interna por primera vez, establece electrodos
 800386c:	f7fd fe7c 	bl	8001568 <ads_Init>
	debug_ads=801;
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <tarea_LeerADS_Setup+0x58>)
 8003872:	f240 3221 	movw	r2, #801	; 0x321
 8003876:	601a      	str	r2, [r3, #0]
	osDelay(160);                  // Start-up-time referencia interna.
 8003878:	20a0      	movs	r0, #160	; 0xa0
 800387a:	f00d feb6 	bl	80115ea <osDelay>
	//ads_Init();                  // Configurar canales (otra vez)
	ads_Start();                   // Lecturas basura
 800387e:	f7fd fee3 	bl	8001648 <ads_Start>
	debug_ads=802;
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <tarea_LeerADS_Setup+0x58>)
 8003884:	f240 3222 	movw	r2, #802	; 0x322
 8003888:	601a      	str	r2, [r3, #0]
	//flag_MSV_graficar = true;
	osDelay(200);                  // Descartar basura del ADS durante 160ms
 800388a:	20c8      	movs	r0, #200	; 0xc8
 800388c:	f00d fead 	bl	80115ea <osDelay>
	ads_Stop();                    // Detener el ADS
 8003890:	f7fd ff20 	bl	80016d4 <ads_Stop>
	debug_ads=803;
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <tarea_LeerADS_Setup+0x58>)
 8003896:	f240 3223 	movw	r2, #803	; 0x323
 800389a:	601a      	str	r2, [r3, #0]
	timeMark = HAL_GetTick();
 800389c:	f002 fa24 	bl	8005ce8 <HAL_GetTick>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <tarea_LeerADS_Setup+0x60>)
 80038a4:	6013      	str	r3, [r2, #0]
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	2000000c 	.word	0x2000000c
 80038b0:	2000485c 	.word	0x2000485c
 80038b4:	200033e8 	.word	0x200033e8

080038b8 <tarea_LeerADS_Loop>:

// las interrupciones deben ser cada 2ms (500sps)
void tarea_LeerADS_Loop(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
	debug_ads=100;
 80038be:	4bb0      	ldr	r3, [pc, #704]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 80038c0:	2264      	movs	r2, #100	; 0x64
 80038c2:	601a      	str	r2, [r3, #0]
	//    while(!flag_MSV_graficar)
	//        {
	//            debug_ads=101;
	//            osDelay(50);
	//        }
	if (!flag_MSV_graficar) //La función entró, pero no se debe graficar. Simplemente salimos
 80038c4:	4baf      	ldr	r3, [pc, #700]	; (8003b84 <tarea_LeerADS_Loop+0x2cc>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d103      	bne.n	80038d4 <tarea_LeerADS_Loop+0x1c>
	{
		debug_ads=101;
 80038cc:	4bac      	ldr	r3, [pc, #688]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 80038ce:	2265      	movs	r2, #101	; 0x65
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e1bb      	b.n	8003c4c <tarea_LeerADS_Loop+0x394>
	}
	else // Entramos y si se debe graficar, realizamos todo el proceso
	{
		debug_ads=102;
 80038d4:	4baa      	ldr	r3, [pc, #680]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 80038d6:	2266      	movs	r2, #102	; 0x66
 80038d8:	601a      	str	r2, [r3, #0]
		bool tmp_stat = ads_IntStat (); //Conocer el estado de la interrupción del ADS
 80038da:	f7fd ff67 	bl	80017ac <ads_IntStat>
 80038de:	4603      	mov	r3, r0
 80038e0:	77fb      	strb	r3, [r7, #31]
		while (!tmp_stat) // Si no se ha activado la interrupción
 80038e2:	e02a      	b.n	800393a <tarea_LeerADS_Loop+0x82>
		{
			debug_ads=103;
 80038e4:	4ba6      	ldr	r3, [pc, #664]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 80038e6:	2267      	movs	r2, #103	; 0x67
 80038e8:	601a      	str	r2, [r3, #0]
			// Esperamos a que se active la interrupción, mientras tanto ejecutamos una
			// sub-tarea tipo watch-dog
			adsWDCnt++; // Contador que indica (aproximadamente) cuantos ms han pasado desde la última lectura
 80038ea:	4ba7      	ldr	r3, [pc, #668]	; (8003b88 <tarea_LeerADS_Loop+0x2d0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3301      	adds	r3, #1
 80038f0:	4aa5      	ldr	r2, [pc, #660]	; (8003b88 <tarea_LeerADS_Loop+0x2d0>)
 80038f2:	6013      	str	r3, [r2, #0]
			if(adsWDCnt > 5) // Mas de 5ms sin lecturas del ADS, aplicar reset
 80038f4:	4ba4      	ldr	r3, [pc, #656]	; (8003b88 <tarea_LeerADS_Loop+0x2d0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	d914      	bls.n	8003926 <tarea_LeerADS_Loop+0x6e>
			{
				debug_ads=104;
 80038fc:	4ba0      	ldr	r3, [pc, #640]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 80038fe:	2268      	movs	r2, #104	; 0x68
 8003900:	601a      	str	r2, [r3, #0]
				adsWDCnt = 0;
 8003902:	4ba1      	ldr	r3, [pc, #644]	; (8003b88 <tarea_LeerADS_Loop+0x2d0>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
				flag_MSV_graficar = false;      // Evitar interrupciones
 8003908:	4b9e      	ldr	r3, [pc, #632]	; (8003b84 <tarea_LeerADS_Loop+0x2cc>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
				ads_Init();                     // Inicializar nuevamente el ADS
 800390e:	f7fd fe2b 	bl	8001568 <ads_Init>
				error_cnt = -1;
 8003912:	4b9e      	ldr	r3, [pc, #632]	; (8003b8c <tarea_LeerADS_Loop+0x2d4>)
 8003914:	f04f 32ff 	mov.w	r2, #4294967295
 8003918:	601a      	str	r2, [r3, #0]
				ads_Start ();                   // Iniciar las lecturas otra vez
 800391a:	f7fd fe95 	bl	8001648 <ads_Start>
				flag_MSV_graficar = true;       // Volver a habilitar interrupciones y lecturas del ADS
 800391e:	4b99      	ldr	r3, [pc, #612]	; (8003b84 <tarea_LeerADS_Loop+0x2cc>)
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e009      	b.n	800393a <tarea_LeerADS_Loop+0x82>
			}
			else //No se ha disparado el watchdog
			{
				debug_ads=105;
 8003926:	4b96      	ldr	r3, [pc, #600]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 8003928:	2269      	movs	r2, #105	; 0x69
 800392a:	601a      	str	r2, [r3, #0]
				osDelay(1);                  // Esperar hasta el seguiente systick
 800392c:	2001      	movs	r0, #1
 800392e:	f00d fe5c 	bl	80115ea <osDelay>
				tmp_stat = ads_IntStat ();   // Comprobar el estado de la interrupción del ADS
 8003932:	f7fd ff3b 	bl	80017ac <ads_IntStat>
 8003936:	4603      	mov	r3, r0
 8003938:	77fb      	strb	r3, [r7, #31]
		while (!tmp_stat) // Si no se ha activado la interrupción
 800393a:	7ffb      	ldrb	r3, [r7, #31]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0d1      	beq.n	80038e4 <tarea_LeerADS_Loop+0x2c>
			}
		}
		// Si salimos del bucle ya sea de modo normal o por el reset del ads
		// reiniciamos el contador.
		debug_ads=106;
 8003940:	4b8f      	ldr	r3, [pc, #572]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 8003942:	226a      	movs	r2, #106	; 0x6a
 8003944:	601a      	str	r2, [r3, #0]
		adsWDCnt = 0;
 8003946:	4b90      	ldr	r3, [pc, #576]	; (8003b88 <tarea_LeerADS_Loop+0x2d0>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]


		lecturaContinuaDatosAds (); //Dato leído
 800394c:	f7fd fd24 	bl	8001398 <lecturaContinuaDatosAds>
		ads_IntFalse();
 8003950:	f7fd ff20 	bl	8001794 <ads_IntFalse>

		debug_ads=107;
 8003954:	4b8a      	ldr	r3, [pc, #552]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 8003956:	226b      	movs	r2, #107	; 0x6b
 8003958:	601a      	str	r2, [r3, #0]
		//Valores Raw para normalización
		////////////filtro//////////////////////////
		aux_ads_I_i = leerValorCanal (2);
 800395a:	2002      	movs	r0, #2
 800395c:	f7fd fdca 	bl	80014f4 <leerValorCanal>
 8003960:	4603      	mov	r3, r0
 8003962:	4a8b      	ldr	r2, [pc, #556]	; (8003b90 <tarea_LeerADS_Loop+0x2d8>)
 8003964:	6013      	str	r3, [r2, #0]
		ads_II_i = leerValorCanal (3);
 8003966:	2003      	movs	r0, #3
 8003968:	f7fd fdc4 	bl	80014f4 <leerValorCanal>
 800396c:	4603      	mov	r3, r0
 800396e:	4a89      	ldr	r2, [pc, #548]	; (8003b94 <tarea_LeerADS_Loop+0x2dc>)
 8003970:	6013      	str	r3, [r2, #0]
		float filtered_I = prevFiltered_I + (filter(cutoff_I) * ((float)aux_ads_I_i - prevFiltered_I));
 8003972:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <tarea_LeerADS_Loop+0x2e0>)
 8003974:	edd3 7a00 	vldr	s15, [r3]
 8003978:	eeb0 0a67 	vmov.f32	s0, s15
 800397c:	f000 fd58 	bl	8004430 <filter>
 8003980:	eef0 6a40 	vmov.f32	s13, s0
 8003984:	4b82      	ldr	r3, [pc, #520]	; (8003b90 <tarea_LeerADS_Loop+0x2d8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003990:	4b82      	ldr	r3, [pc, #520]	; (8003b9c <tarea_LeerADS_Loop+0x2e4>)
 8003992:	edd3 7a00 	vldr	s15, [r3]
 8003996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800399a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800399e:	4b7f      	ldr	r3, [pc, #508]	; (8003b9c <tarea_LeerADS_Loop+0x2e4>)
 80039a0:	edd3 7a00 	vldr	s15, [r3]
 80039a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a8:	edc7 7a01 	vstr	s15, [r7, #4]
		filteredData_I= (int)filtered_I;
 80039ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b4:	ee17 2a90 	vmov	r2, s15
 80039b8:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <tarea_LeerADS_Loop+0x2e8>)
 80039ba:	601a      	str	r2, [r3, #0]
		prevFiltered_I = filtered_I;
 80039bc:	4a77      	ldr	r2, [pc, #476]	; (8003b9c <tarea_LeerADS_Loop+0x2e4>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6013      	str	r3, [r2, #0]
		ads_I_i = filteredData_I;
 80039c2:	4b77      	ldr	r3, [pc, #476]	; (8003ba0 <tarea_LeerADS_Loop+0x2e8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a77      	ldr	r2, [pc, #476]	; (8003ba4 <tarea_LeerADS_Loop+0x2ec>)
 80039c8:	6013      	str	r3, [r2, #0]
		/////////////////////////////////////////// modificado para respiración 31/07/2023
		in_Resp_500 = leerValorCanal (1);
 80039ca:	2001      	movs	r0, #1
 80039cc:	f7fd fd92 	bl	80014f4 <leerValorCanal>
 80039d0:	4603      	mov	r3, r0
 80039d2:	4a75      	ldr	r2, [pc, #468]	; (8003ba8 <tarea_LeerADS_Loop+0x2f0>)
 80039d4:	6013      	str	r3, [r2, #0]
		array_rawRes[counter100sps] = in_Resp_500;
 80039d6:	4b75      	ldr	r3, [pc, #468]	; (8003bac <tarea_LeerADS_Loop+0x2f4>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	4619      	mov	r1, r3
 80039dc:	4b72      	ldr	r3, [pc, #456]	; (8003ba8 <tarea_LeerADS_Loop+0x2f0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a73      	ldr	r2, [pc, #460]	; (8003bb0 <tarea_LeerADS_Loop+0x2f8>)
 80039e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		counter100sps++;
 80039e6:	4b71      	ldr	r3, [pc, #452]	; (8003bac <tarea_LeerADS_Loop+0x2f4>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	4b6f      	ldr	r3, [pc, #444]	; (8003bac <tarea_LeerADS_Loop+0x2f4>)
 80039f0:	701a      	strb	r2, [r3, #0]
		////////////filtro//////////////////////////
		//Flotante en mV. El 6.0 es la ganancia del ADS.
		ads_I_f = ((ads_I_i/ ADS_RESOLUTION) * ADS_MULT_OUT) / 6.0;
 80039f2:	4b6c      	ldr	r3, [pc, #432]	; (8003ba4 <tarea_LeerADS_Loop+0x2ec>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fc fd94 	bl	8000524 <__aeabi_i2d>
 80039fc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003a00:	4b6c      	ldr	r3, [pc, #432]	; (8003bb4 <tarea_LeerADS_Loop+0x2fc>)
 8003a02:	f7fc ff23 	bl	800084c <__aeabi_ddiv>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	4b69      	ldr	r3, [pc, #420]	; (8003bb8 <tarea_LeerADS_Loop+0x300>)
 8003a14:	f7fc fdf0 	bl	80005f8 <__aeabi_dmul>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	4b65      	ldr	r3, [pc, #404]	; (8003bbc <tarea_LeerADS_Loop+0x304>)
 8003a26:	f7fc ff11 	bl	800084c <__aeabi_ddiv>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7fd f8b9 	bl	8000ba8 <__aeabi_d2f>
 8003a36:	4603      	mov	r3, r0
 8003a38:	4a61      	ldr	r2, [pc, #388]	; (8003bc0 <tarea_LeerADS_Loop+0x308>)
 8003a3a:	6013      	str	r3, [r2, #0]
		ads_II_f = ((ads_II_i/ ADS_RESOLUTION) * ADS_MULT_OUT) / 6.0;
 8003a3c:	4b55      	ldr	r3, [pc, #340]	; (8003b94 <tarea_LeerADS_Loop+0x2dc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fd6f 	bl	8000524 <__aeabi_i2d>
 8003a46:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003a4a:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <tarea_LeerADS_Loop+0x2fc>)
 8003a4c:	f7fc fefe 	bl	800084c <__aeabi_ddiv>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	4b56      	ldr	r3, [pc, #344]	; (8003bb8 <tarea_LeerADS_Loop+0x300>)
 8003a5e:	f7fc fdcb 	bl	80005f8 <__aeabi_dmul>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <tarea_LeerADS_Loop+0x304>)
 8003a70:	f7fc feec 	bl	800084c <__aeabi_ddiv>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7fd f894 	bl	8000ba8 <__aeabi_d2f>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a50      	ldr	r2, [pc, #320]	; (8003bc4 <tarea_LeerADS_Loop+0x30c>)
 8003a84:	6013      	str	r3, [r2, #0]
		ads_III_f = ads_II_f - ads_I_f;
 8003a86:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <tarea_LeerADS_Loop+0x30c>)
 8003a88:	ed93 7a00 	vldr	s14, [r3]
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <tarea_LeerADS_Loop+0x308>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a96:	4b4c      	ldr	r3, [pc, #304]	; (8003bc8 <tarea_LeerADS_Loop+0x310>)
 8003a98:	edc3 7a00 	vstr	s15, [r3]

		//Los valores de ECG se requieren a 500 sps para los filtros, la graficación será a 250 sps
		osSignalSet(GraficarECGHandle, 1); //tarea1
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <tarea_LeerADS_Loop+0x314>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f00d fe2e 	bl	8011704 <osSignalSet>

		// Esta bandera genera muestras a 250 sps, podemos repartir el tiempo:
		// la mitad del tiempo para Normalización y la otra mitad para calculo de frecuencia cardiaca
		// ya que tienen la misma velocidad de muestreo, así no interfieren la una con la otra
		if(flag_250sps)
 8003aa8:	4b49      	ldr	r3, [pc, #292]	; (8003bd0 <tarea_LeerADS_Loop+0x318>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d012      	beq.n	8003ad6 <tarea_LeerADS_Loop+0x21e>
		{ // Normalización
			debug_ads=108;
 8003ab0:	4b33      	ldr	r3, [pc, #204]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 8003ab2:	226c      	movs	r2, #108	; 0x6c
 8003ab4:	601a      	str	r2, [r3, #0]
			flag_250sps = false;
 8003ab6:	4b46      	ldr	r3, [pc, #280]	; (8003bd0 <tarea_LeerADS_Loop+0x318>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
			osSignalSet(NormalizacionHandle, 1);
 8003abc:	4b45      	ldr	r3, [pc, #276]	; (8003bd4 <tarea_LeerADS_Loop+0x31c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f00d fe1e 	bl	8011704 <osSignalSet>
			osSignalSet(CalcularOffsetHandle, 1);
 8003ac8:	4b43      	ldr	r3, [pc, #268]	; (8003bd8 <tarea_LeerADS_Loop+0x320>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f00d fe18 	bl	8011704 <osSignalSet>
 8003ad4:	e00b      	b.n	8003aee <tarea_LeerADS_Loop+0x236>
		}
		else
		{ // Frecuencia cardiaca
			debug_ads=109;
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 8003ad8:	226d      	movs	r2, #109	; 0x6d
 8003ada:	601a      	str	r2, [r3, #0]
			flag_250sps = true;
 8003adc:	4b3c      	ldr	r3, [pc, #240]	; (8003bd0 <tarea_LeerADS_Loop+0x318>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
			osSignalSet(FrecuenciaCardiacaHandle, 1);
 8003ae2:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <tarea_LeerADS_Loop+0x324>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f00d fe0b 	bl	8011704 <osSignalSet>
		}
		// respiración 100 sps (omitir 4 muestras)
		if (counter100sps > 4)
 8003aee:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <tarea_LeerADS_Loop+0x2f4>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	f240 8093 	bls.w	8003c1e <tarea_LeerADS_Loop+0x366>
		{
			int32_t max_rawRes = -100000;
 8003af8:	4b39      	ldr	r3, [pc, #228]	; (8003be0 <tarea_LeerADS_Loop+0x328>)
 8003afa:	61bb      	str	r3, [r7, #24]
			int32_t min_rawRes = 100000000;
 8003afc:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <tarea_LeerADS_Loop+0x32c>)
 8003afe:	617b      	str	r3, [r7, #20]
			int32_t suma_rawRes = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
			debug_ads=110;
 8003b04:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <tarea_LeerADS_Loop+0x2c8>)
 8003b06:	226e      	movs	r2, #110	; 0x6e
 8003b08:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 5; k++)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	e021      	b.n	8003b54 <tarea_LeerADS_Loop+0x29c>
			{
				if(array_rawRes[k] > max_rawRes)
 8003b10:	4a27      	ldr	r2, [pc, #156]	; (8003bb0 <tarea_LeerADS_Loop+0x2f8>)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	da04      	bge.n	8003b28 <tarea_LeerADS_Loop+0x270>
					max_rawRes = array_rawRes[k];
 8003b1e:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <tarea_LeerADS_Loop+0x2f8>)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b26:	61bb      	str	r3, [r7, #24]
				if(array_rawRes[k] < min_rawRes)
 8003b28:	4a21      	ldr	r2, [pc, #132]	; (8003bb0 <tarea_LeerADS_Loop+0x2f8>)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	dd04      	ble.n	8003b40 <tarea_LeerADS_Loop+0x288>
					min_rawRes = array_rawRes[k];
 8003b36:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <tarea_LeerADS_Loop+0x2f8>)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	617b      	str	r3, [r7, #20]
				suma_rawRes += array_rawRes[k];
 8003b40:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <tarea_LeerADS_Loop+0x2f8>)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
			for (int k = 0; k < 5; k++)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3301      	adds	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	ddda      	ble.n	8003b10 <tarea_LeerADS_Loop+0x258>
			}
			aux_Resp = (suma_rawRes - max_rawRes - min_rawRes)  / 3;     // modificado 01/09/2023
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	1ad2      	subs	r2, r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	4a20      	ldr	r2, [pc, #128]	; (8003be8 <tarea_LeerADS_Loop+0x330>)
 8003b66:	fb82 1203 	smull	r1, r2, r2, r3
 8003b6a:	17db      	asrs	r3, r3, #31
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <tarea_LeerADS_Loop+0x334>)
 8003b70:	6013      	str	r3, [r2, #0]
			counter100sps = 0;
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <tarea_LeerADS_Loop+0x2f4>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
			for (int ki = 0; ki < 5; ki++)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	e040      	b.n	8003c00 <tarea_LeerADS_Loop+0x348>
 8003b7e:	bf00      	nop
 8003b80:	2000000c 	.word	0x2000000c
 8003b84:	200015c1 	.word	0x200015c1
 8003b88:	200033ec 	.word	0x200033ec
 8003b8c:	20001634 	.word	0x20001634
 8003b90:	200033f8 	.word	0x200033f8
 8003b94:	200015e8 	.word	0x200015e8
 8003b98:	20001088 	.word	0x20001088
 8003b9c:	200033f0 	.word	0x200033f0
 8003ba0:	200033f4 	.word	0x200033f4
 8003ba4:	200015e4 	.word	0x200015e4
 8003ba8:	20003400 	.word	0x20003400
 8003bac:	200033e4 	.word	0x200033e4
 8003bb0:	20003404 	.word	0x20003404
 8003bb4:	415fffff 	.word	0x415fffff
 8003bb8:	408f4000 	.word	0x408f4000
 8003bbc:	40180000 	.word	0x40180000
 8003bc0:	200015ec 	.word	0x200015ec
 8003bc4:	200015f0 	.word	0x200015f0
 8003bc8:	200015f4 	.word	0x200015f4
 8003bcc:	20001638 	.word	0x20001638
 8003bd0:	200033e5 	.word	0x200033e5
 8003bd4:	20001648 	.word	0x20001648
 8003bd8:	2000165c 	.word	0x2000165c
 8003bdc:	20001658 	.word	0x20001658
 8003be0:	fffe7960 	.word	0xfffe7960
 8003be4:	05f5e100 	.word	0x05f5e100
 8003be8:	55555556 	.word	0x55555556
 8003bec:	200033fc 	.word	0x200033fc
				array_rawRes[ki] = 0;
 8003bf0:	4a1a      	ldr	r2, [pc, #104]	; (8003c5c <tarea_LeerADS_Loop+0x3a4>)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int ki = 0; ki < 5; ki++)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	ddf4      	ble.n	8003bf0 <tarea_LeerADS_Loop+0x338>

			ads_Resp_int = aux_Resp & 0X00003FFF;
 8003c06:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <tarea_LeerADS_Loop+0x3a8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003c0e:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <tarea_LeerADS_Loop+0x3ac>)
 8003c10:	6013      	str	r3, [r2, #0]
			osSignalSet(RespiracionHandle, 1);
 8003c12:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <tarea_LeerADS_Loop+0x3b0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f00d fd73 	bl	8011704 <osSignalSet>
		}
		//Revisar electrodos. Me aseguro de que no lea el valor del ADS cuando se está escribiendo
		if((HAL_GetTick() - timeMark ) > REV_ELEC_TIME )
 8003c1e:	f002 f863 	bl	8005ce8 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <tarea_LeerADS_Loop+0x3b4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c2e:	d30d      	bcc.n	8003c4c <tarea_LeerADS_Loop+0x394>
		{
			debug_ads=111;
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <tarea_LeerADS_Loop+0x3b8>)
 8003c32:	226f      	movs	r2, #111	; 0x6f
 8003c34:	601a      	str	r2, [r3, #0]
			timeMark = HAL_GetTick();
 8003c36:	f002 f857 	bl	8005ce8 <HAL_GetTick>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <tarea_LeerADS_Loop+0x3b4>)
 8003c3e:	6013      	str	r3, [r2, #0]
			osSignalSet(RevisarElectrodosHandle, 1);
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <tarea_LeerADS_Loop+0x3bc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	4618      	mov	r0, r3
 8003c48:	f00d fd5c 	bl	8011704 <osSignalSet>
		}
	}
	debug_ads=120;
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <tarea_LeerADS_Loop+0x3b8>)
 8003c4e:	2278      	movs	r2, #120	; 0x78
 8003c50:	601a      	str	r2, [r3, #0]

}
 8003c52:	bf00      	nop
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20003404 	.word	0x20003404
 8003c60:	200033fc 	.word	0x200033fc
 8003c64:	200015f8 	.word	0x200015f8
 8003c68:	20001654 	.word	0x20001654
 8003c6c:	200033e8 	.word	0x200033e8
 8003c70:	2000000c 	.word	0x2000000c
 8003c74:	20001640 	.word	0x20001640

08003c78 <tarea_Normalizacion_Setup>:
/*   Normalizacion definido en tarea 5
 Necesita las variables de int 32 del adc 2 y 3 que corresponden a las derivaciones I y II
 Tiene como salida que va al analizador de arritmias por usart2 con un vector Dato_2 que convierte los int32 en uint8 para su envió
 */
void tarea_Normalizacion_Setup(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0

}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <tarea_Normalizacion_Loop>:

int32_t DerivadaNormFuncion_I (int derivacion);
int32_t DerivadaNormFuncion_II (int derivacion);

void tarea_Normalizacion_Loop(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
    /////////////////////////////////////////inicio filtro
    /*
    aux_1 = ads_I_i;
    aux_2 = ads_II_i;
    ////////////////////////////////////////////////////////////////////////////*/
    data_I  = ads_I_i;
 8003c8e:	4b91      	ldr	r3, [pc, #580]	; (8003ed4 <tarea_Normalizacion_Loop+0x24c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a91      	ldr	r2, [pc, #580]	; (8003ed8 <tarea_Normalizacion_Loop+0x250>)
 8003c94:	6013      	str	r3, [r2, #0]
    data_II  = ads_II_i;
 8003c96:	4b91      	ldr	r3, [pc, #580]	; (8003edc <tarea_Normalizacion_Loop+0x254>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a91      	ldr	r2, [pc, #580]	; (8003ee0 <tarea_Normalizacion_Loop+0x258>)
 8003c9c:	6013      	str	r3, [r2, #0]
    //aux_2 = ads_II_i;
    //aux_2  = ads_I_i;
    float filtered_I = prevFiltered_norm_I + (filter(cutoff) * ((float)data_I - prevFiltered_norm_I));
 8003c9e:	4b91      	ldr	r3, [pc, #580]	; (8003ee4 <tarea_Normalizacion_Loop+0x25c>)
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca8:	f000 fbc2 	bl	8004430 <filter>
 8003cac:	eef0 6a40 	vmov.f32	s13, s0
 8003cb0:	4b89      	ldr	r3, [pc, #548]	; (8003ed8 <tarea_Normalizacion_Loop+0x250>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cbc:	4b8a      	ldr	r3, [pc, #552]	; (8003ee8 <tarea_Normalizacion_Loop+0x260>)
 8003cbe:	edd3 7a00 	vldr	s15, [r3]
 8003cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003cca:	4b87      	ldr	r3, [pc, #540]	; (8003ee8 <tarea_Normalizacion_Loop+0x260>)
 8003ccc:	edd3 7a00 	vldr	s15, [r3]
 8003cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd4:	edc7 7a02 	vstr	s15, [r7, #8]
    float filtered_II = prevFiltered_norm_II + (filter(cutoff) * ((float)data_II - prevFiltered_norm_II));
 8003cd8:	4b82      	ldr	r3, [pc, #520]	; (8003ee4 <tarea_Normalizacion_Loop+0x25c>)
 8003cda:	edd3 7a00 	vldr	s15, [r3]
 8003cde:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce2:	f000 fba5 	bl	8004430 <filter>
 8003ce6:	eef0 6a40 	vmov.f32	s13, s0
 8003cea:	4b7d      	ldr	r3, [pc, #500]	; (8003ee0 <tarea_Normalizacion_Loop+0x258>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cf6:	4b7d      	ldr	r3, [pc, #500]	; (8003eec <tarea_Normalizacion_Loop+0x264>)
 8003cf8:	edd3 7a00 	vldr	s15, [r3]
 8003cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d00:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003d04:	4b79      	ldr	r3, [pc, #484]	; (8003eec <tarea_Normalizacion_Loop+0x264>)
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0e:	edc7 7a01 	vstr	s15, [r7, #4]

    //////////////////////////////////////////////////////////////////////////////////////*/
    filteredData_norm_I= (int32_t)filtered_I;
 8003d12:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d1a:	ee17 2a90 	vmov	r2, s15
 8003d1e:	4b74      	ldr	r3, [pc, #464]	; (8003ef0 <tarea_Normalizacion_Loop+0x268>)
 8003d20:	601a      	str	r2, [r3, #0]
    prevFiltered_norm_I = filtered_I;
 8003d22:	4a71      	ldr	r2, [pc, #452]	; (8003ee8 <tarea_Normalizacion_Loop+0x260>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6013      	str	r3, [r2, #0]
    aux_1 = filteredData_norm_I;
 8003d28:	4b71      	ldr	r3, [pc, #452]	; (8003ef0 <tarea_Normalizacion_Loop+0x268>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a71      	ldr	r2, [pc, #452]	; (8003ef4 <tarea_Normalizacion_Loop+0x26c>)
 8003d2e:	6013      	str	r3, [r2, #0]

    filteredData_norm_II= (int32_t)filtered_II;
 8003d30:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d38:	ee17 2a90 	vmov	r2, s15
 8003d3c:	4b6e      	ldr	r3, [pc, #440]	; (8003ef8 <tarea_Normalizacion_Loop+0x270>)
 8003d3e:	601a      	str	r2, [r3, #0]
    prevFiltered_norm_II = filtered_II;
 8003d40:	4a6a      	ldr	r2, [pc, #424]	; (8003eec <tarea_Normalizacion_Loop+0x264>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6013      	str	r3, [r2, #0]
    aux_2 = filteredData_norm_II;
 8003d46:	4b6c      	ldr	r3, [pc, #432]	; (8003ef8 <tarea_Normalizacion_Loop+0x270>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a6c      	ldr	r2, [pc, #432]	; (8003efc <tarea_Normalizacion_Loop+0x274>)
 8003d4c:	6013      	str	r3, [r2, #0]

    derv_norm_I=abs(DerivadaNormFuncion_I(aux_1));
 8003d4e:	4b69      	ldr	r3, [pc, #420]	; (8003ef4 <tarea_Normalizacion_Loop+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fbac 	bl	80044b0 <DerivadaNormFuncion_I>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	425b      	neglt	r3, r3
 8003d60:	4a67      	ldr	r2, [pc, #412]	; (8003f00 <tarea_Normalizacion_Loop+0x278>)
 8003d62:	6013      	str	r3, [r2, #0]
    derv_norm_II=abs(DerivadaNormFuncion_II(aux_2));
 8003d64:	4b65      	ldr	r3, [pc, #404]	; (8003efc <tarea_Normalizacion_Loop+0x274>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fbd3 	bl	8004514 <DerivadaNormFuncion_II>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bfb8      	it	lt
 8003d74:	425b      	neglt	r3, r3
 8003d76:	4a63      	ldr	r2, [pc, #396]	; (8003f04 <tarea_Normalizacion_Loop+0x27c>)
 8003d78:	6013      	str	r3, [r2, #0]
    /////////////////////////////////////////////////////////////////fin filtro
    index_array++;
 8003d7a:	4b63      	ldr	r3, [pc, #396]	; (8003f08 <tarea_Normalizacion_Loop+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	4a61      	ldr	r2, [pc, #388]	; (8003f08 <tarea_Normalizacion_Loop+0x280>)
 8003d82:	6013      	str	r3, [r2, #0]
    if (index_array >= long_array)
 8003d84:	4b60      	ldr	r3, [pc, #384]	; (8003f08 <tarea_Normalizacion_Loop+0x280>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b60      	ldr	r3, [pc, #384]	; (8003f0c <tarea_Normalizacion_Loop+0x284>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	db57      	blt.n	8003e40 <tarea_Normalizacion_Loop+0x1b8>
        {
            if (aux_1_max!=-2147483647)
 8003d90:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <tarea_Normalizacion_Loop+0x288>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5f      	ldr	r2, [pc, #380]	; (8003f14 <tarea_Normalizacion_Loop+0x28c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d006      	beq.n	8003da8 <tarea_Normalizacion_Loop+0x120>
                {
                    array_aux_1_max[index_max_min] = aux_1_max;
 8003d9a:	4b5f      	ldr	r3, [pc, #380]	; (8003f18 <tarea_Normalizacion_Loop+0x290>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a5c      	ldr	r2, [pc, #368]	; (8003f10 <tarea_Normalizacion_Loop+0x288>)
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	495e      	ldr	r1, [pc, #376]	; (8003f1c <tarea_Normalizacion_Loop+0x294>)
 8003da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                }
            if (aux_2_max!=-2147483647)
 8003da8:	4b5d      	ldr	r3, [pc, #372]	; (8003f20 <tarea_Normalizacion_Loop+0x298>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a59      	ldr	r2, [pc, #356]	; (8003f14 <tarea_Normalizacion_Loop+0x28c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d006      	beq.n	8003dc0 <tarea_Normalizacion_Loop+0x138>
                {
                    array_aux_2_max[index_max_min] = aux_2_max;
 8003db2:	4b59      	ldr	r3, [pc, #356]	; (8003f18 <tarea_Normalizacion_Loop+0x290>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a5a      	ldr	r2, [pc, #360]	; (8003f20 <tarea_Normalizacion_Loop+0x298>)
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	495a      	ldr	r1, [pc, #360]	; (8003f24 <tarea_Normalizacion_Loop+0x29c>)
 8003dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                }
            if (aux_1_min_norm!=2147483647)
 8003dc0:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <tarea_Normalizacion_Loop+0x2a0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d006      	beq.n	8003dda <tarea_Normalizacion_Loop+0x152>
                {
                    array_aux_1_min[index_max_min] = aux_1_min_norm;
 8003dcc:	4b52      	ldr	r3, [pc, #328]	; (8003f18 <tarea_Normalizacion_Loop+0x290>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a55      	ldr	r2, [pc, #340]	; (8003f28 <tarea_Normalizacion_Loop+0x2a0>)
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	4955      	ldr	r1, [pc, #340]	; (8003f2c <tarea_Normalizacion_Loop+0x2a4>)
 8003dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                }
            if (aux_2_min_norm!=2147483647)
 8003dda:	4b55      	ldr	r3, [pc, #340]	; (8003f30 <tarea_Normalizacion_Loop+0x2a8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d006      	beq.n	8003df4 <tarea_Normalizacion_Loop+0x16c>
                {
                    array_aux_2_min[index_max_min] = aux_2_min_norm;
 8003de6:	4b4c      	ldr	r3, [pc, #304]	; (8003f18 <tarea_Normalizacion_Loop+0x290>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a51      	ldr	r2, [pc, #324]	; (8003f30 <tarea_Normalizacion_Loop+0x2a8>)
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	4951      	ldr	r1, [pc, #324]	; (8003f34 <tarea_Normalizacion_Loop+0x2ac>)
 8003df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                }
            //array_aux_1_max[index_max_min] = aux_1_max;
            //array_aux_2_max[index_max_min] = aux_2_max;
            //array_aux_1_min[index_max_min] = aux_1_min_norm;
            //array_aux_2_min[index_max_min] = aux_2_min_norm;
            index_max_min++;
 8003df4:	4b48      	ldr	r3, [pc, #288]	; (8003f18 <tarea_Normalizacion_Loop+0x290>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	4a47      	ldr	r2, [pc, #284]	; (8003f18 <tarea_Normalizacion_Loop+0x290>)
 8003dfc:	6013      	str	r3, [r2, #0]
            if (index_max_min>9)
 8003dfe:	4b46      	ldr	r3, [pc, #280]	; (8003f18 <tarea_Normalizacion_Loop+0x290>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b09      	cmp	r3, #9
 8003e04:	dd02      	ble.n	8003e0c <tarea_Normalizacion_Loop+0x184>
                index_max_min=0;
 8003e06:	4b44      	ldr	r3, [pc, #272]	; (8003f18 <tarea_Normalizacion_Loop+0x290>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

            index_long_act = 0;
 8003e0c:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <tarea_Normalizacion_Loop+0x2b0>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
            value_1_max     = -2147483547;
 8003e12:	4b4a      	ldr	r3, [pc, #296]	; (8003f3c <tarea_Normalizacion_Loop+0x2b4>)
 8003e14:	4a4a      	ldr	r2, [pc, #296]	; (8003f40 <tarea_Normalizacion_Loop+0x2b8>)
 8003e16:	601a      	str	r2, [r3, #0]
            value_2_max     = -2147483547;
 8003e18:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <tarea_Normalizacion_Loop+0x2bc>)
 8003e1a:	4a49      	ldr	r2, [pc, #292]	; (8003f40 <tarea_Normalizacion_Loop+0x2b8>)
 8003e1c:	601a      	str	r2, [r3, #0]
            aux_1_max       = -2147483647;
 8003e1e:	4b3c      	ldr	r3, [pc, #240]	; (8003f10 <tarea_Normalizacion_Loop+0x288>)
 8003e20:	4a3c      	ldr	r2, [pc, #240]	; (8003f14 <tarea_Normalizacion_Loop+0x28c>)
 8003e22:	601a      	str	r2, [r3, #0]
            aux_2_max       = -2147483647;
 8003e24:	4b3e      	ldr	r3, [pc, #248]	; (8003f20 <tarea_Normalizacion_Loop+0x298>)
 8003e26:	4a3b      	ldr	r2, [pc, #236]	; (8003f14 <tarea_Normalizacion_Loop+0x28c>)
 8003e28:	601a      	str	r2, [r3, #0]
            aux_1_min_norm  = 2147483647;
 8003e2a:	4b3f      	ldr	r3, [pc, #252]	; (8003f28 <tarea_Normalizacion_Loop+0x2a0>)
 8003e2c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e30:	601a      	str	r2, [r3, #0]
            aux_2_min_norm  = 2147483647;
 8003e32:	4b3f      	ldr	r3, [pc, #252]	; (8003f30 <tarea_Normalizacion_Loop+0x2a8>)
 8003e34:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e38:	601a      	str	r2, [r3, #0]
            index_array=0;
 8003e3a:	4b33      	ldr	r3, [pc, #204]	; (8003f08 <tarea_Normalizacion_Loop+0x280>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
            //aux_deb_norm=0;
        }


    //if (aux_1 > (value_1_max-delta_max))
    if ((derv_norm_I>800)&&(aux_1>min_1_abs))
 8003e40:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <tarea_Normalizacion_Loop+0x278>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e48:	dd1f      	ble.n	8003e8a <tarea_Normalizacion_Loop+0x202>
 8003e4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <tarea_Normalizacion_Loop+0x26c>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <tarea_Normalizacion_Loop+0x2c0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	dd19      	ble.n	8003e8a <tarea_Normalizacion_Loop+0x202>
        {
            cont_max_1++;
 8003e56:	4b3d      	ldr	r3, [pc, #244]	; (8003f4c <tarea_Normalizacion_Loop+0x2c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	4a3b      	ldr	r2, [pc, #236]	; (8003f4c <tarea_Normalizacion_Loop+0x2c4>)
 8003e5e:	6013      	str	r3, [r2, #0]
            if((aux_1 > aux_1_max)&&(cont_max_1>cont_max))
 8003e60:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <tarea_Normalizacion_Loop+0x26c>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <tarea_Normalizacion_Loop+0x288>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	dd09      	ble.n	8003e80 <tarea_Normalizacion_Loop+0x1f8>
 8003e6c:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <tarea_Normalizacion_Loop+0x2c4>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <tarea_Normalizacion_Loop+0x2c8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	dd03      	ble.n	8003e80 <tarea_Normalizacion_Loop+0x1f8>
                {
                    aux_1_max = aux_1;
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <tarea_Normalizacion_Loop+0x26c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <tarea_Normalizacion_Loop+0x288>)
 8003e7e:	6013      	str	r3, [r2, #0]
                }
            value_1_max = aux_1;
 8003e80:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <tarea_Normalizacion_Loop+0x26c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2d      	ldr	r2, [pc, #180]	; (8003f3c <tarea_Normalizacion_Loop+0x2b4>)
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	e005      	b.n	8003e96 <tarea_Normalizacion_Loop+0x20e>

        }
    else
        {
            value_1_max     = -2147483547;
 8003e8a:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <tarea_Normalizacion_Loop+0x2b4>)
 8003e8c:	4a2c      	ldr	r2, [pc, #176]	; (8003f40 <tarea_Normalizacion_Loop+0x2b8>)
 8003e8e:	601a      	str	r2, [r3, #0]
            cont_max_1=0;
 8003e90:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <tarea_Normalizacion_Loop+0x2c4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
        }
        if (derv_norm_I<100)
 8003e96:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <tarea_Normalizacion_Loop+0x278>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b63      	cmp	r3, #99	; 0x63
 8003e9c:	dc60      	bgt.n	8003f60 <tarea_Normalizacion_Loop+0x2d8>
        {
            cont_min_1++;
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <tarea_Normalizacion_Loop+0x2cc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	4a2b      	ldr	r2, [pc, #172]	; (8003f54 <tarea_Normalizacion_Loop+0x2cc>)
 8003ea6:	6013      	str	r3, [r2, #0]
            if((aux_1 < aux_1_min_norm)&&(cont_min_1>cont_min))
 8003ea8:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <tarea_Normalizacion_Loop+0x26c>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <tarea_Normalizacion_Loop+0x2a0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	da09      	bge.n	8003ec8 <tarea_Normalizacion_Loop+0x240>
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <tarea_Normalizacion_Loop+0x2cc>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b27      	ldr	r3, [pc, #156]	; (8003f58 <tarea_Normalizacion_Loop+0x2d0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	dd03      	ble.n	8003ec8 <tarea_Normalizacion_Loop+0x240>
                {
                    aux_1_min_norm = aux_1;
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <tarea_Normalizacion_Loop+0x26c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <tarea_Normalizacion_Loop+0x2a0>)
 8003ec6:	6013      	str	r3, [r2, #0]
                    //aux_deb_norm=1;
                }
            value_1_min = aux_1;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <tarea_Normalizacion_Loop+0x26c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <tarea_Normalizacion_Loop+0x2d4>)
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e04d      	b.n	8003f6e <tarea_Normalizacion_Loop+0x2e6>
 8003ed2:	bf00      	nop
 8003ed4:	200015e4 	.word	0x200015e4
 8003ed8:	20003484 	.word	0x20003484
 8003edc:	200015e8 	.word	0x200015e8
 8003ee0:	20003488 	.word	0x20003488
 8003ee4:	20001224 	.word	0x20001224
 8003ee8:	20003474 	.word	0x20003474
 8003eec:	20003478 	.word	0x20003478
 8003ef0:	2000348c 	.word	0x2000348c
 8003ef4:	2000341c 	.word	0x2000341c
 8003ef8:	20003490 	.word	0x20003490
 8003efc:	20003420 	.word	0x20003420
 8003f00:	20003494 	.word	0x20003494
 8003f04:	20003498 	.word	0x20003498
 8003f08:	20003424 	.word	0x20003424
 8003f0c:	200011cc 	.word	0x200011cc
 8003f10:	200011e4 	.word	0x200011e4
 8003f14:	80000001 	.word	0x80000001
 8003f18:	20003428 	.word	0x20003428
 8003f1c:	2000108c 	.word	0x2000108c
 8003f20:	200011ec 	.word	0x200011ec
 8003f24:	2000112c 	.word	0x2000112c
 8003f28:	200011e0 	.word	0x200011e0
 8003f2c:	200010dc 	.word	0x200010dc
 8003f30:	200011e8 	.word	0x200011e8
 8003f34:	2000117c 	.word	0x2000117c
 8003f38:	2000342c 	.word	0x2000342c
 8003f3c:	200011d0 	.word	0x200011d0
 8003f40:	80000065 	.word	0x80000065
 8003f44:	200011d4 	.word	0x200011d4
 8003f48:	200011f8 	.word	0x200011f8
 8003f4c:	2000343c 	.word	0x2000343c
 8003f50:	20001218 	.word	0x20001218
 8003f54:	20003444 	.word	0x20003444
 8003f58:	2000121c 	.word	0x2000121c
 8003f5c:	200011d8 	.word	0x200011d8

        }
    else
        {
            value_1_min     = 2147483647;
 8003f60:	4b4a      	ldr	r3, [pc, #296]	; (800408c <tarea_Normalizacion_Loop+0x404>)
 8003f62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003f66:	601a      	str	r2, [r3, #0]
            cont_min_1=0;
 8003f68:	4b49      	ldr	r3, [pc, #292]	; (8004090 <tarea_Normalizacion_Loop+0x408>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
        }

    //if (aux_2 > (value_2_max-delta_max))
    if ((derv_norm_II>800)&&(aux_2>min_2_abs)&&(!flag_marcapasos_norm))
 8003f6e:	4b49      	ldr	r3, [pc, #292]	; (8004094 <tarea_Normalizacion_Loop+0x40c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003f76:	dd23      	ble.n	8003fc0 <tarea_Normalizacion_Loop+0x338>
 8003f78:	4b47      	ldr	r3, [pc, #284]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4b47      	ldr	r3, [pc, #284]	; (800409c <tarea_Normalizacion_Loop+0x414>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	dd1d      	ble.n	8003fc0 <tarea_Normalizacion_Loop+0x338>
 8003f84:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <tarea_Normalizacion_Loop+0x418>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d119      	bne.n	8003fc0 <tarea_Normalizacion_Loop+0x338>
        {
            cont_max_2++;
 8003f8c:	4b45      	ldr	r3, [pc, #276]	; (80040a4 <tarea_Normalizacion_Loop+0x41c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	4a44      	ldr	r2, [pc, #272]	; (80040a4 <tarea_Normalizacion_Loop+0x41c>)
 8003f94:	6013      	str	r3, [r2, #0]
            if((aux_2 > aux_2_max)&&(cont_max_2>cont_max))
 8003f96:	4b40      	ldr	r3, [pc, #256]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <tarea_Normalizacion_Loop+0x420>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	dd09      	ble.n	8003fb6 <tarea_Normalizacion_Loop+0x32e>
 8003fa2:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <tarea_Normalizacion_Loop+0x41c>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b41      	ldr	r3, [pc, #260]	; (80040ac <tarea_Normalizacion_Loop+0x424>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	dd03      	ble.n	8003fb6 <tarea_Normalizacion_Loop+0x32e>
                {
                    aux_2_max = aux_2;
 8003fae:	4b3a      	ldr	r3, [pc, #232]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a3d      	ldr	r2, [pc, #244]	; (80040a8 <tarea_Normalizacion_Loop+0x420>)
 8003fb4:	6013      	str	r3, [r2, #0]
                }
            value_2_max = aux_2;
 8003fb6:	4b38      	ldr	r3, [pc, #224]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <tarea_Normalizacion_Loop+0x428>)
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e005      	b.n	8003fcc <tarea_Normalizacion_Loop+0x344>

        }
    else
        {
            value_2_max     = -2147483547;
 8003fc0:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <tarea_Normalizacion_Loop+0x428>)
 8003fc2:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <tarea_Normalizacion_Loop+0x42c>)
 8003fc4:	601a      	str	r2, [r3, #0]
            cont_max_2=0;
 8003fc6:	4b37      	ldr	r3, [pc, #220]	; (80040a4 <tarea_Normalizacion_Loop+0x41c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
        }

    if (derv_norm_II<100)
 8003fcc:	4b31      	ldr	r3, [pc, #196]	; (8004094 <tarea_Normalizacion_Loop+0x40c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b63      	cmp	r3, #99	; 0x63
 8003fd2:	dc19      	bgt.n	8004008 <tarea_Normalizacion_Loop+0x380>
        {
            cont_min_2++;
 8003fd4:	4b38      	ldr	r3, [pc, #224]	; (80040b8 <tarea_Normalizacion_Loop+0x430>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	4a37      	ldr	r2, [pc, #220]	; (80040b8 <tarea_Normalizacion_Loop+0x430>)
 8003fdc:	6013      	str	r3, [r2, #0]
            if((aux_2 < aux_2_min_norm)&&(cont_min_2>cont_min))
 8003fde:	4b2e      	ldr	r3, [pc, #184]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b36      	ldr	r3, [pc, #216]	; (80040bc <tarea_Normalizacion_Loop+0x434>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	da09      	bge.n	8003ffe <tarea_Normalizacion_Loop+0x376>
 8003fea:	4b33      	ldr	r3, [pc, #204]	; (80040b8 <tarea_Normalizacion_Loop+0x430>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <tarea_Normalizacion_Loop+0x438>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	dd03      	ble.n	8003ffe <tarea_Normalizacion_Loop+0x376>
                {
                    aux_2_min_norm = aux_2;
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a30      	ldr	r2, [pc, #192]	; (80040bc <tarea_Normalizacion_Loop+0x434>)
 8003ffc:	6013      	str	r3, [r2, #0]
                }
            value_2_min = aux_2;
 8003ffe:	4b26      	ldr	r3, [pc, #152]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <tarea_Normalizacion_Loop+0x43c>)
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e006      	b.n	8004016 <tarea_Normalizacion_Loop+0x38e>

        }
    else
        {
            value_2_min     = 2147483647;
 8004008:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <tarea_Normalizacion_Loop+0x43c>)
 800400a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800400e:	601a      	str	r2, [r3, #0]
            cont_min_2=0;
 8004010:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <tarea_Normalizacion_Loop+0x430>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
        }
////////////////////////////////////////////////////////////////////////////////////////////////
    if (aux_1 > max_1_full)
 8004016:	4b2c      	ldr	r3, [pc, #176]	; (80040c8 <tarea_Normalizacion_Loop+0x440>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <tarea_Normalizacion_Loop+0x444>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	dd03      	ble.n	800402a <tarea_Normalizacion_Loop+0x3a2>
        {
            max_1_full = aux_1;
 8004022:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <tarea_Normalizacion_Loop+0x440>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a29      	ldr	r2, [pc, #164]	; (80040cc <tarea_Normalizacion_Loop+0x444>)
 8004028:	6013      	str	r3, [r2, #0]

        }
    if (aux_2 > max_2_full)
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <tarea_Normalizacion_Loop+0x448>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	dd03      	ble.n	800403e <tarea_Normalizacion_Loop+0x3b6>
        {
            max_2_full = aux_2;
 8004036:	4b18      	ldr	r3, [pc, #96]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <tarea_Normalizacion_Loop+0x448>)
 800403c:	6013      	str	r3, [r2, #0]

        }

    if (aux_1<min_1_full)
 800403e:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <tarea_Normalizacion_Loop+0x440>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b24      	ldr	r3, [pc, #144]	; (80040d4 <tarea_Normalizacion_Loop+0x44c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	da03      	bge.n	8004052 <tarea_Normalizacion_Loop+0x3ca>
        {
            min_1_full = aux_1;
 800404a:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <tarea_Normalizacion_Loop+0x440>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <tarea_Normalizacion_Loop+0x44c>)
 8004050:	6013      	str	r3, [r2, #0]
        }
    if (aux_2<min_2_full)
 8004052:	4b11      	ldr	r3, [pc, #68]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <tarea_Normalizacion_Loop+0x450>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	da03      	bge.n	8004066 <tarea_Normalizacion_Loop+0x3de>
        {

            min_2_full = aux_2;
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <tarea_Normalizacion_Loop+0x410>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <tarea_Normalizacion_Loop+0x450>)
 8004064:	6013      	str	r3, [r2, #0]
    /*
    if((aux_2 < aux_2_min_norm))
        {
            aux_2_min_norm = aux_2;
        }*/
    min_1_abs       = 2147483647;
 8004066:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <tarea_Normalizacion_Loop+0x454>)
 8004068:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800406c:	601a      	str	r2, [r3, #0]
    min_2_abs       = 2147483647;
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <tarea_Normalizacion_Loop+0x414>)
 8004070:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004074:	601a      	str	r2, [r3, #0]
    max_1_abs       = -2147483647;
 8004076:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <tarea_Normalizacion_Loop+0x458>)
 8004078:	4a1a      	ldr	r2, [pc, #104]	; (80040e4 <tarea_Normalizacion_Loop+0x45c>)
 800407a:	601a      	str	r2, [r3, #0]
    max_2_abs       = -2147483647;
 800407c:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <tarea_Normalizacion_Loop+0x460>)
 800407e:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <tarea_Normalizacion_Loop+0x45c>)
 8004080:	601a      	str	r2, [r3, #0]
    int ij=0;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
    for (ij = 0; ij < 9; ij++)
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e06a      	b.n	8004162 <tarea_Normalizacion_Loop+0x4da>
 800408c:	200011d8 	.word	0x200011d8
 8004090:	20003444 	.word	0x20003444
 8004094:	20003498 	.word	0x20003498
 8004098:	20003420 	.word	0x20003420
 800409c:	200011fc 	.word	0x200011fc
 80040a0:	20001602 	.word	0x20001602
 80040a4:	20003440 	.word	0x20003440
 80040a8:	200011ec 	.word	0x200011ec
 80040ac:	20001218 	.word	0x20001218
 80040b0:	200011d4 	.word	0x200011d4
 80040b4:	80000065 	.word	0x80000065
 80040b8:	20003448 	.word	0x20003448
 80040bc:	200011e8 	.word	0x200011e8
 80040c0:	2000121c 	.word	0x2000121c
 80040c4:	200011dc 	.word	0x200011dc
 80040c8:	2000341c 	.word	0x2000341c
 80040cc:	20001200 	.word	0x20001200
 80040d0:	20001204 	.word	0x20001204
 80040d4:	20001208 	.word	0x20001208
 80040d8:	2000120c 	.word	0x2000120c
 80040dc:	200011f8 	.word	0x200011f8
 80040e0:	200011f0 	.word	0x200011f0
 80040e4:	80000001 	.word	0x80000001
 80040e8:	200011f4 	.word	0x200011f4
        {
            if(array_aux_1_max[ij]>max_1_abs)
 80040ec:	4a61      	ldr	r2, [pc, #388]	; (8004274 <tarea_Normalizacion_Loop+0x5ec>)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040f4:	4b60      	ldr	r3, [pc, #384]	; (8004278 <tarea_Normalizacion_Loop+0x5f0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	dd05      	ble.n	8004108 <tarea_Normalizacion_Loop+0x480>
                max_1_abs=array_aux_1_max[ij];
 80040fc:	4a5d      	ldr	r2, [pc, #372]	; (8004274 <tarea_Normalizacion_Loop+0x5ec>)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004104:	4a5c      	ldr	r2, [pc, #368]	; (8004278 <tarea_Normalizacion_Loop+0x5f0>)
 8004106:	6013      	str	r3, [r2, #0]
            if(array_aux_2_max[ij]>max_2_abs)
 8004108:	4a5c      	ldr	r2, [pc, #368]	; (800427c <tarea_Normalizacion_Loop+0x5f4>)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004110:	4b5b      	ldr	r3, [pc, #364]	; (8004280 <tarea_Normalizacion_Loop+0x5f8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	dd05      	ble.n	8004124 <tarea_Normalizacion_Loop+0x49c>
                max_2_abs=array_aux_2_max[ij];
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <tarea_Normalizacion_Loop+0x5f4>)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004120:	4a57      	ldr	r2, [pc, #348]	; (8004280 <tarea_Normalizacion_Loop+0x5f8>)
 8004122:	6013      	str	r3, [r2, #0]
            if(array_aux_1_min[ij]<min_1_abs)
 8004124:	4a57      	ldr	r2, [pc, #348]	; (8004284 <tarea_Normalizacion_Loop+0x5fc>)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800412c:	4b56      	ldr	r3, [pc, #344]	; (8004288 <tarea_Normalizacion_Loop+0x600>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	da05      	bge.n	8004140 <tarea_Normalizacion_Loop+0x4b8>
                min_1_abs=array_aux_1_min[ij];
 8004134:	4a53      	ldr	r2, [pc, #332]	; (8004284 <tarea_Normalizacion_Loop+0x5fc>)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413c:	4a52      	ldr	r2, [pc, #328]	; (8004288 <tarea_Normalizacion_Loop+0x600>)
 800413e:	6013      	str	r3, [r2, #0]
            if(array_aux_2_min[ij]<min_2_abs)
 8004140:	4a52      	ldr	r2, [pc, #328]	; (800428c <tarea_Normalizacion_Loop+0x604>)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004148:	4b51      	ldr	r3, [pc, #324]	; (8004290 <tarea_Normalizacion_Loop+0x608>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	da05      	bge.n	800415c <tarea_Normalizacion_Loop+0x4d4>
                min_2_abs=array_aux_2_min[ij];
 8004150:	4a4e      	ldr	r2, [pc, #312]	; (800428c <tarea_Normalizacion_Loop+0x604>)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004158:	4a4d      	ldr	r2, [pc, #308]	; (8004290 <tarea_Normalizacion_Loop+0x608>)
 800415a:	6013      	str	r3, [r2, #0]
    for (ij = 0; ij < 9; ij++)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b08      	cmp	r3, #8
 8004166:	ddc1      	ble.n	80040ec <tarea_Normalizacion_Loop+0x464>
        }
    //aux_deb_norm=array_aux_1_max[0];
    dataCount++;
 8004168:	4b4a      	ldr	r3, [pc, #296]	; (8004294 <tarea_Normalizacion_Loop+0x60c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	4a49      	ldr	r2, [pc, #292]	; (8004294 <tarea_Normalizacion_Loop+0x60c>)
 8004170:	6013      	str	r3, [r2, #0]
    if(dataCount>500)
 8004172:	4b48      	ldr	r3, [pc, #288]	; (8004294 <tarea_Normalizacion_Loop+0x60c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800417a:	dd18      	ble.n	80041ae <tarea_Normalizacion_Loop+0x526>
        {
            dataCount=0;
 800417c:	4b45      	ldr	r3, [pc, #276]	; (8004294 <tarea_Normalizacion_Loop+0x60c>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
            min_1_fa=min_1_full;
 8004182:	4b45      	ldr	r3, [pc, #276]	; (8004298 <tarea_Normalizacion_Loop+0x610>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a45      	ldr	r2, [pc, #276]	; (800429c <tarea_Normalizacion_Loop+0x614>)
 8004188:	6013      	str	r3, [r2, #0]
            min_2_fa=min_2_full;
 800418a:	4b45      	ldr	r3, [pc, #276]	; (80042a0 <tarea_Normalizacion_Loop+0x618>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a45      	ldr	r2, [pc, #276]	; (80042a4 <tarea_Normalizacion_Loop+0x61c>)
 8004190:	6013      	str	r3, [r2, #0]
            max_1_full      = -2147483647;
 8004192:	4b45      	ldr	r3, [pc, #276]	; (80042a8 <tarea_Normalizacion_Loop+0x620>)
 8004194:	4a45      	ldr	r2, [pc, #276]	; (80042ac <tarea_Normalizacion_Loop+0x624>)
 8004196:	601a      	str	r2, [r3, #0]
            max_2_full      = -2147483647;
 8004198:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <tarea_Normalizacion_Loop+0x628>)
 800419a:	4a44      	ldr	r2, [pc, #272]	; (80042ac <tarea_Normalizacion_Loop+0x624>)
 800419c:	601a      	str	r2, [r3, #0]
            min_1_full      = 2147483647;
 800419e:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <tarea_Normalizacion_Loop+0x610>)
 80041a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80041a4:	601a      	str	r2, [r3, #0]
            min_2_full      = 2147483647;
 80041a6:	4b3e      	ldr	r3, [pc, #248]	; (80042a0 <tarea_Normalizacion_Loop+0x618>)
 80041a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80041ac:	601a      	str	r2, [r3, #0]
        }
    prom_1=min_1_abs;
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <tarea_Normalizacion_Loop+0x600>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a40      	ldr	r2, [pc, #256]	; (80042b4 <tarea_Normalizacion_Loop+0x62c>)
 80041b4:	6013      	str	r3, [r2, #0]
    prom_2=min_2_abs;
 80041b6:	4b36      	ldr	r3, [pc, #216]	; (8004290 <tarea_Normalizacion_Loop+0x608>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a3f      	ldr	r2, [pc, #252]	; (80042b8 <tarea_Normalizacion_Loop+0x630>)
 80041bc:	6013      	str	r3, [r2, #0]

//////////////////////////////////////////////////////////////////////////////////////////////*/
    Dnorm_1=0;//
 80041be:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <tarea_Normalizacion_Loop+0x634>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
    Dnorm_2=0;//
 80041c4:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <tarea_Normalizacion_Loop+0x638>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
    aux_send=max_1_full-min_1_full;
 80041ca:	4b37      	ldr	r3, [pc, #220]	; (80042a8 <tarea_Normalizacion_Loop+0x620>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b32      	ldr	r3, [pc, #200]	; (8004298 <tarea_Normalizacion_Loop+0x610>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <tarea_Normalizacion_Loop+0x63c>)
 80041d6:	6013      	str	r3, [r2, #0]
    if ((max_1_full-min_1_full<5000)&&(norm_Count<5000))
 80041d8:	4b33      	ldr	r3, [pc, #204]	; (80042a8 <tarea_Normalizacion_Loop+0x620>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <tarea_Normalizacion_Loop+0x610>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3287 	movw	r2, #4999	; 0x1387
 80041e6:	4293      	cmp	r3, r2
 80041e8:	dc0a      	bgt.n	8004200 <tarea_Normalizacion_Loop+0x578>
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <tarea_Normalizacion_Loop+0x640>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80041f2:	4293      	cmp	r3, r2
 80041f4:	dc04      	bgt.n	8004200 <tarea_Normalizacion_Loop+0x578>
        {
            norm_Count++;
 80041f6:	4b34      	ldr	r3, [pc, #208]	; (80042c8 <tarea_Normalizacion_Loop+0x640>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <tarea_Normalizacion_Loop+0x640>)
 80041fe:	6013      	str	r3, [r2, #0]
        }
    if(max_1_full-min_1_full>3500)
 8004200:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <tarea_Normalizacion_Loop+0x620>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b24      	ldr	r3, [pc, #144]	; (8004298 <tarea_Normalizacion_Loop+0x610>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800420e:	4293      	cmp	r3, r2
 8004210:	dd02      	ble.n	8004218 <tarea_Normalizacion_Loop+0x590>
        norm_Count=0;
 8004212:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <tarea_Normalizacion_Loop+0x640>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
        }
        */
    /*
    if((prom_2-min_2_fa)>20000)
        prom_2-3000;*/
    if (norm_Count<375)//10000
 8004218:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <tarea_Normalizacion_Loop+0x640>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8004220:	dc5c      	bgt.n	80042dc <tarea_Normalizacion_Loop+0x654>
        {
            Dnorm_2 = (aux_2 - prom_2) * (factor_x) / (max_2_abs - prom_2);
 8004222:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <tarea_Normalizacion_Loop+0x644>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <tarea_Normalizacion_Loop+0x630>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	4a28      	ldr	r2, [pc, #160]	; (80042d0 <tarea_Normalizacion_Loop+0x648>)
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	fb03 f202 	mul.w	r2, r3, r2
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <tarea_Normalizacion_Loop+0x5f8>)
 8004236:	6819      	ldr	r1, [r3, #0]
 8004238:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <tarea_Normalizacion_Loop+0x630>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	1acb      	subs	r3, r1, r3
 800423e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004242:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <tarea_Normalizacion_Loop+0x638>)
 8004244:	6013      	str	r3, [r2, #0]
            Dnorm_1=(aux_1 - prom_1)*(factor_x) / (max_1_abs - prom_1);
 8004246:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <tarea_Normalizacion_Loop+0x64c>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <tarea_Normalizacion_Loop+0x62c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <tarea_Normalizacion_Loop+0x648>)
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	fb03 f202 	mul.w	r2, r3, r2
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <tarea_Normalizacion_Loop+0x5f0>)
 800425a:	6819      	ldr	r1, [r3, #0]
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <tarea_Normalizacion_Loop+0x62c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1acb      	subs	r3, r1, r3
 8004262:	fb92 f3f3 	sdiv	r3, r2, r3
 8004266:	4a15      	ldr	r2, [pc, #84]	; (80042bc <tarea_Normalizacion_Loop+0x634>)
 8004268:	6013      	str	r3, [r2, #0]
            flag_asistole = 0;
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <tarea_Normalizacion_Loop+0x650>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	e037      	b.n	80042e2 <tarea_Normalizacion_Loop+0x65a>
 8004272:	bf00      	nop
 8004274:	2000108c 	.word	0x2000108c
 8004278:	200011f0 	.word	0x200011f0
 800427c:	2000112c 	.word	0x2000112c
 8004280:	200011f4 	.word	0x200011f4
 8004284:	200010dc 	.word	0x200010dc
 8004288:	200011f8 	.word	0x200011f8
 800428c:	2000117c 	.word	0x2000117c
 8004290:	200011fc 	.word	0x200011fc
 8004294:	20003480 	.word	0x20003480
 8004298:	20001208 	.word	0x20001208
 800429c:	20001210 	.word	0x20001210
 80042a0:	2000120c 	.word	0x2000120c
 80042a4:	20001214 	.word	0x20001214
 80042a8:	20001200 	.word	0x20001200
 80042ac:	80000001 	.word	0x80000001
 80042b0:	20001204 	.word	0x20001204
 80042b4:	2000344c 	.word	0x2000344c
 80042b8:	20003450 	.word	0x20003450
 80042bc:	20003430 	.word	0x20003430
 80042c0:	20003434 	.word	0x20003434
 80042c4:	20003454 	.word	0x20003454
 80042c8:	2000347c 	.word	0x2000347c
 80042cc:	20003420 	.word	0x20003420
 80042d0:	20001220 	.word	0x20001220
 80042d4:	2000341c 	.word	0x2000341c
 80042d8:	20003458 	.word	0x20003458
        }
    else
    {
        flag_asistole = 1;
 80042dc:	4b49      	ldr	r3, [pc, #292]	; (8004404 <tarea_Normalizacion_Loop+0x77c>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    }

    //aux_deb_norm=prom_1-min_1_fa;
    aux_deb_norm=min_2_abs;//derv_norm_I;//
 80042e2:	4b49      	ldr	r3, [pc, #292]	; (8004408 <tarea_Normalizacion_Loop+0x780>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a49      	ldr	r2, [pc, #292]	; (800440c <tarea_Normalizacion_Loop+0x784>)
 80042e8:	6013      	str	r3, [r2, #0]
    //Dnorm_1=max_2_abs;
    Dato_2[10] = 0XAA ;
 80042ea:	4b49      	ldr	r3, [pc, #292]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80042ec:	22aa      	movs	r2, #170	; 0xaa
 80042ee:	729a      	strb	r2, [r3, #10]
    Dato_2[11] = 0X00 ;
 80042f0:	4b47      	ldr	r3, [pc, #284]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	72da      	strb	r2, [r3, #11]

    //if (flag_marcapasos_int)
    if (flag_marcapasos_norm)
 80042f6:	4b47      	ldr	r3, [pc, #284]	; (8004414 <tarea_Normalizacion_Loop+0x78c>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d011      	beq.n	8004322 <tarea_Normalizacion_Loop+0x69a>
    //if (Dnorm_2>1400)
        {
            cont_flag_mk++;
 80042fe:	4b46      	ldr	r3, [pc, #280]	; (8004418 <tarea_Normalizacion_Loop+0x790>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	4a44      	ldr	r2, [pc, #272]	; (8004418 <tarea_Normalizacion_Loop+0x790>)
 8004306:	6013      	str	r3, [r2, #0]
            if(cont_flag_mk>3)
 8004308:	4b43      	ldr	r3, [pc, #268]	; (8004418 <tarea_Normalizacion_Loop+0x790>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b03      	cmp	r3, #3
 800430e:	dd02      	ble.n	8004316 <tarea_Normalizacion_Loop+0x68e>
                {
                    //flag_marcapasos_int     = false;
                    flag_marcapasos_norm    = false;
 8004310:	4b40      	ldr	r3, [pc, #256]	; (8004414 <tarea_Normalizacion_Loop+0x78c>)
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
                }
            Dato_2[11] =  0x55;
 8004316:	4b3e      	ldr	r3, [pc, #248]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 8004318:	2255      	movs	r2, #85	; 0x55
 800431a:	72da      	strb	r2, [r3, #11]
            Dnorm_2 = 0;
 800431c:	4b3f      	ldr	r3, [pc, #252]	; (800441c <tarea_Normalizacion_Loop+0x794>)
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
        }
    Dnorm_2_ant = Dnorm_2;
 8004322:	4b3e      	ldr	r3, [pc, #248]	; (800441c <tarea_Normalizacion_Loop+0x794>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a3e      	ldr	r2, [pc, #248]	; (8004420 <tarea_Normalizacion_Loop+0x798>)
 8004328:	6013      	str	r3, [r2, #0]


    Dato_2[0] = 0xA5;
 800432a:	4b39      	ldr	r3, [pc, #228]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 800432c:	22a5      	movs	r2, #165	; 0xa5
 800432e:	701a      	strb	r2, [r3, #0]

    Dato_2[1] = ((Dnorm_1 & 0xFF000000) >> 24); // rec de los bytes r y combinarlos con la mascara de comando
 8004330:	4b3c      	ldr	r3, [pc, #240]	; (8004424 <tarea_Normalizacion_Loop+0x79c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0e1b      	lsrs	r3, r3, #24
 8004336:	b2da      	uxtb	r2, r3
 8004338:	4b35      	ldr	r3, [pc, #212]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 800433a:	705a      	strb	r2, [r3, #1]
    Dato_2[2] = ((Dnorm_1 & 0xFF0000) >> 16); // rec de los bytes r y combinarlos con la mascara de comando
 800433c:	4b39      	ldr	r3, [pc, #228]	; (8004424 <tarea_Normalizacion_Loop+0x79c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	141b      	asrs	r3, r3, #16
 8004342:	b2da      	uxtb	r2, r3
 8004344:	4b32      	ldr	r3, [pc, #200]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 8004346:	709a      	strb	r2, [r3, #2]
    Dato_2[3] = ((Dnorm_1 & 0xFF00) >> 8); // rec de los bytes r y combinarlos con la mascara de comando
 8004348:	4b36      	ldr	r3, [pc, #216]	; (8004424 <tarea_Normalizacion_Loop+0x79c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	121b      	asrs	r3, r3, #8
 800434e:	b2da      	uxtb	r2, r3
 8004350:	4b2f      	ldr	r3, [pc, #188]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 8004352:	70da      	strb	r2, [r3, #3]
    Dato_2[4] = (Dnorm_1 & 0xFF); // rec de los bytes r y combinarlos con la mascara de comando
 8004354:	4b33      	ldr	r3, [pc, #204]	; (8004424 <tarea_Normalizacion_Loop+0x79c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 800435c:	711a      	strb	r2, [r3, #4]

    Dato_2[5] = 0x0A; // rec de los bytes r y cmbinarlos con la mascara de comando
 800435e:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 8004360:	220a      	movs	r2, #10
 8004362:	715a      	strb	r2, [r3, #5]

    Dato_2[6] = ((Dnorm_2 & 0xFF000000) >> 24); // rec de los bytes r y combinarlos con la mascara de comando
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <tarea_Normalizacion_Loop+0x794>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0e1b      	lsrs	r3, r3, #24
 800436a:	b2da      	uxtb	r2, r3
 800436c:	4b28      	ldr	r3, [pc, #160]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 800436e:	719a      	strb	r2, [r3, #6]
    Dato_2[7] = ((Dnorm_2 & 0xFF0000) >> 16); // rec de los bytes r y combinarlos con la mascara de comando
 8004370:	4b2a      	ldr	r3, [pc, #168]	; (800441c <tarea_Normalizacion_Loop+0x794>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	141b      	asrs	r3, r3, #16
 8004376:	b2da      	uxtb	r2, r3
 8004378:	4b25      	ldr	r3, [pc, #148]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 800437a:	71da      	strb	r2, [r3, #7]
    Dato_2[8] = ((Dnorm_2 & 0xFF00) >> 8); // rec de los bytes r y combinarlos con la mascara de comando
 800437c:	4b27      	ldr	r3, [pc, #156]	; (800441c <tarea_Normalizacion_Loop+0x794>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	121b      	asrs	r3, r3, #8
 8004382:	b2da      	uxtb	r2, r3
 8004384:	4b22      	ldr	r3, [pc, #136]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 8004386:	721a      	strb	r2, [r3, #8]
    Dato_2[9] = (Dnorm_2 & 0xFF); // rec de los bytes r y combinarlos con la mascara de comando
 8004388:	4b24      	ldr	r3, [pc, #144]	; (800441c <tarea_Normalizacion_Loop+0x794>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4b20      	ldr	r3, [pc, #128]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 8004390:	725a      	strb	r2, [r3, #9]


    //Dato_2[12] = 0x0A;
   // HAL_UART_Transmit_IT (&huart2, Dato_2, 13);

    Dato_2[12]=Dato_2[0];
 8004392:	4b1f      	ldr	r3, [pc, #124]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 8004398:	731a      	strb	r2, [r3, #12]
    Dato_2[13]=Dato_2[1];
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 800439c:	785a      	ldrb	r2, [r3, #1]
 800439e:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043a0:	735a      	strb	r2, [r3, #13]
    Dato_2[14]=Dato_2[2];
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043a4:	789a      	ldrb	r2, [r3, #2]
 80043a6:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043a8:	739a      	strb	r2, [r3, #14]
    Dato_2[15]=Dato_2[3];
 80043aa:	4b19      	ldr	r3, [pc, #100]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043ac:	78da      	ldrb	r2, [r3, #3]
 80043ae:	4b18      	ldr	r3, [pc, #96]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043b0:	73da      	strb	r2, [r3, #15]
    Dato_2[16]=Dato_2[4];
 80043b2:	4b17      	ldr	r3, [pc, #92]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043b4:	791a      	ldrb	r2, [r3, #4]
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043b8:	741a      	strb	r2, [r3, #16]
    Dato_2[17]=Dato_2[5];
 80043ba:	4b15      	ldr	r3, [pc, #84]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043bc:	795a      	ldrb	r2, [r3, #5]
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043c0:	745a      	strb	r2, [r3, #17]
    Dato_2[18]=Dato_2[6];
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043c4:	799a      	ldrb	r2, [r3, #6]
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043c8:	749a      	strb	r2, [r3, #18]
    Dato_2[19]=Dato_2[7];
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043cc:	79da      	ldrb	r2, [r3, #7]
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043d0:	74da      	strb	r2, [r3, #19]
    Dato_2[20]=Dato_2[8];
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043d4:	7a1a      	ldrb	r2, [r3, #8]
 80043d6:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043d8:	751a      	strb	r2, [r3, #20]
    Dato_2[21]=Dato_2[9];
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043dc:	7a5a      	ldrb	r2, [r3, #9]
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043e0:	755a      	strb	r2, [r3, #21]
    Dato_2[22]=Dato_2[10];
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043e4:	7a9a      	ldrb	r2, [r3, #10]
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043e8:	759a      	strb	r2, [r3, #22]
    Dato_2[23]=Dato_2[11];
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043ec:	7ada      	ldrb	r2, [r3, #11]
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043f0:	75da      	strb	r2, [r3, #23]
    HAL_UART_Transmit_IT (&huart2, Dato_2, 24);
 80043f2:	2218      	movs	r2, #24
 80043f4:	4906      	ldr	r1, [pc, #24]	; (8004410 <tarea_Normalizacion_Loop+0x788>)
 80043f6:	480c      	ldr	r0, [pc, #48]	; (8004428 <tarea_Normalizacion_Loop+0x7a0>)
 80043f8:	f008 fd12 	bl	800ce20 <HAL_UART_Transmit_IT>


}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20003458 	.word	0x20003458
 8004408:	200011fc 	.word	0x200011fc
 800440c:	20001630 	.word	0x20001630
 8004410:	2000345c 	.word	0x2000345c
 8004414:	20001602 	.word	0x20001602
 8004418:	20001604 	.word	0x20001604
 800441c:	20003434 	.word	0x20003434
 8004420:	20003438 	.word	0x20003438
 8004424:	20003430 	.word	0x20003430
 8004428:	20004904 	.word	0x20004904
 800442c:	00000000 	.word	0x00000000

08004430 <filter>:

float filter(float cutofFreq)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	ed87 0a01 	vstr	s0, [r7, #4]
    float RC = 1.0 / (cutofFreq * 2 * M_PI);
 800443a:	edd7 7a01 	vldr	s15, [r7, #4]
 800443e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004442:	ee17 0a90 	vmov	r0, s15
 8004446:	f7fc f87f 	bl	8000548 <__aeabi_f2d>
 800444a:	a317      	add	r3, pc, #92	; (adr r3, 80044a8 <filter+0x78>)
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f7fc f8d2 	bl	80005f8 <__aeabi_dmul>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	f04f 0000 	mov.w	r0, #0
 800445c:	4910      	ldr	r1, [pc, #64]	; (80044a0 <filter+0x70>)
 800445e:	f7fc f9f5 	bl	800084c <__aeabi_ddiv>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4610      	mov	r0, r2
 8004468:	4619      	mov	r1, r3
 800446a:	f7fc fb9d 	bl	8000ba8 <__aeabi_d2f>
 800446e:	4603      	mov	r3, r0
 8004470:	617b      	str	r3, [r7, #20]
    float dt = 1.0 / SAMPLE_RATE;
 8004472:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <filter+0x74>)
 8004474:	613b      	str	r3, [r7, #16]
    float alpha = dt / (RC + dt);
 8004476:	ed97 7a05 	vldr	s14, [r7, #20]
 800447a:	edd7 7a04 	vldr	s15, [r7, #16]
 800447e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004482:	edd7 6a04 	vldr	s13, [r7, #16]
 8004486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800448a:	edc7 7a03 	vstr	s15, [r7, #12]
    return alpha;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	ee07 3a90 	vmov	s15, r3
}
 8004494:	eeb0 0a67 	vmov.f32	s0, s15
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	3ff00000 	.word	0x3ff00000
 80044a4:	37be37c6 	.word	0x37be37c6
 80044a8:	54442d18 	.word	0x54442d18
 80044ac:	400921fb 	.word	0x400921fb

080044b0 <DerivadaNormFuncion_I>:

int32_t DerivadaNormFuncion_I (int derivacion)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
    int y, i;
    static int fx_derv[4];

    /*y = 1/8 (2x( nT) + x( nT - T) - x( nT - 3T) - 2x( nT - 4T))*/
    y = (derivacion << 1) + fx_derv[3] - fx_derv[1] - (fx_derv[0] << 1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	005a      	lsls	r2, r3, #1
 80044bc:	4b14      	ldr	r3, [pc, #80]	; (8004510 <DerivadaNormFuncion_I+0x60>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	441a      	add	r2, r3
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <DerivadaNormFuncion_I+0x60>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	1ad2      	subs	r2, r2, r3
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <DerivadaNormFuncion_I+0x60>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	60bb      	str	r3, [r7, #8]
    y >>= 3;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	10db      	asrs	r3, r3, #3
 80044d6:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++)
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	e00b      	b.n	80044f6 <DerivadaNormFuncion_I+0x46>
        fx_derv[i] = fx_derv[i + 1];
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3301      	adds	r3, #1
 80044e2:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <DerivadaNormFuncion_I+0x60>)
 80044e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80044e8:	4909      	ldr	r1, [pc, #36]	; (8004510 <DerivadaNormFuncion_I+0x60>)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (i = 0; i < 3; i++)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3301      	adds	r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	ddf0      	ble.n	80044de <DerivadaNormFuncion_I+0x2e>
    fx_derv[3] = derivacion;
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <DerivadaNormFuncion_I+0x60>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	60d3      	str	r3, [r2, #12]

    return(y);
 8004502:	68bb      	ldr	r3, [r7, #8]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	2000349c 	.word	0x2000349c

08004514 <DerivadaNormFuncion_II>:
int32_t DerivadaNormFuncion_II (int derivacion)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
    int y, i;
    static int fx_derv[4];

    /*y = 1/8 (2x( nT) + x( nT - T) - x( nT - 3T) - 2x( nT - 4T))*/
    y = (derivacion << 1) + fx_derv[3] - fx_derv[1] - (fx_derv[0] << 1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	005a      	lsls	r2, r3, #1
 8004520:	4b14      	ldr	r3, [pc, #80]	; (8004574 <DerivadaNormFuncion_II+0x60>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	441a      	add	r2, r3
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <DerivadaNormFuncion_II+0x60>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	1ad2      	subs	r2, r2, r3
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <DerivadaNormFuncion_II+0x60>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	60bb      	str	r3, [r7, #8]
    y >>= 3;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	10db      	asrs	r3, r3, #3
 800453a:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++)
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e00b      	b.n	800455a <DerivadaNormFuncion_II+0x46>
        fx_derv[i] = fx_derv[i + 1];
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3301      	adds	r3, #1
 8004546:	4a0b      	ldr	r2, [pc, #44]	; (8004574 <DerivadaNormFuncion_II+0x60>)
 8004548:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800454c:	4909      	ldr	r1, [pc, #36]	; (8004574 <DerivadaNormFuncion_II+0x60>)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (i = 0; i < 3; i++)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b02      	cmp	r3, #2
 800455e:	ddf0      	ble.n	8004542 <DerivadaNormFuncion_II+0x2e>
    fx_derv[3] = derivacion;
 8004560:	4a04      	ldr	r2, [pc, #16]	; (8004574 <DerivadaNormFuncion_II+0x60>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60d3      	str	r3, [r2, #12]

    return(y);
 8004566:	68bb      	ldr	r3, [r7, #8]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	200034ac 	.word	0x200034ac

08004578 <tarea_Respiracion_Setup>:

/* Private function prototypes -----------------------------------------------*/


void tarea_Respiracion_Setup (void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af02      	add	r7, sp, #8
    //Inicialización del filtro de respiración
    arm_fir_init_f32 (&filtroResp_Instancia, FILTRO_RESP_ORDEN, (float32_t*) &filtroResp_Coeficientes[0], &filtroResp_Estados[0], FILTRO_RESP_TAM_BLOQUE);
 800457e:	2301      	movs	r3, #1
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <tarea_Respiracion_Setup+0x60>)
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <tarea_Respiracion_Setup+0x64>)
 8004586:	2111      	movs	r1, #17
 8004588:	4815      	ldr	r0, [pc, #84]	; (80045e0 <tarea_Respiracion_Setup+0x68>)
 800458a:	f010 fe01 	bl	8015190 <arm_fir_init_f32>
    alpha = 2*PI_R*cutoff_Resp / 100;
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <tarea_Respiracion_Setup+0x6c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fb ffd8 	bl	8000548 <__aeabi_f2d>
 8004598:	a30d      	add	r3, pc, #52	; (adr r3, 80045d0 <tarea_Respiracion_Setup+0x58>)
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	f7fc f82b 	bl	80005f8 <__aeabi_dmul>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <tarea_Respiracion_Setup+0x70>)
 80045b0:	f7fc f94c 	bl	800084c <__aeabi_ddiv>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	f7fc faf4 	bl	8000ba8 <__aeabi_d2f>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <tarea_Respiracion_Setup+0x74>)
 80045c4:	6013      	str	r3, [r2, #0]
}
 80045c6:	bf00      	nop
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	f3af 8000 	nop.w
 80045d0:	54442d18 	.word	0x54442d18
 80045d4:	401921fb 	.word	0x401921fb
 80045d8:	20004790 	.word	0x20004790
 80045dc:	2000125c 	.word	0x2000125c
 80045e0:	20004784 	.word	0x20004784
 80045e4:	2000123c 	.word	0x2000123c
 80045e8:	40590000 	.word	0x40590000
 80045ec:	20004750 	.word	0x20004750

080045f0 <tarea_Respiracion_Loop>:


void tarea_Respiracion_Loop (void)
{
 80045f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f4:	b08a      	sub	sp, #40	; 0x28
 80045f6:	af00      	add	r7, sp, #0
	tiempo_apnea = (valor_apnea * 100) - tiempo_array;
 80045f8:	4b68      	ldr	r3, [pc, #416]	; (800479c <tarea_Respiracion_Loop+0x1ac>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2264      	movs	r2, #100	; 0x64
 80045fe:	fb03 f202 	mul.w	r2, r3, r2
 8004602:	4b67      	ldr	r3, [pc, #412]	; (80047a0 <tarea_Respiracion_Loop+0x1b0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	4a66      	ldr	r2, [pc, #408]	; (80047a4 <tarea_Respiracion_Loop+0x1b4>)
 800460a:	6013      	str	r3, [r2, #0]

	if (paciente_tipo == 0)
 800460c:	4b66      	ldr	r3, [pc, #408]	; (80047a8 <tarea_Respiracion_Loop+0x1b8>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d107      	bne.n	8004624 <tarea_Respiracion_Loop+0x34>
	{
		orden_filt = FILTRO_ADULTO;
 8004614:	4b65      	ldr	r3, [pc, #404]	; (80047ac <tarea_Respiracion_Loop+0x1bc>)
 8004616:	2228      	movs	r2, #40	; 0x28
 8004618:	601a      	str	r2, [r3, #0]
		lim_apnea=1500;
 800461a:	4b65      	ldr	r3, [pc, #404]	; (80047b0 <tarea_Respiracion_Loop+0x1c0>)
 800461c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e016      	b.n	8004652 <tarea_Respiracion_Loop+0x62>
	}
	else if (paciente_tipo == 1)
 8004624:	4b60      	ldr	r3, [pc, #384]	; (80047a8 <tarea_Respiracion_Loop+0x1b8>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <tarea_Respiracion_Loop+0x4c>
	{
		orden_filt = FILTRO_PEDIAT;
 800462c:	4b5f      	ldr	r3, [pc, #380]	; (80047ac <tarea_Respiracion_Loop+0x1bc>)
 800462e:	2210      	movs	r2, #16
 8004630:	601a      	str	r2, [r3, #0]
		lim_apnea=1050;
 8004632:	4b5f      	ldr	r3, [pc, #380]	; (80047b0 <tarea_Respiracion_Loop+0x1c0>)
 8004634:	f240 421a 	movw	r2, #1050	; 0x41a
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e00a      	b.n	8004652 <tarea_Respiracion_Loop+0x62>
	}
	else if (paciente_tipo == 2)
 800463c:	4b5a      	ldr	r3, [pc, #360]	; (80047a8 <tarea_Respiracion_Loop+0x1b8>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d106      	bne.n	8004652 <tarea_Respiracion_Loop+0x62>
	{
		orden_filt = FILTRO_NEONATO;
 8004644:	4b59      	ldr	r3, [pc, #356]	; (80047ac <tarea_Respiracion_Loop+0x1bc>)
 8004646:	2208      	movs	r2, #8
 8004648:	601a      	str	r2, [r3, #0]
		lim_apnea=850;
 800464a:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <tarea_Respiracion_Loop+0x1c0>)
 800464c:	f240 3252 	movw	r2, #850	; 0x352
 8004650:	601a      	str	r2, [r3, #0]
	}


	cuenta_tiempo++;
 8004652:	4b58      	ldr	r3, [pc, #352]	; (80047b4 <tarea_Respiracion_Loop+0x1c4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	4a56      	ldr	r2, [pc, #344]	; (80047b4 <tarea_Respiracion_Loop+0x1c4>)
 800465a:	6013      	str	r3, [r2, #0]
	if (cuenta_tiempo > 300)		// 3 segundos
 800465c:	4b55      	ldr	r3, [pc, #340]	; (80047b4 <tarea_Respiracion_Loop+0x1c4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004664:	dd05      	ble.n	8004672 <tarea_Respiracion_Loop+0x82>
	{
		flag_envio = true;
 8004666:	4b54      	ldr	r3, [pc, #336]	; (80047b8 <tarea_Respiracion_Loop+0x1c8>)
 8004668:	2201      	movs	r2, #1
 800466a:	701a      	strb	r2, [r3, #0]
		cuenta_tiempo = 0;
 800466c:	4b51      	ldr	r3, [pc, #324]	; (80047b4 <tarea_Respiracion_Loop+0x1c4>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
	}
    // preprocesamiento de señal de entrada (suavizado y pre-filtrado)


    for (int is = 8; is > 0; is--)
 8004672:	2308      	movs	r3, #8
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
 8004676:	e00b      	b.n	8004690 <tarea_Respiracion_Loop+0xa0>
    {
    	xnt_sqm[is] = xnt_sqm[is-1];
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	3b01      	subs	r3, #1
 800467c:	4a4f      	ldr	r2, [pc, #316]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 800467e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004682:	494e      	ldr	r1, [pc, #312]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int is = 8; is > 0; is--)
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	3b01      	subs	r3, #1
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	2b00      	cmp	r3, #0
 8004694:	dcf0      	bgt.n	8004678 <tarea_Respiracion_Loop+0x88>
    }
    xnt_sqm[0] = ads_Resp_int;
 8004696:	4b4a      	ldr	r3, [pc, #296]	; (80047c0 <tarea_Respiracion_Loop+0x1d0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a48      	ldr	r2, [pc, #288]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 800469c:	6013      	str	r3, [r2, #0]

    ynt_sqm = (-21*xnt_sqm[0] + 14*xnt_sqm[1] + 39*xnt_sqm[2] + 54*xnt_sqm[3] + 59*xnt_sqm[4] + 54*xnt_sqm[5]+ 39*xnt_sqm[6] + 14*xnt_sqm[7] -21*xnt_sqm[8])/231;
 800469e:	4b47      	ldr	r3, [pc, #284]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f06f 0214 	mvn.w	r2, #20
 80046a6:	fb02 f103 	mul.w	r1, r2, r3
 80046aa:	4b44      	ldr	r3, [pc, #272]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	4419      	add	r1, r3
 80046b8:	4b40      	ldr	r3, [pc, #256]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	18ca      	adds	r2, r1, r3
 80046c8:	4b3c      	ldr	r3, [pc, #240]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2136      	movs	r1, #54	; 0x36
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	18d1      	adds	r1, r2, r3
 80046d4:	4b39      	ldr	r3, [pc, #228]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	4613      	mov	r3, r2
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	18ca      	adds	r2, r1, r3
 80046e4:	4b35      	ldr	r3, [pc, #212]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	2136      	movs	r1, #54	; 0x36
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	18d1      	adds	r1, r2, r3
 80046f0:	4b32      	ldr	r3, [pc, #200]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 80046f2:	699a      	ldr	r2, [r3, #24]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	4419      	add	r1, r3
 8004700:	4b2e      	ldr	r3, [pc, #184]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	18ca      	adds	r2, r1, r3
 800470e:	4b2b      	ldr	r3, [pc, #172]	; (80047bc <tarea_Respiracion_Loop+0x1cc>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f06f 0114 	mvn.w	r1, #20
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <tarea_Respiracion_Loop+0x1d4>)
 800471e:	fb82 1203 	smull	r1, r2, r2, r3
 8004722:	441a      	add	r2, r3
 8004724:	11d2      	asrs	r2, r2, #7
 8004726:	17db      	asrs	r3, r3, #31
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <tarea_Respiracion_Loop+0x1d8>)
 800472c:	6013      	str	r3, [r2, #0]

    float respira_in = (float)ynt_sqm;
 800472e:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <tarea_Respiracion_Loop+0x1d8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800473a:	edc7 7a01 	vstr	s15, [r7, #4]

    //////filtro
    filteredResp = preFiltResp + (alpha * (respira_in - preFiltResp));
 800473e:	4b23      	ldr	r3, [pc, #140]	; (80047cc <tarea_Respiracion_Loop+0x1dc>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	ed97 7a01 	vldr	s14, [r7, #4]
 8004748:	ee37 7a67 	vsub.f32	s14, s14, s15
 800474c:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <tarea_Respiracion_Loop+0x1e0>)
 800474e:	edd3 7a00 	vldr	s15, [r3]
 8004752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <tarea_Respiracion_Loop+0x1dc>)
 8004758:	edd3 7a00 	vldr	s15, [r3]
 800475c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004760:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <tarea_Respiracion_Loop+0x1e4>)
 8004762:	edc3 7a00 	vstr	s15, [r3]
    preFiltResp = filteredResp;
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <tarea_Respiracion_Loop+0x1e4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a18      	ldr	r2, [pc, #96]	; (80047cc <tarea_Respiracion_Loop+0x1dc>)
 800476c:	6013      	str	r3, [r2, #0]

    raw_prefiltred = filteredResp;
 800476e:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <tarea_Respiracion_Loop+0x1e4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <tarea_Respiracion_Loop+0x1e8>)
 8004774:	6013      	str	r3, [r2, #0]

    //filtrado de respiración
    arm_fir_f32 (&filtroResp_Instancia,&raw_prefiltred,&salidaFiltroRespiracion,FILTRO_RESP_TAM_BLOQUE);
 8004776:	2301      	movs	r3, #1
 8004778:	4a18      	ldr	r2, [pc, #96]	; (80047dc <tarea_Respiracion_Loop+0x1ec>)
 800477a:	4917      	ldr	r1, [pc, #92]	; (80047d8 <tarea_Respiracion_Loop+0x1e8>)
 800477c:	4818      	ldr	r0, [pc, #96]	; (80047e0 <tarea_Respiracion_Loop+0x1f0>)
 800477e:	f010 fd19 	bl	80151b4 <arm_fir_f32>

    //Suavizado de la respiración filtrada
    respiracionSuavizada = 0;
 8004782:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <tarea_Respiracion_Loop+0x1f4>)
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
    float max_suav = -340282346600000000;
 800478a:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <tarea_Respiracion_Loop+0x1f8>)
 800478c:	623b      	str	r3, [r7, #32]
    float min_suav = 3402823466000000000;//10000000;
 800478e:	4b17      	ldr	r3, [pc, #92]	; (80047ec <tarea_Respiracion_Loop+0x1fc>)
 8004790:	61fb      	str	r3, [r7, #28]
    //float min_suav = 340282346600000000000000000000000000000000000000;//10000000;
    for (int i = (orden_filt - 1); i > 0; i--)
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <tarea_Respiracion_Loop+0x1bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3b01      	subs	r3, #1
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e06b      	b.n	8004874 <tarea_Respiracion_Loop+0x284>
 800479c:	20000004 	.word	0x20000004
 80047a0:	20001258 	.word	0x20001258
 80047a4:	200034bc 	.word	0x200034bc
 80047a8:	200015c9 	.word	0x200015c9
 80047ac:	2000477c 	.word	0x2000477c
 80047b0:	20001250 	.word	0x20001250
 80047b4:	2000476c 	.word	0x2000476c
 80047b8:	20003598 	.word	0x20003598
 80047bc:	2000359c 	.word	0x2000359c
 80047c0:	200015f8 	.word	0x200015f8
 80047c4:	8dda5203 	.word	0x8dda5203
 80047c8:	200035c4 	.word	0x200035c4
 80047cc:	20004744 	.word	0x20004744
 80047d0:	20004750 	.word	0x20004750
 80047d4:	20004740 	.word	0x20004740
 80047d8:	20003590 	.word	0x20003590
 80047dc:	200034c0 	.word	0x200034c0
 80047e0:	20004784 	.word	0x20004784
 80047e4:	2000358c 	.word	0x2000358c
 80047e8:	dc971da0 	.word	0xdc971da0
 80047ec:	5e3ce508 	.word	0x5e3ce508
    {
    	arraySuavizado[i] = arraySuavizado[i - 1];
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	4a82      	ldr	r2, [pc, #520]	; (8004a00 <tarea_Respiracion_Loop+0x410>)
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4980      	ldr	r1, [pc, #512]	; (8004a00 <tarea_Respiracion_Loop+0x410>)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	601a      	str	r2, [r3, #0]
    	respiracionSuavizada += arraySuavizado[i];
 8004806:	4a7e      	ldr	r2, [pc, #504]	; (8004a00 <tarea_Respiracion_Loop+0x410>)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	ed93 7a00 	vldr	s14, [r3]
 8004812:	4b7c      	ldr	r3, [pc, #496]	; (8004a04 <tarea_Respiracion_Loop+0x414>)
 8004814:	edd3 7a00 	vldr	s15, [r3]
 8004818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800481c:	4b79      	ldr	r3, [pc, #484]	; (8004a04 <tarea_Respiracion_Loop+0x414>)
 800481e:	edc3 7a00 	vstr	s15, [r3]
    	if (arraySuavizado[i] > max_suav)
 8004822:	4a77      	ldr	r2, [pc, #476]	; (8004a00 <tarea_Respiracion_Loop+0x410>)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	edd3 7a00 	vldr	s15, [r3]
 800482e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483a:	d505      	bpl.n	8004848 <tarea_Respiracion_Loop+0x258>
    		max_suav = arraySuavizado[i];
 800483c:	4a70      	ldr	r2, [pc, #448]	; (8004a00 <tarea_Respiracion_Loop+0x410>)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	623b      	str	r3, [r7, #32]
    	if (arraySuavizado[i] < min_suav)
 8004848:	4a6d      	ldr	r2, [pc, #436]	; (8004a00 <tarea_Respiracion_Loop+0x410>)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	edd3 7a00 	vldr	s15, [r3]
 8004854:	ed97 7a07 	vldr	s14, [r7, #28]
 8004858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800485c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004860:	dd05      	ble.n	800486e <tarea_Respiracion_Loop+0x27e>
    		min_suav = arraySuavizado[i];
 8004862:	4a67      	ldr	r2, [pc, #412]	; (8004a00 <tarea_Respiracion_Loop+0x410>)
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	61fb      	str	r3, [r7, #28]
    for (int i = (orden_filt - 1); i > 0; i--)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	3b01      	subs	r3, #1
 8004872:	61bb      	str	r3, [r7, #24]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	dcba      	bgt.n	80047f0 <tarea_Respiracion_Loop+0x200>
    }

    arraySuavizado[0] = salidaFiltroRespiracion;
 800487a:	4b63      	ldr	r3, [pc, #396]	; (8004a08 <tarea_Respiracion_Loop+0x418>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a60      	ldr	r2, [pc, #384]	; (8004a00 <tarea_Respiracion_Loop+0x410>)
 8004880:	6013      	str	r3, [r2, #0]
    respiracionSuavizada += arraySuavizado[0] - max_suav - min_suav;
 8004882:	4b5f      	ldr	r3, [pc, #380]	; (8004a00 <tarea_Respiracion_Loop+0x410>)
 8004884:	ed93 7a00 	vldr	s14, [r3]
 8004888:	edd7 7a08 	vldr	s15, [r7, #32]
 800488c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004890:	edd7 7a07 	vldr	s15, [r7, #28]
 8004894:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004898:	4b5a      	ldr	r3, [pc, #360]	; (8004a04 <tarea_Respiracion_Loop+0x414>)
 800489a:	edd3 7a00 	vldr	s15, [r3]
 800489e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048a2:	4b58      	ldr	r3, [pc, #352]	; (8004a04 <tarea_Respiracion_Loop+0x414>)
 80048a4:	edc3 7a00 	vstr	s15, [r3]
    respiracionSuavizada = respiracionSuavizada / (orden_filt - 2);
 80048a8:	4b56      	ldr	r3, [pc, #344]	; (8004a04 <tarea_Respiracion_Loop+0x414>)
 80048aa:	edd3 6a00 	vldr	s13, [r3]
 80048ae:	4b57      	ldr	r3, [pc, #348]	; (8004a0c <tarea_Respiracion_Loop+0x41c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3b02      	subs	r3, #2
 80048b4:	ee07 3a90 	vmov	s15, r3
 80048b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c0:	4b50      	ldr	r3, [pc, #320]	; (8004a04 <tarea_Respiracion_Loop+0x414>)
 80048c2:	edc3 7a00 	vstr	s15, [r3]

    dxnt[cuenta_maximo] = respiracionSuavizada;
 80048c6:	4b52      	ldr	r3, [pc, #328]	; (8004a10 <tarea_Respiracion_Loop+0x420>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a4e      	ldr	r2, [pc, #312]	; (8004a04 <tarea_Respiracion_Loop+0x414>)
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	4951      	ldr	r1, [pc, #324]	; (8004a14 <tarea_Respiracion_Loop+0x424>)
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	601a      	str	r2, [r3, #0]
    cuenta_maximo++;
 80048d6:	4b4e      	ldr	r3, [pc, #312]	; (8004a10 <tarea_Respiracion_Loop+0x420>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3301      	adds	r3, #1
 80048dc:	4a4c      	ldr	r2, [pc, #304]	; (8004a10 <tarea_Respiracion_Loop+0x420>)
 80048de:	6013      	str	r3, [r2, #0]
    if (cuenta_maximo > tiempo_array)
 80048e0:	4b4b      	ldr	r3, [pc, #300]	; (8004a10 <tarea_Respiracion_Loop+0x420>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b4c      	ldr	r3, [pc, #304]	; (8004a18 <tarea_Respiracion_Loop+0x428>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	dd02      	ble.n	80048f2 <tarea_Respiracion_Loop+0x302>
    {
    	cuenta_maximo=0;
 80048ec:	4b48      	ldr	r3, [pc, #288]	; (8004a10 <tarea_Respiracion_Loop+0x420>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
    }
    max_RespSuave = -100000;
 80048f2:	4b4a      	ldr	r3, [pc, #296]	; (8004a1c <tarea_Respiracion_Loop+0x42c>)
 80048f4:	4a4a      	ldr	r2, [pc, #296]	; (8004a20 <tarea_Respiracion_Loop+0x430>)
 80048f6:	601a      	str	r2, [r3, #0]
    min_RespSuave = 100000;
 80048f8:	4b4a      	ldr	r3, [pc, #296]	; (8004a24 <tarea_Respiracion_Loop+0x434>)
 80048fa:	4a4b      	ldr	r2, [pc, #300]	; (8004a28 <tarea_Respiracion_Loop+0x438>)
 80048fc:	601a      	str	r2, [r3, #0]

    for (int idr = 0; idr < tiempo_array; idr++)
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e02c      	b.n	800495e <tarea_Respiracion_Loop+0x36e>
    {
    	if(dxnt[idr] > max_RespSuave)
 8004904:	4a43      	ldr	r2, [pc, #268]	; (8004a14 <tarea_Respiracion_Loop+0x424>)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	ed93 7a00 	vldr	s14, [r3]
 8004910:	4b42      	ldr	r3, [pc, #264]	; (8004a1c <tarea_Respiracion_Loop+0x42c>)
 8004912:	edd3 7a00 	vldr	s15, [r3]
 8004916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	dd06      	ble.n	800492e <tarea_Respiracion_Loop+0x33e>
    	{
    		max_RespSuave = dxnt[idr];
 8004920:	4a3c      	ldr	r2, [pc, #240]	; (8004a14 <tarea_Respiracion_Loop+0x424>)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a3c      	ldr	r2, [pc, #240]	; (8004a1c <tarea_Respiracion_Loop+0x42c>)
 800492c:	6013      	str	r3, [r2, #0]
    	}
    	if(dxnt[idr] < min_RespSuave)
 800492e:	4a39      	ldr	r2, [pc, #228]	; (8004a14 <tarea_Respiracion_Loop+0x424>)
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	ed93 7a00 	vldr	s14, [r3]
 800493a:	4b3a      	ldr	r3, [pc, #232]	; (8004a24 <tarea_Respiracion_Loop+0x434>)
 800493c:	edd3 7a00 	vldr	s15, [r3]
 8004940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004948:	d506      	bpl.n	8004958 <tarea_Respiracion_Loop+0x368>
    	{
    		min_RespSuave = dxnt[idr];
 800494a:	4a32      	ldr	r2, [pc, #200]	; (8004a14 <tarea_Respiracion_Loop+0x424>)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a33      	ldr	r2, [pc, #204]	; (8004a24 <tarea_Respiracion_Loop+0x434>)
 8004956:	6013      	str	r3, [r2, #0]
    for (int idr = 0; idr < tiempo_array; idr++)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	3301      	adds	r3, #1
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	4b2e      	ldr	r3, [pc, #184]	; (8004a18 <tarea_Respiracion_Loop+0x428>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	dbcd      	blt.n	8004904 <tarea_Respiracion_Loop+0x314>
    	}
    }

    dif_Maxmin = max_RespSuave - min_RespSuave;
 8004968:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <tarea_Respiracion_Loop+0x42c>)
 800496a:	ed93 7a00 	vldr	s14, [r3]
 800496e:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <tarea_Respiracion_Loop+0x434>)
 8004970:	edd3 7a00 	vldr	s15, [r3]
 8004974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004978:	4b2c      	ldr	r3, [pc, #176]	; (8004a2c <tarea_Respiracion_Loop+0x43c>)
 800497a:	edc3 7a00 	vstr	s15, [r3]

    aux_dif = (int)dif_Maxmin;
 800497e:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <tarea_Respiracion_Loop+0x43c>)
 8004980:	edd3 7a00 	vldr	s15, [r3]
 8004984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004988:	ee17 2a90 	vmov	r2, s15
 800498c:	4b28      	ldr	r3, [pc, #160]	; (8004a30 <tarea_Respiracion_Loop+0x440>)
 800498e:	601a      	str	r2, [r3, #0]

    }

*/
    //////////////////  Identificación de fase se inhalación y exhalación
    if (((respiracionSuavizada > ((dif_Maxmin*0.6) + min_RespSuave))) && (!flag_inhal_2))
 8004990:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <tarea_Respiracion_Loop+0x414>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f7fb fdd7 	bl	8000548 <__aeabi_f2d>
 800499a:	4680      	mov	r8, r0
 800499c:	4689      	mov	r9, r1
 800499e:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <tarea_Respiracion_Loop+0x43c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fb fdd0 	bl	8000548 <__aeabi_f2d>
 80049a8:	a313      	add	r3, pc, #76	; (adr r3, 80049f8 <tarea_Respiracion_Loop+0x408>)
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	f7fb fe23 	bl	80005f8 <__aeabi_dmul>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4692      	mov	sl, r2
 80049b8:	469b      	mov	fp, r3
 80049ba:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <tarea_Respiracion_Loop+0x434>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fb fdc2 	bl	8000548 <__aeabi_f2d>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4650      	mov	r0, sl
 80049ca:	4659      	mov	r1, fp
 80049cc:	f7fb fc5e 	bl	800028c <__adddf3>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4640      	mov	r0, r8
 80049d6:	4649      	mov	r1, r9
 80049d8:	f7fc f89e 	bl	8000b18 <__aeabi_dcmpgt>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d02a      	beq.n	8004a38 <tarea_Respiracion_Loop+0x448>
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <tarea_Respiracion_Loop+0x444>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d126      	bne.n	8004a38 <tarea_Respiracion_Loop+0x448>
    {
    	flag_inhal_2 = true;
 80049ea:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <tarea_Respiracion_Loop+0x444>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e052      	b.n	8004a98 <tarea_Respiracion_Loop+0x4a8>
 80049f2:	bf00      	nop
 80049f4:	f3af 8000 	nop.w
 80049f8:	33333333 	.word	0x33333333
 80049fc:	3fe33333 	.word	0x3fe33333
 8004a00:	200034c4 	.word	0x200034c4
 8004a04:	2000358c 	.word	0x2000358c
 8004a08:	200034c0 	.word	0x200034c0
 8004a0c:	2000477c 	.word	0x2000477c
 8004a10:	20004768 	.word	0x20004768
 8004a14:	20003610 	.word	0x20003610
 8004a18:	20001258 	.word	0x20001258
 8004a1c:	20001234 	.word	0x20001234
 8004a20:	c7c35000 	.word	0xc7c35000
 8004a24:	20001238 	.word	0x20001238
 8004a28:	47c35000 	.word	0x47c35000
 8004a2c:	20001244 	.word	0x20001244
 8004a30:	20001254 	.word	0x20001254
 8004a34:	20003596 	.word	0x20003596
    }
    else if (((respiracionSuavizada < ((dif_Maxmin*0.4) + min_RespSuave))) && (flag_inhal_2))
 8004a38:	4b8f      	ldr	r3, [pc, #572]	; (8004c78 <tarea_Respiracion_Loop+0x688>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fb fd83 	bl	8000548 <__aeabi_f2d>
 8004a42:	4680      	mov	r8, r0
 8004a44:	4689      	mov	r9, r1
 8004a46:	4b8d      	ldr	r3, [pc, #564]	; (8004c7c <tarea_Respiracion_Loop+0x68c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fb fd7c 	bl	8000548 <__aeabi_f2d>
 8004a50:	a385      	add	r3, pc, #532	; (adr r3, 8004c68 <tarea_Respiracion_Loop+0x678>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f7fb fdcf 	bl	80005f8 <__aeabi_dmul>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4692      	mov	sl, r2
 8004a60:	469b      	mov	fp, r3
 8004a62:	4b87      	ldr	r3, [pc, #540]	; (8004c80 <tarea_Respiracion_Loop+0x690>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fb fd6e 	bl	8000548 <__aeabi_f2d>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4650      	mov	r0, sl
 8004a72:	4659      	mov	r1, fp
 8004a74:	f7fb fc0a 	bl	800028c <__adddf3>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4649      	mov	r1, r9
 8004a80:	f7fc f82c 	bl	8000adc <__aeabi_dcmplt>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <tarea_Respiracion_Loop+0x4a8>
 8004a8a:	4b7e      	ldr	r3, [pc, #504]	; (8004c84 <tarea_Respiracion_Loop+0x694>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <tarea_Respiracion_Loop+0x4a8>
    {
    	flag_inhal_2 = false;
 8004a92:	4b7c      	ldr	r3, [pc, #496]	; (8004c84 <tarea_Respiracion_Loop+0x694>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
    }

    if (flag_inhal_2)
 8004a98:	4b7a      	ldr	r3, [pc, #488]	; (8004c84 <tarea_Respiracion_Loop+0x694>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8113 	beq.w	8004cc8 <tarea_Respiracion_Loop+0x6d8>
    {
    	if(flag_max==0)
 8004aa2:	4b79      	ldr	r3, [pc, #484]	; (8004c88 <tarea_Respiracion_Loop+0x698>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 80cd 	bne.w	8004c46 <tarea_Respiracion_Loop+0x656>
    	{
    		flag_max=1;
 8004aac:	4b76      	ldr	r3, [pc, #472]	; (8004c88 <tarea_Respiracion_Loop+0x698>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
    		delta_Z=max_Resp_2-min_Resp_2;
 8004ab2:	4b76      	ldr	r3, [pc, #472]	; (8004c8c <tarea_Respiracion_Loop+0x69c>)
 8004ab4:	ed93 7a00 	vldr	s14, [r3]
 8004ab8:	4b75      	ldr	r3, [pc, #468]	; (8004c90 <tarea_Respiracion_Loop+0x6a0>)
 8004aba:	edd3 7a00 	vldr	s15, [r3]
 8004abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ac2:	4b74      	ldr	r3, [pc, #464]	; (8004c94 <tarea_Respiracion_Loop+0x6a4>)
 8004ac4:	edc3 7a00 	vstr	s15, [r3]
    		variable_auxiliar=100*fabs(delta_Z-delta_Z0)/delta_Z;
 8004ac8:	4b72      	ldr	r3, [pc, #456]	; (8004c94 <tarea_Respiracion_Loop+0x6a4>)
 8004aca:	ed93 7a00 	vldr	s14, [r3]
 8004ace:	4b72      	ldr	r3, [pc, #456]	; (8004c98 <tarea_Respiracion_Loop+0x6a8>)
 8004ad0:	edd3 7a00 	vldr	s15, [r3]
 8004ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ad8:	eef0 7ae7 	vabs.f32	s15, s15
 8004adc:	ee17 0a90 	vmov	r0, s15
 8004ae0:	f7fb fd32 	bl	8000548 <__aeabi_f2d>
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	4b6c      	ldr	r3, [pc, #432]	; (8004c9c <tarea_Respiracion_Loop+0x6ac>)
 8004aea:	f7fb fd85 	bl	80005f8 <__aeabi_dmul>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4690      	mov	r8, r2
 8004af4:	4699      	mov	r9, r3
 8004af6:	4b67      	ldr	r3, [pc, #412]	; (8004c94 <tarea_Respiracion_Loop+0x6a4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fb fd24 	bl	8000548 <__aeabi_f2d>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4640      	mov	r0, r8
 8004b06:	4649      	mov	r1, r9
 8004b08:	f7fb fea0 	bl	800084c <__aeabi_ddiv>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4610      	mov	r0, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	f7fc f820 	bl	8000b58 <__aeabi_d2iz>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4a61      	ldr	r2, [pc, #388]	; (8004ca0 <tarea_Respiracion_Loop+0x6b0>)
 8004b1c:	6013      	str	r3, [r2, #0]
    		//Respiration_Rate=100*(fabs(dif_rpm)/val_rpm_0);
			//variable_auxiliar=delta_Z0;
			if (((fabs(delta_Z-delta_Z0)/delta_Z)<.20)&&(100*(fabs(dif_rpm)/val_rpm_0)<20))
 8004b1e:	4b5d      	ldr	r3, [pc, #372]	; (8004c94 <tarea_Respiracion_Loop+0x6a4>)
 8004b20:	ed93 7a00 	vldr	s14, [r3]
 8004b24:	4b5c      	ldr	r3, [pc, #368]	; (8004c98 <tarea_Respiracion_Loop+0x6a8>)
 8004b26:	edd3 7a00 	vldr	s15, [r3]
 8004b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b2e:	eef0 7ae7 	vabs.f32	s15, s15
 8004b32:	ee17 0a90 	vmov	r0, s15
 8004b36:	f7fb fd07 	bl	8000548 <__aeabi_f2d>
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	4689      	mov	r9, r1
 8004b3e:	4b55      	ldr	r3, [pc, #340]	; (8004c94 <tarea_Respiracion_Loop+0x6a4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fb fd00 	bl	8000548 <__aeabi_f2d>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	4649      	mov	r1, r9
 8004b50:	f7fb fe7c 	bl	800084c <__aeabi_ddiv>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	a344      	add	r3, pc, #272	; (adr r3, 8004c70 <tarea_Respiracion_Loop+0x680>)
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	f7fb ffbb 	bl	8000adc <__aeabi_dcmplt>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d03c      	beq.n	8004be6 <tarea_Respiracion_Loop+0x5f6>
 8004b6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ca4 <tarea_Respiracion_Loop+0x6b4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fb fcd7 	bl	8000524 <__aeabi_i2d>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4614      	mov	r4, r2
 8004b7c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004b80:	4b49      	ldr	r3, [pc, #292]	; (8004ca8 <tarea_Respiracion_Loop+0x6b8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fb fccd 	bl	8000524 <__aeabi_i2d>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4620      	mov	r0, r4
 8004b90:	4629      	mov	r1, r5
 8004b92:	f7fb fe5b 	bl	800084c <__aeabi_ddiv>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <tarea_Respiracion_Loop+0x6ac>)
 8004ba4:	f7fb fd28 	bl	80005f8 <__aeabi_dmul>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	4b3d      	ldr	r3, [pc, #244]	; (8004cac <tarea_Respiracion_Loop+0x6bc>)
 8004bb6:	f7fb ff91 	bl	8000adc <__aeabi_dcmplt>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d012      	beq.n	8004be6 <tarea_Respiracion_Loop+0x5f6>
			{
				cuenta_Nograph--;
 8004bc0:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <tarea_Respiracion_Loop+0x6c0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	4a3a      	ldr	r2, [pc, #232]	; (8004cb0 <tarea_Respiracion_Loop+0x6c0>)
 8004bc8:	6013      	str	r3, [r2, #0]
				if (cuenta_Nograph <=0)
 8004bca:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <tarea_Respiracion_Loop+0x6c0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	dc2d      	bgt.n	8004c2e <tarea_Respiracion_Loop+0x63e>
				{
					flag_graficar=true;
 8004bd2:	4b38      	ldr	r3, [pc, #224]	; (8004cb4 <tarea_Respiracion_Loop+0x6c4>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
					flag_apnea = false;
 8004bd8:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <tarea_Respiracion_Loop+0x6c8>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
					cuenta_Nograph = 0;
 8004bde:	4b34      	ldr	r3, [pc, #208]	; (8004cb0 <tarea_Respiracion_Loop+0x6c0>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
				if (cuenta_Nograph <=0)
 8004be4:	e023      	b.n	8004c2e <tarea_Respiracion_Loop+0x63e>
				}
			}
			else
			{
				cuenta_Nograph++;
 8004be6:	4b32      	ldr	r3, [pc, #200]	; (8004cb0 <tarea_Respiracion_Loop+0x6c0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3301      	adds	r3, #1
 8004bec:	4a30      	ldr	r2, [pc, #192]	; (8004cb0 <tarea_Respiracion_Loop+0x6c0>)
 8004bee:	6013      	str	r3, [r2, #0]
				if (cuenta_Nograph > (3+(offset_frec/20)))
 8004bf0:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <tarea_Respiracion_Loop+0x6cc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a32      	ldr	r2, [pc, #200]	; (8004cc0 <tarea_Respiracion_Loop+0x6d0>)
 8004bf6:	fb82 1203 	smull	r1, r2, r2, r3
 8004bfa:	10d2      	asrs	r2, r2, #3
 8004bfc:	17db      	asrs	r3, r3, #31
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	1cda      	adds	r2, r3, #3
 8004c02:	4b2b      	ldr	r3, [pc, #172]	; (8004cb0 <tarea_Respiracion_Loop+0x6c0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	da11      	bge.n	8004c2e <tarea_Respiracion_Loop+0x63e>
				{
					flag_graficar=false;
 8004c0a:	4b2a      	ldr	r3, [pc, #168]	; (8004cb4 <tarea_Respiracion_Loop+0x6c4>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
					flag_apnea = flag_activa_apnea;
 8004c10:	4b2c      	ldr	r3, [pc, #176]	; (8004cc4 <tarea_Respiracion_Loop+0x6d4>)
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <tarea_Respiracion_Loop+0x6c8>)
 8004c16:	701a      	strb	r2, [r3, #0]
					//if (cuenta_Nograph > 4)
						cuenta_Nograph=(3+(offset_frec/20));//4;
 8004c18:	4b28      	ldr	r3, [pc, #160]	; (8004cbc <tarea_Respiracion_Loop+0x6cc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a28      	ldr	r2, [pc, #160]	; (8004cc0 <tarea_Respiracion_Loop+0x6d0>)
 8004c1e:	fb82 1203 	smull	r1, r2, r2, r3
 8004c22:	10d2      	asrs	r2, r2, #3
 8004c24:	17db      	asrs	r3, r3, #31
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	3303      	adds	r3, #3
 8004c2a:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <tarea_Respiracion_Loop+0x6c0>)
 8004c2c:	6013      	str	r3, [r2, #0]
				}
			}
			delta_Z0=delta_Z;
 8004c2e:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <tarea_Respiracion_Loop+0x6a4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <tarea_Respiracion_Loop+0x6a8>)
 8004c34:	6013      	str	r3, [r2, #0]
					cta_maximo2=0;
					flag_graficar=false;
				}
    		}
    		*/
    		max_Resp_2 = respiracionSuavizada;
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <tarea_Respiracion_Loop+0x688>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a14      	ldr	r2, [pc, #80]	; (8004c8c <tarea_Respiracion_Loop+0x69c>)
 8004c3c:	6013      	str	r3, [r2, #0]
    		min_Resp_2 = respiracionSuavizada;
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <tarea_Respiracion_Loop+0x688>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <tarea_Respiracion_Loop+0x6a0>)
 8004c44:	6013      	str	r3, [r2, #0]
    	}
    	if (respiracionSuavizada > max_Resp_2)
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <tarea_Respiracion_Loop+0x688>)
 8004c48:	ed93 7a00 	vldr	s14, [r3]
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <tarea_Respiracion_Loop+0x69c>)
 8004c4e:	edd3 7a00 	vldr	s15, [r3]
 8004c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5a:	dd4a      	ble.n	8004cf2 <tarea_Respiracion_Loop+0x702>
		{
			max_Resp_2 = respiracionSuavizada;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <tarea_Respiracion_Loop+0x688>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <tarea_Respiracion_Loop+0x69c>)
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	e045      	b.n	8004cf2 <tarea_Respiracion_Loop+0x702>
 8004c66:	bf00      	nop
 8004c68:	9999999a 	.word	0x9999999a
 8004c6c:	3fd99999 	.word	0x3fd99999
 8004c70:	9999999a 	.word	0x9999999a
 8004c74:	3fc99999 	.word	0x3fc99999
 8004c78:	2000358c 	.word	0x2000358c
 8004c7c:	20001244 	.word	0x20001244
 8004c80:	20001238 	.word	0x20001238
 8004c84:	20003596 	.word	0x20003596
 8004c88:	20004780 	.word	0x20004780
 8004c8c:	20004748 	.word	0x20004748
 8004c90:	20001240 	.word	0x20001240
 8004c94:	20004758 	.word	0x20004758
 8004c98:	2000475c 	.word	0x2000475c
 8004c9c:	40590000 	.word	0x40590000
 8004ca0:	2000161c 	.word	0x2000161c
 8004ca4:	20004778 	.word	0x20004778
 8004ca8:	20004774 	.word	0x20004774
 8004cac:	40340000 	.word	0x40340000
 8004cb0:	20004764 	.word	0x20004764
 8004cb4:	20001228 	.word	0x20001228
 8004cb8:	20003599 	.word	0x20003599
 8004cbc:	2000124c 	.word	0x2000124c
 8004cc0:	66666667 	.word	0x66666667
 8004cc4:	200015c8 	.word	0x200015c8
    	}
*/
    }
    else	// exhalación
    {
    	flag_max=0;
 8004cc8:	4ba3      	ldr	r3, [pc, #652]	; (8004f58 <tarea_Respiracion_Loop+0x968>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
    	if (respiracionSuavizada < min_Resp_2)
 8004cce:	4ba3      	ldr	r3, [pc, #652]	; (8004f5c <tarea_Respiracion_Loop+0x96c>)
 8004cd0:	ed93 7a00 	vldr	s14, [r3]
 8004cd4:	4ba2      	ldr	r3, [pc, #648]	; (8004f60 <tarea_Respiracion_Loop+0x970>)
 8004cd6:	edd3 7a00 	vldr	s15, [r3]
 8004cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	d506      	bpl.n	8004cf2 <tarea_Respiracion_Loop+0x702>
		{
			min_Resp_2 = respiracionSuavizada;
 8004ce4:	4b9d      	ldr	r3, [pc, #628]	; (8004f5c <tarea_Respiracion_Loop+0x96c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a9d      	ldr	r2, [pc, #628]	; (8004f60 <tarea_Respiracion_Loop+0x970>)
 8004cea:	6013      	str	r3, [r2, #0]
			cta_minimo2 = 0;
 8004cec:	4b9d      	ldr	r3, [pc, #628]	; (8004f64 <tarea_Respiracion_Loop+0x974>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
    	}
    	*/
    }

    ////////////// Calculo de frecuencia respiratoria
    if ((flag_inhal_2) && (!flag_inhal))  //
 8004cf2:	4b9d      	ldr	r3, [pc, #628]	; (8004f68 <tarea_Respiracion_Loop+0x978>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80f5 	beq.w	8004ee6 <tarea_Respiracion_Loop+0x8f6>
 8004cfc:	4b9b      	ldr	r3, [pc, #620]	; (8004f6c <tarea_Respiracion_Loop+0x97c>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 80f0 	bne.w	8004ee6 <tarea_Respiracion_Loop+0x8f6>
    {
    	flag_inhal = true;
 8004d06:	4b99      	ldr	r3, [pc, #612]	; (8004f6c <tarea_Respiracion_Loop+0x97c>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
    	flag_inhal_3 = true;
 8004d0c:	4b98      	ldr	r3, [pc, #608]	; (8004f70 <tarea_Respiracion_Loop+0x980>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	701a      	strb	r2, [r3, #0]
    	tiempo_rpm1 = HAL_GetTick();
 8004d12:	f000 ffe9 	bl	8005ce8 <HAL_GetTick>
 8004d16:	ee07 0a90 	vmov	s15, r0
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	4b95      	ldr	r3, [pc, #596]	; (8004f74 <tarea_Respiracion_Loop+0x984>)
 8004d20:	edc3 7a00 	vstr	s15, [r3]
    	valor_rpm = 60000/(tiempo_rpm1-tiempo_rpm0);
 8004d24:	4b93      	ldr	r3, [pc, #588]	; (8004f74 <tarea_Respiracion_Loop+0x984>)
 8004d26:	ed93 7a00 	vldr	s14, [r3]
 8004d2a:	4b93      	ldr	r3, [pc, #588]	; (8004f78 <tarea_Respiracion_Loop+0x988>)
 8004d2c:	edd3 7a00 	vldr	s15, [r3]
 8004d30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d34:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004f7c <tarea_Respiracion_Loop+0x98c>
 8004d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3c:	4b90      	ldr	r3, [pc, #576]	; (8004f80 <tarea_Respiracion_Loop+0x990>)
 8004d3e:	edc3 7a00 	vstr	s15, [r3]
    	tiempo_rpm0 = HAL_GetTick();
 8004d42:	f000 ffd1 	bl	8005ce8 <HAL_GetTick>
 8004d46:	ee07 0a90 	vmov	s15, r0
 8004d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4e:	4b8a      	ldr	r3, [pc, #552]	; (8004f78 <tarea_Respiracion_Loop+0x988>)
 8004d50:	edc3 7a00 	vstr	s15, [r3]
    	if (valor_rpm < 200)
 8004d54:	4b8a      	ldr	r3, [pc, #552]	; (8004f80 <tarea_Respiracion_Loop+0x990>)
 8004d56:	edd3 7a00 	vldr	s15, [r3]
 8004d5a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004f84 <tarea_Respiracion_Loop+0x994>
 8004d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	f140 80b6 	bpl.w	8004ed6 <tarea_Respiracion_Loop+0x8e6>
    	{
    		val_rpm_1 = round(valor_rpm);
 8004d6a:	4b85      	ldr	r3, [pc, #532]	; (8004f80 <tarea_Respiracion_Loop+0x990>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fb fbea 	bl	8000548 <__aeabi_f2d>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	ec43 2b10 	vmov	d0, r2, r3
 8004d7c:	f010 fc7e 	bl	801567c <round>
 8004d80:	ec53 2b10 	vmov	r2, r3, d0
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	f7fb fee6 	bl	8000b58 <__aeabi_d2iz>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4a7e      	ldr	r2, [pc, #504]	; (8004f88 <tarea_Respiracion_Loop+0x998>)
 8004d90:	6013      	str	r3, [r2, #0]
    		dif_rpm = val_rpm_1 - val_rpm_0;
 8004d92:	4b7d      	ldr	r3, [pc, #500]	; (8004f88 <tarea_Respiracion_Loop+0x998>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b7d      	ldr	r3, [pc, #500]	; (8004f8c <tarea_Respiracion_Loop+0x99c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	4a7c      	ldr	r2, [pc, #496]	; (8004f90 <tarea_Respiracion_Loop+0x9a0>)
 8004d9e:	6013      	str	r3, [r2, #0]
    		if (val_rpm_0 > 0)
 8004da0:	4b7a      	ldr	r3, [pc, #488]	; (8004f8c <tarea_Respiracion_Loop+0x99c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	dd18      	ble.n	8004dda <tarea_Respiracion_Loop+0x7ea>
    			delta_RPM = fabs((dif_rpm)*100 / val_rpm_0);
 8004da8:	4b79      	ldr	r3, [pc, #484]	; (8004f90 <tarea_Respiracion_Loop+0x9a0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2264      	movs	r2, #100	; 0x64
 8004dae:	fb03 f202 	mul.w	r2, r3, r2
 8004db2:	4b76      	ldr	r3, [pc, #472]	; (8004f8c <tarea_Respiracion_Loop+0x99c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fb fbb2 	bl	8000524 <__aeabi_i2d>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f7fb feee 	bl	8000ba8 <__aeabi_d2f>
 8004dcc:	ee07 0a90 	vmov	s15, r0
 8004dd0:	eef0 7ae7 	vabs.f32	s15, s15
 8004dd4:	4b6f      	ldr	r3, [pc, #444]	; (8004f94 <tarea_Respiracion_Loop+0x9a4>)
 8004dd6:	edc3 7a00 	vstr	s15, [r3]

    		val_rpm_0 = val_rpm_1;
 8004dda:	4b6b      	ldr	r3, [pc, #428]	; (8004f88 <tarea_Respiracion_Loop+0x998>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a6b      	ldr	r2, [pc, #428]	; (8004f8c <tarea_Respiracion_Loop+0x99c>)
 8004de0:	6013      	str	r3, [r2, #0]
    		if ((dif_rpm < TOL_RPM) && (dif_rpm > -TOL_RPM))
 8004de2:	4b6b      	ldr	r3, [pc, #428]	; (8004f90 <tarea_Respiracion_Loop+0x9a0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b13      	cmp	r3, #19
 8004de8:	dc2a      	bgt.n	8004e40 <tarea_Respiracion_Loop+0x850>
 8004dea:	4b69      	ldr	r3, [pc, #420]	; (8004f90 <tarea_Respiracion_Loop+0x9a0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f113 0f13 	cmn.w	r3, #19
 8004df2:	db25      	blt.n	8004e40 <tarea_Respiracion_Loop+0x850>
    		{
    			for (int irp = (LIM_AR_RESP-1); irp > 0; irp--)
 8004df4:	2309      	movs	r3, #9
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	e00b      	b.n	8004e12 <tarea_Respiracion_Loop+0x822>
    			{
    				array_rpm[irp] = array_rpm[irp - 1];
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	4a66      	ldr	r2, [pc, #408]	; (8004f98 <tarea_Respiracion_Loop+0x9a8>)
 8004e00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e04:	4964      	ldr	r1, [pc, #400]	; (8004f98 <tarea_Respiracion_Loop+0x9a8>)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    			for (int irp = (LIM_AR_RESP-1); irp > 0; irp--)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	dcf0      	bgt.n	8004dfa <tarea_Respiracion_Loop+0x80a>
    			}
    			array_rpm[0] = round(valor_rpm);
 8004e18:	4b59      	ldr	r3, [pc, #356]	; (8004f80 <tarea_Respiracion_Loop+0x990>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fb fb93 	bl	8000548 <__aeabi_f2d>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	ec43 2b10 	vmov	d0, r2, r3
 8004e2a:	f010 fc27 	bl	801567c <round>
 8004e2e:	ec53 2b10 	vmov	r2, r3, d0
 8004e32:	4610      	mov	r0, r2
 8004e34:	4619      	mov	r1, r3
 8004e36:	f7fb fe8f 	bl	8000b58 <__aeabi_d2iz>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4a56      	ldr	r2, [pc, #344]	; (8004f98 <tarea_Respiracion_Loop+0x9a8>)
 8004e3e:	6013      	str	r3, [r2, #0]
    		}
    		sum_fr = 0;
 8004e40:	4b56      	ldr	r3, [pc, #344]	; (8004f9c <tarea_Respiracion_Loop+0x9ac>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
    		max_fr = 0;
 8004e46:	4b56      	ldr	r3, [pc, #344]	; (8004fa0 <tarea_Respiracion_Loop+0x9b0>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
    		min_fr = 500;
 8004e4c:	4b55      	ldr	r3, [pc, #340]	; (8004fa4 <tarea_Respiracion_Loop+0x9b4>)
 8004e4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e52:	601a      	str	r2, [r3, #0]
    		for (int ij = 0; ij < LIM_AR_RESP; ij++)
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	e027      	b.n	8004eaa <tarea_Respiracion_Loop+0x8ba>
    		{
    			if (array_rpm[ij] > max_fr)
 8004e5a:	4a4f      	ldr	r2, [pc, #316]	; (8004f98 <tarea_Respiracion_Loop+0x9a8>)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e62:	4b4f      	ldr	r3, [pc, #316]	; (8004fa0 <tarea_Respiracion_Loop+0x9b0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	dd05      	ble.n	8004e76 <tarea_Respiracion_Loop+0x886>
    			{
    				max_fr = array_rpm[ij];
 8004e6a:	4a4b      	ldr	r2, [pc, #300]	; (8004f98 <tarea_Respiracion_Loop+0x9a8>)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e72:	4a4b      	ldr	r2, [pc, #300]	; (8004fa0 <tarea_Respiracion_Loop+0x9b0>)
 8004e74:	6013      	str	r3, [r2, #0]
    			}
    			if (array_rpm[ij] < min_fr)
 8004e76:	4a48      	ldr	r2, [pc, #288]	; (8004f98 <tarea_Respiracion_Loop+0x9a8>)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e7e:	4b49      	ldr	r3, [pc, #292]	; (8004fa4 <tarea_Respiracion_Loop+0x9b4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	da05      	bge.n	8004e92 <tarea_Respiracion_Loop+0x8a2>
    			{
    				min_fr = array_rpm[ij];
 8004e86:	4a44      	ldr	r2, [pc, #272]	; (8004f98 <tarea_Respiracion_Loop+0x9a8>)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8e:	4a45      	ldr	r2, [pc, #276]	; (8004fa4 <tarea_Respiracion_Loop+0x9b4>)
 8004e90:	6013      	str	r3, [r2, #0]
    			}
    			sum_fr += array_rpm[ij];
 8004e92:	4a41      	ldr	r2, [pc, #260]	; (8004f98 <tarea_Respiracion_Loop+0x9a8>)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e9a:	4b40      	ldr	r3, [pc, #256]	; (8004f9c <tarea_Respiracion_Loop+0x9ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	4a3e      	ldr	r2, [pc, #248]	; (8004f9c <tarea_Respiracion_Loop+0x9ac>)
 8004ea2:	6013      	str	r3, [r2, #0]
    		for (int ij = 0; ij < LIM_AR_RESP; ij++)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b09      	cmp	r3, #9
 8004eae:	ddd4      	ble.n	8004e5a <tarea_Respiracion_Loop+0x86a>
    		}
    		prom_fr = (sum_fr - max_fr - min_fr) / (LIM_AR_RESP-2);
 8004eb0:	4b3a      	ldr	r3, [pc, #232]	; (8004f9c <tarea_Respiracion_Loop+0x9ac>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b3a      	ldr	r3, [pc, #232]	; (8004fa0 <tarea_Respiracion_Loop+0x9b0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1ad2      	subs	r2, r2, r3
 8004eba:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <tarea_Respiracion_Loop+0x9b4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	da00      	bge.n	8004ec6 <tarea_Respiracion_Loop+0x8d6>
 8004ec4:	3307      	adds	r3, #7
 8004ec6:	10db      	asrs	r3, r3, #3
 8004ec8:	ee07 3a90 	vmov	s15, r3
 8004ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ed0:	4b35      	ldr	r3, [pc, #212]	; (8004fa8 <tarea_Respiracion_Loop+0x9b8>)
 8004ed2:	edc3 7a00 	vstr	s15, [r3]
    	}

    	//delta_Z = max_ciclo - min_Resp_2;
    	//variable_auxiliar = cta_maximo2;
    	//variable_auxiliar = (int)delta_Z;
    	max_ciclo = 0;
 8004ed6:	4b35      	ldr	r3, [pc, #212]	; (8004fac <tarea_Respiracion_Loop+0x9bc>)
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
    	min_ciclo = 1000000;
 8004ede:	4b34      	ldr	r3, [pc, #208]	; (8004fb0 <tarea_Respiracion_Loop+0x9c0>)
 8004ee0:	4a34      	ldr	r2, [pc, #208]	; (8004fb4 <tarea_Respiracion_Loop+0x9c4>)
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e006      	b.n	8004ef4 <tarea_Respiracion_Loop+0x904>
    }
    else if (!flag_inhal_2)
 8004ee6:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <tarea_Respiracion_Loop+0x978>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d102      	bne.n	8004ef4 <tarea_Respiracion_Loop+0x904>
    {
    	flag_inhal = false;
 8004eee:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <tarea_Respiracion_Loop+0x97c>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
    }


    //if (cta_maximo2>=1)
    if (flag_graficar)
 8004ef4:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <tarea_Respiracion_Loop+0x9c8>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <tarea_Respiracion_Loop+0x916>
    {
    	graph3 = respiracionSuavizada;
 8004efc:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <tarea_Respiracion_Loop+0x96c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2e      	ldr	r2, [pc, #184]	; (8004fbc <tarea_Respiracion_Loop+0x9cc>)
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	e003      	b.n	8004f0e <tarea_Respiracion_Loop+0x91e>
    }

    else
    {
    	graph3 = respiracionSuavizada;
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <tarea_Respiracion_Loop+0x96c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2c      	ldr	r2, [pc, #176]	; (8004fbc <tarea_Respiracion_Loop+0x9cc>)
 8004f0c:	6013      	str	r3, [r2, #0]
    }

    //////////////   Detección y aviso de apnea

    if (flag_apnea)		// si esta activada la alarma de apnea & la bandera de apnea
 8004f0e:	4b2c      	ldr	r3, [pc, #176]	; (8004fc0 <tarea_Respiracion_Loop+0x9d0>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d07c      	beq.n	8005010 <tarea_Respiracion_Loop+0xa20>
    {
    	cta_apnea_ON++;
 8004f16:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <tarea_Respiracion_Loop+0x9d4>)
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <tarea_Respiracion_Loop+0x9d4>)
 8004f20:	801a      	strh	r2, [r3, #0]
    	if (cta_apnea_ON > tiempo_apnea)
 8004f22:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <tarea_Respiracion_Loop+0x9d4>)
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <tarea_Respiracion_Loop+0x9d8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	f340 8090 	ble.w	8005052 <tarea_Respiracion_Loop+0xa62>
    	{
    		flag_alarmApnea = true;
 8004f32:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <tarea_Respiracion_Loop+0x9dc>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
    		cta_ap++;
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <tarea_Respiracion_Loop+0x9e0>)
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <tarea_Respiracion_Loop+0x9e0>)
 8004f42:	801a      	strh	r2, [r3, #0]
    		if (cta_ap == 1)
 8004f44:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <tarea_Respiracion_Loop+0x9e0>)
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d153      	bne.n	8004ff4 <tarea_Respiracion_Loop+0xa04>
    		{
    			msgApnea = true;
 8004f4c:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <tarea_Respiracion_Loop+0x9e4>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	701a      	strb	r2, [r3, #0]
    			for (int irp = (LIM_AR_RESP-1); irp >= 0; irp--)
 8004f52:	2309      	movs	r3, #9
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	e047      	b.n	8004fe8 <tarea_Respiracion_Loop+0x9f8>
 8004f58:	20004780 	.word	0x20004780
 8004f5c:	2000358c 	.word	0x2000358c
 8004f60:	20001240 	.word	0x20001240
 8004f64:	20004760 	.word	0x20004760
 8004f68:	20003596 	.word	0x20003596
 8004f6c:	20003595 	.word	0x20003595
 8004f70:	20003597 	.word	0x20003597
 8004f74:	20003604 	.word	0x20003604
 8004f78:	20003608 	.word	0x20003608
 8004f7c:	476a6000 	.word	0x476a6000
 8004f80:	200035d0 	.word	0x200035d0
 8004f84:	43480000 	.word	0x43480000
 8004f88:	20004770 	.word	0x20004770
 8004f8c:	20004774 	.word	0x20004774
 8004f90:	20004778 	.word	0x20004778
 8004f94:	2000474c 	.word	0x2000474c
 8004f98:	200035d4 	.word	0x200035d4
 8004f9c:	2000360c 	.word	0x2000360c
 8004fa0:	200035cc 	.word	0x200035cc
 8004fa4:	2000122c 	.word	0x2000122c
 8004fa8:	20001230 	.word	0x20001230
 8004fac:	20004754 	.word	0x20004754
 8004fb0:	20001248 	.word	0x20001248
 8004fb4:	49742400 	.word	0x49742400
 8004fb8:	20001228 	.word	0x20001228
 8004fbc:	20001610 	.word	0x20001610
 8004fc0:	20003599 	.word	0x20003599
 8004fc4:	200035c8 	.word	0x200035c8
 8004fc8:	200034bc 	.word	0x200034bc
 8004fcc:	20003594 	.word	0x20003594
 8004fd0:	200035ca 	.word	0x200035ca
 8004fd4:	20001624 	.word	0x20001624
    			{
    				array_rpm[irp] = 0;
 8004fd8:	4a42      	ldr	r2, [pc, #264]	; (80050e4 <tarea_Respiracion_Loop+0xaf4>)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2100      	movs	r1, #0
 8004fde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    			for (int irp = (LIM_AR_RESP-1); irp >= 0; irp--)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	daf4      	bge.n	8004fd8 <tarea_Respiracion_Loop+0x9e8>
    			}
    	//		Respiration_Rate = 0;
    			cta_ciclo = 0;
 8004fee:	4b3e      	ldr	r3, [pc, #248]	; (80050e8 <tarea_Respiracion_Loop+0xaf8>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
    		}
    		Respiration_Rate = 0;
 8004ff4:	4b3d      	ldr	r3, [pc, #244]	; (80050ec <tarea_Respiracion_Loop+0xafc>)
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
    		if (cta_ap > 25000)
 8004ffc:	4b3c      	ldr	r3, [pc, #240]	; (80050f0 <tarea_Respiracion_Loop+0xb00>)
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8005004:	4293      	cmp	r3, r2
 8005006:	d924      	bls.n	8005052 <tarea_Respiracion_Loop+0xa62>
    			cta_ap = 2;
 8005008:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <tarea_Respiracion_Loop+0xb00>)
 800500a:	2202      	movs	r2, #2
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	e020      	b.n	8005052 <tarea_Respiracion_Loop+0xa62>
    	}
    }
    else
    {
    	if(flag_inhal_3)
 8005010:	4b38      	ldr	r3, [pc, #224]	; (80050f4 <tarea_Respiracion_Loop+0xb04>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <tarea_Respiracion_Loop+0xa40>
    	{
    		flag_inhal_3 = false;
 8005018:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <tarea_Respiracion_Loop+0xb04>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
    		cta_ciclo++;
 800501e:	4b32      	ldr	r3, [pc, #200]	; (80050e8 <tarea_Respiracion_Loop+0xaf8>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	3301      	adds	r3, #1
 8005024:	b2da      	uxtb	r2, r3
 8005026:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <tarea_Respiracion_Loop+0xaf8>)
 8005028:	701a      	strb	r2, [r3, #0]
    		if (cta_ciclo > 5000)
    			cta_ciclo = 0;
    		cta_apnea_ON = 0;
 800502a:	4b33      	ldr	r3, [pc, #204]	; (80050f8 <tarea_Respiracion_Loop+0xb08>)
 800502c:	2200      	movs	r2, #0
 800502e:	801a      	strh	r2, [r3, #0]
    		//flag_graficar = true;
    	}
    	if ((cta_ciclo > 3) && (flag_alarmApnea))
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <tarea_Respiracion_Loop+0xaf8>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d90c      	bls.n	8005052 <tarea_Respiracion_Loop+0xa62>
 8005038:	4b30      	ldr	r3, [pc, #192]	; (80050fc <tarea_Respiracion_Loop+0xb0c>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <tarea_Respiracion_Loop+0xa62>
    	{
    		flag_alarmApnea = false;
 8005040:	4b2e      	ldr	r3, [pc, #184]	; (80050fc <tarea_Respiracion_Loop+0xb0c>)
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
    		msgApnea = false;
 8005046:	4b2e      	ldr	r3, [pc, #184]	; (8005100 <tarea_Respiracion_Loop+0xb10>)
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
    		cta_ap = 0;
 800504c:	4b28      	ldr	r3, [pc, #160]	; (80050f0 <tarea_Respiracion_Loop+0xb00>)
 800504e:	2200      	movs	r2, #0
 8005050:	801a      	strh	r2, [r3, #0]
    /////////// Envio de variables para graficación


    // Información generada:

    if (flag_envio)	// actualización de valor RPM cada 3 segundos
 8005052:	4b2c      	ldr	r3, [pc, #176]	; (8005104 <tarea_Respiracion_Loop+0xb14>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <tarea_Respiracion_Loop+0xa98>
    {
    	Respiration_Rate = round(prom_fr);
 800505a:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <tarea_Respiracion_Loop+0xb18>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fb fa72 	bl	8000548 <__aeabi_f2d>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	ec43 2b10 	vmov	d0, r2, r3
 800506c:	f010 fb06 	bl	801567c <round>
 8005070:	ec53 2b10 	vmov	r2, r3, d0
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	f7fb fd96 	bl	8000ba8 <__aeabi_d2f>
 800507c:	4603      	mov	r3, r0
 800507e:	4a1b      	ldr	r2, [pc, #108]	; (80050ec <tarea_Respiracion_Loop+0xafc>)
 8005080:	6013      	str	r3, [r2, #0]
    	flag_envio = false;
 8005082:	4b20      	ldr	r3, [pc, #128]	; (8005104 <tarea_Respiracion_Loop+0xb14>)
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
    }

  //  variable_auxiliar = cta_ciclo;
    original_res = dif_Maxmin;
 8005088:	4b20      	ldr	r3, [pc, #128]	; (800510c <tarea_Respiracion_Loop+0xb1c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a20      	ldr	r2, [pc, #128]	; (8005110 <tarea_Respiracion_Loop+0xb20>)
 800508e:	6013      	str	r3, [r2, #0]
    aux_grap_resp = round(prom_fr);		//round(min_RespSuave);//ads_Resp_int;  round(min_signalResp)
 8005090:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <tarea_Respiracion_Loop+0xb18>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f7fb fa57 	bl	8000548 <__aeabi_f2d>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	ec43 2b10 	vmov	d0, r2, r3
 80050a2:	f010 faeb 	bl	801567c <round>
 80050a6:	ec53 2b10 	vmov	r2, r3, d0
 80050aa:	4610      	mov	r0, r2
 80050ac:	4619      	mov	r1, r3
 80050ae:	f7fb fd53 	bl	8000b58 <__aeabi_d2iz>
 80050b2:	4603      	mov	r3, r0
 80050b4:	4a17      	ldr	r2, [pc, #92]	; (8005114 <tarea_Respiracion_Loop+0xb24>)
 80050b6:	6013      	str	r3, [r2, #0]
    variable_auxiliar2 = (int) flag_apnea * 10;	//dif_Maxmin;
 80050b8:	4b17      	ldr	r3, [pc, #92]	; (8005118 <tarea_Respiracion_Loop+0xb28>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ce:	4b13      	ldr	r3, [pc, #76]	; (800511c <tarea_Respiracion_Loop+0xb2c>)
 80050d0:	edc3 7a00 	vstr	s15, [r3]

    flag_Resp_RDY = true; // Indicar que el cálculo ha concluido
 80050d4:	4b12      	ldr	r3, [pc, #72]	; (8005120 <tarea_Respiracion_Loop+0xb30>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]

}
 80050da:	bf00      	nop
 80050dc:	3728      	adds	r7, #40	; 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e4:	200035d4 	.word	0x200035d4
 80050e8:	20001229 	.word	0x20001229
 80050ec:	20001618 	.word	0x20001618
 80050f0:	200035ca 	.word	0x200035ca
 80050f4:	20003597 	.word	0x20003597
 80050f8:	200035c8 	.word	0x200035c8
 80050fc:	20003594 	.word	0x20003594
 8005100:	20001624 	.word	0x20001624
 8005104:	20003598 	.word	0x20003598
 8005108:	20001230 	.word	0x20001230
 800510c:	20001244 	.word	0x20001244
 8005110:	200015fc 	.word	0x200015fc
 8005114:	20001614 	.word	0x20001614
 8005118:	20003599 	.word	0x20003599
 800511c:	20001620 	.word	0x20001620
 8005120:	2000160c 	.word	0x2000160c

08005124 <selectGraph>:
//Indicadores de los comandos recibidos
ledRGB_Instancia_t led1;
ledRGB_Instancia_t led2;

ecg_Graficas_s selectGraph (char *cadena)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
    ecg_Graficas_s gtmp;
    gtmp.ecg_FiltroG1 = derivacionesAGraficar.ecg_FiltroG1; //Mantener el valor de los modos de filtrado
 800512c:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <selectGraph+0xb0>)
 800512e:	789b      	ldrb	r3, [r3, #2]
 8005130:	73bb      	strb	r3, [r7, #14]
    gtmp.ecg_FiltroG2 = derivacionesAGraficar.ecg_FiltroG2;
 8005132:	4b28      	ldr	r3, [pc, #160]	; (80051d4 <selectGraph+0xb0>)
 8005134:	78db      	ldrb	r3, [r3, #3]
 8005136:	73fb      	strb	r3, [r7, #15]
    // 3: Base para interpretar el número, yo uso base 10
    // La cadena de donde está MSV_SEL_GRAFICAS (G) tiene la forma ~G:X,Y\n (puede haber caracteres de ruido antes de la G)
    // Encontrar donde está la G con "pos_indice"
    // Encontrar la coma con "pos_coma"

    int8_t pos_indice = findStr (cadena, CMD_SEL_GRAFICAS);
 8005138:	4927      	ldr	r1, [pc, #156]	; (80051d8 <selectGraph+0xb4>)
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fc fde4 	bl	8001d08 <findStr>
 8005140:	4603      	mov	r3, r0
 8005142:	75fb      	strb	r3, [r7, #23]
    int8_t pos_coma = findStr (cadena, ",");
 8005144:	4925      	ldr	r1, [pc, #148]	; (80051dc <selectGraph+0xb8>)
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc fdde 	bl	8001d08 <findStr>
 800514c:	4603      	mov	r3, r0
 800514e:	75bb      	strb	r3, [r7, #22]
    uint8_t x_val = (uint8_t) strtoul ((char*) &cadena[pos_indice + 2], NULL, 10);
 8005150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005154:	3302      	adds	r3, #2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	220a      	movs	r2, #10
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f010 fb46 	bl	80157f0 <strtoul>
 8005164:	4603      	mov	r3, r0
 8005166:	757b      	strb	r3, [r7, #21]
    uint8_t y_val = (uint8_t) strtoul ((char*) &cadena[pos_coma + 1], NULL, 10);
 8005168:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800516c:	3301      	adds	r3, #1
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4413      	add	r3, r2
 8005172:	220a      	movs	r2, #10
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f010 fb3a 	bl	80157f0 <strtoul>
 800517c:	4603      	mov	r3, r0
 800517e:	753b      	strb	r3, [r7, #20]
    // Seleccionar las graficas a utilizar
    if ((x_val == 0) || (x_val > 12))
 8005180:	7d7b      	ldrb	r3, [r7, #21]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <selectGraph+0x68>
 8005186:	7d7b      	ldrb	r3, [r7, #21]
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d902      	bls.n	8005192 <selectGraph+0x6e>
        {
            gtmp.g1 = DERIVACION_NULL;
 800518c:	2300      	movs	r3, #0
 800518e:	733b      	strb	r3, [r7, #12]
 8005190:	e001      	b.n	8005196 <selectGraph+0x72>
        }
    else
        {
            gtmp.g1 = x_val;
 8005192:	7d7b      	ldrb	r3, [r7, #21]
 8005194:	733b      	strb	r3, [r7, #12]
        }
    if ((y_val == 0) || (y_val > 12))
 8005196:	7d3b      	ldrb	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <selectGraph+0x7e>
 800519c:	7d3b      	ldrb	r3, [r7, #20]
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	d902      	bls.n	80051a8 <selectGraph+0x84>
        {
            gtmp.g2 = DERIVACION_NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	737b      	strb	r3, [r7, #13]
 80051a6:	e001      	b.n	80051ac <selectGraph+0x88>
        }
    else
        {
            gtmp.g2 = y_val;
 80051a8:	7d3b      	ldrb	r3, [r7, #20]
 80051aa:	737b      	strb	r3, [r7, #13]
        }
    return gtmp;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	2300      	movs	r3, #0
 80051b2:	7c3a      	ldrb	r2, [r7, #16]
 80051b4:	f362 0307 	bfi	r3, r2, #0, #8
 80051b8:	7c7a      	ldrb	r2, [r7, #17]
 80051ba:	f362 230f 	bfi	r3, r2, #8, #8
 80051be:	7cba      	ldrb	r2, [r7, #18]
 80051c0:	f362 4317 	bfi	r3, r2, #16, #8
 80051c4:	7cfa      	ldrb	r2, [r7, #19]
 80051c6:	f362 631f 	bfi	r3, r2, #24, #8
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200015c4 	.word	0x200015c4
 80051d8:	08018834 	.word	0x08018834
 80051dc:	08018838 	.word	0x08018838

080051e0 <tarea_RevisarComandos_Setup>:

void tarea_RevisarComandos_Setup (void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
    //Inicializar los leds
    led1.PuertoR = RGB_R1_GPIO_Port;
 80051e4:	4b1f      	ldr	r3, [pc, #124]	; (8005264 <tarea_RevisarComandos_Setup+0x84>)
 80051e6:	4a20      	ldr	r2, [pc, #128]	; (8005268 <tarea_RevisarComandos_Setup+0x88>)
 80051e8:	601a      	str	r2, [r3, #0]
    led1.PinR = RGB_R1_Pin;
 80051ea:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <tarea_RevisarComandos_Setup+0x84>)
 80051ec:	2204      	movs	r2, #4
 80051ee:	809a      	strh	r2, [r3, #4]
    led1.PuertoG = RGB_G1_GPIO_Port;
 80051f0:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <tarea_RevisarComandos_Setup+0x84>)
 80051f2:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <tarea_RevisarComandos_Setup+0x88>)
 80051f4:	609a      	str	r2, [r3, #8]
    led1.PinG = RGB_G1_Pin;
 80051f6:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <tarea_RevisarComandos_Setup+0x84>)
 80051f8:	2202      	movs	r2, #2
 80051fa:	819a      	strh	r2, [r3, #12]
    led1.PuertoB = RGB_B1_GPIO_Port;
 80051fc:	4b19      	ldr	r3, [pc, #100]	; (8005264 <tarea_RevisarComandos_Setup+0x84>)
 80051fe:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <tarea_RevisarComandos_Setup+0x88>)
 8005200:	611a      	str	r2, [r3, #16]
    led1.PinB = RGB_B1_Pin;
 8005202:	4b18      	ldr	r3, [pc, #96]	; (8005264 <tarea_RevisarComandos_Setup+0x84>)
 8005204:	2201      	movs	r2, #1
 8005206:	829a      	strh	r2, [r3, #20]
    led1.R = true;
 8005208:	4b16      	ldr	r3, [pc, #88]	; (8005264 <tarea_RevisarComandos_Setup+0x84>)
 800520a:	2201      	movs	r2, #1
 800520c:	759a      	strb	r2, [r3, #22]
    led1.G = true;
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <tarea_RevisarComandos_Setup+0x84>)
 8005210:	2201      	movs	r2, #1
 8005212:	75da      	strb	r2, [r3, #23]
    led1.B = true;
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <tarea_RevisarComandos_Setup+0x84>)
 8005216:	2201      	movs	r2, #1
 8005218:	761a      	strb	r2, [r3, #24]
    led2.PuertoR = RGB_R2_GPIO_Port;
 800521a:	4b14      	ldr	r3, [pc, #80]	; (800526c <tarea_RevisarComandos_Setup+0x8c>)
 800521c:	4a12      	ldr	r2, [pc, #72]	; (8005268 <tarea_RevisarComandos_Setup+0x88>)
 800521e:	601a      	str	r2, [r3, #0]
    led2.PinR = RGB_R2_Pin;
 8005220:	4b12      	ldr	r3, [pc, #72]	; (800526c <tarea_RevisarComandos_Setup+0x8c>)
 8005222:	2220      	movs	r2, #32
 8005224:	809a      	strh	r2, [r3, #4]
    led2.PuertoG = RGB_G2_GPIO_Port;
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <tarea_RevisarComandos_Setup+0x8c>)
 8005228:	4a0f      	ldr	r2, [pc, #60]	; (8005268 <tarea_RevisarComandos_Setup+0x88>)
 800522a:	609a      	str	r2, [r3, #8]
    led2.PinG = RGB_G2_Pin;
 800522c:	4b0f      	ldr	r3, [pc, #60]	; (800526c <tarea_RevisarComandos_Setup+0x8c>)
 800522e:	2210      	movs	r2, #16
 8005230:	819a      	strh	r2, [r3, #12]
    led2.PuertoB = RGB_B2_GPIO_Port;
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <tarea_RevisarComandos_Setup+0x8c>)
 8005234:	4a0c      	ldr	r2, [pc, #48]	; (8005268 <tarea_RevisarComandos_Setup+0x88>)
 8005236:	611a      	str	r2, [r3, #16]
    led2.PinB = RGB_B2_Pin;
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <tarea_RevisarComandos_Setup+0x8c>)
 800523a:	2208      	movs	r2, #8
 800523c:	829a      	strh	r2, [r3, #20]
    led2.R = true;
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <tarea_RevisarComandos_Setup+0x8c>)
 8005240:	2201      	movs	r2, #1
 8005242:	759a      	strb	r2, [r3, #22]
    led2.G = true;
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <tarea_RevisarComandos_Setup+0x8c>)
 8005246:	2201      	movs	r2, #1
 8005248:	75da      	strb	r2, [r3, #23]
    led2.B = true;
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <tarea_RevisarComandos_Setup+0x8c>)
 800524c:	2201      	movs	r2, #1
 800524e:	761a      	strb	r2, [r3, #24]
    rgbSetLedColor (&led1, RGB_C_ROJO);
 8005250:	2104      	movs	r1, #4
 8005252:	4804      	ldr	r0, [pc, #16]	; (8005264 <tarea_RevisarComandos_Setup+0x84>)
 8005254:	f7fc ff6d 	bl	8002132 <rgbSetLedColor>
    rgbSetLedColor (&led2, RGB_C_ROJO);
 8005258:	2104      	movs	r1, #4
 800525a:	4804      	ldr	r0, [pc, #16]	; (800526c <tarea_RevisarComandos_Setup+0x8c>)
 800525c:	f7fc ff69 	bl	8002132 <rgbSetLedColor>
}
 8005260:	bf00      	nop
 8005262:	bd80      	pop	{r7, pc}
 8005264:	200047d4 	.word	0x200047d4
 8005268:	40021000 	.word	0x40021000
 800526c:	200047f0 	.word	0x200047f0

08005270 <tarea_RevisarComandos_Loop>:

void tarea_RevisarComandos_Loop(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
    if (USB_RxFlag)
 8005276:	4bb0      	ldr	r3, [pc, #704]	; (8005538 <tarea_RevisarComandos_Loop+0x2c8>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8293 	beq.w	80057a6 <tarea_RevisarComandos_Loop+0x536>
        {
            if (strstr ((char*) USB_Rx_Buf, CMD_INICIAR))
 8005280:	4bae      	ldr	r3, [pc, #696]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2153      	movs	r1, #83	; 0x53
 8005286:	4618      	mov	r0, r3
 8005288:	f011 f84f 	bl	801632a <strchr>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <tarea_RevisarComandos_Loop+0x36>
                {
                    rgbSetLedColor (&led1, RGB_C_VERDE);
 8005292:	2102      	movs	r1, #2
 8005294:	48aa      	ldr	r0, [pc, #680]	; (8005540 <tarea_RevisarComandos_Loop+0x2d0>)
 8005296:	f7fc ff4c 	bl	8002132 <rgbSetLedColor>
                    //rgbSetLedColor (&led2, RGB_C_CYAN);
                    flag_MSV_graficar = true;
 800529a:	4baa      	ldr	r3, [pc, #680]	; (8005544 <tarea_RevisarComandos_Loop+0x2d4>)
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
                    ads_Start ();
 80052a0:	f7fc f9d2 	bl	8001648 <ads_Start>
 80052a4:	e274      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_DETENER))
 80052a6:	4ba5      	ldr	r3, [pc, #660]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2145      	movs	r1, #69	; 0x45
 80052ac:	4618      	mov	r0, r3
 80052ae:	f011 f83c 	bl	801632a <strchr>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d009      	beq.n	80052cc <tarea_RevisarComandos_Loop+0x5c>
                {
                    rgbSetLedColor (&led1, RGB_C_ROJO);
 80052b8:	2104      	movs	r1, #4
 80052ba:	48a1      	ldr	r0, [pc, #644]	; (8005540 <tarea_RevisarComandos_Loop+0x2d0>)
 80052bc:	f7fc ff39 	bl	8002132 <rgbSetLedColor>
                    //rgbSetLedColor (&led2, RGB_C_MAGENTA);
                    flag_MSV_graficar = false;
 80052c0:	4ba0      	ldr	r3, [pc, #640]	; (8005544 <tarea_RevisarComandos_Loop+0x2d4>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	701a      	strb	r2, [r3, #0]
                    ads_Stop ();
 80052c6:	f7fc fa05 	bl	80016d4 <ads_Stop>
 80052ca:	e261      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_INFO))
 80052cc:	4b9b      	ldr	r3, [pc, #620]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2149      	movs	r1, #73	; 0x49
 80052d2:	4618      	mov	r0, r3
 80052d4:	f011 f829 	bl	801632a <strchr>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <tarea_RevisarComandos_Loop+0x7e>
                {
                    rgbSetLedColor (&led1, RGB_C_AZUL);
 80052de:	2101      	movs	r1, #1
 80052e0:	4897      	ldr	r0, [pc, #604]	; (8005540 <tarea_RevisarComandos_Loop+0x2d0>)
 80052e2:	f7fc ff26 	bl	8002132 <rgbSetLedColor>
                    flag_show_info = true;
 80052e6:	4b98      	ldr	r3, [pc, #608]	; (8005548 <tarea_RevisarComandos_Loop+0x2d8>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e250      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_SEL_GRAFICAS))
 80052ee:	4b93      	ldr	r3, [pc, #588]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2147      	movs	r1, #71	; 0x47
 80052f4:	4618      	mov	r0, r3
 80052f6:	f011 f818 	bl	801632a <strchr>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d016      	beq.n	800532e <tarea_RevisarComandos_Loop+0xbe>
                {
                    rgbSetLedColor (&led1, RGB_C_CYAN);
 8005300:	2103      	movs	r1, #3
 8005302:	488f      	ldr	r0, [pc, #572]	; (8005540 <tarea_RevisarComandos_Loop+0x2d0>)
 8005304:	f7fc ff15 	bl	8002132 <rgbSetLedColor>
                    derivacionesAGraficar = selectGraph ((char*) USB_Rx_Buf);
 8005308:	4b8c      	ldr	r3, [pc, #560]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff ff09 	bl	8005124 <selectGraph>
 8005312:	4602      	mov	r2, r0
 8005314:	4b8d      	ldr	r3, [pc, #564]	; (800554c <tarea_RevisarComandos_Loop+0x2dc>)
 8005316:	4611      	mov	r1, r2
 8005318:	7019      	strb	r1, [r3, #0]
 800531a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800531e:	7059      	strb	r1, [r3, #1]
 8005320:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8005324:	7099      	strb	r1, [r3, #2]
 8005326:	f3c2 6207 	ubfx	r2, r2, #24, #8
 800532a:	70da      	strb	r2, [r3, #3]
 800532c:	e230      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_SEL_FILTRO))
 800532e:	4b83      	ldr	r3, [pc, #524]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2146      	movs	r1, #70	; 0x46
 8005334:	4618      	mov	r0, r3
 8005336:	f010 fff8 	bl	801632a <strchr>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8088 	beq.w	8005452 <tarea_RevisarComandos_Loop+0x1e2>
                {
                    //indiceComandoRecibido = 4;
                    rgbSetLedColor (&led1, RGB_C_MAGENTA);
 8005342:	2105      	movs	r1, #5
 8005344:	487e      	ldr	r0, [pc, #504]	; (8005540 <tarea_RevisarComandos_Loop+0x2d0>)
 8005346:	f7fc fef4 	bl	8002132 <rgbSetLedColor>
                    //Obtener el valor de Gx
                    char *cadena = (char*) USB_Rx_Buf;
 800534a:	4b7c      	ldr	r3, [pc, #496]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	607b      	str	r3, [r7, #4]

                    int8_t pos_indice = findStr (cadena,
 8005350:	497f      	ldr	r1, [pc, #508]	; (8005550 <tarea_RevisarComandos_Loop+0x2e0>)
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fc fcd8 	bl	8001d08 <findStr>
 8005358:	4603      	mov	r3, r0
 800535a:	70fb      	strb	r3, [r7, #3]
                    CMD_SEL_FILTRO); //Posición de la F
                    int8_t pos_coma = findStr (cadena, ",");
 800535c:	497d      	ldr	r1, [pc, #500]	; (8005554 <tarea_RevisarComandos_Loop+0x2e4>)
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fc fcd2 	bl	8001d08 <findStr>
 8005364:	4603      	mov	r3, r0
 8005366:	70bb      	strb	r3, [r7, #2]
                    uint8_t g_val = (uint8_t) strtoul ((char*) &cadena[pos_indice + 2], NULL, 10);
 8005368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800536c:	3302      	adds	r3, #2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	220a      	movs	r2, #10
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f010 fa3a 	bl	80157f0 <strtoul>
 800537c:	4603      	mov	r3, r0
 800537e:	707b      	strb	r3, [r7, #1]
                    //Configurar gráfica 1
                    if (g_val == 1)
 8005380:	787b      	ldrb	r3, [r7, #1]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d130      	bne.n	80053e8 <tarea_RevisarComandos_Loop+0x178>
                        {
                            if ((char) cadena[pos_coma + 1] == 'N')
 8005386:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800538a:	3301      	adds	r3, #1
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	4413      	add	r3, r2
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b4e      	cmp	r3, #78	; 0x4e
 8005394:	d103      	bne.n	800539e <tarea_RevisarComandos_Loop+0x12e>
                                {
                                    derivacionesAGraficar.ecg_FiltroG1 = FILTRO_NULL;
 8005396:	4b6d      	ldr	r3, [pc, #436]	; (800554c <tarea_RevisarComandos_Loop+0x2dc>)
 8005398:	2200      	movs	r2, #0
 800539a:	709a      	strb	r2, [r3, #2]
 800539c:	e1f8      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                                }
                            else if ((char) cadena[pos_coma + 1] == 'D')
 800539e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053a2:	3301      	adds	r3, #1
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b44      	cmp	r3, #68	; 0x44
 80053ac:	d103      	bne.n	80053b6 <tarea_RevisarComandos_Loop+0x146>
                                {
                                    derivacionesAGraficar.ecg_FiltroG1 = FILTRO_DIAGNOSTICO;
 80053ae:	4b67      	ldr	r3, [pc, #412]	; (800554c <tarea_RevisarComandos_Loop+0x2dc>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	709a      	strb	r2, [r3, #2]
 80053b4:	e1ec      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                                }
                            else if ((char) cadena[pos_coma + 1] == 'M')
 80053b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053ba:	3301      	adds	r3, #1
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	4413      	add	r3, r2
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b4d      	cmp	r3, #77	; 0x4d
 80053c4:	d103      	bne.n	80053ce <tarea_RevisarComandos_Loop+0x15e>
                                {
                                    derivacionesAGraficar.ecg_FiltroG1 = FILTRO_MONITOR;
 80053c6:	4b61      	ldr	r3, [pc, #388]	; (800554c <tarea_RevisarComandos_Loop+0x2dc>)
 80053c8:	2202      	movs	r2, #2
 80053ca:	709a      	strb	r2, [r3, #2]
 80053cc:	e1e0      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                                }
                            else if ((char) cadena[pos_coma + 1] == 'A')
 80053ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053d2:	3301      	adds	r3, #1
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4413      	add	r3, r2
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b41      	cmp	r3, #65	; 0x41
 80053dc:	f040 81d8 	bne.w	8005790 <tarea_RevisarComandos_Loop+0x520>
                                {
                                    derivacionesAGraficar.ecg_FiltroG1 = FILTRO_MAXIMO;
 80053e0:	4b5a      	ldr	r3, [pc, #360]	; (800554c <tarea_RevisarComandos_Loop+0x2dc>)
 80053e2:	2203      	movs	r2, #3
 80053e4:	709a      	strb	r2, [r3, #2]
 80053e6:	e1d3      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                                }
                        }
                    //Configurar gráfica 2
                    else if (g_val == 2)
 80053e8:	787b      	ldrb	r3, [r7, #1]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	f040 81d0 	bne.w	8005790 <tarea_RevisarComandos_Loop+0x520>
                        {
                            if ((char) cadena[pos_coma + 1] == 'N')
 80053f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053f4:	3301      	adds	r3, #1
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4413      	add	r3, r2
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b4e      	cmp	r3, #78	; 0x4e
 80053fe:	d103      	bne.n	8005408 <tarea_RevisarComandos_Loop+0x198>
                                {
                                    derivacionesAGraficar.ecg_FiltroG2 = FILTRO_NULL;
 8005400:	4b52      	ldr	r3, [pc, #328]	; (800554c <tarea_RevisarComandos_Loop+0x2dc>)
 8005402:	2200      	movs	r2, #0
 8005404:	70da      	strb	r2, [r3, #3]
 8005406:	e1c3      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                                }
                            else if ((char) cadena[pos_coma + 1] == 'D')
 8005408:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800540c:	3301      	adds	r3, #1
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b44      	cmp	r3, #68	; 0x44
 8005416:	d103      	bne.n	8005420 <tarea_RevisarComandos_Loop+0x1b0>
                                {
                                    derivacionesAGraficar.ecg_FiltroG2 = FILTRO_DIAGNOSTICO;
 8005418:	4b4c      	ldr	r3, [pc, #304]	; (800554c <tarea_RevisarComandos_Loop+0x2dc>)
 800541a:	2201      	movs	r2, #1
 800541c:	70da      	strb	r2, [r3, #3]
 800541e:	e1b7      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                                }
                            else if ((char) cadena[pos_coma + 1] == 'M')
 8005420:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005424:	3301      	adds	r3, #1
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b4d      	cmp	r3, #77	; 0x4d
 800542e:	d103      	bne.n	8005438 <tarea_RevisarComandos_Loop+0x1c8>
                                {
                                    derivacionesAGraficar.ecg_FiltroG2 = FILTRO_MONITOR;
 8005430:	4b46      	ldr	r3, [pc, #280]	; (800554c <tarea_RevisarComandos_Loop+0x2dc>)
 8005432:	2202      	movs	r2, #2
 8005434:	70da      	strb	r2, [r3, #3]
 8005436:	e1ab      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                                }
                            else if ((char) cadena[pos_coma + 1] == 'A')
 8005438:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800543c:	3301      	adds	r3, #1
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b41      	cmp	r3, #65	; 0x41
 8005446:	f040 81a3 	bne.w	8005790 <tarea_RevisarComandos_Loop+0x520>
                                {
                                    derivacionesAGraficar.ecg_FiltroG2 = FILTRO_MAXIMO;
 800544a:	4b40      	ldr	r3, [pc, #256]	; (800554c <tarea_RevisarComandos_Loop+0x2dc>)
 800544c:	2203      	movs	r2, #3
 800544e:	70da      	strb	r2, [r3, #3]
 8005450:	e19e      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                                }
                        }
                }
            // Comandos de apnea
            else if (strstr ((char*) USB_Rx_Buf, CMD_APNEA_ON))
 8005452:	4b3a      	ldr	r3, [pc, #232]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2143      	movs	r1, #67	; 0x43
 8005458:	4618      	mov	r0, r3
 800545a:	f010 ff66 	bl	801632a <strchr>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d020      	beq.n	80054a6 <tarea_RevisarComandos_Loop+0x236>
                {
                    //indiceComandoRecibido = 5;
                    rgbSetLedColor (&led1, RGB_C_AMARILLO);
 8005464:	2106      	movs	r1, #6
 8005466:	4836      	ldr	r0, [pc, #216]	; (8005540 <tarea_RevisarComandos_Loop+0x2d0>)
 8005468:	f7fc fe63 	bl	8002132 <rgbSetLedColor>
                    char *cadenaA = (char*) USB_Rx_Buf;
 800546c:	4b33      	ldr	r3, [pc, #204]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]
                    int8_t pos_ind = findStr (cadenaA, "C");
 8005472:	4939      	ldr	r1, [pc, #228]	; (8005558 <tarea_RevisarComandos_Loop+0x2e8>)
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7fc fc47 	bl	8001d08 <findStr>
 800547a:	4603      	mov	r3, r0
 800547c:	72fb      	strb	r3, [r7, #11]
                    int8_t tiempo_alarm = (int8_t) strtoul ((char*) &cadenaA[pos_ind + 2], NULL, 10);
 800547e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005482:	3302      	adds	r3, #2
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	220a      	movs	r2, #10
 800548a:	2100      	movs	r1, #0
 800548c:	4618      	mov	r0, r3
 800548e:	f010 f9af 	bl	80157f0 <strtoul>
 8005492:	4603      	mov	r3, r0
 8005494:	72bb      	strb	r3, [r7, #10]
                    flag_activa_apnea = true;
 8005496:	4b31      	ldr	r3, [pc, #196]	; (800555c <tarea_RevisarComandos_Loop+0x2ec>)
 8005498:	2201      	movs	r2, #1
 800549a:	701a      	strb	r2, [r3, #0]
                    valor_apnea = tiempo_alarm;
 800549c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80054a0:	4a2f      	ldr	r2, [pc, #188]	; (8005560 <tarea_RevisarComandos_Loop+0x2f0>)
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	e174      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_APNEA_OFF))
 80054a6:	4b25      	ldr	r3, [pc, #148]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2142      	movs	r1, #66	; 0x42
 80054ac:	4618      	mov	r0, r3
 80054ae:	f010 ff3c 	bl	801632a <strchr>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <tarea_RevisarComandos_Loop+0x258>
                {
                    //indiceComandoRecibido = 6;
                    rgbSetLedColor (&led1, RGB_C_AMARILLO);
 80054b8:	2106      	movs	r1, #6
 80054ba:	4821      	ldr	r0, [pc, #132]	; (8005540 <tarea_RevisarComandos_Loop+0x2d0>)
 80054bc:	f7fc fe39 	bl	8002132 <rgbSetLedColor>
                    flag_activa_apnea = false;
 80054c0:	4b26      	ldr	r3, [pc, #152]	; (800555c <tarea_RevisarComandos_Loop+0x2ec>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	e163      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            // Comando para tipo de paciente
            else if (strstr ((char*) USB_Rx_Buf, CMD_TIPO_PACIENTE))
 80054c8:	4b1c      	ldr	r3, [pc, #112]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2154      	movs	r1, #84	; 0x54
 80054ce:	4618      	mov	r0, r3
 80054d0:	f010 ff2b 	bl	801632a <strchr>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d048      	beq.n	800556c <tarea_RevisarComandos_Loop+0x2fc>
            {
            	char *cadenaA = (char*) USB_Rx_Buf;
 80054da:	4b18      	ldr	r3, [pc, #96]	; (800553c <tarea_RevisarComandos_Loop+0x2cc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	617b      	str	r3, [r7, #20]
            	int8_t pos_ind = findStr (cadenaA, "T");
 80054e0:	4920      	ldr	r1, [pc, #128]	; (8005564 <tarea_RevisarComandos_Loop+0x2f4>)
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f7fc fc10 	bl	8001d08 <findStr>
 80054e8:	4603      	mov	r3, r0
 80054ea:	74fb      	strb	r3, [r7, #19]
            	if ((char) cadenaA[pos_ind + 2] == 'A')		// Adulto
 80054ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80054f0:	3302      	adds	r3, #2
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4413      	add	r3, r2
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b41      	cmp	r3, #65	; 0x41
 80054fa:	d103      	bne.n	8005504 <tarea_RevisarComandos_Loop+0x294>
            		paciente_tipo = 0;
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <tarea_RevisarComandos_Loop+0x2f8>)
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e145      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
            	else if ((char) cadenaA[pos_ind + 2] == 'P')		// pediatrico
 8005504:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005508:	3302      	adds	r3, #2
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4413      	add	r3, r2
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b50      	cmp	r3, #80	; 0x50
 8005512:	d103      	bne.n	800551c <tarea_RevisarComandos_Loop+0x2ac>
            		paciente_tipo = 1;
 8005514:	4b14      	ldr	r3, [pc, #80]	; (8005568 <tarea_RevisarComandos_Loop+0x2f8>)
 8005516:	2201      	movs	r2, #1
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	e139      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
            	else if ((char) cadenaA[pos_ind + 2] == 'N')		// Neonato
 800551c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005520:	3302      	adds	r3, #2
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4413      	add	r3, r2
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b4e      	cmp	r3, #78	; 0x4e
 800552a:	f040 8131 	bne.w	8005790 <tarea_RevisarComandos_Loop+0x520>
            		paciente_tipo = 2;
 800552e:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <tarea_RevisarComandos_Loop+0x2f8>)
 8005530:	2202      	movs	r2, #2
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	e12c      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
 8005536:	bf00      	nop
 8005538:	20008a68 	.word	0x20008a68
 800553c:	20008a6c 	.word	0x20008a6c
 8005540:	200047d4 	.word	0x200047d4
 8005544:	200015c1 	.word	0x200015c1
 8005548:	20001600 	.word	0x20001600
 800554c:	200015c4 	.word	0x200015c4
 8005550:	0801883c 	.word	0x0801883c
 8005554:	08018838 	.word	0x08018838
 8005558:	08018840 	.word	0x08018840
 800555c:	200015c8 	.word	0x200015c8
 8005560:	20000004 	.word	0x20000004
 8005564:	08018844 	.word	0x08018844
 8005568:	200015c9 	.word	0x200015c9
            }
            ////	COMANDOS PARA ELEJIR ELECTRODO DE RESPIRACION
            else if (strstr ((char*) USB_Rx_Buf, CMD_REP_LL))
 800556c:	4b91      	ldr	r3, [pc, #580]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	214b      	movs	r1, #75	; 0x4b
 8005572:	4618      	mov	r0, r3
 8005574:	f010 fed9 	bl	801632a <strchr>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <tarea_RevisarComandos_Loop+0x31a>
            {
            	HAL_GPIO_WritePin(IN_1_GPIO_Port,IN_1_Pin,GPIO_PIN_RESET);
 800557e:	2200      	movs	r2, #0
 8005580:	2120      	movs	r1, #32
 8005582:	488d      	ldr	r0, [pc, #564]	; (80057b8 <tarea_RevisarComandos_Loop+0x548>)
 8005584:	f001 fd50 	bl	8007028 <HAL_GPIO_WritePin>
 8005588:	e102      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
            }
            else if (strstr ((char*) USB_Rx_Buf, CMD_REP_LA))
 800558a:	4b8a      	ldr	r3, [pc, #552]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	214a      	movs	r1, #74	; 0x4a
 8005590:	4618      	mov	r0, r3
 8005592:	f010 feca 	bl	801632a <strchr>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <tarea_RevisarComandos_Loop+0x338>
            {
            	HAL_GPIO_WritePin(IN_1_GPIO_Port,IN_1_Pin, GPIO_PIN_SET);
 800559c:	2201      	movs	r2, #1
 800559e:	2120      	movs	r1, #32
 80055a0:	4885      	ldr	r0, [pc, #532]	; (80057b8 <tarea_RevisarComandos_Loop+0x548>)
 80055a2:	f001 fd41 	bl	8007028 <HAL_GPIO_WritePin>
 80055a6:	e0f3      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
            }
            // Comandos para neopixel
            else if (strstr ((char*) USB_Rx_Buf, CMD_NEOPIXEL_PALTA_ROJO))
 80055a8:	4b82      	ldr	r3, [pc, #520]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2130      	movs	r1, #48	; 0x30
 80055ae:	4618      	mov	r0, r3
 80055b0:	f010 febb 	bl	801632a <strchr>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d011      	beq.n	80055de <tarea_RevisarComandos_Loop+0x36e>
                {
                    rgbSetLedColor (&led1, RGB_C_BLANCO);
 80055ba:	2107      	movs	r1, #7
 80055bc:	487f      	ldr	r0, [pc, #508]	; (80057bc <tarea_RevisarComandos_Loop+0x54c>)
 80055be:	f7fc fdb8 	bl	8002132 <rgbSetLedColor>
                    prioridadNeopixel = P_ALTA;
 80055c2:	4b7f      	ldr	r3, [pc, #508]	; (80057c0 <tarea_RevisarComandos_Loop+0x550>)
 80055c4:	22f9      	movs	r2, #249	; 0xf9
 80055c6:	801a      	strh	r2, [r3, #0]
                    modoLeds = MODO_PARPADEO;
 80055c8:	4b7e      	ldr	r3, [pc, #504]	; (80057c4 <tarea_RevisarComandos_Loop+0x554>)
 80055ca:	2202      	movs	r2, #2
 80055cc:	701a      	strb	r2, [r3, #0]
                    colorLeds = C_ROJO;
 80055ce:	4b7e      	ldr	r3, [pc, #504]	; (80057c8 <tarea_RevisarComandos_Loop+0x558>)
 80055d0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80055d4:	601a      	str	r2, [r3, #0]
                    blink_ON = true;
 80055d6:	4b7d      	ldr	r3, [pc, #500]	; (80057cc <tarea_RevisarComandos_Loop+0x55c>)
 80055d8:	2201      	movs	r2, #1
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	e0d8      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_NEOPIXEL_PMEDIA_AMARILLO))
 80055de:	4b75      	ldr	r3, [pc, #468]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2131      	movs	r1, #49	; 0x31
 80055e4:	4618      	mov	r0, r3
 80055e6:	f010 fea0 	bl	801632a <strchr>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d011      	beq.n	8005614 <tarea_RevisarComandos_Loop+0x3a4>
                {
                    rgbSetLedColor (&led1, RGB_C_BLANCO);
 80055f0:	2107      	movs	r1, #7
 80055f2:	4872      	ldr	r0, [pc, #456]	; (80057bc <tarea_RevisarComandos_Loop+0x54c>)
 80055f4:	f7fc fd9d 	bl	8002132 <rgbSetLedColor>
                    prioridadNeopixel = P_MEDIA;
 80055f8:	4b71      	ldr	r3, [pc, #452]	; (80057c0 <tarea_RevisarComandos_Loop+0x550>)
 80055fa:	f240 2289 	movw	r2, #649	; 0x289
 80055fe:	801a      	strh	r2, [r3, #0]
                    modoLeds = MODO_PARPADEO;
 8005600:	4b70      	ldr	r3, [pc, #448]	; (80057c4 <tarea_RevisarComandos_Loop+0x554>)
 8005602:	2202      	movs	r2, #2
 8005604:	701a      	strb	r2, [r3, #0]
                    colorLeds = C_AMARILLO;
 8005606:	4b70      	ldr	r3, [pc, #448]	; (80057c8 <tarea_RevisarComandos_Loop+0x558>)
 8005608:	4a71      	ldr	r2, [pc, #452]	; (80057d0 <tarea_RevisarComandos_Loop+0x560>)
 800560a:	601a      	str	r2, [r3, #0]
                    blink_ON = true;
 800560c:	4b6f      	ldr	r3, [pc, #444]	; (80057cc <tarea_RevisarComandos_Loop+0x55c>)
 800560e:	2201      	movs	r2, #1
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	e0bd      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_NEOPIXEL_PBAJA_BLANCO))
 8005614:	4b67      	ldr	r3, [pc, #412]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2132      	movs	r1, #50	; 0x32
 800561a:	4618      	mov	r0, r3
 800561c:	f010 fe85 	bl	801632a <strchr>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d012      	beq.n	800564c <tarea_RevisarComandos_Loop+0x3dc>
                {
                    rgbSetLedColor (&led1, RGB_C_BLANCO);
 8005626:	2107      	movs	r1, #7
 8005628:	4864      	ldr	r0, [pc, #400]	; (80057bc <tarea_RevisarComandos_Loop+0x54c>)
 800562a:	f7fc fd82 	bl	8002132 <rgbSetLedColor>
                    prioridadNeopixel = P_BAJA;
 800562e:	4b64      	ldr	r3, [pc, #400]	; (80057c0 <tarea_RevisarComandos_Loop+0x550>)
 8005630:	f240 5213 	movw	r2, #1299	; 0x513
 8005634:	801a      	strh	r2, [r3, #0]
                    modoLeds = MODO_PARPADEO;
 8005636:	4b63      	ldr	r3, [pc, #396]	; (80057c4 <tarea_RevisarComandos_Loop+0x554>)
 8005638:	2202      	movs	r2, #2
 800563a:	701a      	strb	r2, [r3, #0]
                    colorLeds = C_BLANCO;
 800563c:	4b62      	ldr	r3, [pc, #392]	; (80057c8 <tarea_RevisarComandos_Loop+0x558>)
 800563e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005642:	601a      	str	r2, [r3, #0]
                    blink_ON = true;
 8005644:	4b61      	ldr	r3, [pc, #388]	; (80057cc <tarea_RevisarComandos_Loop+0x55c>)
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e0a1      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_NEOPIXEL_PMEDIA_AZUL))
 800564c:	4b59      	ldr	r3, [pc, #356]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2133      	movs	r1, #51	; 0x33
 8005652:	4618      	mov	r0, r3
 8005654:	f010 fe69 	bl	801632a <strchr>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d011      	beq.n	8005682 <tarea_RevisarComandos_Loop+0x412>
                {
                    rgbSetLedColor (&led1, RGB_C_BLANCO);
 800565e:	2107      	movs	r1, #7
 8005660:	4856      	ldr	r0, [pc, #344]	; (80057bc <tarea_RevisarComandos_Loop+0x54c>)
 8005662:	f7fc fd66 	bl	8002132 <rgbSetLedColor>
                    prioridadNeopixel = P_MEDIA;
 8005666:	4b56      	ldr	r3, [pc, #344]	; (80057c0 <tarea_RevisarComandos_Loop+0x550>)
 8005668:	f240 2289 	movw	r2, #649	; 0x289
 800566c:	801a      	strh	r2, [r3, #0]
                    modoLeds = MODO_PARPADEO;
 800566e:	4b55      	ldr	r3, [pc, #340]	; (80057c4 <tarea_RevisarComandos_Loop+0x554>)
 8005670:	2202      	movs	r2, #2
 8005672:	701a      	strb	r2, [r3, #0]
                    colorLeds = C_AZUL;
 8005674:	4b54      	ldr	r3, [pc, #336]	; (80057c8 <tarea_RevisarComandos_Loop+0x558>)
 8005676:	22ff      	movs	r2, #255	; 0xff
 8005678:	601a      	str	r2, [r3, #0]
                    blink_ON = true;
 800567a:	4b54      	ldr	r3, [pc, #336]	; (80057cc <tarea_RevisarComandos_Loop+0x55c>)
 800567c:	2201      	movs	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e086      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_NEOPIXEL_SOLIDO_ROJO))
 8005682:	4b4c      	ldr	r3, [pc, #304]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2134      	movs	r1, #52	; 0x34
 8005688:	4618      	mov	r0, r3
 800568a:	f010 fe4e 	bl	801632a <strchr>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00f      	beq.n	80056b4 <tarea_RevisarComandos_Loop+0x444>
                {
                    rgbSetLedColor (&led1, RGB_C_BLANCO);
 8005694:	2107      	movs	r1, #7
 8005696:	4849      	ldr	r0, [pc, #292]	; (80057bc <tarea_RevisarComandos_Loop+0x54c>)
 8005698:	f7fc fd4b 	bl	8002132 <rgbSetLedColor>
                    prioridadNeopixel = P_MEDIA;
 800569c:	4b48      	ldr	r3, [pc, #288]	; (80057c0 <tarea_RevisarComandos_Loop+0x550>)
 800569e:	f240 2289 	movw	r2, #649	; 0x289
 80056a2:	801a      	strh	r2, [r3, #0]
                    modoLeds = MODO_SOLIDO;
 80056a4:	4b47      	ldr	r3, [pc, #284]	; (80057c4 <tarea_RevisarComandos_Loop+0x554>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	701a      	strb	r2, [r3, #0]
                    colorLeds = C_ROJO;
 80056aa:	4b47      	ldr	r3, [pc, #284]	; (80057c8 <tarea_RevisarComandos_Loop+0x558>)
 80056ac:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e06d      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_NEOPIXEL_SOLIDO_AMARILLO))
 80056b4:	4b3f      	ldr	r3, [pc, #252]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2135      	movs	r1, #53	; 0x35
 80056ba:	4618      	mov	r0, r3
 80056bc:	f010 fe35 	bl	801632a <strchr>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00e      	beq.n	80056e4 <tarea_RevisarComandos_Loop+0x474>
                {
                    rgbSetLedColor (&led1, RGB_C_BLANCO);
 80056c6:	2107      	movs	r1, #7
 80056c8:	483c      	ldr	r0, [pc, #240]	; (80057bc <tarea_RevisarComandos_Loop+0x54c>)
 80056ca:	f7fc fd32 	bl	8002132 <rgbSetLedColor>
                    prioridadNeopixel = P_MEDIA;
 80056ce:	4b3c      	ldr	r3, [pc, #240]	; (80057c0 <tarea_RevisarComandos_Loop+0x550>)
 80056d0:	f240 2289 	movw	r2, #649	; 0x289
 80056d4:	801a      	strh	r2, [r3, #0]
                    modoLeds = MODO_SOLIDO;
 80056d6:	4b3b      	ldr	r3, [pc, #236]	; (80057c4 <tarea_RevisarComandos_Loop+0x554>)
 80056d8:	2201      	movs	r2, #1
 80056da:	701a      	strb	r2, [r3, #0]
                    colorLeds = C_AMARILLO;
 80056dc:	4b3a      	ldr	r3, [pc, #232]	; (80057c8 <tarea_RevisarComandos_Loop+0x558>)
 80056de:	4a3c      	ldr	r2, [pc, #240]	; (80057d0 <tarea_RevisarComandos_Loop+0x560>)
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e055      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_NEOPIXEL_SOLIDO_VERDE))
 80056e4:	4b33      	ldr	r3, [pc, #204]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2136      	movs	r1, #54	; 0x36
 80056ea:	4618      	mov	r0, r3
 80056ec:	f010 fe1d 	bl	801632a <strchr>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00f      	beq.n	8005716 <tarea_RevisarComandos_Loop+0x4a6>
                {
                    rgbSetLedColor (&led1, RGB_C_BLANCO);
 80056f6:	2107      	movs	r1, #7
 80056f8:	4830      	ldr	r0, [pc, #192]	; (80057bc <tarea_RevisarComandos_Loop+0x54c>)
 80056fa:	f7fc fd1a 	bl	8002132 <rgbSetLedColor>
                    prioridadNeopixel = P_MEDIA;
 80056fe:	4b30      	ldr	r3, [pc, #192]	; (80057c0 <tarea_RevisarComandos_Loop+0x550>)
 8005700:	f240 2289 	movw	r2, #649	; 0x289
 8005704:	801a      	strh	r2, [r3, #0]
                    modoLeds = MODO_SOLIDO;
 8005706:	4b2f      	ldr	r3, [pc, #188]	; (80057c4 <tarea_RevisarComandos_Loop+0x554>)
 8005708:	2201      	movs	r2, #1
 800570a:	701a      	strb	r2, [r3, #0]
                    colorLeds = C_VERDE;
 800570c:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <tarea_RevisarComandos_Loop+0x558>)
 800570e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e03c      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_NEOPIXEL_SOLIDO_NEGRO))
 8005716:	4b27      	ldr	r3, [pc, #156]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2137      	movs	r1, #55	; 0x37
 800571c:	4618      	mov	r0, r3
 800571e:	f010 fe04 	bl	801632a <strchr>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00e      	beq.n	8005746 <tarea_RevisarComandos_Loop+0x4d6>
                {
                    rgbSetLedColor (&led1, RGB_C_BLANCO);
 8005728:	2107      	movs	r1, #7
 800572a:	4824      	ldr	r0, [pc, #144]	; (80057bc <tarea_RevisarComandos_Loop+0x54c>)
 800572c:	f7fc fd01 	bl	8002132 <rgbSetLedColor>
                    prioridadNeopixel = P_MEDIA;
 8005730:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <tarea_RevisarComandos_Loop+0x550>)
 8005732:	f240 2289 	movw	r2, #649	; 0x289
 8005736:	801a      	strh	r2, [r3, #0]
                    modoLeds = MODO_SOLIDO;
 8005738:	4b22      	ldr	r3, [pc, #136]	; (80057c4 <tarea_RevisarComandos_Loop+0x554>)
 800573a:	2201      	movs	r2, #1
 800573c:	701a      	strb	r2, [r3, #0]
                    colorLeds = C_NEGRO;
 800573e:	4b22      	ldr	r3, [pc, #136]	; (80057c8 <tarea_RevisarComandos_Loop+0x558>)
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e024      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_NEOPIXEL_SOLIDO_BLANCO))
 8005746:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2138      	movs	r1, #56	; 0x38
 800574c:	4618      	mov	r0, r3
 800574e:	f010 fdec 	bl	801632a <strchr>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00f      	beq.n	8005778 <tarea_RevisarComandos_Loop+0x508>
                {
                    rgbSetLedColor (&led1, RGB_C_BLANCO);
 8005758:	2107      	movs	r1, #7
 800575a:	4818      	ldr	r0, [pc, #96]	; (80057bc <tarea_RevisarComandos_Loop+0x54c>)
 800575c:	f7fc fce9 	bl	8002132 <rgbSetLedColor>
                    prioridadNeopixel = P_MEDIA;
 8005760:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <tarea_RevisarComandos_Loop+0x550>)
 8005762:	f240 2289 	movw	r2, #649	; 0x289
 8005766:	801a      	strh	r2, [r3, #0]
                    modoLeds = MODO_SOLIDO;
 8005768:	4b16      	ldr	r3, [pc, #88]	; (80057c4 <tarea_RevisarComandos_Loop+0x554>)
 800576a:	2201      	movs	r2, #1
 800576c:	701a      	strb	r2, [r3, #0]
                    colorLeds = C_BLANCO;
 800576e:	4b16      	ldr	r3, [pc, #88]	; (80057c8 <tarea_RevisarComandos_Loop+0x558>)
 8005770:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e00b      	b.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                }
            else if (strstr ((char*) USB_Rx_Buf, CMD_PING))
 8005778:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2150      	movs	r1, #80	; 0x50
 800577e:	4618      	mov	r0, r3
 8005780:	f010 fdd3 	bl	801632a <strchr>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <tarea_RevisarComandos_Loop+0x520>
                {
                    flag_Ping = true;
 800578a:	4b12      	ldr	r3, [pc, #72]	; (80057d4 <tarea_RevisarComandos_Loop+0x564>)
 800578c:	2201      	movs	r2, #1
 800578e:	701a      	strb	r2, [r3, #0]
                }
            memset (USB_Rx_Buf, 0x00, USB_Rx_Len); //Limpiar lo escrito en el buffer
 8005790:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <tarea_RevisarComandos_Loop+0x544>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <tarea_RevisarComandos_Loop+0x568>)
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	2100      	movs	r1, #0
 800579a:	4618      	mov	r0, r3
 800579c:	f010 fdbd 	bl	801631a <memset>
            USB_RxFlag = false;
 80057a0:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <tarea_RevisarComandos_Loop+0x56c>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	701a      	strb	r2, [r3, #0]
        }
    osDelay (TIME_IDLE);
 80057a6:	2032      	movs	r0, #50	; 0x32
 80057a8:	f00b ff1f 	bl	80115ea <osDelay>
}
 80057ac:	bf00      	nop
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20008a6c 	.word	0x20008a6c
 80057b8:	40020c00 	.word	0x40020c00
 80057bc:	200047d4 	.word	0x200047d4
 80057c0:	20000008 	.word	0x20000008
 80057c4:	200015ca 	.word	0x200015ca
 80057c8:	200015cc 	.word	0x200015cc
 80057cc:	200015d0 	.word	0x200015d0
 80057d0:	00ffff00 	.word	0x00ffff00
 80057d4:	2000162b 	.word	0x2000162b
 80057d8:	20008a70 	.word	0x20008a70
 80057dc:	20008a68 	.word	0x20008a68

080057e0 <tarea_RevisarElectrodos_Setup>:
uint32_t statusWord;   // Estado reportado por el ADS
uint8_t loff_statP;    // Registro con los estados de los electrodos conectados a las terminales P de los canales del ADS
uint8_t loff_statN;    // Registro con los estados de los electrodos conectados a las terminales N de los canales del ADS

void tarea_RevisarElectrodos_Setup(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0

}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <tarea_RevisarElectrodos_Loop>:
void tarea_RevisarElectrodos_Loop(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
    // Sólo reportar cuando se está graficando
    if (flag_MSV_graficar)
 80057f4:	4b29      	ldr	r3, [pc, #164]	; (800589c <tarea_RevisarElectrodos_Loop+0xac>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d048      	beq.n	800588e <tarea_RevisarElectrodos_Loop+0x9e>
        {
            // Suponemos que los electrodos están conectados, lo comprobaremos con statusWord
            lead_1_RA = true;
 80057fc:	4b28      	ldr	r3, [pc, #160]	; (80058a0 <tarea_RevisarElectrodos_Loop+0xb0>)
 80057fe:	2201      	movs	r2, #1
 8005800:	701a      	strb	r2, [r3, #0]
            lead_2_LA = true;
 8005802:	4b28      	ldr	r3, [pc, #160]	; (80058a4 <tarea_RevisarElectrodos_Loop+0xb4>)
 8005804:	2201      	movs	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]
            lead_3_RL = true;
 8005808:	4b27      	ldr	r3, [pc, #156]	; (80058a8 <tarea_RevisarElectrodos_Loop+0xb8>)
 800580a:	2201      	movs	r2, #1
 800580c:	701a      	strb	r2, [r3, #0]
            lead_4_LL = true;
 800580e:	4b27      	ldr	r3, [pc, #156]	; (80058ac <tarea_RevisarElectrodos_Loop+0xbc>)
 8005810:	2201      	movs	r2, #1
 8005812:	701a      	strb	r2, [r3, #0]
            lead_5_V1 = true;
 8005814:	4b26      	ldr	r3, [pc, #152]	; (80058b0 <tarea_RevisarElectrodos_Loop+0xc0>)
 8005816:	2201      	movs	r2, #1
 8005818:	701a      	strb	r2, [r3, #0]

            statusWord = leerValorCanal (0);            //Tomo el último valor reportado de statusword en el ADS
 800581a:	2000      	movs	r0, #0
 800581c:	f7fb fe6a 	bl	80014f4 <leerValorCanal>
 8005820:	4603      	mov	r3, r0
 8005822:	461a      	mov	r2, r3
 8005824:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <tarea_RevisarElectrodos_Loop+0xc4>)
 8005826:	601a      	str	r2, [r3, #0]
            loff_statP = (statusWord & 0x0ff000) >> 12; //Aplicar máscara del byte útil y recorrer 12 pos
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <tarea_RevisarElectrodos_Loop+0xc4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	0b1b      	lsrs	r3, r3, #12
 800582e:	b2da      	uxtb	r2, r3
 8005830:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <tarea_RevisarElectrodos_Loop+0xc8>)
 8005832:	701a      	strb	r2, [r3, #0]
            loff_statN = (statusWord & 0x000ff0) >> 4;  //Aplicar máscara del byte útil y recorrer 4 pos
 8005834:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <tarea_RevisarElectrodos_Loop+0xc4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	b2da      	uxtb	r2, r3
 800583c:	4b1f      	ldr	r3, [pc, #124]	; (80058bc <tarea_RevisarElectrodos_Loop+0xcc>)
 800583e:	701a      	strb	r2, [r3, #0]

            if (loff_statN & 0b00000010) // RA, CH2_N
 8005840:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <tarea_RevisarElectrodos_Loop+0xcc>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <tarea_RevisarElectrodos_Loop+0x62>
                {
                    lead_1_RA = false;
 800584c:	4b14      	ldr	r3, [pc, #80]	; (80058a0 <tarea_RevisarElectrodos_Loop+0xb0>)
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
                }
            if (loff_statP & 0b00000010) // LA, CH2_P
 8005852:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <tarea_RevisarElectrodos_Loop+0xc8>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <tarea_RevisarElectrodos_Loop+0x74>
                {
                    lead_2_LA = false;
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <tarea_RevisarElectrodos_Loop+0xb4>)
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
                }
            if (loff_statP & 0b00000100) // LL, CH3_P
 8005864:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <tarea_RevisarElectrodos_Loop+0xc8>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <tarea_RevisarElectrodos_Loop+0x86>
                {
                    lead_4_LL = false;
 8005870:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <tarea_RevisarElectrodos_Loop+0xbc>)
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
                }
            if (loff_statP & 0b10000000) // V1, CH8_P
 8005876:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <tarea_RevisarElectrodos_Loop+0xc8>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	b25b      	sxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	da02      	bge.n	8005886 <tarea_RevisarElectrodos_Loop+0x96>
                {
                    lead_5_V1 = false;
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <tarea_RevisarElectrodos_Loop+0xc0>)
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
                }
            /*if ((lead_1_RA)&&(lead_2_LA)&&(lead_4_LL)&&(lead_5_V1))
                HAL_GPIO_WritePin(MK_Reset_GPIO_Port, MK_Reset_Pin, GPIO_PIN_RESET);
            else
                HAL_GPIO_WritePin(MK_Reset_GPIO_Port, MK_Reset_Pin, GPIO_PIN_SET);*/
            flag_RevElec_RDY = true;
 8005886:	4b0e      	ldr	r3, [pc, #56]	; (80058c0 <tarea_RevisarElectrodos_Loop+0xd0>)
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
        }
    else
        {
            osDelay (500);
        }
}
 800588c:	e003      	b.n	8005896 <tarea_RevisarElectrodos_Loop+0xa6>
            osDelay (500);
 800588e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005892:	f00b feaa 	bl	80115ea <osDelay>
}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	200015c1 	.word	0x200015c1
 80058a0:	20001626 	.word	0x20001626
 80058a4:	20001627 	.word	0x20001627
 80058a8:	20001628 	.word	0x20001628
 80058ac:	20001629 	.word	0x20001629
 80058b0:	2000162a 	.word	0x2000162a
 80058b4:	2000480c 	.word	0x2000480c
 80058b8:	20004810 	.word	0x20004810
 80058bc:	20004811 	.word	0x20004811
 80058c0:	20001625 	.word	0x20001625

080058c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08e      	sub	sp, #56	; 0x38
 80058c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	605a      	str	r2, [r3, #4]
 80058d4:	609a      	str	r2, [r3, #8]
 80058d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058d8:	f107 0320 	add.w	r3, r7, #32
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	60da      	str	r2, [r3, #12]
 80058ee:	611a      	str	r2, [r3, #16]
 80058f0:	615a      	str	r2, [r3, #20]
 80058f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80058f4:	4b2c      	ldr	r3, [pc, #176]	; (80059a8 <MX_TIM2_Init+0xe4>)
 80058f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80058fc:	4b2a      	ldr	r3, [pc, #168]	; (80059a8 <MX_TIM2_Init+0xe4>)
 80058fe:	2200      	movs	r2, #0
 8005900:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005902:	4b29      	ldr	r3, [pc, #164]	; (80059a8 <MX_TIM2_Init+0xe4>)
 8005904:	2200      	movs	r2, #0
 8005906:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104;
 8005908:	4b27      	ldr	r3, [pc, #156]	; (80059a8 <MX_TIM2_Init+0xe4>)
 800590a:	2268      	movs	r2, #104	; 0x68
 800590c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800590e:	4b26      	ldr	r3, [pc, #152]	; (80059a8 <MX_TIM2_Init+0xe4>)
 8005910:	2200      	movs	r2, #0
 8005912:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005914:	4b24      	ldr	r3, [pc, #144]	; (80059a8 <MX_TIM2_Init+0xe4>)
 8005916:	2200      	movs	r2, #0
 8005918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800591a:	4823      	ldr	r0, [pc, #140]	; (80059a8 <MX_TIM2_Init+0xe4>)
 800591c:	f004 fdde 	bl	800a4dc <HAL_TIM_Base_Init>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8005926:	f7fc fce1 	bl	80022ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800592a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005934:	4619      	mov	r1, r3
 8005936:	481c      	ldr	r0, [pc, #112]	; (80059a8 <MX_TIM2_Init+0xe4>)
 8005938:	f006 f834 	bl	800b9a4 <HAL_TIM_ConfigClockSource>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8005942:	f7fc fcd3 	bl	80022ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005946:	4818      	ldr	r0, [pc, #96]	; (80059a8 <MX_TIM2_Init+0xe4>)
 8005948:	f005 f83c 	bl	800a9c4 <HAL_TIM_PWM_Init>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8005952:	f7fc fccb 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005956:	2300      	movs	r3, #0
 8005958:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800595a:	2300      	movs	r3, #0
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800595e:	f107 0320 	add.w	r3, r7, #32
 8005962:	4619      	mov	r1, r3
 8005964:	4810      	ldr	r0, [pc, #64]	; (80059a8 <MX_TIM2_Init+0xe4>)
 8005966:	f007 f899 	bl	800ca9c <HAL_TIMEx_MasterConfigSynchronization>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8005970:	f7fc fcbc 	bl	80022ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005974:	2360      	movs	r3, #96	; 0x60
 8005976:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005984:	1d3b      	adds	r3, r7, #4
 8005986:	2200      	movs	r2, #0
 8005988:	4619      	mov	r1, r3
 800598a:	4807      	ldr	r0, [pc, #28]	; (80059a8 <MX_TIM2_Init+0xe4>)
 800598c:	f005 fe32 	bl	800b5f4 <HAL_TIM_PWM_ConfigChannel>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8005996:	f7fc fca9 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800599a:	4803      	ldr	r0, [pc, #12]	; (80059a8 <MX_TIM2_Init+0xe4>)
 800599c:	f000 f892 	bl	8005ac4 <HAL_TIM_MspPostInit>

}
 80059a0:	bf00      	nop
 80059a2:	3738      	adds	r7, #56	; 0x38
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20004814 	.word	0x20004814

080059ac <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80059b0:	4b0e      	ldr	r3, [pc, #56]	; (80059ec <MX_TIM13_Init+0x40>)
 80059b2:	4a0f      	ldr	r2, [pc, #60]	; (80059f0 <MX_TIM13_Init+0x44>)
 80059b4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 42-1;
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <MX_TIM13_Init+0x40>)
 80059b8:	2229      	movs	r2, #41	; 0x29
 80059ba:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059bc:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <MX_TIM13_Init+0x40>)
 80059be:	2200      	movs	r2, #0
 80059c0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0xffff;
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <MX_TIM13_Init+0x40>)
 80059c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059ca:	4b08      	ldr	r3, [pc, #32]	; (80059ec <MX_TIM13_Init+0x40>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059d0:	4b06      	ldr	r3, [pc, #24]	; (80059ec <MX_TIM13_Init+0x40>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80059d6:	4805      	ldr	r0, [pc, #20]	; (80059ec <MX_TIM13_Init+0x40>)
 80059d8:	f004 fd80 	bl	800a4dc <HAL_TIM_Base_Init>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80059e2:	f7fc fc83 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80059e6:	bf00      	nop
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	2000485c 	.word	0x2000485c
 80059f0:	40001c00 	.word	0x40001c00

080059f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d13f      	bne.n	8005a86 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	4b2a      	ldr	r3, [pc, #168]	; (8005ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8005a10:	f043 0301 	orr.w	r3, r3, #1
 8005a14:	6413      	str	r3, [r2, #64]	; 0x40
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8005a22:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a24:	4a25      	ldr	r2, [pc, #148]	; (8005abc <HAL_TIM_Base_MspInit+0xc8>)
 8005a26:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8005a28:	4b23      	ldr	r3, [pc, #140]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a2a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005a2e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a30:	4b21      	ldr	r3, [pc, #132]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a32:	2240      	movs	r2, #64	; 0x40
 8005a34:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a36:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005a3c:	4b1e      	ldr	r3, [pc, #120]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a42:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a44:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a4a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a4c:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a52:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8005a54:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8005a5a:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a60:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8005a68:	4813      	ldr	r0, [pc, #76]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a6a:	f000 fa7f 	bl	8005f6c <HAL_DMA_Init>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8005a74:	f7fc fc3a 	bl	80022ec <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a0f      	ldr	r2, [pc, #60]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a7e:	4a0e      	ldr	r2, [pc, #56]	; (8005ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8005a84:	e012      	b.n	8005aac <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM13)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a0d      	ldr	r2, [pc, #52]	; (8005ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d10d      	bne.n	8005aac <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005a90:	2300      	movs	r3, #0
 8005a92:	60bb      	str	r3, [r7, #8]
 8005a94:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	4a06      	ldr	r2, [pc, #24]	; (8005ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8005a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	200048a4 	.word	0x200048a4
 8005abc:	40026088 	.word	0x40026088
 8005ac0:	40001c00 	.word	0x40001c00

08005ac4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005acc:	f107 030c 	add.w	r3, r7, #12
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	605a      	str	r2, [r3, #4]
 8005ad6:	609a      	str	r2, [r3, #8]
 8005ad8:	60da      	str	r2, [r3, #12]
 8005ada:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d11e      	bne.n	8005b24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <HAL_TIM_MspPostInit+0x68>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	4a0f      	ldr	r2, [pc, #60]	; (8005b2c <HAL_TIM_MspPostInit+0x68>)
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	6313      	str	r3, [r2, #48]	; 0x30
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <HAL_TIM_MspPostInit+0x68>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b10:	2300      	movs	r3, #0
 8005b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005b14:	2301      	movs	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b18:	f107 030c 	add.w	r3, r7, #12
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4804      	ldr	r0, [pc, #16]	; (8005b30 <HAL_TIM_MspPostInit+0x6c>)
 8005b20:	f000 ffa0 	bl	8006a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005b24:	bf00      	nop
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40020000 	.word	0x40020000

08005b34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b3a:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <MX_USART2_UART_Init+0x50>)
 8005b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b46:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b52:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b5a:	220c      	movs	r2, #12
 8005b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b5e:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b6a:	4805      	ldr	r0, [pc, #20]	; (8005b80 <MX_USART2_UART_Init+0x4c>)
 8005b6c:	f007 f888 	bl	800cc80 <HAL_UART_Init>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005b76:	f7fc fbb9 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20004904 	.word	0x20004904
 8005b84:	40004400 	.word	0x40004400

08005b88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1d      	ldr	r2, [pc, #116]	; (8005c1c <HAL_UART_MspInit+0x94>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d133      	bne.n	8005c12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005baa:	2300      	movs	r3, #0
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	4b1c      	ldr	r3, [pc, #112]	; (8005c20 <HAL_UART_MspInit+0x98>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <HAL_UART_MspInit+0x98>)
 8005bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bba:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <HAL_UART_MspInit+0x98>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <HAL_UART_MspInit+0x98>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	4a14      	ldr	r2, [pc, #80]	; (8005c20 <HAL_UART_MspInit+0x98>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd6:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <HAL_UART_MspInit+0x98>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005be2:	230c      	movs	r3, #12
 8005be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be6:	2302      	movs	r3, #2
 8005be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bf2:	2307      	movs	r3, #7
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bf6:	f107 0314 	add.w	r3, r7, #20
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4809      	ldr	r0, [pc, #36]	; (8005c24 <HAL_UART_MspInit+0x9c>)
 8005bfe:	f000 ff31 	bl	8006a64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005c02:	2200      	movs	r2, #0
 8005c04:	2105      	movs	r1, #5
 8005c06:	2026      	movs	r0, #38	; 0x26
 8005c08:	f000 f96c 	bl	8005ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c0c:	2026      	movs	r0, #38	; 0x26
 8005c0e:	f000 f995 	bl	8005f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005c12:	bf00      	nop
 8005c14:	3728      	adds	r7, #40	; 0x28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40004400 	.word	0x40004400
 8005c20:	40023800 	.word	0x40023800
 8005c24:	40020000 	.word	0x40020000

08005c28 <Reset_Handler>:
 8005c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c60 <LoopFillZerobss+0x12>
 8005c2c:	480d      	ldr	r0, [pc, #52]	; (8005c64 <LoopFillZerobss+0x16>)
 8005c2e:	490e      	ldr	r1, [pc, #56]	; (8005c68 <LoopFillZerobss+0x1a>)
 8005c30:	4a0e      	ldr	r2, [pc, #56]	; (8005c6c <LoopFillZerobss+0x1e>)
 8005c32:	2300      	movs	r3, #0
 8005c34:	e002      	b.n	8005c3c <LoopCopyDataInit>

08005c36 <CopyDataInit>:
 8005c36:	58d4      	ldr	r4, [r2, r3]
 8005c38:	50c4      	str	r4, [r0, r3]
 8005c3a:	3304      	adds	r3, #4

08005c3c <LoopCopyDataInit>:
 8005c3c:	18c4      	adds	r4, r0, r3
 8005c3e:	428c      	cmp	r4, r1
 8005c40:	d3f9      	bcc.n	8005c36 <CopyDataInit>
 8005c42:	4a0b      	ldr	r2, [pc, #44]	; (8005c70 <LoopFillZerobss+0x22>)
 8005c44:	4c0b      	ldr	r4, [pc, #44]	; (8005c74 <LoopFillZerobss+0x26>)
 8005c46:	2300      	movs	r3, #0
 8005c48:	e001      	b.n	8005c4e <LoopFillZerobss>

08005c4a <FillZerobss>:
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	3204      	adds	r2, #4

08005c4e <LoopFillZerobss>:
 8005c4e:	42a2      	cmp	r2, r4
 8005c50:	d3fb      	bcc.n	8005c4a <FillZerobss>
 8005c52:	f7fc fdad 	bl	80027b0 <SystemInit>
 8005c56:	f010 fc31 	bl	80164bc <__libc_init_array>
 8005c5a:	f7fc fab4 	bl	80021c6 <main>
 8005c5e:	4770      	bx	lr
 8005c60:	20020000 	.word	0x20020000
 8005c64:	20000000 	.word	0x20000000
 8005c68:	20001564 	.word	0x20001564
 8005c6c:	08018e54 	.word	0x08018e54
 8005c70:	20001568 	.word	0x20001568
 8005c74:	2000a4ec 	.word	0x2000a4ec

08005c78 <ADC_IRQHandler>:
 8005c78:	e7fe      	b.n	8005c78 <ADC_IRQHandler>
	...

08005c7c <HAL_Init>:
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <HAL_Init+0x40>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <HAL_Init+0x40>)
 8005c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_Init+0x40>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a0a      	ldr	r2, [pc, #40]	; (8005cbc <HAL_Init+0x40>)
 8005c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <HAL_Init+0x40>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <HAL_Init+0x40>)
 8005c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	2003      	movs	r0, #3
 8005ca6:	f000 f8fd 	bl	8005ea4 <HAL_NVIC_SetPriorityGrouping>
 8005caa:	200f      	movs	r0, #15
 8005cac:	f7fc fbe0 	bl	8002470 <HAL_InitTick>
 8005cb0:	f7fc fbb2 	bl	8002418 <HAL_MspInit>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40023c00 	.word	0x40023c00

08005cc0 <HAL_IncTick>:
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <HAL_IncTick+0x20>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <HAL_IncTick+0x24>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4413      	add	r3, r2
 8005cd0:	4a04      	ldr	r2, [pc, #16]	; (8005ce4 <HAL_IncTick+0x24>)
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	bf00      	nop
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	200012a4 	.word	0x200012a4
 8005ce4:	20004948 	.word	0x20004948

08005ce8 <HAL_GetTick>:
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <HAL_GetTick+0x14>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20004948 	.word	0x20004948

08005d00 <HAL_Delay>:
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	f7ff ffee 	bl	8005ce8 <HAL_GetTick>
 8005d0c:	60b8      	str	r0, [r7, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d005      	beq.n	8005d26 <HAL_Delay+0x26>
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <HAL_Delay+0x44>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	bf00      	nop
 8005d28:	f7ff ffde 	bl	8005ce8 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d8f7      	bhi.n	8005d28 <HAL_Delay+0x28>
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	200012a4 	.word	0x200012a4

08005d48 <__NVIC_SetPriorityGrouping>:
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <__NVIC_SetPriorityGrouping+0x44>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d64:	4013      	ands	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	021a      	lsls	r2, r3, #8
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	4a04      	ldr	r2, [pc, #16]	; (8005d8c <__NVIC_SetPriorityGrouping+0x44>)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	60d3      	str	r3, [r2, #12]
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	e000ed00 	.word	0xe000ed00

08005d90 <__NVIC_GetPriorityGrouping>:
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <__NVIC_GetPriorityGrouping+0x18>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	4618      	mov	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	e000ed00 	.word	0xe000ed00

08005dac <__NVIC_EnableIRQ>:
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
 8005db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	db0b      	blt.n	8005dd6 <__NVIC_EnableIRQ+0x2a>
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	f003 021f 	and.w	r2, r3, #31
 8005dc4:	4907      	ldr	r1, [pc, #28]	; (8005de4 <__NVIC_EnableIRQ+0x38>)
 8005dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	2001      	movs	r0, #1
 8005dce:	fa00 f202 	lsl.w	r2, r0, r2
 8005dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	e000e100 	.word	0xe000e100

08005de8 <__NVIC_SetPriority>:
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	6039      	str	r1, [r7, #0]
 8005df2:	71fb      	strb	r3, [r7, #7]
 8005df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	db0a      	blt.n	8005e12 <__NVIC_SetPriority+0x2a>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	490c      	ldr	r1, [pc, #48]	; (8005e34 <__NVIC_SetPriority+0x4c>)
 8005e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e06:	0112      	lsls	r2, r2, #4
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005e10:	e00a      	b.n	8005e28 <__NVIC_SetPriority+0x40>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	4908      	ldr	r1, [pc, #32]	; (8005e38 <__NVIC_SetPriority+0x50>)
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	3b04      	subs	r3, #4
 8005e20:	0112      	lsls	r2, r2, #4
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	440b      	add	r3, r1
 8005e26:	761a      	strb	r2, [r3, #24]
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	e000e100 	.word	0xe000e100
 8005e38:	e000ed00 	.word	0xe000ed00

08005e3c <NVIC_EncodePriority>:
 8005e3c:	b480      	push	{r7}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f1c3 0307 	rsb	r3, r3, #7
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	bf28      	it	cs
 8005e5a:	2304      	movcs	r3, #4
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3304      	adds	r3, #4
 8005e62:	2b06      	cmp	r3, #6
 8005e64:	d902      	bls.n	8005e6c <NVIC_EncodePriority+0x30>
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3b03      	subs	r3, #3
 8005e6a:	e000      	b.n	8005e6e <NVIC_EncodePriority+0x32>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43da      	mvns	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	401a      	ands	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	409a      	lsls	r2, r3
 8005e84:	f04f 31ff 	mov.w	r1, #4294967295
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8e:	43d9      	mvns	r1, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	400b      	ands	r3, r1
 8005e94:	4313      	orrs	r3, r2
 8005e96:	4618      	mov	r0, r3
 8005e98:	3724      	adds	r7, #36	; 0x24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <HAL_NVIC_SetPriorityGrouping>:
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b07      	cmp	r3, #7
 8005eb0:	d00f      	beq.n	8005ed2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b06      	cmp	r3, #6
 8005eb6:	d00c      	beq.n	8005ed2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d009      	beq.n	8005ed2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d006      	beq.n	8005ed2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d003      	beq.n	8005ed2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005eca:	2190      	movs	r1, #144	; 0x90
 8005ecc:	4804      	ldr	r0, [pc, #16]	; (8005ee0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005ece:	f7fc fa12 	bl	80022f6 <assert_failed>
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff ff38 	bl	8005d48 <__NVIC_SetPriorityGrouping>
 8005ed8:	bf00      	nop
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	08018848 	.word	0x08018848

08005ee4 <HAL_NVIC_SetPriority>:
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	73fb      	strb	r3, [r7, #15]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b0f      	cmp	r3, #15
 8005efa:	d903      	bls.n	8005f04 <HAL_NVIC_SetPriority+0x20>
 8005efc:	21a8      	movs	r1, #168	; 0xa8
 8005efe:	480e      	ldr	r0, [pc, #56]	; (8005f38 <HAL_NVIC_SetPriority+0x54>)
 8005f00:	f7fc f9f9 	bl	80022f6 <assert_failed>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b0f      	cmp	r3, #15
 8005f08:	d903      	bls.n	8005f12 <HAL_NVIC_SetPriority+0x2e>
 8005f0a:	21a9      	movs	r1, #169	; 0xa9
 8005f0c:	480a      	ldr	r0, [pc, #40]	; (8005f38 <HAL_NVIC_SetPriority+0x54>)
 8005f0e:	f7fc f9f2 	bl	80022f6 <assert_failed>
 8005f12:	f7ff ff3d 	bl	8005d90 <__NVIC_GetPriorityGrouping>
 8005f16:	6178      	str	r0, [r7, #20]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	6978      	ldr	r0, [r7, #20]
 8005f1e:	f7ff ff8d 	bl	8005e3c <NVIC_EncodePriority>
 8005f22:	4602      	mov	r2, r0
 8005f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f28:	4611      	mov	r1, r2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff ff5c 	bl	8005de8 <__NVIC_SetPriority>
 8005f30:	bf00      	nop
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	08018848 	.word	0x08018848

08005f3c <HAL_NVIC_EnableIRQ>:
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	71fb      	strb	r3, [r7, #7]
 8005f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	da03      	bge.n	8005f56 <HAL_NVIC_EnableIRQ+0x1a>
 8005f4e:	21bc      	movs	r1, #188	; 0xbc
 8005f50:	4805      	ldr	r0, [pc, #20]	; (8005f68 <HAL_NVIC_EnableIRQ+0x2c>)
 8005f52:	f7fc f9d0 	bl	80022f6 <assert_failed>
 8005f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff ff26 	bl	8005dac <__NVIC_EnableIRQ>
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	08018848 	.word	0x08018848

08005f6c <HAL_DMA_Init>:
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	f7ff feb6 	bl	8005ce8 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_DMA_Init+0x1c>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e203      	b.n	8006390 <HAL_DMA_Init+0x424>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a8b      	ldr	r2, [pc, #556]	; (80061bc <HAL_DMA_Init+0x250>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d04e      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a8a      	ldr	r2, [pc, #552]	; (80061c0 <HAL_DMA_Init+0x254>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d049      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a88      	ldr	r2, [pc, #544]	; (80061c4 <HAL_DMA_Init+0x258>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d044      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a87      	ldr	r2, [pc, #540]	; (80061c8 <HAL_DMA_Init+0x25c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d03f      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a85      	ldr	r2, [pc, #532]	; (80061cc <HAL_DMA_Init+0x260>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d03a      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a84      	ldr	r2, [pc, #528]	; (80061d0 <HAL_DMA_Init+0x264>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d035      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a82      	ldr	r2, [pc, #520]	; (80061d4 <HAL_DMA_Init+0x268>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d030      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a81      	ldr	r2, [pc, #516]	; (80061d8 <HAL_DMA_Init+0x26c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d02b      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a7f      	ldr	r2, [pc, #508]	; (80061dc <HAL_DMA_Init+0x270>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d026      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a7e      	ldr	r2, [pc, #504]	; (80061e0 <HAL_DMA_Init+0x274>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d021      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a7c      	ldr	r2, [pc, #496]	; (80061e4 <HAL_DMA_Init+0x278>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01c      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a7b      	ldr	r2, [pc, #492]	; (80061e8 <HAL_DMA_Init+0x27c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d017      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a79      	ldr	r2, [pc, #484]	; (80061ec <HAL_DMA_Init+0x280>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d012      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a78      	ldr	r2, [pc, #480]	; (80061f0 <HAL_DMA_Init+0x284>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00d      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a76      	ldr	r2, [pc, #472]	; (80061f4 <HAL_DMA_Init+0x288>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d008      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a75      	ldr	r2, [pc, #468]	; (80061f8 <HAL_DMA_Init+0x28c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <HAL_DMA_Init+0xc4>
 8006028:	21b7      	movs	r1, #183	; 0xb7
 800602a:	4874      	ldr	r0, [pc, #464]	; (80061fc <HAL_DMA_Init+0x290>)
 800602c:	f7fc f963 	bl	80022f6 <assert_failed>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d026      	beq.n	8006086 <HAL_DMA_Init+0x11a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006040:	d021      	beq.n	8006086 <HAL_DMA_Init+0x11a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800604a:	d01c      	beq.n	8006086 <HAL_DMA_Init+0x11a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006054:	d017      	beq.n	8006086 <HAL_DMA_Init+0x11a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800605e:	d012      	beq.n	8006086 <HAL_DMA_Init+0x11a>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8006068:	d00d      	beq.n	8006086 <HAL_DMA_Init+0x11a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006072:	d008      	beq.n	8006086 <HAL_DMA_Init+0x11a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800607c:	d003      	beq.n	8006086 <HAL_DMA_Init+0x11a>
 800607e:	21b8      	movs	r1, #184	; 0xb8
 8006080:	485e      	ldr	r0, [pc, #376]	; (80061fc <HAL_DMA_Init+0x290>)
 8006082:	f7fc f938 	bl	80022f6 <assert_failed>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <HAL_DMA_Init+0x13a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d007      	beq.n	80060a6 <HAL_DMA_Init+0x13a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	2b80      	cmp	r3, #128	; 0x80
 800609c:	d003      	beq.n	80060a6 <HAL_DMA_Init+0x13a>
 800609e:	21b9      	movs	r1, #185	; 0xb9
 80060a0:	4856      	ldr	r0, [pc, #344]	; (80061fc <HAL_DMA_Init+0x290>)
 80060a2:	f7fc f928 	bl	80022f6 <assert_failed>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ae:	d007      	beq.n	80060c0 <HAL_DMA_Init+0x154>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_DMA_Init+0x154>
 80060b8:	21ba      	movs	r1, #186	; 0xba
 80060ba:	4850      	ldr	r0, [pc, #320]	; (80061fc <HAL_DMA_Init+0x290>)
 80060bc:	f7fc f91b 	bl	80022f6 <assert_failed>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c8:	d007      	beq.n	80060da <HAL_DMA_Init+0x16e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_DMA_Init+0x16e>
 80060d2:	21bb      	movs	r1, #187	; 0xbb
 80060d4:	4849      	ldr	r0, [pc, #292]	; (80061fc <HAL_DMA_Init+0x290>)
 80060d6:	f7fc f90e 	bl	80022f6 <assert_failed>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00d      	beq.n	80060fe <HAL_DMA_Init+0x192>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ea:	d008      	beq.n	80060fe <HAL_DMA_Init+0x192>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f4:	d003      	beq.n	80060fe <HAL_DMA_Init+0x192>
 80060f6:	21bc      	movs	r1, #188	; 0xbc
 80060f8:	4840      	ldr	r0, [pc, #256]	; (80061fc <HAL_DMA_Init+0x290>)
 80060fa:	f7fc f8fc 	bl	80022f6 <assert_failed>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00d      	beq.n	8006122 <HAL_DMA_Init+0x1b6>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610e:	d008      	beq.n	8006122 <HAL_DMA_Init+0x1b6>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006118:	d003      	beq.n	8006122 <HAL_DMA_Init+0x1b6>
 800611a:	21bd      	movs	r1, #189	; 0xbd
 800611c:	4837      	ldr	r0, [pc, #220]	; (80061fc <HAL_DMA_Init+0x290>)
 800611e:	f7fc f8ea 	bl	80022f6 <assert_failed>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00c      	beq.n	8006144 <HAL_DMA_Init+0x1d8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006132:	d007      	beq.n	8006144 <HAL_DMA_Init+0x1d8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	2b20      	cmp	r3, #32
 800613a:	d003      	beq.n	8006144 <HAL_DMA_Init+0x1d8>
 800613c:	21be      	movs	r1, #190	; 0xbe
 800613e:	482f      	ldr	r0, [pc, #188]	; (80061fc <HAL_DMA_Init+0x290>)
 8006140:	f7fc f8d9 	bl	80022f6 <assert_failed>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d012      	beq.n	8006172 <HAL_DMA_Init+0x206>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006154:	d00d      	beq.n	8006172 <HAL_DMA_Init+0x206>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800615e:	d008      	beq.n	8006172 <HAL_DMA_Init+0x206>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006168:	d003      	beq.n	8006172 <HAL_DMA_Init+0x206>
 800616a:	21bf      	movs	r1, #191	; 0xbf
 800616c:	4823      	ldr	r0, [pc, #140]	; (80061fc <HAL_DMA_Init+0x290>)
 800616e:	f7fc f8c2 	bl	80022f6 <assert_failed>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <HAL_DMA_Init+0x21e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b04      	cmp	r3, #4
 8006180:	d003      	beq.n	800618a <HAL_DMA_Init+0x21e>
 8006182:	21c0      	movs	r1, #192	; 0xc0
 8006184:	481d      	ldr	r0, [pc, #116]	; (80061fc <HAL_DMA_Init+0x290>)
 8006186:	f7fc f8b6 	bl	80022f6 <assert_failed>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b00      	cmp	r3, #0
 8006190:	d064      	beq.n	800625c <HAL_DMA_Init+0x2f0>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	2b00      	cmp	r3, #0
 8006198:	d032      	beq.n	8006200 <HAL_DMA_Init+0x294>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d02e      	beq.n	8006200 <HAL_DMA_Init+0x294>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d02a      	beq.n	8006200 <HAL_DMA_Init+0x294>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d026      	beq.n	8006200 <HAL_DMA_Init+0x294>
 80061b2:	21c5      	movs	r1, #197	; 0xc5
 80061b4:	4811      	ldr	r0, [pc, #68]	; (80061fc <HAL_DMA_Init+0x290>)
 80061b6:	f7fc f89e 	bl	80022f6 <assert_failed>
 80061ba:	e021      	b.n	8006200 <HAL_DMA_Init+0x294>
 80061bc:	40026010 	.word	0x40026010
 80061c0:	40026028 	.word	0x40026028
 80061c4:	40026040 	.word	0x40026040
 80061c8:	40026058 	.word	0x40026058
 80061cc:	40026070 	.word	0x40026070
 80061d0:	40026088 	.word	0x40026088
 80061d4:	400260a0 	.word	0x400260a0
 80061d8:	400260b8 	.word	0x400260b8
 80061dc:	40026410 	.word	0x40026410
 80061e0:	40026428 	.word	0x40026428
 80061e4:	40026440 	.word	0x40026440
 80061e8:	40026458 	.word	0x40026458
 80061ec:	40026470 	.word	0x40026470
 80061f0:	40026488 	.word	0x40026488
 80061f4:	400264a0 	.word	0x400264a0
 80061f8:	400264b8 	.word	0x400264b8
 80061fc:	08018884 	.word	0x08018884
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d012      	beq.n	800622e <HAL_DMA_Init+0x2c2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006210:	d00d      	beq.n	800622e <HAL_DMA_Init+0x2c2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800621a:	d008      	beq.n	800622e <HAL_DMA_Init+0x2c2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006224:	d003      	beq.n	800622e <HAL_DMA_Init+0x2c2>
 8006226:	21c6      	movs	r1, #198	; 0xc6
 8006228:	485b      	ldr	r0, [pc, #364]	; (8006398 <HAL_DMA_Init+0x42c>)
 800622a:	f7fc f864 	bl	80022f6 <assert_failed>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	2b00      	cmp	r3, #0
 8006234:	d012      	beq.n	800625c <HAL_DMA_Init+0x2f0>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800623e:	d00d      	beq.n	800625c <HAL_DMA_Init+0x2f0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006248:	d008      	beq.n	800625c <HAL_DMA_Init+0x2f0>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006252:	d003      	beq.n	800625c <HAL_DMA_Init+0x2f0>
 8006254:	21c7      	movs	r1, #199	; 0xc7
 8006256:	4850      	ldr	r0, [pc, #320]	; (8006398 <HAL_DMA_Init+0x42c>)
 8006258:	f7fc f84d 	bl	80022f6 <assert_failed>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0201 	bic.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e00f      	b.n	800629e <HAL_DMA_Init+0x332>
 800627e:	f7ff fd33 	bl	8005ce8 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b05      	cmp	r3, #5
 800628a:	d908      	bls.n	800629e <HAL_DMA_Init+0x332>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	655a      	str	r2, [r3, #84]	; 0x54
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2203      	movs	r2, #3
 8006296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800629a:	2303      	movs	r3, #3
 800629c:	e078      	b.n	8006390 <HAL_DMA_Init+0x424>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e8      	bne.n	800627e <HAL_DMA_Init+0x312>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4b39      	ldr	r3, [pc, #228]	; (800639c <HAL_DMA_Init+0x430>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d107      	bne.n	8006308 <HAL_DMA_Init+0x39c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	4313      	orrs	r3, r2
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	4313      	orrs	r3, r2
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f023 0307 	bic.w	r3, r3, #7
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2b04      	cmp	r3, #4
 8006330:	d117      	bne.n	8006362 <HAL_DMA_Init+0x3f6>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00e      	beq.n	8006362 <HAL_DMA_Init+0x3f6>
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fb11 	bl	800696c <DMA_CheckFifoParam>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_DMA_Init+0x3f6>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2240      	movs	r2, #64	; 0x40
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800635e:	2301      	movs	r3, #1
 8006360:	e016      	b.n	8006390 <HAL_DMA_Init+0x424>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	615a      	str	r2, [r3, #20]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fac8 	bl	8006900 <DMA_CalcBaseAndBitshift>
 8006370:	4603      	mov	r3, r0
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	223f      	movs	r2, #63	; 0x3f
 800637a:	409a      	lsls	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	609a      	str	r2, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800638e:	2300      	movs	r3, #0
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	08018884 	.word	0x08018884
 800639c:	f010803f 	.word	0xf010803f

080063a0 <HAL_DMA_Start_IT>:
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_DMA_Start_IT+0x26>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c4:	d304      	bcc.n	80063d0 <HAL_DMA_Start_IT+0x30>
 80063c6:	f240 11cb 	movw	r1, #459	; 0x1cb
 80063ca:	4827      	ldr	r0, [pc, #156]	; (8006468 <HAL_DMA_Start_IT+0xc8>)
 80063cc:	f7fb ff93 	bl	80022f6 <assert_failed>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_DMA_Start_IT+0x3e>
 80063da:	2302      	movs	r3, #2
 80063dc:	e040      	b.n	8006460 <HAL_DMA_Start_IT+0xc0>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d12f      	bne.n	8006452 <HAL_DMA_Start_IT+0xb2>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2202      	movs	r2, #2
 80063f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	655a      	str	r2, [r3, #84]	; 0x54
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fa4c 	bl	80068a4 <DMA_SetConfig>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006410:	223f      	movs	r2, #63	; 0x3f
 8006412:	409a      	lsls	r2, r3
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0216 	orr.w	r2, r2, #22
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d007      	beq.n	8006440 <HAL_DMA_Start_IT+0xa0>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0208 	orr.w	r2, r2, #8
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e005      	b.n	800645e <HAL_DMA_Start_IT+0xbe>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800645a:	2302      	movs	r3, #2
 800645c:	75fb      	strb	r3, [r7, #23]
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	08018884 	.word	0x08018884

0800646c <HAL_DMA_Abort>:
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	f7ff fc35 	bl	8005ce8 <HAL_GetTick>
 800647e:	60b8      	str	r0, [r7, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d008      	beq.n	800649e <HAL_DMA_Abort+0x32>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2280      	movs	r2, #128	; 0x80
 8006490:	655a      	str	r2, [r3, #84]	; 0x54
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800649a:	2301      	movs	r3, #1
 800649c:	e052      	b.n	8006544 <HAL_DMA_Abort+0xd8>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0216 	bic.w	r2, r2, #22
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695a      	ldr	r2, [r3, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064bc:	615a      	str	r2, [r3, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <HAL_DMA_Abort+0x62>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <HAL_DMA_Abort+0x72>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0208 	bic.w	r2, r2, #8
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0201 	bic.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e013      	b.n	8006518 <HAL_DMA_Abort+0xac>
 80064f0:	f7ff fbfa 	bl	8005ce8 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	d90c      	bls.n	8006518 <HAL_DMA_Abort+0xac>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	655a      	str	r2, [r3, #84]	; 0x54
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2203      	movs	r2, #3
 8006508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006514:	2303      	movs	r3, #3
 8006516:	e015      	b.n	8006544 <HAL_DMA_Abort+0xd8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e4      	bne.n	80064f0 <HAL_DMA_Abort+0x84>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652a:	223f      	movs	r2, #63	; 0x3f
 800652c:	409a      	lsls	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	609a      	str	r2, [r3, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006542:	2300      	movs	r3, #0
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_DMA_Abort_IT>:
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d004      	beq.n	800656a <HAL_DMA_Abort_IT+0x1e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2280      	movs	r2, #128	; 0x80
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
 8006566:	2301      	movs	r3, #1
 8006568:	e00c      	b.n	8006584 <HAL_DMA_Abort_IT+0x38>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2205      	movs	r2, #5
 800656e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0201 	bic.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	2300      	movs	r3, #0
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_DMA_IRQHandler>:
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	2300      	movs	r3, #0
 800659a:	60bb      	str	r3, [r7, #8]
 800659c:	4b8e      	ldr	r3, [pc, #568]	; (80067d8 <HAL_DMA_IRQHandler+0x248>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a8e      	ldr	r2, [pc, #568]	; (80067dc <HAL_DMA_IRQHandler+0x24c>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	0a9b      	lsrs	r3, r3, #10
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ba:	2208      	movs	r2, #8
 80065bc:	409a      	lsls	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d01a      	beq.n	80065fc <HAL_DMA_IRQHandler+0x6c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d013      	beq.n	80065fc <HAL_DMA_IRQHandler+0x6c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0204 	bic.w	r2, r2, #4
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e8:	2208      	movs	r2, #8
 80065ea:	409a      	lsls	r2, r3
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	609a      	str	r2, [r3, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	f043 0201 	orr.w	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006600:	2201      	movs	r2, #1
 8006602:	409a      	lsls	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4013      	ands	r3, r2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d012      	beq.n	8006632 <HAL_DMA_IRQHandler+0xa2>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <HAL_DMA_IRQHandler+0xa2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661e:	2201      	movs	r2, #1
 8006620:	409a      	lsls	r2, r3
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	609a      	str	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	f043 0202 	orr.w	r2, r3, #2
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	655a      	str	r2, [r3, #84]	; 0x54
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006636:	2204      	movs	r2, #4
 8006638:	409a      	lsls	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4013      	ands	r3, r2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d012      	beq.n	8006668 <HAL_DMA_IRQHandler+0xd8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <HAL_DMA_IRQHandler+0xd8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006654:	2204      	movs	r2, #4
 8006656:	409a      	lsls	r2, r3
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	609a      	str	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006660:	f043 0204 	orr.w	r2, r3, #4
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	655a      	str	r2, [r3, #84]	; 0x54
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666c:	2210      	movs	r2, #16
 800666e:	409a      	lsls	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4013      	ands	r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d043      	beq.n	8006700 <HAL_DMA_IRQHandler+0x170>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d03c      	beq.n	8006700 <HAL_DMA_IRQHandler+0x170>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668a:	2210      	movs	r2, #16
 800668c:	409a      	lsls	r2, r3
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	609a      	str	r2, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d018      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x142>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d108      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x130>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d024      	beq.n	8006700 <HAL_DMA_IRQHandler+0x170>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
 80066be:	e01f      	b.n	8006700 <HAL_DMA_IRQHandler+0x170>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01b      	beq.n	8006700 <HAL_DMA_IRQHandler+0x170>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
 80066d0:	e016      	b.n	8006700 <HAL_DMA_IRQHandler+0x170>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d107      	bne.n	80066f0 <HAL_DMA_IRQHandler+0x160>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0208 	bic.w	r2, r2, #8
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_DMA_IRQHandler+0x170>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006704:	2220      	movs	r2, #32
 8006706:	409a      	lsls	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 808f 	beq.w	8006830 <HAL_DMA_IRQHandler+0x2a0>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8087 	beq.w	8006830 <HAL_DMA_IRQHandler+0x2a0>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006726:	2220      	movs	r2, #32
 8006728:	409a      	lsls	r2, r3
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	609a      	str	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b05      	cmp	r3, #5
 8006738:	d136      	bne.n	80067a8 <HAL_DMA_IRQHandler+0x218>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0216 	bic.w	r2, r2, #22
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006758:	615a      	str	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d103      	bne.n	800676a <HAL_DMA_IRQHandler+0x1da>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <HAL_DMA_IRQHandler+0x1ea>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0208 	bic.w	r2, r2, #8
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677e:	223f      	movs	r2, #63	; 0x3f
 8006780:	409a      	lsls	r2, r3
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	609a      	str	r2, [r3, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679a:	2b00      	cmp	r3, #0
 800679c:	d07e      	beq.n	800689c <HAL_DMA_IRQHandler+0x30c>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	4798      	blx	r3
 80067a6:	e079      	b.n	800689c <HAL_DMA_IRQHandler+0x30c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01d      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x262>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10d      	bne.n	80067e0 <HAL_DMA_IRQHandler+0x250>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d031      	beq.n	8006830 <HAL_DMA_IRQHandler+0x2a0>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4798      	blx	r3
 80067d4:	e02c      	b.n	8006830 <HAL_DMA_IRQHandler+0x2a0>
 80067d6:	bf00      	nop
 80067d8:	20000010 	.word	0x20000010
 80067dc:	1b4e81b5 	.word	0x1b4e81b5
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d023      	beq.n	8006830 <HAL_DMA_IRQHandler+0x2a0>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	4798      	blx	r3
 80067f0:	e01e      	b.n	8006830 <HAL_DMA_IRQHandler+0x2a0>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10f      	bne.n	8006820 <HAL_DMA_IRQHandler+0x290>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0210 	bic.w	r2, r2, #16
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <HAL_DMA_IRQHandler+0x2a0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006834:	2b00      	cmp	r3, #0
 8006836:	d032      	beq.n	800689e <HAL_DMA_IRQHandler+0x30e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d022      	beq.n	800688a <HAL_DMA_IRQHandler+0x2fa>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2205      	movs	r2, #5
 8006848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	3301      	adds	r3, #1
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	429a      	cmp	r2, r3
 8006866:	d307      	bcc.n	8006878 <HAL_DMA_IRQHandler+0x2e8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f2      	bne.n	800685c <HAL_DMA_IRQHandler+0x2cc>
 8006876:	e000      	b.n	800687a <HAL_DMA_IRQHandler+0x2ea>
 8006878:	bf00      	nop
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <HAL_DMA_IRQHandler+0x30e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
 800689a:	e000      	b.n	800689e <HAL_DMA_IRQHandler+0x30e>
 800689c:	bf00      	nop
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <DMA_SetConfig>:
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d108      	bne.n	80068e4 <DMA_SetConfig+0x40>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	609a      	str	r2, [r3, #8]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	60da      	str	r2, [r3, #12]
 80068e2:	e007      	b.n	80068f4 <DMA_SetConfig+0x50>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	609a      	str	r2, [r3, #8]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	60da      	str	r2, [r3, #12]
 80068f4:	bf00      	nop
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <DMA_CalcBaseAndBitshift>:
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	3b10      	subs	r3, #16
 8006910:	4a14      	ldr	r2, [pc, #80]	; (8006964 <DMA_CalcBaseAndBitshift+0x64>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	091b      	lsrs	r3, r3, #4
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	4a13      	ldr	r2, [pc, #76]	; (8006968 <DMA_CalcBaseAndBitshift+0x68>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	65da      	str	r2, [r3, #92]	; 0x5c
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b03      	cmp	r3, #3
 800692c:	d909      	bls.n	8006942 <DMA_CalcBaseAndBitshift+0x42>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006936:	f023 0303 	bic.w	r3, r3, #3
 800693a:	1d1a      	adds	r2, r3, #4
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	659a      	str	r2, [r3, #88]	; 0x58
 8006940:	e007      	b.n	8006952 <DMA_CalcBaseAndBitshift+0x52>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800694a:	f023 0303 	bic.w	r3, r3, #3
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6593      	str	r3, [r2, #88]	; 0x58
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	aaaaaaab 	.word	0xaaaaaaab
 8006968:	08018acc 	.word	0x08018acc

0800696c <DMA_CheckFifoParam>:
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d11f      	bne.n	80069c6 <DMA_CheckFifoParam+0x5a>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b03      	cmp	r3, #3
 800698a:	d856      	bhi.n	8006a3a <DMA_CheckFifoParam+0xce>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <DMA_CheckFifoParam+0x28>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069a5 	.word	0x080069a5
 8006998:	080069b7 	.word	0x080069b7
 800699c:	080069a5 	.word	0x080069a5
 80069a0:	08006a3b 	.word	0x08006a3b
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d046      	beq.n	8006a3e <DMA_CheckFifoParam+0xd2>
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
 80069b4:	e043      	b.n	8006a3e <DMA_CheckFifoParam+0xd2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069be:	d140      	bne.n	8006a42 <DMA_CheckFifoParam+0xd6>
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	e03d      	b.n	8006a42 <DMA_CheckFifoParam+0xd6>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ce:	d121      	bne.n	8006a14 <DMA_CheckFifoParam+0xa8>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d837      	bhi.n	8006a46 <DMA_CheckFifoParam+0xda>
 80069d6:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <DMA_CheckFifoParam+0x70>)
 80069d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069dc:	080069ed 	.word	0x080069ed
 80069e0:	080069f3 	.word	0x080069f3
 80069e4:	080069ed 	.word	0x080069ed
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	2301      	movs	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
 80069f0:	e030      	b.n	8006a54 <DMA_CheckFifoParam+0xe8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d025      	beq.n	8006a4a <DMA_CheckFifoParam+0xde>
 80069fe:	2301      	movs	r3, #1
 8006a00:	73fb      	strb	r3, [r7, #15]
 8006a02:	e022      	b.n	8006a4a <DMA_CheckFifoParam+0xde>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a0c:	d11f      	bne.n	8006a4e <DMA_CheckFifoParam+0xe2>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	73fb      	strb	r3, [r7, #15]
 8006a12:	e01c      	b.n	8006a4e <DMA_CheckFifoParam+0xe2>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d903      	bls.n	8006a22 <DMA_CheckFifoParam+0xb6>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d003      	beq.n	8006a28 <DMA_CheckFifoParam+0xbc>
 8006a20:	e018      	b.n	8006a54 <DMA_CheckFifoParam+0xe8>
 8006a22:	2301      	movs	r3, #1
 8006a24:	73fb      	strb	r3, [r7, #15]
 8006a26:	e015      	b.n	8006a54 <DMA_CheckFifoParam+0xe8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00e      	beq.n	8006a52 <DMA_CheckFifoParam+0xe6>
 8006a34:	2301      	movs	r3, #1
 8006a36:	73fb      	strb	r3, [r7, #15]
 8006a38:	e00b      	b.n	8006a52 <DMA_CheckFifoParam+0xe6>
 8006a3a:	bf00      	nop
 8006a3c:	e00a      	b.n	8006a54 <DMA_CheckFifoParam+0xe8>
 8006a3e:	bf00      	nop
 8006a40:	e008      	b.n	8006a54 <DMA_CheckFifoParam+0xe8>
 8006a42:	bf00      	nop
 8006a44:	e006      	b.n	8006a54 <DMA_CheckFifoParam+0xe8>
 8006a46:	bf00      	nop
 8006a48:	e004      	b.n	8006a54 <DMA_CheckFifoParam+0xe8>
 8006a4a:	bf00      	nop
 8006a4c:	e002      	b.n	8006a54 <DMA_CheckFifoParam+0xe8>
 8006a4e:	bf00      	nop
 8006a50:	e000      	b.n	8006a54 <DMA_CheckFifoParam+0xe8>
 8006a52:	bf00      	nop
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop

08006a64 <HAL_GPIO_Init>:
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	2300      	movs	r3, #0
 8006a74:	613b      	str	r3, [r7, #16]
 8006a76:	2300      	movs	r3, #0
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a39      	ldr	r2, [pc, #228]	; (8006b64 <HAL_GPIO_Init+0x100>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d023      	beq.n	8006aca <HAL_GPIO_Init+0x66>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a38      	ldr	r2, [pc, #224]	; (8006b68 <HAL_GPIO_Init+0x104>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01f      	beq.n	8006aca <HAL_GPIO_Init+0x66>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a37      	ldr	r2, [pc, #220]	; (8006b6c <HAL_GPIO_Init+0x108>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d01b      	beq.n	8006aca <HAL_GPIO_Init+0x66>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a36      	ldr	r2, [pc, #216]	; (8006b70 <HAL_GPIO_Init+0x10c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d017      	beq.n	8006aca <HAL_GPIO_Init+0x66>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a35      	ldr	r2, [pc, #212]	; (8006b74 <HAL_GPIO_Init+0x110>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d013      	beq.n	8006aca <HAL_GPIO_Init+0x66>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a34      	ldr	r2, [pc, #208]	; (8006b78 <HAL_GPIO_Init+0x114>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00f      	beq.n	8006aca <HAL_GPIO_Init+0x66>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a33      	ldr	r2, [pc, #204]	; (8006b7c <HAL_GPIO_Init+0x118>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00b      	beq.n	8006aca <HAL_GPIO_Init+0x66>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a32      	ldr	r2, [pc, #200]	; (8006b80 <HAL_GPIO_Init+0x11c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d007      	beq.n	8006aca <HAL_GPIO_Init+0x66>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a31      	ldr	r2, [pc, #196]	; (8006b84 <HAL_GPIO_Init+0x120>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d003      	beq.n	8006aca <HAL_GPIO_Init+0x66>
 8006ac2:	21ac      	movs	r1, #172	; 0xac
 8006ac4:	4830      	ldr	r0, [pc, #192]	; (8006b88 <HAL_GPIO_Init+0x124>)
 8006ac6:	f7fb fc16 	bl	80022f6 <assert_failed>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_GPIO_Init+0x7c>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	0c1b      	lsrs	r3, r3, #16
 8006ada:	041b      	lsls	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <HAL_GPIO_Init+0x84>
 8006ae0:	21ad      	movs	r1, #173	; 0xad
 8006ae2:	4829      	ldr	r0, [pc, #164]	; (8006b88 <HAL_GPIO_Init+0x124>)
 8006ae4:	f7fb fc07 	bl	80022f6 <assert_failed>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d035      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d031      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b11      	cmp	r3, #17
 8006afe:	d02d      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d029      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b12      	cmp	r3, #18
 8006b0e:	d025      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8006b18:	d020      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006b22:	d01b      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8006b2c:	d016      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8006b36:	d011      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8006b40:	d00c      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8006b4a:	d007      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d003      	beq.n	8006b5c <HAL_GPIO_Init+0xf8>
 8006b54:	21ae      	movs	r1, #174	; 0xae
 8006b56:	480c      	ldr	r0, [pc, #48]	; (8006b88 <HAL_GPIO_Init+0x124>)
 8006b58:	f7fb fbcd 	bl	80022f6 <assert_failed>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61fb      	str	r3, [r7, #28]
 8006b60:	e242      	b.n	8006fe8 <HAL_GPIO_Init+0x584>
 8006b62:	bf00      	nop
 8006b64:	40020000 	.word	0x40020000
 8006b68:	40020400 	.word	0x40020400
 8006b6c:	40020800 	.word	0x40020800
 8006b70:	40020c00 	.word	0x40020c00
 8006b74:	40021000 	.word	0x40021000
 8006b78:	40021400 	.word	0x40021400
 8006b7c:	40021800 	.word	0x40021800
 8006b80:	40021c00 	.word	0x40021c00
 8006b84:	40022000 	.word	0x40022000
 8006b88:	080188bc 	.word	0x080188bc
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	f040 821c 	bne.w	8006fe2 <HAL_GPIO_Init+0x57e>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d005      	beq.n	8006bc2 <HAL_GPIO_Init+0x15e>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d144      	bne.n	8006c4c <HAL_GPIO_Init+0x1e8>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00f      	beq.n	8006bea <HAL_GPIO_Init+0x186>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d00b      	beq.n	8006bea <HAL_GPIO_Init+0x186>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d007      	beq.n	8006bea <HAL_GPIO_Init+0x186>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d003      	beq.n	8006bea <HAL_GPIO_Init+0x186>
 8006be2:	21c0      	movs	r1, #192	; 0xc0
 8006be4:	4881      	ldr	r0, [pc, #516]	; (8006dec <HAL_GPIO_Init+0x388>)
 8006be6:	f7fb fb86 	bl	80022f6 <assert_failed>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfa:	43db      	mvns	r3, r3
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	609a      	str	r2, [r3, #8]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	61bb      	str	r3, [r7, #24]
 8006c20:	2201      	movs	r2, #1
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	fa02 f303 	lsl.w	r3, r2, r3
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	091b      	lsrs	r3, r3, #4
 8006c36:	f003 0201 	and.w	r2, r3, #1
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 0303 	and.w	r3, r3, #3
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d027      	beq.n	8006ca8 <HAL_GPIO_Init+0x244>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <HAL_GPIO_Init+0x214>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d007      	beq.n	8006c78 <HAL_GPIO_Init+0x214>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d003      	beq.n	8006c78 <HAL_GPIO_Init+0x214>
 8006c70:	21d1      	movs	r1, #209	; 0xd1
 8006c72:	485e      	ldr	r0, [pc, #376]	; (8006dec <HAL_GPIO_Init+0x388>)
 8006c74:	f7fb fb3f 	bl	80022f6 <assert_failed>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	2203      	movs	r2, #3
 8006c84:	fa02 f303 	lsl.w	r3, r2, r3
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	60da      	str	r2, [r3, #12]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	f040 80c1 	bne.w	8006e38 <HAL_GPIO_Init+0x3d4>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 8098 	beq.w	8006df0 <HAL_GPIO_Init+0x38c>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2b09      	cmp	r3, #9
 8006cc6:	f000 8093 	beq.w	8006df0 <HAL_GPIO_Init+0x38c>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 808e 	beq.w	8006df0 <HAL_GPIO_Init+0x38c>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8089 	beq.w	8006df0 <HAL_GPIO_Init+0x38c>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8084 	beq.w	8006df0 <HAL_GPIO_Init+0x38c>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d07f      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d07b      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d077      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d073      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d06f      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d06b      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d067      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d063      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d05f      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d05b      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b05      	cmp	r3, #5
 8006d3e:	d057      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b05      	cmp	r3, #5
 8006d46:	d053      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b09      	cmp	r3, #9
 8006d4e:	d04f      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	2b06      	cmp	r3, #6
 8006d56:	d04b      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b09      	cmp	r3, #9
 8006d5e:	d047      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b07      	cmp	r3, #7
 8006d66:	d043      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b07      	cmp	r3, #7
 8006d6e:	d03f      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	2b07      	cmp	r3, #7
 8006d76:	d03b      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d037      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d033      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d02f      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	2b09      	cmp	r3, #9
 8006d96:	d02b      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	2b09      	cmp	r3, #9
 8006d9e:	d027      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	2b0a      	cmp	r3, #10
 8006da6:	d023      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b0a      	cmp	r3, #10
 8006dae:	d01f      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b0b      	cmp	r3, #11
 8006db6:	d01b      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b0c      	cmp	r3, #12
 8006dbe:	d017      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b0c      	cmp	r3, #12
 8006dc6:	d013      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b0d      	cmp	r3, #13
 8006dce:	d00f      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b0c      	cmp	r3, #12
 8006dd6:	d00b      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	2b0f      	cmp	r3, #15
 8006dde:	d007      	beq.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006de0:	21de      	movs	r1, #222	; 0xde
 8006de2:	4802      	ldr	r0, [pc, #8]	; (8006dec <HAL_GPIO_Init+0x388>)
 8006de4:	f7fb fa87 	bl	80022f6 <assert_failed>
 8006de8:	e002      	b.n	8006df0 <HAL_GPIO_Init+0x38c>
 8006dea:	bf00      	nop
 8006dec:	080188bc 	.word	0x080188bc
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	08da      	lsrs	r2, r3, #3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3208      	adds	r2, #8
 8006df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	220f      	movs	r2, #15
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	4013      	ands	r3, r2
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	691a      	ldr	r2, [r3, #16]
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	fa02 f303 	lsl.w	r3, r2, r3
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	08da      	lsrs	r2, r3, #3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3208      	adds	r2, #8
 8006e32:	69b9      	ldr	r1, [r7, #24]
 8006e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	2203      	movs	r2, #3
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f003 0203 	and.w	r2, r3, #3
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80b4 	beq.w	8006fe2 <HAL_GPIO_Init+0x57e>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	4b5f      	ldr	r3, [pc, #380]	; (8006ffc <HAL_GPIO_Init+0x598>)
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	4a5e      	ldr	r2, [pc, #376]	; (8006ffc <HAL_GPIO_Init+0x598>)
 8006e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e88:	6453      	str	r3, [r2, #68]	; 0x44
 8006e8a:	4b5c      	ldr	r3, [pc, #368]	; (8006ffc <HAL_GPIO_Init+0x598>)
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4a5a      	ldr	r2, [pc, #360]	; (8007000 <HAL_GPIO_Init+0x59c>)
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	089b      	lsrs	r3, r3, #2
 8006e9c:	3302      	adds	r3, #2
 8006e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea2:	61bb      	str	r3, [r7, #24]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	220f      	movs	r2, #15
 8006eae:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb2:	43db      	mvns	r3, r3
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a51      	ldr	r2, [pc, #324]	; (8007004 <HAL_GPIO_Init+0x5a0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d02b      	beq.n	8006f1a <HAL_GPIO_Init+0x4b6>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a50      	ldr	r2, [pc, #320]	; (8007008 <HAL_GPIO_Init+0x5a4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d025      	beq.n	8006f16 <HAL_GPIO_Init+0x4b2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a4f      	ldr	r2, [pc, #316]	; (800700c <HAL_GPIO_Init+0x5a8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d01f      	beq.n	8006f12 <HAL_GPIO_Init+0x4ae>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a4e      	ldr	r2, [pc, #312]	; (8007010 <HAL_GPIO_Init+0x5ac>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d019      	beq.n	8006f0e <HAL_GPIO_Init+0x4aa>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a4d      	ldr	r2, [pc, #308]	; (8007014 <HAL_GPIO_Init+0x5b0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <HAL_GPIO_Init+0x4a6>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a4c      	ldr	r2, [pc, #304]	; (8007018 <HAL_GPIO_Init+0x5b4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00d      	beq.n	8006f06 <HAL_GPIO_Init+0x4a2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a4b      	ldr	r2, [pc, #300]	; (800701c <HAL_GPIO_Init+0x5b8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d007      	beq.n	8006f02 <HAL_GPIO_Init+0x49e>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a4a      	ldr	r2, [pc, #296]	; (8007020 <HAL_GPIO_Init+0x5bc>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d101      	bne.n	8006efe <HAL_GPIO_Init+0x49a>
 8006efa:	2307      	movs	r3, #7
 8006efc:	e00e      	b.n	8006f1c <HAL_GPIO_Init+0x4b8>
 8006efe:	2308      	movs	r3, #8
 8006f00:	e00c      	b.n	8006f1c <HAL_GPIO_Init+0x4b8>
 8006f02:	2306      	movs	r3, #6
 8006f04:	e00a      	b.n	8006f1c <HAL_GPIO_Init+0x4b8>
 8006f06:	2305      	movs	r3, #5
 8006f08:	e008      	b.n	8006f1c <HAL_GPIO_Init+0x4b8>
 8006f0a:	2304      	movs	r3, #4
 8006f0c:	e006      	b.n	8006f1c <HAL_GPIO_Init+0x4b8>
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e004      	b.n	8006f1c <HAL_GPIO_Init+0x4b8>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e002      	b.n	8006f1c <HAL_GPIO_Init+0x4b8>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <HAL_GPIO_Init+0x4b8>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	f002 0203 	and.w	r2, r2, #3
 8006f22:	0092      	lsls	r2, r2, #2
 8006f24:	4093      	lsls	r3, r2
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
 8006f2c:	4934      	ldr	r1, [pc, #208]	; (8007000 <HAL_GPIO_Init+0x59c>)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	089b      	lsrs	r3, r3, #2
 8006f32:	3302      	adds	r3, #2
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006f3a:	4b3a      	ldr	r3, [pc, #232]	; (8007024 <HAL_GPIO_Init+0x5c0>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	43db      	mvns	r3, r3
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	4013      	ands	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_GPIO_Init+0x4fa>
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	4a31      	ldr	r2, [pc, #196]	; (8007024 <HAL_GPIO_Init+0x5c0>)
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	6093      	str	r3, [r2, #8]
 8006f64:	4b2f      	ldr	r3, [pc, #188]	; (8007024 <HAL_GPIO_Init+0x5c0>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	43db      	mvns	r3, r3
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	4013      	ands	r3, r2
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_GPIO_Init+0x524>
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	61bb      	str	r3, [r7, #24]
 8006f88:	4a26      	ldr	r2, [pc, #152]	; (8007024 <HAL_GPIO_Init+0x5c0>)
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	60d3      	str	r3, [r2, #12]
 8006f8e:	4b25      	ldr	r3, [pc, #148]	; (8007024 <HAL_GPIO_Init+0x5c0>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	61bb      	str	r3, [r7, #24]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	43db      	mvns	r3, r3
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_GPIO_Init+0x54e>
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	4a1c      	ldr	r2, [pc, #112]	; (8007024 <HAL_GPIO_Init+0x5c0>)
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	6053      	str	r3, [r2, #4]
 8006fb8:	4b1a      	ldr	r3, [pc, #104]	; (8007024 <HAL_GPIO_Init+0x5c0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	43db      	mvns	r3, r3
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	61bb      	str	r3, [r7, #24]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_GPIO_Init+0x578>
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	61bb      	str	r3, [r7, #24]
 8006fdc:	4a11      	ldr	r2, [pc, #68]	; (8007024 <HAL_GPIO_Init+0x5c0>)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	2b0f      	cmp	r3, #15
 8006fec:	f67f adce 	bls.w	8006b8c <HAL_GPIO_Init+0x128>
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40023800 	.word	0x40023800
 8007000:	40013800 	.word	0x40013800
 8007004:	40020000 	.word	0x40020000
 8007008:	40020400 	.word	0x40020400
 800700c:	40020800 	.word	0x40020800
 8007010:	40020c00 	.word	0x40020c00
 8007014:	40021000 	.word	0x40021000
 8007018:	40021400 	.word	0x40021400
 800701c:	40021800 	.word	0x40021800
 8007020:	40021c00 	.word	0x40021c00
 8007024:	40013c00 	.word	0x40013c00

08007028 <HAL_GPIO_WritePin>:
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	807b      	strh	r3, [r7, #2]
 8007034:	4613      	mov	r3, r2
 8007036:	707b      	strb	r3, [r7, #1]
 8007038:	887b      	ldrh	r3, [r7, #2]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d004      	beq.n	8007048 <HAL_GPIO_WritePin+0x20>
 800703e:	887b      	ldrh	r3, [r7, #2]
 8007040:	0c1b      	lsrs	r3, r3, #16
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <HAL_GPIO_WritePin+0x2a>
 8007048:	f240 119d 	movw	r1, #413	; 0x19d
 800704c:	480e      	ldr	r0, [pc, #56]	; (8007088 <HAL_GPIO_WritePin+0x60>)
 800704e:	f7fb f952 	bl	80022f6 <assert_failed>
 8007052:	787b      	ldrb	r3, [r7, #1]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d007      	beq.n	8007068 <HAL_GPIO_WritePin+0x40>
 8007058:	787b      	ldrb	r3, [r7, #1]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d004      	beq.n	8007068 <HAL_GPIO_WritePin+0x40>
 800705e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8007062:	4809      	ldr	r0, [pc, #36]	; (8007088 <HAL_GPIO_WritePin+0x60>)
 8007064:	f7fb f947 	bl	80022f6 <assert_failed>
 8007068:	787b      	ldrb	r3, [r7, #1]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_GPIO_WritePin+0x4e>
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	619a      	str	r2, [r3, #24]
 8007074:	e003      	b.n	800707e <HAL_GPIO_WritePin+0x56>
 8007076:	887b      	ldrh	r3, [r7, #2]
 8007078:	041a      	lsls	r2, r3, #16
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	619a      	str	r2, [r3, #24]
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	080188bc 	.word	0x080188bc

0800708c <HAL_GPIO_EXTI_IRQHandler>:
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	80fb      	strh	r3, [r7, #6]
 8007096:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007098:	695a      	ldr	r2, [r3, #20]
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d006      	beq.n	80070b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80070a2:	4a05      	ldr	r2, [pc, #20]	; (80070b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	6153      	str	r3, [r2, #20]
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fa fdfe 	bl	8001cac <HAL_GPIO_EXTI_Callback>
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	40013c00 	.word	0x40013c00

080070bc <HAL_PCD_Init>:
 80070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070be:	b08f      	sub	sp, #60	; 0x3c
 80070c0:	af0a      	add	r7, sp, #40	; 0x28
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_PCD_Init+0x12>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e11d      	b.n	800730a <HAL_PCD_Init+0x24e>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070d6:	d008      	beq.n	80070ea <HAL_PCD_Init+0x2e>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a8d      	ldr	r2, [pc, #564]	; (8007314 <HAL_PCD_Init+0x258>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <HAL_PCD_Init+0x2e>
 80070e2:	2187      	movs	r1, #135	; 0x87
 80070e4:	488c      	ldr	r0, [pc, #560]	; (8007318 <HAL_PCD_Init+0x25c>)
 80070e6:	f7fb f906 	bl	80022f6 <assert_failed>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60bb      	str	r3, [r7, #8]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <HAL_PCD_Init+0x4e>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f00d fd2f 	bl	8014b68 <HAL_PCD_MspInit>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2203      	movs	r2, #3
 800710e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <HAL_PCD_Init+0x68>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	611a      	str	r2, [r3, #16]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	f006 fee0 	bl	800deee <USB_DisableGlobalInt>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	687e      	ldr	r6, [r7, #4]
 8007136:	466d      	mov	r5, sp
 8007138:	f106 0410 	add.w	r4, r6, #16
 800713c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800713e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007148:	e885 0003 	stmia.w	r5, {r0, r1}
 800714c:	1d33      	adds	r3, r6, #4
 800714e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007150:	6838      	ldr	r0, [r7, #0]
 8007152:	f006 fdb7 	bl	800dcc4 <USB_CoreInit>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <HAL_PCD_Init+0xac>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007164:	2301      	movs	r3, #1
 8007166:	e0d0      	b.n	800730a <HAL_PCD_Init+0x24e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2100      	movs	r1, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f006 fece 	bl	800df10 <USB_SetCurrentMode>
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
 8007178:	e04a      	b.n	8007210 <HAL_PCD_Init+0x154>
 800717a:	7bfa      	ldrb	r2, [r7, #15]
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	333d      	adds	r3, #61	; 0x3d
 800718a:	2201      	movs	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	7bfa      	ldrb	r2, [r7, #15]
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	333c      	adds	r3, #60	; 0x3c
 800719e:	7bfa      	ldrb	r2, [r7, #15]
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	7bfa      	ldrb	r2, [r7, #15]
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	b298      	uxth	r0, r3
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	3344      	adds	r3, #68	; 0x44
 80071b6:	4602      	mov	r2, r0
 80071b8:	801a      	strh	r2, [r3, #0]
 80071ba:	7bfa      	ldrb	r2, [r7, #15]
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	3340      	adds	r3, #64	; 0x40
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	7bfa      	ldrb	r2, [r7, #15]
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	3348      	adds	r3, #72	; 0x48
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	7bfa      	ldrb	r2, [r7, #15]
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	440b      	add	r3, r1
 80071f0:	334c      	adds	r3, #76	; 0x4c
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	7bfa      	ldrb	r2, [r7, #15]
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	3354      	adds	r3, #84	; 0x54
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	3301      	adds	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
 8007210:	7bfa      	ldrb	r2, [r7, #15]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	429a      	cmp	r2, r3
 8007218:	d3af      	bcc.n	800717a <HAL_PCD_Init+0xbe>
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]
 800721e:	e044      	b.n	80072aa <HAL_PCD_Init+0x1ee>
 8007220:	7bfa      	ldrb	r2, [r7, #15]
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	4613      	mov	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	7bfa      	ldrb	r2, [r7, #15]
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007248:	7bfa      	ldrb	r2, [r7, #15]
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	7bfa      	ldrb	r2, [r7, #15]
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	4613      	mov	r3, r2
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	4413      	add	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	440b      	add	r3, r1
 800725a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	7bfa      	ldrb	r2, [r7, #15]
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	7bfa      	ldrb	r2, [r7, #15]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	7bfa      	ldrb	r2, [r7, #15]
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	3301      	adds	r3, #1
 80072a8:	73fb      	strb	r3, [r7, #15]
 80072aa:	7bfa      	ldrb	r2, [r7, #15]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d3b5      	bcc.n	8007220 <HAL_PCD_Init+0x164>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	603b      	str	r3, [r7, #0]
 80072ba:	687e      	ldr	r6, [r7, #4]
 80072bc:	466d      	mov	r5, sp
 80072be:	f106 0410 	add.w	r4, r6, #16
 80072c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80072d2:	1d33      	adds	r3, r6, #4
 80072d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072d6:	6838      	ldr	r0, [r7, #0]
 80072d8:	f006 fe66 	bl	800dfa8 <USB_DevInit>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <HAL_PCD_Init+0x232>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2202      	movs	r2, #2
 80072e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80072ea:	2301      	movs	r3, #1
 80072ec:	e00d      	b.n	800730a <HAL_PCD_Init+0x24e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f007 ffb5 	bl	800f272 <USB_DevDisconnect>
 8007308:	2300      	movs	r3, #0
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007312:	bf00      	nop
 8007314:	40040000 	.word	0x40040000
 8007318:	080188f8 	.word	0x080188f8

0800731c <HAL_PCD_Start>:
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_PCD_Start+0x1c>
 8007334:	2302      	movs	r3, #2
 8007336:	e020      	b.n	800737a <HAL_PCD_Start+0x5e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	2b01      	cmp	r3, #1
 8007346:	d109      	bne.n	800735c <HAL_PCD_Start+0x40>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d005      	beq.n	800735c <HAL_PCD_Start+0x40>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	639a      	str	r2, [r3, #56]	; 0x38
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4618      	mov	r0, r3
 8007362:	f006 fdb3 	bl	800decc <USB_EnableGlobalInt>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f007 ff60 	bl	800f230 <USB_DevConnect>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007378:	2300      	movs	r3, #0
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_PCD_IRQHandler>:
 8007382:	b590      	push	{r4, r7, lr}
 8007384:	b08d      	sub	sp, #52	; 0x34
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	623b      	str	r3, [r7, #32]
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f008 f81e 	bl	800f3da <USB_GetMode>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 848a 	bne.w	8007cba <HAL_PCD_IRQHandler+0x938>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f007 ff82 	bl	800f2b4 <USB_ReadInterrupts>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 8480 	beq.w	8007cb8 <HAL_PCD_IRQHandler+0x936>
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	0a1b      	lsrs	r3, r3, #8
 80073c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f007 ff6f 	bl	800f2b4 <USB_ReadInterrupts>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d107      	bne.n	80073f0 <HAL_PCD_IRQHandler+0x6e>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	695a      	ldr	r2, [r3, #20]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f002 0202 	and.w	r2, r2, #2
 80073ee:	615a      	str	r2, [r3, #20]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f007 ff5d 	bl	800f2b4 <USB_ReadInterrupts>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f003 0310 	and.w	r3, r3, #16
 8007400:	2b10      	cmp	r3, #16
 8007402:	d161      	bne.n	80074c8 <HAL_PCD_IRQHandler+0x146>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0210 	bic.w	r2, r2, #16
 8007412:	619a      	str	r2, [r3, #24]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	f003 020f 	and.w	r2, r3, #15
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	4413      	add	r3, r2
 8007430:	3304      	adds	r3, #4
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	0c5b      	lsrs	r3, r3, #17
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	2b02      	cmp	r3, #2
 800743e:	d124      	bne.n	800748a <HAL_PCD_IRQHandler+0x108>
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007446:	4013      	ands	r3, r2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d035      	beq.n	80074b8 <HAL_PCD_IRQHandler+0x136>
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	6919      	ldr	r1, [r3, #16]
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	091b      	lsrs	r3, r3, #4
 8007454:	b29b      	uxth	r3, r3
 8007456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800745a:	b29b      	uxth	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	6a38      	ldr	r0, [r7, #32]
 8007460:	f007 fd94 	bl	800ef8c <USB_ReadPacket>
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	091b      	lsrs	r3, r3, #4
 800746c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007470:	441a      	add	r2, r3
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	611a      	str	r2, [r3, #16]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	6a1a      	ldr	r2, [r3, #32]
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	091b      	lsrs	r3, r3, #4
 800747e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007482:	441a      	add	r2, r3
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	621a      	str	r2, [r3, #32]
 8007488:	e016      	b.n	80074b8 <HAL_PCD_IRQHandler+0x136>
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	0c5b      	lsrs	r3, r3, #17
 800748e:	f003 030f 	and.w	r3, r3, #15
 8007492:	2b06      	cmp	r3, #6
 8007494:	d110      	bne.n	80074b8 <HAL_PCD_IRQHandler+0x136>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800749c:	2208      	movs	r2, #8
 800749e:	4619      	mov	r1, r3
 80074a0:	6a38      	ldr	r0, [r7, #32]
 80074a2:	f007 fd73 	bl	800ef8c <USB_ReadPacket>
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	6a1a      	ldr	r2, [r3, #32]
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	091b      	lsrs	r3, r3, #4
 80074ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074b2:	441a      	add	r2, r3
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	621a      	str	r2, [r3, #32]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699a      	ldr	r2, [r3, #24]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0210 	orr.w	r2, r2, #16
 80074c6:	619a      	str	r2, [r3, #24]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f007 fef1 	bl	800f2b4 <USB_ReadInterrupts>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074dc:	f040 80a7 	bne.w	800762e <HAL_PCD_IRQHandler+0x2ac>
 80074e0:	2300      	movs	r3, #0
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f007 fef6 	bl	800f2da <USB_ReadDevAllOutEpInterrupt>
 80074ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80074f0:	e099      	b.n	8007626 <HAL_PCD_IRQHandler+0x2a4>
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 808e 	beq.w	800761a <HAL_PCD_IRQHandler+0x298>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f007 ff1a 	bl	800f342 <USB_ReadDevOutEPInterrupt>
 800750e:	6138      	str	r0, [r7, #16]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <HAL_PCD_IRQHandler+0x1b2>
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	461a      	mov	r2, r3
 8007528:	2301      	movs	r3, #1
 800752a:	6093      	str	r3, [r2, #8]
 800752c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fec2 	bl	80082b8 <PCD_EP_OutXfrComplete_int>
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00c      	beq.n	8007558 <HAL_PCD_IRQHandler+0x1d6>
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	461a      	mov	r2, r3
 800754c:	2308      	movs	r3, #8
 800754e:	6093      	str	r3, [r2, #8]
 8007550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 ff98 	bl	8008488 <PCD_EP_OutSetupPacket_int>
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	d008      	beq.n	8007574 <HAL_PCD_IRQHandler+0x1f2>
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	461a      	mov	r2, r3
 8007570:	2310      	movs	r3, #16
 8007572:	6093      	str	r3, [r2, #8]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d030      	beq.n	80075e0 <HAL_PCD_IRQHandler+0x25e>
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007586:	2b80      	cmp	r3, #128	; 0x80
 8007588:	d109      	bne.n	800759e <HAL_PCD_IRQHandler+0x21c>
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800759c:	6053      	str	r3, [r2, #4]
 800759e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a0:	4613      	mov	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	4413      	add	r3, r2
 80075b0:	3304      	adds	r3, #4
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	78db      	ldrb	r3, [r3, #3]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d108      	bne.n	80075ce <HAL_PCD_IRQHandler+0x24c>
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2200      	movs	r2, #0
 80075c0:	70da      	strb	r2, [r3, #3]
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f00d fbd3 	bl	8014d74 <HAL_PCD_ISOOUTIncompleteCallback>
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	461a      	mov	r2, r3
 80075dc:	2302      	movs	r3, #2
 80075de:	6093      	str	r3, [r2, #8]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <HAL_PCD_IRQHandler+0x27a>
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f6:	461a      	mov	r2, r3
 80075f8:	2320      	movs	r3, #32
 80075fa:	6093      	str	r3, [r2, #8]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d009      	beq.n	800761a <HAL_PCD_IRQHandler+0x298>
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007612:	461a      	mov	r2, r3
 8007614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007618:	6093      	str	r3, [r2, #8]
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	3301      	adds	r3, #1
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	62bb      	str	r3, [r7, #40]	; 0x28
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	f47f af62 	bne.w	80074f2 <HAL_PCD_IRQHandler+0x170>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4618      	mov	r0, r3
 8007634:	f007 fe3e 	bl	800f2b4 <USB_ReadInterrupts>
 8007638:	4603      	mov	r3, r0
 800763a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800763e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007642:	f040 80db 	bne.w	80077fc <HAL_PCD_IRQHandler+0x47a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4618      	mov	r0, r3
 800764c:	f007 fe5f 	bl	800f30e <USB_ReadDevAllInEpInterrupt>
 8007650:	62b8      	str	r0, [r7, #40]	; 0x28
 8007652:	2300      	movs	r3, #0
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
 8007656:	e0cd      	b.n	80077f4 <HAL_PCD_IRQHandler+0x472>
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 80c2 	beq.w	80077e8 <HAL_PCD_IRQHandler+0x466>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	4611      	mov	r1, r2
 800766e:	4618      	mov	r0, r3
 8007670:	f007 fe85 	bl	800f37e <USB_ReadDevInEPInterrupt>
 8007674:	6138      	str	r0, [r7, #16]
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d057      	beq.n	8007730 <HAL_PCD_IRQHandler+0x3ae>
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	2201      	movs	r2, #1
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	43db      	mvns	r3, r3
 800769a:	69f9      	ldr	r1, [r7, #28]
 800769c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a0:	4013      	ands	r3, r2
 80076a2:	634b      	str	r3, [r1, #52]	; 0x34
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	461a      	mov	r2, r3
 80076b2:	2301      	movs	r3, #1
 80076b4:	6093      	str	r3, [r2, #8]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d132      	bne.n	8007724 <HAL_PCD_IRQHandler+0x3a2>
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c2:	4613      	mov	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	440b      	add	r3, r1
 80076cc:	334c      	adds	r3, #76	; 0x4c
 80076ce:	6819      	ldr	r1, [r3, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d4:	4613      	mov	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4403      	add	r3, r0
 80076de:	3348      	adds	r3, #72	; 0x48
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4419      	add	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e8:	4613      	mov	r3, r2
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4403      	add	r3, r0
 80076f2:	334c      	adds	r3, #76	; 0x4c
 80076f4:	6019      	str	r1, [r3, #0]
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d113      	bne.n	8007724 <HAL_PCD_IRQHandler+0x3a2>
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007700:	4613      	mov	r3, r2
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	3354      	adds	r3, #84	; 0x54
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d108      	bne.n	8007724 <HAL_PCD_IRQHandler+0x3a2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800771c:	461a      	mov	r2, r3
 800771e:	2101      	movs	r1, #1
 8007720:	f007 fe8c 	bl	800f43c <USB_EP0_OutStart>
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	b2db      	uxtb	r3, r3
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f00d fa9d 	bl	8014c6a <HAL_PCD_DataInStageCallback>
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d008      	beq.n	800774c <HAL_PCD_IRQHandler+0x3ca>
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	461a      	mov	r2, r3
 8007748:	2308      	movs	r3, #8
 800774a:	6093      	str	r3, [r2, #8]
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f003 0310 	and.w	r3, r3, #16
 8007752:	2b00      	cmp	r3, #0
 8007754:	d008      	beq.n	8007768 <HAL_PCD_IRQHandler+0x3e6>
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007762:	461a      	mov	r2, r3
 8007764:	2310      	movs	r3, #16
 8007766:	6093      	str	r3, [r2, #8]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d008      	beq.n	8007784 <HAL_PCD_IRQHandler+0x402>
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777e:	461a      	mov	r2, r3
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	6093      	str	r3, [r2, #8]
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d023      	beq.n	80077d6 <HAL_PCD_IRQHandler+0x454>
 800778e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007790:	6a38      	ldr	r0, [r7, #32]
 8007792:	f006 fd6d 	bl	800e270 <USB_FlushTxFifo>
 8007796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007798:	4613      	mov	r3, r2
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	3338      	adds	r3, #56	; 0x38
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	4413      	add	r3, r2
 80077a6:	3304      	adds	r3, #4
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	78db      	ldrb	r3, [r3, #3]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d108      	bne.n	80077c4 <HAL_PCD_IRQHandler+0x442>
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2200      	movs	r2, #0
 80077b6:	70da      	strb	r2, [r3, #3]
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f00d faea 	bl	8014d98 <HAL_PCD_ISOINIncompleteCallback>
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d0:	461a      	mov	r2, r3
 80077d2:	2302      	movs	r3, #2
 80077d4:	6093      	str	r3, [r2, #8]
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_PCD_IRQHandler+0x466>
 80077e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fcdb 	bl	800819e <PCD_WriteEmptyTxFifo>
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	3301      	adds	r3, #1
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	085b      	lsrs	r3, r3, #1
 80077f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f47f af2e 	bne.w	8007658 <HAL_PCD_IRQHandler+0x2d6>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4618      	mov	r0, r3
 8007802:	f007 fd57 	bl	800f2b4 <USB_ReadInterrupts>
 8007806:	4603      	mov	r3, r0
 8007808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800780c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007810:	d122      	bne.n	8007858 <HAL_PCD_IRQHandler+0x4d6>
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007820:	f023 0301 	bic.w	r3, r3, #1
 8007824:	6053      	str	r3, [r2, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800782c:	2b01      	cmp	r3, #1
 800782e:	d108      	bne.n	8007842 <HAL_PCD_IRQHandler+0x4c0>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8007838:	2100      	movs	r1, #0
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fec2 	bl	80085c4 <HAL_PCDEx_LPM_Callback>
 8007840:	e002      	b.n	8007848 <HAL_PCD_IRQHandler+0x4c6>
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f00d fa88 	bl	8014d58 <HAL_PCD_ResumeCallback>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695a      	ldr	r2, [r3, #20]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007856:	615a      	str	r2, [r3, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f007 fd29 	bl	800f2b4 <USB_ReadInterrupts>
 8007862:	4603      	mov	r3, r0
 8007864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800786c:	d112      	bne.n	8007894 <HAL_PCD_IRQHandler+0x512>
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b01      	cmp	r3, #1
 800787c:	d102      	bne.n	8007884 <HAL_PCD_IRQHandler+0x502>
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f00d fa44 	bl	8014d0c <HAL_PCD_SuspendCallback>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695a      	ldr	r2, [r3, #20]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007892:	615a      	str	r2, [r3, #20]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4618      	mov	r0, r3
 800789a:	f007 fd0b 	bl	800f2b4 <USB_ReadInterrupts>
 800789e:	4603      	mov	r3, r0
 80078a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a8:	f040 80b7 	bne.w	8007a1a <HAL_PCD_IRQHandler+0x698>
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ba:	f023 0301 	bic.w	r3, r3, #1
 80078be:	6053      	str	r3, [r2, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2110      	movs	r1, #16
 80078c6:	4618      	mov	r0, r3
 80078c8:	f006 fcd2 	bl	800e270 <USB_FlushTxFifo>
 80078cc:	2300      	movs	r3, #0
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078d0:	e046      	b.n	8007960 <HAL_PCD_IRQHandler+0x5de>
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078de:	461a      	mov	r2, r3
 80078e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078e4:	6093      	str	r3, [r2, #8]
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f6:	0151      	lsls	r1, r2, #5
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	440a      	add	r2, r1
 80078fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007900:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007912:	461a      	mov	r2, r3
 8007914:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007918:	6093      	str	r3, [r2, #8]
 800791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800792a:	0151      	lsls	r1, r2, #5
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	440a      	add	r2, r1
 8007930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007934:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800794a:	0151      	lsls	r1, r2, #5
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	440a      	add	r2, r1
 8007950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007954:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	3301      	adds	r3, #1
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007966:	429a      	cmp	r2, r3
 8007968:	d3b3      	bcc.n	80078d2 <HAL_PCD_IRQHandler+0x550>
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007978:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800797c:	61d3      	str	r3, [r2, #28]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007982:	2b00      	cmp	r3, #0
 8007984:	d016      	beq.n	80079b4 <HAL_PCD_IRQHandler+0x632>
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007996:	f043 030b 	orr.w	r3, r3, #11
 800799a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ac:	f043 030b 	orr.w	r3, r3, #11
 80079b0:	6453      	str	r3, [r2, #68]	; 0x44
 80079b2:	e015      	b.n	80079e0 <HAL_PCD_IRQHandler+0x65e>
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80079c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80079ca:	6153      	str	r3, [r2, #20]
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	69fa      	ldr	r2, [r7, #28]
 80079d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079da:	f043 030b 	orr.w	r3, r3, #11
 80079de:	6113      	str	r3, [r2, #16]
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	b2d9      	uxtb	r1, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a04:	461a      	mov	r2, r3
 8007a06:	f007 fd19 	bl	800f43c <USB_EP0_OutStart>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a18:	615a      	str	r2, [r3, #20]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f007 fc48 	bl	800f2b4 <USB_ReadInterrupts>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a2e:	d124      	bne.n	8007a7a <HAL_PCD_IRQHandler+0x6f8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f007 fcde 	bl	800f3f6 <USB_ActivateSetup>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f006 fc93 	bl	800e36a <USB_GetDevSpeed>
 8007a44:	4603      	mov	r3, r0
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60da      	str	r2, [r3, #12]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681c      	ldr	r4, [r3, #0]
 8007a50:	f001 fb80 	bl	8009154 <HAL_RCC_GetHCLKFreq>
 8007a54:	4601      	mov	r1, r0
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f006 f992 	bl	800dd88 <USB_SetTurnaroundTime>
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f00d f928 	bl	8014cba <HAL_PCD_ResetCallback>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	695a      	ldr	r2, [r3, #20]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007a78:	615a      	str	r2, [r3, #20]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f007 fc18 	bl	800f2b4 <USB_ReadInterrupts>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d10a      	bne.n	8007aa4 <HAL_PCD_IRQHandler+0x722>
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f00d f905 	bl	8014c9e <HAL_PCD_SOFCallback>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695a      	ldr	r2, [r3, #20]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f002 0208 	and.w	r2, r2, #8
 8007aa2:	615a      	str	r2, [r3, #20]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f007 fc03 	bl	800f2b4 <USB_ReadInterrupts>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab4:	2b80      	cmp	r3, #128	; 0x80
 8007ab6:	d122      	bne.n	8007afe <HAL_PCD_IRQHandler+0x77c>
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	619a      	str	r2, [r3, #24]
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac8:	e014      	b.n	8007af4 <HAL_PCD_IRQHandler+0x772>
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ace:	4613      	mov	r3, r2
 8007ad0:	00db      	lsls	r3, r3, #3
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	440b      	add	r3, r1
 8007ad8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d105      	bne.n	8007aee <HAL_PCD_IRQHandler+0x76c>
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fb27 	bl	800813c <HAL_PCD_EP_Abort>
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	3301      	adds	r3, #1
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d3e5      	bcc.n	8007aca <HAL_PCD_IRQHandler+0x748>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f007 fbd6 	bl	800f2b4 <USB_ReadInterrupts>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b12:	d13b      	bne.n	8007b8c <HAL_PCD_IRQHandler+0x80a>
 8007b14:	2301      	movs	r3, #1
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
 8007b18:	e02b      	b.n	8007b72 <HAL_PCD_IRQHandler+0x7f0>
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2e:	4613      	mov	r3, r2
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	440b      	add	r3, r1
 8007b38:	3340      	adds	r3, #64	; 0x40
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d115      	bne.n	8007b6c <HAL_PCD_IRQHandler+0x7ea>
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da12      	bge.n	8007b6c <HAL_PCD_IRQHandler+0x7ea>
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	333f      	adds	r3, #63	; 0x3f
 8007b56:	2201      	movs	r2, #1
 8007b58:	701a      	strb	r2, [r3, #0]
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fae8 	bl	800813c <HAL_PCD_EP_Abort>
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	3301      	adds	r3, #1
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d3ce      	bcc.n	8007b1a <HAL_PCD_IRQHandler+0x798>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695a      	ldr	r2, [r3, #20]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007b8a:	615a      	str	r2, [r3, #20]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f007 fb8f 	bl	800f2b4 <USB_ReadInterrupts>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ba0:	d155      	bne.n	8007c4e <HAL_PCD_IRQHandler+0x8cc>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba6:	e045      	b.n	8007c34 <HAL_PCD_IRQHandler+0x8b2>
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	61bb      	str	r3, [r7, #24]
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d12e      	bne.n	8007c2e <HAL_PCD_IRQHandler+0x8ac>
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da2b      	bge.n	8007c2e <HAL_PCD_IRQHandler+0x8ac>
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d121      	bne.n	8007c2e <HAL_PCD_IRQHandler+0x8ac>
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bee:	4613      	mov	r3, r2
 8007bf0:	00db      	lsls	r3, r3, #3
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	701a      	strb	r2, [r3, #0]
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	619a      	str	r2, [r3, #24]
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <HAL_PCD_IRQHandler+0x8ac>
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c2a:	6053      	str	r3, [r2, #4]
 8007c2c:	e007      	b.n	8007c3e <HAL_PCD_IRQHandler+0x8bc>
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	3301      	adds	r3, #1
 8007c32:	627b      	str	r3, [r7, #36]	; 0x24
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d3b4      	bcc.n	8007ba8 <HAL_PCD_IRQHandler+0x826>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695a      	ldr	r2, [r3, #20]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007c4c:	615a      	str	r2, [r3, #20]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f007 fb2e 	bl	800f2b4 <USB_ReadInterrupts>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c62:	d10a      	bne.n	8007c7a <HAL_PCD_IRQHandler+0x8f8>
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f00d f8a9 	bl	8014dbc <HAL_PCD_ConnectCallback>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695a      	ldr	r2, [r3, #20]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007c78:	615a      	str	r2, [r3, #20]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f007 fb18 	bl	800f2b4 <USB_ReadInterrupts>
 8007c84:	4603      	mov	r3, r0
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d115      	bne.n	8007cba <HAL_PCD_IRQHandler+0x938>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <HAL_PCD_IRQHandler+0x924>
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f00d f899 	bl	8014dd8 <HAL_PCD_DisconnectCallback>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6859      	ldr	r1, [r3, #4]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
 8007cb6:	e000      	b.n	8007cba <HAL_PCD_IRQHandler+0x938>
 8007cb8:	bf00      	nop
 8007cba:	3734      	adds	r7, #52	; 0x34
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd90      	pop	{r4, r7, pc}

08007cc0 <HAL_PCD_SetAddress>:
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d101      	bne.n	8007cda <HAL_PCD_SetAddress+0x1a>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e013      	b.n	8007d02 <HAL_PCD_SetAddress+0x42>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	78fa      	ldrb	r2, [r7, #3]
 8007ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f007 fa76 	bl	800f1e4 <USB_SetDevAddress>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007d00:	2300      	movs	r3, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_PCD_EP_Open>:
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	4608      	mov	r0, r1
 8007d14:	4611      	mov	r1, r2
 8007d16:	461a      	mov	r2, r3
 8007d18:	4603      	mov	r3, r0
 8007d1a:	70fb      	strb	r3, [r7, #3]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	803b      	strh	r3, [r7, #0]
 8007d20:	4613      	mov	r3, r2
 8007d22:	70bb      	strb	r3, [r7, #2]
 8007d24:	2300      	movs	r3, #0
 8007d26:	72fb      	strb	r3, [r7, #11]
 8007d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da0f      	bge.n	8007d50 <HAL_PCD_EP_Open+0x46>
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	f003 020f 	and.w	r2, r3, #15
 8007d36:	4613      	mov	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	3338      	adds	r3, #56	; 0x38
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	4413      	add	r3, r2
 8007d44:	3304      	adds	r3, #4
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	705a      	strb	r2, [r3, #1]
 8007d4e:	e00f      	b.n	8007d70 <HAL_PCD_EP_Open+0x66>
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	f003 020f 	and.w	r2, r3, #15
 8007d56:	4613      	mov	r3, r2
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	4413      	add	r3, r2
 8007d66:	3304      	adds	r3, #4
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	705a      	strb	r2, [r3, #1]
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	883a      	ldrh	r2, [r7, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	60da      	str	r2, [r3, #12]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	78ba      	ldrb	r2, [r7, #2]
 8007d86:	711a      	strb	r2, [r3, #4]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <HAL_PCD_EP_Open+0x90>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	811a      	strh	r2, [r3, #8]
 8007d9a:	78bb      	ldrb	r3, [r7, #2]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d102      	bne.n	8007da6 <HAL_PCD_EP_Open+0x9c>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	715a      	strb	r2, [r3, #5]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_PCD_EP_Open+0xaa>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e00e      	b.n	8007dd2 <HAL_PCD_EP_Open+0xc8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68f9      	ldr	r1, [r7, #12]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f006 faf6 	bl	800e3b4 <USB_ActivateEndpoint>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_PCD_EP_Close>:
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
 8007de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da0f      	bge.n	8007e0e <HAL_PCD_EP_Close+0x34>
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	f003 020f 	and.w	r2, r3, #15
 8007df4:	4613      	mov	r3, r2
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	3338      	adds	r3, #56	; 0x38
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	4413      	add	r3, r2
 8007e02:	3304      	adds	r3, #4
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	705a      	strb	r2, [r3, #1]
 8007e0c:	e00f      	b.n	8007e2e <HAL_PCD_EP_Close+0x54>
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	f003 020f 	and.w	r2, r3, #15
 8007e14:	4613      	mov	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	4413      	add	r3, r2
 8007e24:	3304      	adds	r3, #4
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	705a      	strb	r2, [r3, #1]
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	701a      	strb	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_PCD_EP_Close+0x6e>
 8007e44:	2302      	movs	r3, #2
 8007e46:	e00e      	b.n	8007e66 <HAL_PCD_EP_Close+0x8c>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68f9      	ldr	r1, [r7, #12]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f006 fb34 	bl	800e4c4 <USB_DeactivateEndpoint>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007e64:	2300      	movs	r3, #0
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <HAL_PCD_EP_Receive>:
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b086      	sub	sp, #24
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	72fb      	strb	r3, [r7, #11]
 8007e7e:	7afb      	ldrb	r3, [r7, #11]
 8007e80:	f003 020f 	and.w	r2, r3, #15
 8007e84:	4613      	mov	r3, r2
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	3304      	adds	r3, #4
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	611a      	str	r2, [r3, #16]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	619a      	str	r2, [r3, #24]
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	621a      	str	r2, [r3, #32]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2200      	movs	r2, #0
 8007eae:	705a      	strb	r2, [r3, #1]
 8007eb0:	7afb      	ldrb	r3, [r7, #11]
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d102      	bne.n	8007eca <HAL_PCD_EP_Receive+0x5c>
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	615a      	str	r2, [r3, #20]
 8007eca:	7afb      	ldrb	r3, [r7, #11]
 8007ecc:	f003 030f 	and.w	r3, r3, #15
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d109      	bne.n	8007ee8 <HAL_PCD_EP_Receive+0x7a>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6818      	ldr	r0, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6979      	ldr	r1, [r7, #20]
 8007ee2:	f006 fe13 	bl	800eb0c <USB_EP0StartXfer>
 8007ee6:	e008      	b.n	8007efa <HAL_PCD_EP_Receive+0x8c>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	6979      	ldr	r1, [r7, #20]
 8007ef6:	f006 fbc1 	bl	800e67c <USB_EPStartXfer>
 8007efa:	2300      	movs	r3, #0
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_PCD_EP_GetRxCount>:
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	f003 020f 	and.w	r2, r3, #15
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	440b      	add	r3, r1
 8007f22:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_PCD_EP_Transmit>:
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	603b      	str	r3, [r7, #0]
 8007f40:	460b      	mov	r3, r1
 8007f42:	72fb      	strb	r3, [r7, #11]
 8007f44:	7afb      	ldrb	r3, [r7, #11]
 8007f46:	f003 020f 	and.w	r2, r3, #15
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	3338      	adds	r3, #56	; 0x38
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	3304      	adds	r3, #4
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	611a      	str	r2, [r3, #16]
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	619a      	str	r2, [r3, #24]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	621a      	str	r2, [r3, #32]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2201      	movs	r2, #1
 8007f72:	705a      	strb	r2, [r3, #1]
 8007f74:	7afb      	ldrb	r3, [r7, #11]
 8007f76:	f003 030f 	and.w	r3, r3, #15
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d102      	bne.n	8007f8e <HAL_PCD_EP_Transmit+0x5a>
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	615a      	str	r2, [r3, #20]
 8007f8e:	7afb      	ldrb	r3, [r7, #11]
 8007f90:	f003 030f 	and.w	r3, r3, #15
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d109      	bne.n	8007fac <HAL_PCD_EP_Transmit+0x78>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	6979      	ldr	r1, [r7, #20]
 8007fa6:	f006 fdb1 	bl	800eb0c <USB_EP0StartXfer>
 8007faa:	e008      	b.n	8007fbe <HAL_PCD_EP_Transmit+0x8a>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6818      	ldr	r0, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6979      	ldr	r1, [r7, #20]
 8007fba:	f006 fb5f 	bl	800e67c <USB_EPStartXfer>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_PCD_EP_SetStall>:
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	f003 020f 	and.w	r2, r3, #15
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d901      	bls.n	8007fe6 <HAL_PCD_EP_SetStall+0x1e>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e050      	b.n	8008088 <HAL_PCD_EP_SetStall+0xc0>
 8007fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	da0f      	bge.n	800800e <HAL_PCD_EP_SetStall+0x46>
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	f003 020f 	and.w	r2, r3, #15
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	3338      	adds	r3, #56	; 0x38
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	4413      	add	r3, r2
 8008002:	3304      	adds	r3, #4
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	705a      	strb	r2, [r3, #1]
 800800c:	e00d      	b.n	800802a <HAL_PCD_EP_SetStall+0x62>
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	4613      	mov	r3, r2
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	4413      	add	r3, r2
 8008020:	3304      	adds	r3, #4
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	705a      	strb	r2, [r3, #1]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	709a      	strb	r2, [r3, #2]
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	f003 030f 	and.w	r3, r3, #15
 8008036:	b2da      	uxtb	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008042:	2b01      	cmp	r3, #1
 8008044:	d101      	bne.n	800804a <HAL_PCD_EP_SetStall+0x82>
 8008046:	2302      	movs	r3, #2
 8008048:	e01e      	b.n	8008088 <HAL_PCD_EP_SetStall+0xc0>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68f9      	ldr	r1, [r7, #12]
 8008058:	4618      	mov	r0, r3
 800805a:	f006 ffef 	bl	800f03c <USB_EPSetStall>
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	f003 030f 	and.w	r3, r3, #15
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <HAL_PCD_EP_SetStall+0xb6>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	b2d9      	uxtb	r1, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008078:	461a      	mov	r2, r3
 800807a:	f007 f9df 	bl	800f43c <USB_EP0_OutStart>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008086:	2300      	movs	r3, #0
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_PCD_EP_ClrStall>:
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	f003 020f 	and.w	r2, r3, #15
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d901      	bls.n	80080ae <HAL_PCD_EP_ClrStall+0x1e>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e042      	b.n	8008134 <HAL_PCD_EP_ClrStall+0xa4>
 80080ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	da0f      	bge.n	80080d6 <HAL_PCD_EP_ClrStall+0x46>
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	f003 020f 	and.w	r2, r3, #15
 80080bc:	4613      	mov	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	3338      	adds	r3, #56	; 0x38
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	4413      	add	r3, r2
 80080ca:	3304      	adds	r3, #4
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	705a      	strb	r2, [r3, #1]
 80080d4:	e00f      	b.n	80080f6 <HAL_PCD_EP_ClrStall+0x66>
 80080d6:	78fb      	ldrb	r3, [r7, #3]
 80080d8:	f003 020f 	and.w	r2, r3, #15
 80080dc:	4613      	mov	r3, r2
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	4413      	add	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	4413      	add	r3, r2
 80080ec:	3304      	adds	r3, #4
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	705a      	strb	r2, [r3, #1]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	709a      	strb	r2, [r3, #2]
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	b2da      	uxtb	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	701a      	strb	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_PCD_EP_ClrStall+0x86>
 8008112:	2302      	movs	r3, #2
 8008114:	e00e      	b.n	8008134 <HAL_PCD_EP_ClrStall+0xa4>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68f9      	ldr	r1, [r7, #12]
 8008124:	4618      	mov	r0, r3
 8008126:	f006 fff7 	bl	800f118 <USB_EPClearStall>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008132:	2300      	movs	r3, #0
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_PCD_EP_Abort>:
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
 8008148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800814c:	2b00      	cmp	r3, #0
 800814e:	da0c      	bge.n	800816a <HAL_PCD_EP_Abort+0x2e>
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	f003 020f 	and.w	r2, r3, #15
 8008156:	4613      	mov	r3, r2
 8008158:	00db      	lsls	r3, r3, #3
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	3338      	adds	r3, #56	; 0x38
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	4413      	add	r3, r2
 8008164:	3304      	adds	r3, #4
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	e00c      	b.n	8008184 <HAL_PCD_EP_Abort+0x48>
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	f003 020f 	and.w	r2, r3, #15
 8008170:	4613      	mov	r3, r2
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	4413      	add	r3, r2
 8008180:	3304      	adds	r3, #4
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68f9      	ldr	r1, [r7, #12]
 800818a:	4618      	mov	r0, r3
 800818c:	f006 fe16 	bl	800edbc <USB_EPStopXfer>
 8008190:	4603      	mov	r3, r0
 8008192:	72fb      	strb	r3, [r7, #11]
 8008194:	7afb      	ldrb	r3, [r7, #11]
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <PCD_WriteEmptyTxFifo>:
 800819e:	b580      	push	{r7, lr}
 80081a0:	b08a      	sub	sp, #40	; 0x28
 80081a2:	af02      	add	r7, sp, #8
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	613b      	str	r3, [r7, #16]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4613      	mov	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	3338      	adds	r3, #56	; 0x38
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	4413      	add	r3, r2
 80081c2:	3304      	adds	r3, #4
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6a1a      	ldr	r2, [r3, #32]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d901      	bls.n	80081d6 <PCD_WriteEmptyTxFifo+0x38>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e06c      	b.n	80082b0 <PCD_WriteEmptyTxFifo+0x112>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	61fb      	str	r3, [r7, #28]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d902      	bls.n	80081f2 <PCD_WriteEmptyTxFifo+0x54>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	61fb      	str	r3, [r7, #28]
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	3303      	adds	r3, #3
 80081f6:	089b      	lsrs	r3, r3, #2
 80081f8:	61bb      	str	r3, [r7, #24]
 80081fa:	e02b      	b.n	8008254 <PCD_WriteEmptyTxFifo+0xb6>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	699a      	ldr	r2, [r3, #24]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	429a      	cmp	r2, r3
 8008210:	d902      	bls.n	8008218 <PCD_WriteEmptyTxFifo+0x7a>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	61fb      	str	r3, [r7, #28]
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	3303      	adds	r3, #3
 800821c:	089b      	lsrs	r3, r3, #2
 800821e:	61bb      	str	r3, [r7, #24]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6919      	ldr	r1, [r3, #16]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	b2da      	uxtb	r2, r3
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	b298      	uxth	r0, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	4603      	mov	r3, r0
 8008236:	6978      	ldr	r0, [r7, #20]
 8008238:	f006 fe6a 	bl	800ef10 <USB_WritePacket>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	441a      	add	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	611a      	str	r2, [r3, #16]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a1a      	ldr	r2, [r3, #32]
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	441a      	add	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	621a      	str	r2, [r3, #32]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	b29b      	uxth	r3, r3
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	429a      	cmp	r2, r3
 8008268:	d809      	bhi.n	800827e <PCD_WriteEmptyTxFifo+0xe0>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a1a      	ldr	r2, [r3, #32]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	429a      	cmp	r2, r3
 8008274:	d203      	bcs.n	800827e <PCD_WriteEmptyTxFifo+0xe0>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1be      	bne.n	80081fc <PCD_WriteEmptyTxFifo+0x5e>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	429a      	cmp	r2, r3
 8008288:	d811      	bhi.n	80082ae <PCD_WriteEmptyTxFifo+0x110>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	2201      	movs	r2, #1
 8008292:	fa02 f303 	lsl.w	r3, r2, r3
 8008296:	60bb      	str	r3, [r7, #8]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	43db      	mvns	r3, r3
 80082a4:	6939      	ldr	r1, [r7, #16]
 80082a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082aa:	4013      	ands	r3, r2
 80082ac:	634b      	str	r3, [r1, #52]	; 0x34
 80082ae:	2300      	movs	r3, #0
 80082b0:	4618      	mov	r0, r3
 80082b2:	3720      	adds	r7, #32
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <PCD_EP_OutXfrComplete_int>:
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b088      	sub	sp, #32
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	61fb      	str	r3, [r7, #28]
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	61bb      	str	r3, [r7, #24]
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	333c      	adds	r3, #60	; 0x3c
 80082d0:	3304      	adds	r3, #4
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	613b      	str	r3, [r7, #16]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d17b      	bne.n	80083e6 <PCD_EP_OutXfrComplete_int+0x12e>
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d015      	beq.n	8008324 <PCD_EP_OutXfrComplete_int+0x6c>
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	4a61      	ldr	r2, [pc, #388]	; (8008480 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	f240 80b9 	bls.w	8008474 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 80b3 	beq.w	8008474 <PCD_EP_OutXfrComplete_int+0x1bc>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831a:	461a      	mov	r2, r3
 800831c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008320:	6093      	str	r3, [r2, #8]
 8008322:	e0a7      	b.n	8008474 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d009      	beq.n	8008342 <PCD_EP_OutXfrComplete_int+0x8a>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833a:	461a      	mov	r2, r3
 800833c:	2320      	movs	r3, #32
 800833e:	6093      	str	r3, [r2, #8]
 8008340:	e098      	b.n	8008474 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	f040 8093 	bne.w	8008474 <PCD_EP_OutXfrComplete_int+0x1bc>
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	4a4b      	ldr	r2, [pc, #300]	; (8008480 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d90f      	bls.n	8008376 <PCD_EP_OutXfrComplete_int+0xbe>
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <PCD_EP_OutXfrComplete_int+0xbe>
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836c:	461a      	mov	r2, r3
 800836e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008372:	6093      	str	r3, [r2, #8]
 8008374:	e07e      	b.n	8008474 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	4613      	mov	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	4413      	add	r3, r2
 8008388:	3304      	adds	r3, #4
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	69da      	ldr	r2, [r3, #28]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	0159      	lsls	r1, r3, #5
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	440b      	add	r3, r1
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083a2:	1ad2      	subs	r2, r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	621a      	str	r2, [r3, #32]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d114      	bne.n	80083d8 <PCD_EP_OutXfrComplete_int+0x120>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d109      	bne.n	80083ca <PCD_EP_OutXfrComplete_int+0x112>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80083c0:	461a      	mov	r2, r3
 80083c2:	2101      	movs	r1, #1
 80083c4:	f007 f83a 	bl	800f43c <USB_EP0_OutStart>
 80083c8:	e006      	b.n	80083d8 <PCD_EP_OutXfrComplete_int+0x120>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	441a      	add	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	611a      	str	r2, [r3, #16]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f00c fc28 	bl	8014c34 <HAL_PCD_DataOutStageCallback>
 80083e4:	e046      	b.n	8008474 <PCD_EP_OutXfrComplete_int+0x1bc>
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	4a26      	ldr	r2, [pc, #152]	; (8008484 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d124      	bne.n	8008438 <PCD_EP_OutXfrComplete_int+0x180>
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <PCD_EP_OutXfrComplete_int+0x156>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008404:	461a      	mov	r2, r3
 8008406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800840a:	6093      	str	r3, [r2, #8]
 800840c:	e032      	b.n	8008474 <PCD_EP_OutXfrComplete_int+0x1bc>
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f003 0320 	and.w	r3, r3, #32
 8008414:	2b00      	cmp	r3, #0
 8008416:	d008      	beq.n	800842a <PCD_EP_OutXfrComplete_int+0x172>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008424:	461a      	mov	r2, r3
 8008426:	2320      	movs	r3, #32
 8008428:	6093      	str	r3, [r2, #8]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f00c fbff 	bl	8014c34 <HAL_PCD_DataOutStageCallback>
 8008436:	e01d      	b.n	8008474 <PCD_EP_OutXfrComplete_int+0x1bc>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d114      	bne.n	8008468 <PCD_EP_OutXfrComplete_int+0x1b0>
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	4613      	mov	r3, r2
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d108      	bne.n	8008468 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008460:	461a      	mov	r2, r3
 8008462:	2100      	movs	r1, #0
 8008464:	f006 ffea 	bl	800f43c <USB_EP0_OutStart>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f00c fbe0 	bl	8014c34 <HAL_PCD_DataOutStageCallback>
 8008474:	2300      	movs	r3, #0
 8008476:	4618      	mov	r0, r3
 8008478:	3720      	adds	r7, #32
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	4f54300a 	.word	0x4f54300a
 8008484:	4f54310a 	.word	0x4f54310a

08008488 <PCD_EP_OutSetupPacket_int>:
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	613b      	str	r3, [r7, #16]
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	333c      	adds	r3, #60	; 0x3c
 80084a0:	3304      	adds	r3, #4
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	60bb      	str	r3, [r7, #8]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	4a15      	ldr	r2, [pc, #84]	; (8008510 <PCD_EP_OutSetupPacket_int+0x88>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d90e      	bls.n	80084dc <PCD_EP_OutSetupPacket_int+0x54>
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d009      	beq.n	80084dc <PCD_EP_OutSetupPacket_int+0x54>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d4:	461a      	mov	r2, r3
 80084d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084da:	6093      	str	r3, [r2, #8]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f00c fb97 	bl	8014c10 <HAL_PCD_SetupStageCallback>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4a0a      	ldr	r2, [pc, #40]	; (8008510 <PCD_EP_OutSetupPacket_int+0x88>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d90c      	bls.n	8008504 <PCD_EP_OutSetupPacket_int+0x7c>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d108      	bne.n	8008504 <PCD_EP_OutSetupPacket_int+0x7c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084fc:	461a      	mov	r2, r3
 80084fe:	2101      	movs	r1, #1
 8008500:	f006 ff9c 	bl	800f43c <USB_EP0_OutStart>
 8008504:	2300      	movs	r3, #0
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	4f54300a 	.word	0x4f54300a

08008514 <HAL_PCDEx_SetTxFiFo>:
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
 8008520:	4613      	mov	r3, r2
 8008522:	803b      	strh	r3, [r7, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	60bb      	str	r3, [r7, #8]
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d107      	bne.n	8008542 <HAL_PCDEx_SetTxFiFo+0x2e>
 8008532:	883b      	ldrh	r3, [r7, #0]
 8008534:	0419      	lsls	r1, r3, #16
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	430a      	orrs	r2, r1
 800853e:	629a      	str	r2, [r3, #40]	; 0x28
 8008540:	e028      	b.n	8008594 <HAL_PCDEx_SetTxFiFo+0x80>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008548:	0c1b      	lsrs	r3, r3, #16
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4413      	add	r3, r2
 800854e:	60bb      	str	r3, [r7, #8]
 8008550:	2300      	movs	r3, #0
 8008552:	73fb      	strb	r3, [r7, #15]
 8008554:	e00d      	b.n	8008572 <HAL_PCDEx_SetTxFiFo+0x5e>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	3340      	adds	r3, #64	; 0x40
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	0c1b      	lsrs	r3, r3, #16
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	4413      	add	r3, r2
 800856a:	60bb      	str	r3, [r7, #8]
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	3301      	adds	r3, #1
 8008570:	73fb      	strb	r3, [r7, #15]
 8008572:	7bfa      	ldrb	r2, [r7, #15]
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	3b01      	subs	r3, #1
 8008578:	429a      	cmp	r2, r3
 800857a:	d3ec      	bcc.n	8008556 <HAL_PCDEx_SetTxFiFo+0x42>
 800857c:	883b      	ldrh	r3, [r7, #0]
 800857e:	0418      	lsls	r0, r3, #16
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6819      	ldr	r1, [r3, #0]
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	3b01      	subs	r3, #1
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	4302      	orrs	r2, r0
 800858c:	3340      	adds	r3, #64	; 0x40
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	605a      	str	r2, [r3, #4]
 8008594:	2300      	movs	r3, #0
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <HAL_PCDEx_SetRxFiFo>:
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	460b      	mov	r3, r1
 80085ac:	807b      	strh	r3, [r7, #2]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	887a      	ldrh	r2, [r7, #2]
 80085b4:	625a      	str	r2, [r3, #36]	; 0x24
 80085b6:	2300      	movs	r3, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_PCDEx_LPM_Callback>:
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	70fb      	strb	r3, [r7, #3]
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_RCC_OscConfig>:
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <HAL_RCC_OscConfig+0x12>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e314      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b0f      	cmp	r3, #15
 80085f4:	d903      	bls.n	80085fe <HAL_RCC_OscConfig+0x22>
 80085f6:	21e6      	movs	r1, #230	; 0xe6
 80085f8:	4897      	ldr	r0, [pc, #604]	; (8008858 <HAL_RCC_OscConfig+0x27c>)
 80085fa:	f7f9 fe7c 	bl	80022f6 <assert_failed>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 8088 	beq.w	800871c <HAL_RCC_OscConfig+0x140>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00d      	beq.n	8008630 <HAL_RCC_OscConfig+0x54>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800861c:	d008      	beq.n	8008630 <HAL_RCC_OscConfig+0x54>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008626:	d003      	beq.n	8008630 <HAL_RCC_OscConfig+0x54>
 8008628:	21eb      	movs	r1, #235	; 0xeb
 800862a:	488b      	ldr	r0, [pc, #556]	; (8008858 <HAL_RCC_OscConfig+0x27c>)
 800862c:	f7f9 fe63 	bl	80022f6 <assert_failed>
 8008630:	4b8a      	ldr	r3, [pc, #552]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f003 030c 	and.w	r3, r3, #12
 8008638:	2b04      	cmp	r3, #4
 800863a:	d00c      	beq.n	8008656 <HAL_RCC_OscConfig+0x7a>
 800863c:	4b87      	ldr	r3, [pc, #540]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f003 030c 	and.w	r3, r3, #12
 8008644:	2b08      	cmp	r3, #8
 8008646:	d112      	bne.n	800866e <HAL_RCC_OscConfig+0x92>
 8008648:	4b84      	ldr	r3, [pc, #528]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008654:	d10b      	bne.n	800866e <HAL_RCC_OscConfig+0x92>
 8008656:	4b81      	ldr	r3, [pc, #516]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d05b      	beq.n	800871a <HAL_RCC_OscConfig+0x13e>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d157      	bne.n	800871a <HAL_RCC_OscConfig+0x13e>
 800866a:	2301      	movs	r3, #1
 800866c:	e2d4      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008676:	d106      	bne.n	8008686 <HAL_RCC_OscConfig+0xaa>
 8008678:	4b78      	ldr	r3, [pc, #480]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a77      	ldr	r2, [pc, #476]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800867e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	e01d      	b.n	80086c2 <HAL_RCC_OscConfig+0xe6>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800868e:	d10c      	bne.n	80086aa <HAL_RCC_OscConfig+0xce>
 8008690:	4b72      	ldr	r3, [pc, #456]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a71      	ldr	r2, [pc, #452]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	4b6f      	ldr	r3, [pc, #444]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a6e      	ldr	r2, [pc, #440]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80086a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	e00b      	b.n	80086c2 <HAL_RCC_OscConfig+0xe6>
 80086aa:	4b6c      	ldr	r3, [pc, #432]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a6b      	ldr	r2, [pc, #428]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80086b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	4b69      	ldr	r3, [pc, #420]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a68      	ldr	r2, [pc, #416]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80086bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d013      	beq.n	80086f2 <HAL_RCC_OscConfig+0x116>
 80086ca:	f7fd fb0d 	bl	8005ce8 <HAL_GetTick>
 80086ce:	6138      	str	r0, [r7, #16]
 80086d0:	e008      	b.n	80086e4 <HAL_RCC_OscConfig+0x108>
 80086d2:	f7fd fb09 	bl	8005ce8 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b64      	cmp	r3, #100	; 0x64
 80086de:	d901      	bls.n	80086e4 <HAL_RCC_OscConfig+0x108>
 80086e0:	2303      	movs	r3, #3
 80086e2:	e299      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 80086e4:	4b5d      	ldr	r3, [pc, #372]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0f0      	beq.n	80086d2 <HAL_RCC_OscConfig+0xf6>
 80086f0:	e014      	b.n	800871c <HAL_RCC_OscConfig+0x140>
 80086f2:	f7fd faf9 	bl	8005ce8 <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]
 80086f8:	e008      	b.n	800870c <HAL_RCC_OscConfig+0x130>
 80086fa:	f7fd faf5 	bl	8005ce8 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b64      	cmp	r3, #100	; 0x64
 8008706:	d901      	bls.n	800870c <HAL_RCC_OscConfig+0x130>
 8008708:	2303      	movs	r3, #3
 800870a:	e285      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 800870c:	4b53      	ldr	r3, [pc, #332]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1f0      	bne.n	80086fa <HAL_RCC_OscConfig+0x11e>
 8008718:	e000      	b.n	800871c <HAL_RCC_OscConfig+0x140>
 800871a:	bf00      	nop
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d079      	beq.n	800881c <HAL_RCC_OscConfig+0x240>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d008      	beq.n	8008742 <HAL_RCC_OscConfig+0x166>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d004      	beq.n	8008742 <HAL_RCC_OscConfig+0x166>
 8008738:	f240 111d 	movw	r1, #285	; 0x11d
 800873c:	4846      	ldr	r0, [pc, #280]	; (8008858 <HAL_RCC_OscConfig+0x27c>)
 800873e:	f7f9 fdda 	bl	80022f6 <assert_failed>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b1f      	cmp	r3, #31
 8008748:	d904      	bls.n	8008754 <HAL_RCC_OscConfig+0x178>
 800874a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800874e:	4842      	ldr	r0, [pc, #264]	; (8008858 <HAL_RCC_OscConfig+0x27c>)
 8008750:	f7f9 fdd1 	bl	80022f6 <assert_failed>
 8008754:	4b41      	ldr	r3, [pc, #260]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f003 030c 	and.w	r3, r3, #12
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00b      	beq.n	8008778 <HAL_RCC_OscConfig+0x19c>
 8008760:	4b3e      	ldr	r3, [pc, #248]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f003 030c 	and.w	r3, r3, #12
 8008768:	2b08      	cmp	r3, #8
 800876a:	d11c      	bne.n	80087a6 <HAL_RCC_OscConfig+0x1ca>
 800876c:	4b3b      	ldr	r3, [pc, #236]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d116      	bne.n	80087a6 <HAL_RCC_OscConfig+0x1ca>
 8008778:	4b38      	ldr	r3, [pc, #224]	; (800885c <HAL_RCC_OscConfig+0x280>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b00      	cmp	r3, #0
 8008782:	d005      	beq.n	8008790 <HAL_RCC_OscConfig+0x1b4>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d001      	beq.n	8008790 <HAL_RCC_OscConfig+0x1b4>
 800878c:	2301      	movs	r3, #1
 800878e:	e243      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 8008790:	4b32      	ldr	r3, [pc, #200]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	492f      	ldr	r1, [pc, #188]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	600b      	str	r3, [r1, #0]
 80087a4:	e03a      	b.n	800881c <HAL_RCC_OscConfig+0x240>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d020      	beq.n	80087f0 <HAL_RCC_OscConfig+0x214>
 80087ae:	4b2c      	ldr	r3, [pc, #176]	; (8008860 <HAL_RCC_OscConfig+0x284>)
 80087b0:	2201      	movs	r2, #1
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	f7fd fa98 	bl	8005ce8 <HAL_GetTick>
 80087b8:	6138      	str	r0, [r7, #16]
 80087ba:	e008      	b.n	80087ce <HAL_RCC_OscConfig+0x1f2>
 80087bc:	f7fd fa94 	bl	8005ce8 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x1f2>
 80087ca:	2303      	movs	r3, #3
 80087cc:	e224      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 80087ce:	4b23      	ldr	r3, [pc, #140]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f0      	beq.n	80087bc <HAL_RCC_OscConfig+0x1e0>
 80087da:	4b20      	ldr	r3, [pc, #128]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	491c      	ldr	r1, [pc, #112]	; (800885c <HAL_RCC_OscConfig+0x280>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	600b      	str	r3, [r1, #0]
 80087ee:	e015      	b.n	800881c <HAL_RCC_OscConfig+0x240>
 80087f0:	4b1b      	ldr	r3, [pc, #108]	; (8008860 <HAL_RCC_OscConfig+0x284>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	f7fd fa77 	bl	8005ce8 <HAL_GetTick>
 80087fa:	6138      	str	r0, [r7, #16]
 80087fc:	e008      	b.n	8008810 <HAL_RCC_OscConfig+0x234>
 80087fe:	f7fd fa73 	bl	8005ce8 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	d901      	bls.n	8008810 <HAL_RCC_OscConfig+0x234>
 800880c:	2303      	movs	r3, #3
 800880e:	e203      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 8008810:	4b12      	ldr	r3, [pc, #72]	; (800885c <HAL_RCC_OscConfig+0x280>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1f0      	bne.n	80087fe <HAL_RCC_OscConfig+0x222>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0308 	and.w	r3, r3, #8
 8008824:	2b00      	cmp	r3, #0
 8008826:	d045      	beq.n	80088b4 <HAL_RCC_OscConfig+0x2d8>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <HAL_RCC_OscConfig+0x266>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d004      	beq.n	8008842 <HAL_RCC_OscConfig+0x266>
 8008838:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800883c:	4806      	ldr	r0, [pc, #24]	; (8008858 <HAL_RCC_OscConfig+0x27c>)
 800883e:	f7f9 fd5a 	bl	80022f6 <assert_failed>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d01e      	beq.n	8008888 <HAL_RCC_OscConfig+0x2ac>
 800884a:	4b06      	ldr	r3, [pc, #24]	; (8008864 <HAL_RCC_OscConfig+0x288>)
 800884c:	2201      	movs	r2, #1
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	f7fd fa4a 	bl	8005ce8 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]
 8008856:	e010      	b.n	800887a <HAL_RCC_OscConfig+0x29e>
 8008858:	08018930 	.word	0x08018930
 800885c:	40023800 	.word	0x40023800
 8008860:	42470000 	.word	0x42470000
 8008864:	42470e80 	.word	0x42470e80
 8008868:	f7fd fa3e 	bl	8005ce8 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b02      	cmp	r3, #2
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0x29e>
 8008876:	2303      	movs	r3, #3
 8008878:	e1ce      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 800887a:	4b5e      	ldr	r3, [pc, #376]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 800887c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0f0      	beq.n	8008868 <HAL_RCC_OscConfig+0x28c>
 8008886:	e015      	b.n	80088b4 <HAL_RCC_OscConfig+0x2d8>
 8008888:	4b5b      	ldr	r3, [pc, #364]	; (80089f8 <HAL_RCC_OscConfig+0x41c>)
 800888a:	2200      	movs	r2, #0
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	f7fd fa2b 	bl	8005ce8 <HAL_GetTick>
 8008892:	6138      	str	r0, [r7, #16]
 8008894:	e008      	b.n	80088a8 <HAL_RCC_OscConfig+0x2cc>
 8008896:	f7fd fa27 	bl	8005ce8 <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d901      	bls.n	80088a8 <HAL_RCC_OscConfig+0x2cc>
 80088a4:	2303      	movs	r3, #3
 80088a6:	e1b7      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 80088a8:	4b52      	ldr	r3, [pc, #328]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 80088aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1f0      	bne.n	8008896 <HAL_RCC_OscConfig+0x2ba>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 80b0 	beq.w	8008a22 <HAL_RCC_OscConfig+0x446>
 80088c2:	2300      	movs	r3, #0
 80088c4:	75fb      	strb	r3, [r7, #23]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00c      	beq.n	80088e8 <HAL_RCC_OscConfig+0x30c>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d008      	beq.n	80088e8 <HAL_RCC_OscConfig+0x30c>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	2b05      	cmp	r3, #5
 80088dc:	d004      	beq.n	80088e8 <HAL_RCC_OscConfig+0x30c>
 80088de:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80088e2:	4846      	ldr	r0, [pc, #280]	; (80089fc <HAL_RCC_OscConfig+0x420>)
 80088e4:	f7f9 fd07 	bl	80022f6 <assert_failed>
 80088e8:	4b42      	ldr	r3, [pc, #264]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10f      	bne.n	8008914 <HAL_RCC_OscConfig+0x338>
 80088f4:	2300      	movs	r3, #0
 80088f6:	60bb      	str	r3, [r7, #8]
 80088f8:	4b3e      	ldr	r3, [pc, #248]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 80088fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fc:	4a3d      	ldr	r2, [pc, #244]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 80088fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008902:	6413      	str	r3, [r2, #64]	; 0x40
 8008904:	4b3b      	ldr	r3, [pc, #236]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 8008906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800890c:	60bb      	str	r3, [r7, #8]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2301      	movs	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]
 8008914:	4b3a      	ldr	r3, [pc, #232]	; (8008a00 <HAL_RCC_OscConfig+0x424>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891c:	2b00      	cmp	r3, #0
 800891e:	d118      	bne.n	8008952 <HAL_RCC_OscConfig+0x376>
 8008920:	4b37      	ldr	r3, [pc, #220]	; (8008a00 <HAL_RCC_OscConfig+0x424>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a36      	ldr	r2, [pc, #216]	; (8008a00 <HAL_RCC_OscConfig+0x424>)
 8008926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	f7fd f9dc 	bl	8005ce8 <HAL_GetTick>
 8008930:	6138      	str	r0, [r7, #16]
 8008932:	e008      	b.n	8008946 <HAL_RCC_OscConfig+0x36a>
 8008934:	f7fd f9d8 	bl	8005ce8 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	2b02      	cmp	r3, #2
 8008940:	d901      	bls.n	8008946 <HAL_RCC_OscConfig+0x36a>
 8008942:	2303      	movs	r3, #3
 8008944:	e168      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 8008946:	4b2e      	ldr	r3, [pc, #184]	; (8008a00 <HAL_RCC_OscConfig+0x424>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0f0      	beq.n	8008934 <HAL_RCC_OscConfig+0x358>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d106      	bne.n	8008968 <HAL_RCC_OscConfig+0x38c>
 800895a:	4b26      	ldr	r3, [pc, #152]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 800895c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895e:	4a25      	ldr	r2, [pc, #148]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 8008960:	f043 0301 	orr.w	r3, r3, #1
 8008964:	6713      	str	r3, [r2, #112]	; 0x70
 8008966:	e01c      	b.n	80089a2 <HAL_RCC_OscConfig+0x3c6>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2b05      	cmp	r3, #5
 800896e:	d10c      	bne.n	800898a <HAL_RCC_OscConfig+0x3ae>
 8008970:	4b20      	ldr	r3, [pc, #128]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 8008972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008974:	4a1f      	ldr	r2, [pc, #124]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 8008976:	f043 0304 	orr.w	r3, r3, #4
 800897a:	6713      	str	r3, [r2, #112]	; 0x70
 800897c:	4b1d      	ldr	r3, [pc, #116]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 800897e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008980:	4a1c      	ldr	r2, [pc, #112]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 8008982:	f043 0301 	orr.w	r3, r3, #1
 8008986:	6713      	str	r3, [r2, #112]	; 0x70
 8008988:	e00b      	b.n	80089a2 <HAL_RCC_OscConfig+0x3c6>
 800898a:	4b1a      	ldr	r3, [pc, #104]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 800898c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898e:	4a19      	ldr	r2, [pc, #100]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	6713      	str	r3, [r2, #112]	; 0x70
 8008996:	4b17      	ldr	r3, [pc, #92]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	4a16      	ldr	r2, [pc, #88]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 800899c:	f023 0304 	bic.w	r3, r3, #4
 80089a0:	6713      	str	r3, [r2, #112]	; 0x70
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d015      	beq.n	80089d6 <HAL_RCC_OscConfig+0x3fa>
 80089aa:	f7fd f99d 	bl	8005ce8 <HAL_GetTick>
 80089ae:	6138      	str	r0, [r7, #16]
 80089b0:	e00a      	b.n	80089c8 <HAL_RCC_OscConfig+0x3ec>
 80089b2:	f7fd f999 	bl	8005ce8 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d901      	bls.n	80089c8 <HAL_RCC_OscConfig+0x3ec>
 80089c4:	2303      	movs	r3, #3
 80089c6:	e127      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 80089c8:	4b0a      	ldr	r3, [pc, #40]	; (80089f4 <HAL_RCC_OscConfig+0x418>)
 80089ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0ee      	beq.n	80089b2 <HAL_RCC_OscConfig+0x3d6>
 80089d4:	e01c      	b.n	8008a10 <HAL_RCC_OscConfig+0x434>
 80089d6:	f7fd f987 	bl	8005ce8 <HAL_GetTick>
 80089da:	6138      	str	r0, [r7, #16]
 80089dc:	e012      	b.n	8008a04 <HAL_RCC_OscConfig+0x428>
 80089de:	f7fd f983 	bl	8005ce8 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d909      	bls.n	8008a04 <HAL_RCC_OscConfig+0x428>
 80089f0:	2303      	movs	r3, #3
 80089f2:	e111      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 80089f4:	40023800 	.word	0x40023800
 80089f8:	42470e80 	.word	0x42470e80
 80089fc:	08018930 	.word	0x08018930
 8008a00:	40007000 	.word	0x40007000
 8008a04:	4b86      	ldr	r3, [pc, #536]	; (8008c20 <HAL_RCC_OscConfig+0x644>)
 8008a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e6      	bne.n	80089de <HAL_RCC_OscConfig+0x402>
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d105      	bne.n	8008a22 <HAL_RCC_OscConfig+0x446>
 8008a16:	4b82      	ldr	r3, [pc, #520]	; (8008c20 <HAL_RCC_OscConfig+0x644>)
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	4a81      	ldr	r2, [pc, #516]	; (8008c20 <HAL_RCC_OscConfig+0x644>)
 8008a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a20:	6413      	str	r3, [r2, #64]	; 0x40
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00c      	beq.n	8008a44 <HAL_RCC_OscConfig+0x468>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d008      	beq.n	8008a44 <HAL_RCC_OscConfig+0x468>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d004      	beq.n	8008a44 <HAL_RCC_OscConfig+0x468>
 8008a3a:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008a3e:	4879      	ldr	r0, [pc, #484]	; (8008c24 <HAL_RCC_OscConfig+0x648>)
 8008a40:	f7f9 fc59 	bl	80022f6 <assert_failed>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 80e4 	beq.w	8008c16 <HAL_RCC_OscConfig+0x63a>
 8008a4e:	4b74      	ldr	r3, [pc, #464]	; (8008c20 <HAL_RCC_OscConfig+0x644>)
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f003 030c 	and.w	r3, r3, #12
 8008a56:	2b08      	cmp	r3, #8
 8008a58:	f000 80a5 	beq.w	8008ba6 <HAL_RCC_OscConfig+0x5ca>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	f040 8089 	bne.w	8008b78 <HAL_RCC_OscConfig+0x59c>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d009      	beq.n	8008a82 <HAL_RCC_OscConfig+0x4a6>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a76:	d004      	beq.n	8008a82 <HAL_RCC_OscConfig+0x4a6>
 8008a78:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8008a7c:	4869      	ldr	r0, [pc, #420]	; (8008c24 <HAL_RCC_OscConfig+0x648>)
 8008a7e:	f7f9 fc3a 	bl	80022f6 <assert_failed>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	2b3f      	cmp	r3, #63	; 0x3f
 8008a88:	d904      	bls.n	8008a94 <HAL_RCC_OscConfig+0x4b8>
 8008a8a:	f240 11d7 	movw	r1, #471	; 0x1d7
 8008a8e:	4865      	ldr	r0, [pc, #404]	; (8008c24 <HAL_RCC_OscConfig+0x648>)
 8008a90:	f7f9 fc31 	bl	80022f6 <assert_failed>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	2b31      	cmp	r3, #49	; 0x31
 8008a9a:	d904      	bls.n	8008aa6 <HAL_RCC_OscConfig+0x4ca>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008aa4:	d904      	bls.n	8008ab0 <HAL_RCC_OscConfig+0x4d4>
 8008aa6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8008aaa:	485e      	ldr	r0, [pc, #376]	; (8008c24 <HAL_RCC_OscConfig+0x648>)
 8008aac:	f7f9 fc23 	bl	80022f6 <assert_failed>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d010      	beq.n	8008ada <HAL_RCC_OscConfig+0x4fe>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	d00c      	beq.n	8008ada <HAL_RCC_OscConfig+0x4fe>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac4:	2b06      	cmp	r3, #6
 8008ac6:	d008      	beq.n	8008ada <HAL_RCC_OscConfig+0x4fe>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d004      	beq.n	8008ada <HAL_RCC_OscConfig+0x4fe>
 8008ad0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ad4:	4853      	ldr	r0, [pc, #332]	; (8008c24 <HAL_RCC_OscConfig+0x648>)
 8008ad6:	f7f9 fc0e 	bl	80022f6 <assert_failed>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d903      	bls.n	8008aea <HAL_RCC_OscConfig+0x50e>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	2b0f      	cmp	r3, #15
 8008ae8:	d904      	bls.n	8008af4 <HAL_RCC_OscConfig+0x518>
 8008aea:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8008aee:	484d      	ldr	r0, [pc, #308]	; (8008c24 <HAL_RCC_OscConfig+0x648>)
 8008af0:	f7f9 fc01 	bl	80022f6 <assert_failed>
 8008af4:	4b4c      	ldr	r3, [pc, #304]	; (8008c28 <HAL_RCC_OscConfig+0x64c>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	f7fd f8f5 	bl	8005ce8 <HAL_GetTick>
 8008afe:	6138      	str	r0, [r7, #16]
 8008b00:	e008      	b.n	8008b14 <HAL_RCC_OscConfig+0x538>
 8008b02:	f7fd f8f1 	bl	8005ce8 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <HAL_RCC_OscConfig+0x538>
 8008b10:	2303      	movs	r3, #3
 8008b12:	e081      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 8008b14:	4b42      	ldr	r3, [pc, #264]	; (8008c20 <HAL_RCC_OscConfig+0x644>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1f0      	bne.n	8008b02 <HAL_RCC_OscConfig+0x526>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	69da      	ldr	r2, [r3, #28]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	019b      	lsls	r3, r3, #6
 8008b30:	431a      	orrs	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b36:	085b      	lsrs	r3, r3, #1
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	041b      	lsls	r3, r3, #16
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b42:	061b      	lsls	r3, r3, #24
 8008b44:	4936      	ldr	r1, [pc, #216]	; (8008c20 <HAL_RCC_OscConfig+0x644>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	604b      	str	r3, [r1, #4]
 8008b4a:	4b37      	ldr	r3, [pc, #220]	; (8008c28 <HAL_RCC_OscConfig+0x64c>)
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	f7fd f8ca 	bl	8005ce8 <HAL_GetTick>
 8008b54:	6138      	str	r0, [r7, #16]
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x58e>
 8008b58:	f7fd f8c6 	bl	8005ce8 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x58e>
 8008b66:	2303      	movs	r3, #3
 8008b68:	e056      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 8008b6a:	4b2d      	ldr	r3, [pc, #180]	; (8008c20 <HAL_RCC_OscConfig+0x644>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0f0      	beq.n	8008b58 <HAL_RCC_OscConfig+0x57c>
 8008b76:	e04e      	b.n	8008c16 <HAL_RCC_OscConfig+0x63a>
 8008b78:	4b2b      	ldr	r3, [pc, #172]	; (8008c28 <HAL_RCC_OscConfig+0x64c>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	f7fd f8b3 	bl	8005ce8 <HAL_GetTick>
 8008b82:	6138      	str	r0, [r7, #16]
 8008b84:	e008      	b.n	8008b98 <HAL_RCC_OscConfig+0x5bc>
 8008b86:	f7fd f8af 	bl	8005ce8 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d901      	bls.n	8008b98 <HAL_RCC_OscConfig+0x5bc>
 8008b94:	2303      	movs	r3, #3
 8008b96:	e03f      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 8008b98:	4b21      	ldr	r3, [pc, #132]	; (8008c20 <HAL_RCC_OscConfig+0x644>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1f0      	bne.n	8008b86 <HAL_RCC_OscConfig+0x5aa>
 8008ba4:	e037      	b.n	8008c16 <HAL_RCC_OscConfig+0x63a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_RCC_OscConfig+0x5d6>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e032      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 8008bb2:	4b1b      	ldr	r3, [pc, #108]	; (8008c20 <HAL_RCC_OscConfig+0x644>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d028      	beq.n	8008c12 <HAL_RCC_OscConfig+0x636>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d121      	bne.n	8008c12 <HAL_RCC_OscConfig+0x636>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d11a      	bne.n	8008c12 <HAL_RCC_OscConfig+0x636>
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008be2:	4013      	ands	r3, r2
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008be8:	0192      	lsls	r2, r2, #6
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d111      	bne.n	8008c12 <HAL_RCC_OscConfig+0x636>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf8:	085b      	lsrs	r3, r3, #1
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	041b      	lsls	r3, r3, #16
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d107      	bne.n	8008c12 <HAL_RCC_OscConfig+0x636>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	061b      	lsls	r3, r3, #24
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d001      	beq.n	8008c16 <HAL_RCC_OscConfig+0x63a>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e000      	b.n	8008c18 <HAL_RCC_OscConfig+0x63c>
 8008c16:	2300      	movs	r3, #0
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	40023800 	.word	0x40023800
 8008c24:	08018930 	.word	0x08018930
 8008c28:	42470060 	.word	0x42470060

08008c2c <HAL_RCC_ClockConfig>:
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <HAL_RCC_ClockConfig+0x14>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e174      	b.n	8008f2a <HAL_RCC_ClockConfig+0x2fe>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <HAL_RCC_ClockConfig+0x24>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b0f      	cmp	r3, #15
 8008c4e:	d904      	bls.n	8008c5a <HAL_RCC_ClockConfig+0x2e>
 8008c50:	f240 215a 	movw	r1, #602	; 0x25a
 8008c54:	487b      	ldr	r0, [pc, #492]	; (8008e44 <HAL_RCC_ClockConfig+0x218>)
 8008c56:	f7f9 fb4e 	bl	80022f6 <assert_failed>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d019      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x68>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d016      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x68>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d013      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x68>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d010      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x68>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d00d      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x68>
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b05      	cmp	r3, #5
 8008c7c:	d00a      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x68>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b06      	cmp	r3, #6
 8008c82:	d007      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x68>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2b07      	cmp	r3, #7
 8008c88:	d004      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x68>
 8008c8a:	f240 215b 	movw	r1, #603	; 0x25b
 8008c8e:	486d      	ldr	r0, [pc, #436]	; (8008e44 <HAL_RCC_ClockConfig+0x218>)
 8008c90:	f7f9 fb31 	bl	80022f6 <assert_failed>
 8008c94:	4b6c      	ldr	r3, [pc, #432]	; (8008e48 <HAL_RCC_ClockConfig+0x21c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d90c      	bls.n	8008cbc <HAL_RCC_ClockConfig+0x90>
 8008ca2:	4b69      	ldr	r3, [pc, #420]	; (8008e48 <HAL_RCC_ClockConfig+0x21c>)
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	4b67      	ldr	r3, [pc, #412]	; (8008e48 <HAL_RCC_ClockConfig+0x21c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d001      	beq.n	8008cbc <HAL_RCC_ClockConfig+0x90>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e136      	b.n	8008f2a <HAL_RCC_ClockConfig+0x2fe>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0302 	and.w	r3, r3, #2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d049      	beq.n	8008d5c <HAL_RCC_ClockConfig+0x130>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d005      	beq.n	8008ce0 <HAL_RCC_ClockConfig+0xb4>
 8008cd4:	4b5d      	ldr	r3, [pc, #372]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	4a5c      	ldr	r2, [pc, #368]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cde:	6093      	str	r3, [r2, #8]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0xcc>
 8008cec:	4b57      	ldr	r3, [pc, #348]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	4a56      	ldr	r2, [pc, #344]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008cf6:	6093      	str	r3, [r2, #8]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d024      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x11e>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	2b80      	cmp	r3, #128	; 0x80
 8008d06:	d020      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x11e>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	2b90      	cmp	r3, #144	; 0x90
 8008d0e:	d01c      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x11e>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2ba0      	cmp	r3, #160	; 0xa0
 8008d16:	d018      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x11e>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	2bb0      	cmp	r3, #176	; 0xb0
 8008d1e:	d014      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x11e>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	2bc0      	cmp	r3, #192	; 0xc0
 8008d26:	d010      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x11e>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	2bd0      	cmp	r3, #208	; 0xd0
 8008d2e:	d00c      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x11e>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	2be0      	cmp	r3, #224	; 0xe0
 8008d36:	d008      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x11e>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	2bf0      	cmp	r3, #240	; 0xf0
 8008d3e:	d004      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x11e>
 8008d40:	f240 217e 	movw	r1, #638	; 0x27e
 8008d44:	483f      	ldr	r0, [pc, #252]	; (8008e44 <HAL_RCC_ClockConfig+0x218>)
 8008d46:	f7f9 fad6 	bl	80022f6 <assert_failed>
 8008d4a:	4b40      	ldr	r3, [pc, #256]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	493d      	ldr	r1, [pc, #244]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	608b      	str	r3, [r1, #8]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d059      	beq.n	8008e1c <HAL_RCC_ClockConfig+0x1f0>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d010      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x166>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d00c      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x166>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d008      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x166>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d004      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x166>
 8008d88:	f240 2185 	movw	r1, #645	; 0x285
 8008d8c:	482d      	ldr	r0, [pc, #180]	; (8008e44 <HAL_RCC_ClockConfig+0x218>)
 8008d8e:	f7f9 fab2 	bl	80022f6 <assert_failed>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d107      	bne.n	8008daa <HAL_RCC_ClockConfig+0x17e>
 8008d9a:	4b2c      	ldr	r3, [pc, #176]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d119      	bne.n	8008dda <HAL_RCC_ClockConfig+0x1ae>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e0bf      	b.n	8008f2a <HAL_RCC_ClockConfig+0x2fe>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d003      	beq.n	8008dba <HAL_RCC_ClockConfig+0x18e>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d107      	bne.n	8008dca <HAL_RCC_ClockConfig+0x19e>
 8008dba:	4b24      	ldr	r3, [pc, #144]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <HAL_RCC_ClockConfig+0x1ae>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e0af      	b.n	8008f2a <HAL_RCC_ClockConfig+0x2fe>
 8008dca:	4b20      	ldr	r3, [pc, #128]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_RCC_ClockConfig+0x1ae>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e0a7      	b.n	8008f2a <HAL_RCC_ClockConfig+0x2fe>
 8008dda:	4b1c      	ldr	r3, [pc, #112]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f023 0203 	bic.w	r2, r3, #3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	4919      	ldr	r1, [pc, #100]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008de8:	4313      	orrs	r3, r2
 8008dea:	608b      	str	r3, [r1, #8]
 8008dec:	f7fc ff7c 	bl	8005ce8 <HAL_GetTick>
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	e00a      	b.n	8008e0a <HAL_RCC_ClockConfig+0x1de>
 8008df4:	f7fc ff78 	bl	8005ce8 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d901      	bls.n	8008e0a <HAL_RCC_ClockConfig+0x1de>
 8008e06:	2303      	movs	r3, #3
 8008e08:	e08f      	b.n	8008f2a <HAL_RCC_ClockConfig+0x2fe>
 8008e0a:	4b10      	ldr	r3, [pc, #64]	; (8008e4c <HAL_RCC_ClockConfig+0x220>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 020c 	and.w	r2, r3, #12
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d1eb      	bne.n	8008df4 <HAL_RCC_ClockConfig+0x1c8>
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <HAL_RCC_ClockConfig+0x21c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0307 	and.w	r3, r3, #7
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d212      	bcs.n	8008e50 <HAL_RCC_ClockConfig+0x224>
 8008e2a:	4b07      	ldr	r3, [pc, #28]	; (8008e48 <HAL_RCC_ClockConfig+0x21c>)
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	b2d2      	uxtb	r2, r2
 8008e30:	701a      	strb	r2, [r3, #0]
 8008e32:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <HAL_RCC_ClockConfig+0x21c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0307 	and.w	r3, r3, #7
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d007      	beq.n	8008e50 <HAL_RCC_ClockConfig+0x224>
 8008e40:	2301      	movs	r3, #1
 8008e42:	e072      	b.n	8008f2a <HAL_RCC_ClockConfig+0x2fe>
 8008e44:	08018930 	.word	0x08018930
 8008e48:	40023c00 	.word	0x40023c00
 8008e4c:	40023800 	.word	0x40023800
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d025      	beq.n	8008ea8 <HAL_RCC_ClockConfig+0x27c>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d018      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x26a>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e6c:	d013      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x26a>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e76:	d00e      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x26a>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008e80:	d009      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x26a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008e8a:	d004      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x26a>
 8008e8c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8008e90:	4828      	ldr	r0, [pc, #160]	; (8008f34 <HAL_RCC_ClockConfig+0x308>)
 8008e92:	f7f9 fa30 	bl	80022f6 <assert_failed>
 8008e96:	4b28      	ldr	r3, [pc, #160]	; (8008f38 <HAL_RCC_ClockConfig+0x30c>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	4925      	ldr	r1, [pc, #148]	; (8008f38 <HAL_RCC_ClockConfig+0x30c>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	608b      	str	r3, [r1, #8]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0308 	and.w	r3, r3, #8
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d026      	beq.n	8008f02 <HAL_RCC_ClockConfig+0x2d6>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d018      	beq.n	8008eee <HAL_RCC_ClockConfig+0x2c2>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ec4:	d013      	beq.n	8008eee <HAL_RCC_ClockConfig+0x2c2>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ece:	d00e      	beq.n	8008eee <HAL_RCC_ClockConfig+0x2c2>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008ed8:	d009      	beq.n	8008eee <HAL_RCC_ClockConfig+0x2c2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008ee2:	d004      	beq.n	8008eee <HAL_RCC_ClockConfig+0x2c2>
 8008ee4:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008ee8:	4812      	ldr	r0, [pc, #72]	; (8008f34 <HAL_RCC_ClockConfig+0x308>)
 8008eea:	f7f9 fa04 	bl	80022f6 <assert_failed>
 8008eee:	4b12      	ldr	r3, [pc, #72]	; (8008f38 <HAL_RCC_ClockConfig+0x30c>)
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	490e      	ldr	r1, [pc, #56]	; (8008f38 <HAL_RCC_ClockConfig+0x30c>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	608b      	str	r3, [r1, #8]
 8008f02:	f000 f821 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 8008f06:	4602      	mov	r2, r0
 8008f08:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <HAL_RCC_ClockConfig+0x30c>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	091b      	lsrs	r3, r3, #4
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	490a      	ldr	r1, [pc, #40]	; (8008f3c <HAL_RCC_ClockConfig+0x310>)
 8008f14:	5ccb      	ldrb	r3, [r1, r3]
 8008f16:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1a:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <HAL_RCC_ClockConfig+0x314>)
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <HAL_RCC_ClockConfig+0x318>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7f9 faa4 	bl	8002470 <HAL_InitTick>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	08018930 	.word	0x08018930
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	08018ab4 	.word	0x08018ab4
 8008f40:	20000010 	.word	0x20000010
 8008f44:	200012a0 	.word	0x200012a0

08008f48 <HAL_RCC_GetSysClockFreq>:
 8008f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f4c:	b094      	sub	sp, #80	; 0x50
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	2300      	movs	r3, #0
 8008f52:	647b      	str	r3, [r7, #68]	; 0x44
 8008f54:	2300      	movs	r3, #0
 8008f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f58:	2300      	movs	r3, #0
 8008f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f60:	4b79      	ldr	r3, [pc, #484]	; (8009148 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f003 030c 	and.w	r3, r3, #12
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	d00d      	beq.n	8008f88 <HAL_RCC_GetSysClockFreq+0x40>
 8008f6c:	2b08      	cmp	r3, #8
 8008f6e:	f200 80e1 	bhi.w	8009134 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <HAL_RCC_GetSysClockFreq+0x34>
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d003      	beq.n	8008f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8008f7a:	e0db      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008f7c:	4b73      	ldr	r3, [pc, #460]	; (800914c <HAL_RCC_GetSysClockFreq+0x204>)
 8008f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f80:	e0db      	b.n	800913a <HAL_RCC_GetSysClockFreq+0x1f2>
 8008f82:	4b73      	ldr	r3, [pc, #460]	; (8009150 <HAL_RCC_GetSysClockFreq+0x208>)
 8008f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f86:	e0d8      	b.n	800913a <HAL_RCC_GetSysClockFreq+0x1f2>
 8008f88:	4b6f      	ldr	r3, [pc, #444]	; (8009148 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f90:	647b      	str	r3, [r7, #68]	; 0x44
 8008f92:	4b6d      	ldr	r3, [pc, #436]	; (8009148 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d063      	beq.n	8009066 <HAL_RCC_GetSysClockFreq+0x11e>
 8008f9e:	4b6a      	ldr	r3, [pc, #424]	; (8009148 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	099b      	lsrs	r3, r3, #6
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008fba:	4622      	mov	r2, r4
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	f04f 0000 	mov.w	r0, #0
 8008fc2:	f04f 0100 	mov.w	r1, #0
 8008fc6:	0159      	lsls	r1, r3, #5
 8008fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fcc:	0150      	lsls	r0, r2, #5
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	1a51      	subs	r1, r2, r1
 8008fd6:	6139      	str	r1, [r7, #16]
 8008fd8:	4629      	mov	r1, r5
 8008fda:	eb63 0301 	sbc.w	r3, r3, r1
 8008fde:	617b      	str	r3, [r7, #20]
 8008fe0:	f04f 0200 	mov.w	r2, #0
 8008fe4:	f04f 0300 	mov.w	r3, #0
 8008fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fec:	4659      	mov	r1, fp
 8008fee:	018b      	lsls	r3, r1, #6
 8008ff0:	4651      	mov	r1, sl
 8008ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ff6:	4651      	mov	r1, sl
 8008ff8:	018a      	lsls	r2, r1, #6
 8008ffa:	4651      	mov	r1, sl
 8008ffc:	ebb2 0801 	subs.w	r8, r2, r1
 8009000:	4659      	mov	r1, fp
 8009002:	eb63 0901 	sbc.w	r9, r3, r1
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800901a:	4690      	mov	r8, r2
 800901c:	4699      	mov	r9, r3
 800901e:	4623      	mov	r3, r4
 8009020:	eb18 0303 	adds.w	r3, r8, r3
 8009024:	60bb      	str	r3, [r7, #8]
 8009026:	462b      	mov	r3, r5
 8009028:	eb49 0303 	adc.w	r3, r9, r3
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	f04f 0200 	mov.w	r2, #0
 8009032:	f04f 0300 	mov.w	r3, #0
 8009036:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800903a:	4629      	mov	r1, r5
 800903c:	024b      	lsls	r3, r1, #9
 800903e:	4621      	mov	r1, r4
 8009040:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009044:	4621      	mov	r1, r4
 8009046:	024a      	lsls	r2, r1, #9
 8009048:	4610      	mov	r0, r2
 800904a:	4619      	mov	r1, r3
 800904c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904e:	2200      	movs	r2, #0
 8009050:	62bb      	str	r3, [r7, #40]	; 0x28
 8009052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009058:	f7f7 ff04 	bl	8000e64 <__aeabi_uldivmod>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4613      	mov	r3, r2
 8009062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009064:	e058      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x1d0>
 8009066:	4b38      	ldr	r3, [pc, #224]	; (8009148 <HAL_RCC_GetSysClockFreq+0x200>)
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	099b      	lsrs	r3, r3, #6
 800906c:	2200      	movs	r2, #0
 800906e:	4618      	mov	r0, r3
 8009070:	4611      	mov	r1, r2
 8009072:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009076:	623b      	str	r3, [r7, #32]
 8009078:	2300      	movs	r3, #0
 800907a:	627b      	str	r3, [r7, #36]	; 0x24
 800907c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009080:	4642      	mov	r2, r8
 8009082:	464b      	mov	r3, r9
 8009084:	f04f 0000 	mov.w	r0, #0
 8009088:	f04f 0100 	mov.w	r1, #0
 800908c:	0159      	lsls	r1, r3, #5
 800908e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009092:	0150      	lsls	r0, r2, #5
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4641      	mov	r1, r8
 800909a:	ebb2 0a01 	subs.w	sl, r2, r1
 800909e:	4649      	mov	r1, r9
 80090a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	f04f 0300 	mov.w	r3, #0
 80090ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80090b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80090b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80090b8:	ebb2 040a 	subs.w	r4, r2, sl
 80090bc:	eb63 050b 	sbc.w	r5, r3, fp
 80090c0:	f04f 0200 	mov.w	r2, #0
 80090c4:	f04f 0300 	mov.w	r3, #0
 80090c8:	00eb      	lsls	r3, r5, #3
 80090ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090ce:	00e2      	lsls	r2, r4, #3
 80090d0:	4614      	mov	r4, r2
 80090d2:	461d      	mov	r5, r3
 80090d4:	4643      	mov	r3, r8
 80090d6:	18e3      	adds	r3, r4, r3
 80090d8:	603b      	str	r3, [r7, #0]
 80090da:	464b      	mov	r3, r9
 80090dc:	eb45 0303 	adc.w	r3, r5, r3
 80090e0:	607b      	str	r3, [r7, #4]
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	f04f 0300 	mov.w	r3, #0
 80090ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80090ee:	4629      	mov	r1, r5
 80090f0:	028b      	lsls	r3, r1, #10
 80090f2:	4621      	mov	r1, r4
 80090f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80090f8:	4621      	mov	r1, r4
 80090fa:	028a      	lsls	r2, r1, #10
 80090fc:	4610      	mov	r0, r2
 80090fe:	4619      	mov	r1, r3
 8009100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009102:	2200      	movs	r2, #0
 8009104:	61bb      	str	r3, [r7, #24]
 8009106:	61fa      	str	r2, [r7, #28]
 8009108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800910c:	f7f7 feaa 	bl	8000e64 <__aeabi_uldivmod>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4613      	mov	r3, r2
 8009116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <HAL_RCC_GetSysClockFreq+0x200>)
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	0c1b      	lsrs	r3, r3, #16
 800911e:	f003 0303 	and.w	r3, r3, #3
 8009122:	3301      	adds	r3, #1
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	643b      	str	r3, [r7, #64]	; 0x40
 8009128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800912a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800912c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009130:	64bb      	str	r3, [r7, #72]	; 0x48
 8009132:	e002      	b.n	800913a <HAL_RCC_GetSysClockFreq+0x1f2>
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <HAL_RCC_GetSysClockFreq+0x204>)
 8009136:	64bb      	str	r3, [r7, #72]	; 0x48
 8009138:	bf00      	nop
 800913a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800913c:	4618      	mov	r0, r3
 800913e:	3750      	adds	r7, #80	; 0x50
 8009140:	46bd      	mov	sp, r7
 8009142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009146:	bf00      	nop
 8009148:	40023800 	.word	0x40023800
 800914c:	00f42400 	.word	0x00f42400
 8009150:	007a1200 	.word	0x007a1200

08009154 <HAL_RCC_GetHCLKFreq>:
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0
 8009158:	4b03      	ldr	r3, [pc, #12]	; (8009168 <HAL_RCC_GetHCLKFreq+0x14>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4618      	mov	r0, r3
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	20000010 	.word	0x20000010

0800916c <HAL_RCC_GetPCLK1Freq>:
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
 8009170:	f7ff fff0 	bl	8009154 <HAL_RCC_GetHCLKFreq>
 8009174:	4602      	mov	r2, r0
 8009176:	4b05      	ldr	r3, [pc, #20]	; (800918c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	0a9b      	lsrs	r3, r3, #10
 800917c:	f003 0307 	and.w	r3, r3, #7
 8009180:	4903      	ldr	r1, [pc, #12]	; (8009190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009182:	5ccb      	ldrb	r3, [r1, r3]
 8009184:	fa22 f303 	lsr.w	r3, r2, r3
 8009188:	4618      	mov	r0, r3
 800918a:	bd80      	pop	{r7, pc}
 800918c:	40023800 	.word	0x40023800
 8009190:	08018ac4 	.word	0x08018ac4

08009194 <HAL_RCC_GetPCLK2Freq>:
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
 8009198:	f7ff ffdc 	bl	8009154 <HAL_RCC_GetHCLKFreq>
 800919c:	4602      	mov	r2, r0
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	0b5b      	lsrs	r3, r3, #13
 80091a4:	f003 0307 	and.w	r3, r3, #7
 80091a8:	4903      	ldr	r1, [pc, #12]	; (80091b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091aa:	5ccb      	ldrb	r3, [r1, r3]
 80091ac:	fa22 f303 	lsr.w	r3, r2, r3
 80091b0:	4618      	mov	r0, r3
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	40023800 	.word	0x40023800
 80091b8:	08018ac4 	.word	0x08018ac4

080091bc <HAL_RCC_GetClockConfig>:
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	220f      	movs	r2, #15
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	4b12      	ldr	r3, [pc, #72]	; (8009218 <HAL_RCC_GetClockConfig+0x5c>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 0203 	and.w	r2, r3, #3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	605a      	str	r2, [r3, #4]
 80091d8:	4b0f      	ldr	r3, [pc, #60]	; (8009218 <HAL_RCC_GetClockConfig+0x5c>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	609a      	str	r2, [r3, #8]
 80091e4:	4b0c      	ldr	r3, [pc, #48]	; (8009218 <HAL_RCC_GetClockConfig+0x5c>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	60da      	str	r2, [r3, #12]
 80091f0:	4b09      	ldr	r3, [pc, #36]	; (8009218 <HAL_RCC_GetClockConfig+0x5c>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	08db      	lsrs	r3, r3, #3
 80091f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	611a      	str	r2, [r3, #16]
 80091fe:	4b07      	ldr	r3, [pc, #28]	; (800921c <HAL_RCC_GetClockConfig+0x60>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 0207 	and.w	r2, r3, #7
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	40023800 	.word	0x40023800
 800921c:	40023c00 	.word	0x40023c00

08009220 <HAL_SPI_Init>:
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_SPI_Init+0x12>
 800922e:	2301      	movs	r3, #1
 8009230:	e17e      	b.n	8009530 <HAL_SPI_Init+0x310>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a70      	ldr	r2, [pc, #448]	; (80093f8 <HAL_SPI_Init+0x1d8>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d00e      	beq.n	800925a <HAL_SPI_Init+0x3a>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a6e      	ldr	r2, [pc, #440]	; (80093fc <HAL_SPI_Init+0x1dc>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d009      	beq.n	800925a <HAL_SPI_Init+0x3a>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a6d      	ldr	r2, [pc, #436]	; (8009400 <HAL_SPI_Init+0x1e0>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d004      	beq.n	800925a <HAL_SPI_Init+0x3a>
 8009250:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009254:	486b      	ldr	r0, [pc, #428]	; (8009404 <HAL_SPI_Init+0x1e4>)
 8009256:	f7f9 f84e 	bl	80022f6 <assert_failed>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d009      	beq.n	8009276 <HAL_SPI_Init+0x56>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800926a:	d004      	beq.n	8009276 <HAL_SPI_Init+0x56>
 800926c:	f240 1141 	movw	r1, #321	; 0x141
 8009270:	4864      	ldr	r0, [pc, #400]	; (8009404 <HAL_SPI_Init+0x1e4>)
 8009272:	f7f9 f840 	bl	80022f6 <assert_failed>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00e      	beq.n	800929c <HAL_SPI_Init+0x7c>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009286:	d009      	beq.n	800929c <HAL_SPI_Init+0x7c>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009290:	d004      	beq.n	800929c <HAL_SPI_Init+0x7c>
 8009292:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8009296:	485b      	ldr	r0, [pc, #364]	; (8009404 <HAL_SPI_Init+0x1e4>)
 8009298:	f7f9 f82d 	bl	80022f6 <assert_failed>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092a4:	d008      	beq.n	80092b8 <HAL_SPI_Init+0x98>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d004      	beq.n	80092b8 <HAL_SPI_Init+0x98>
 80092ae:	f240 1143 	movw	r1, #323	; 0x143
 80092b2:	4854      	ldr	r0, [pc, #336]	; (8009404 <HAL_SPI_Init+0x1e4>)
 80092b4:	f7f9 f81f 	bl	80022f6 <assert_failed>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092c0:	d00d      	beq.n	80092de <HAL_SPI_Init+0xbe>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d009      	beq.n	80092de <HAL_SPI_Init+0xbe>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092d2:	d004      	beq.n	80092de <HAL_SPI_Init+0xbe>
 80092d4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80092d8:	484a      	ldr	r0, [pc, #296]	; (8009404 <HAL_SPI_Init+0x1e4>)
 80092da:	f7f9 f80c 	bl	80022f6 <assert_failed>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	69db      	ldr	r3, [r3, #28]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d020      	beq.n	8009328 <HAL_SPI_Init+0x108>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	2b08      	cmp	r3, #8
 80092ec:	d01c      	beq.n	8009328 <HAL_SPI_Init+0x108>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	2b10      	cmp	r3, #16
 80092f4:	d018      	beq.n	8009328 <HAL_SPI_Init+0x108>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	2b18      	cmp	r3, #24
 80092fc:	d014      	beq.n	8009328 <HAL_SPI_Init+0x108>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	2b20      	cmp	r3, #32
 8009304:	d010      	beq.n	8009328 <HAL_SPI_Init+0x108>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	2b28      	cmp	r3, #40	; 0x28
 800930c:	d00c      	beq.n	8009328 <HAL_SPI_Init+0x108>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	2b30      	cmp	r3, #48	; 0x30
 8009314:	d008      	beq.n	8009328 <HAL_SPI_Init+0x108>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	2b38      	cmp	r3, #56	; 0x38
 800931c:	d004      	beq.n	8009328 <HAL_SPI_Init+0x108>
 800931e:	f240 1145 	movw	r1, #325	; 0x145
 8009322:	4838      	ldr	r0, [pc, #224]	; (8009404 <HAL_SPI_Init+0x1e4>)
 8009324:	f7f8 ffe7 	bl	80022f6 <assert_failed>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d008      	beq.n	8009342 <HAL_SPI_Init+0x122>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	2b80      	cmp	r3, #128	; 0x80
 8009336:	d004      	beq.n	8009342 <HAL_SPI_Init+0x122>
 8009338:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800933c:	4831      	ldr	r0, [pc, #196]	; (8009404 <HAL_SPI_Init+0x1e4>)
 800933e:	f7f8 ffda 	bl	80022f6 <assert_failed>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009346:	2b00      	cmp	r3, #0
 8009348:	d008      	beq.n	800935c <HAL_SPI_Init+0x13c>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	2b10      	cmp	r3, #16
 8009350:	d004      	beq.n	800935c <HAL_SPI_Init+0x13c>
 8009352:	f240 1147 	movw	r1, #327	; 0x147
 8009356:	482b      	ldr	r0, [pc, #172]	; (8009404 <HAL_SPI_Init+0x1e4>)
 8009358:	f7f8 ffcd 	bl	80022f6 <assert_failed>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	2b00      	cmp	r3, #0
 8009362:	d151      	bne.n	8009408 <HAL_SPI_Init+0x1e8>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d008      	beq.n	800937e <HAL_SPI_Init+0x15e>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	2b02      	cmp	r3, #2
 8009372:	d004      	beq.n	800937e <HAL_SPI_Init+0x15e>
 8009374:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8009378:	4822      	ldr	r0, [pc, #136]	; (8009404 <HAL_SPI_Init+0x1e4>)
 800937a:	f7f8 ffbc 	bl	80022f6 <assert_failed>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d008      	beq.n	8009398 <HAL_SPI_Init+0x178>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d004      	beq.n	8009398 <HAL_SPI_Init+0x178>
 800938e:	f240 114b 	movw	r1, #331	; 0x14b
 8009392:	481c      	ldr	r0, [pc, #112]	; (8009404 <HAL_SPI_Init+0x1e4>)
 8009394:	f7f8 ffaf 	bl	80022f6 <assert_failed>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093a0:	d125      	bne.n	80093ee <HAL_SPI_Init+0x1ce>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d059      	beq.n	800945e <HAL_SPI_Init+0x23e>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	d055      	beq.n	800945e <HAL_SPI_Init+0x23e>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	2b10      	cmp	r3, #16
 80093b8:	d051      	beq.n	800945e <HAL_SPI_Init+0x23e>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	2b18      	cmp	r3, #24
 80093c0:	d04d      	beq.n	800945e <HAL_SPI_Init+0x23e>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	d049      	beq.n	800945e <HAL_SPI_Init+0x23e>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	2b28      	cmp	r3, #40	; 0x28
 80093d0:	d045      	beq.n	800945e <HAL_SPI_Init+0x23e>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	2b30      	cmp	r3, #48	; 0x30
 80093d8:	d041      	beq.n	800945e <HAL_SPI_Init+0x23e>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	2b38      	cmp	r3, #56	; 0x38
 80093e0:	d03d      	beq.n	800945e <HAL_SPI_Init+0x23e>
 80093e2:	f240 114f 	movw	r1, #335	; 0x14f
 80093e6:	4807      	ldr	r0, [pc, #28]	; (8009404 <HAL_SPI_Init+0x1e4>)
 80093e8:	f7f8 ff85 	bl	80022f6 <assert_failed>
 80093ec:	e037      	b.n	800945e <HAL_SPI_Init+0x23e>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	61da      	str	r2, [r3, #28]
 80093f4:	e033      	b.n	800945e <HAL_SPI_Init+0x23e>
 80093f6:	bf00      	nop
 80093f8:	40013000 	.word	0x40013000
 80093fc:	40003800 	.word	0x40003800
 8009400:	40003c00 	.word	0x40003c00
 8009404:	08018968 	.word	0x08018968
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d020      	beq.n	8009452 <HAL_SPI_Init+0x232>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	2b08      	cmp	r3, #8
 8009416:	d01c      	beq.n	8009452 <HAL_SPI_Init+0x232>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	2b10      	cmp	r3, #16
 800941e:	d018      	beq.n	8009452 <HAL_SPI_Init+0x232>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	2b18      	cmp	r3, #24
 8009426:	d014      	beq.n	8009452 <HAL_SPI_Init+0x232>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	2b20      	cmp	r3, #32
 800942e:	d010      	beq.n	8009452 <HAL_SPI_Init+0x232>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	2b28      	cmp	r3, #40	; 0x28
 8009436:	d00c      	beq.n	8009452 <HAL_SPI_Init+0x232>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	2b30      	cmp	r3, #48	; 0x30
 800943e:	d008      	beq.n	8009452 <HAL_SPI_Init+0x232>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	2b38      	cmp	r3, #56	; 0x38
 8009446:	d004      	beq.n	8009452 <HAL_SPI_Init+0x232>
 8009448:	f240 1159 	movw	r1, #345	; 0x159
 800944c:	483a      	ldr	r0, [pc, #232]	; (8009538 <HAL_SPI_Init+0x318>)
 800944e:	f7f8 ff52 	bl	80022f6 <assert_failed>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	611a      	str	r2, [r3, #16]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	615a      	str	r2, [r3, #20]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	629a      	str	r2, [r3, #40]	; 0x28
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	d106      	bne.n	800947e <HAL_SPI_Init+0x25e>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7f8 ff7d 	bl	8002378 <HAL_SPI_MspInit>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2202      	movs	r2, #2
 8009482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80094a6:	431a      	orrs	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094b0:	431a      	orrs	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	f003 0302 	and.w	r3, r3, #2
 80094ba:	431a      	orrs	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	431a      	orrs	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094d8:	431a      	orrs	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e2:	ea42 0103 	orr.w	r1, r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	0c1b      	lsrs	r3, r3, #16
 80094fc:	f003 0104 	and.w	r1, r3, #4
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	f003 0210 	and.w	r2, r3, #16
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	605a      	str	r2, [r3, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	69da      	ldr	r2, [r3, #28]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800951e:	61da      	str	r2, [r3, #28]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	655a      	str	r2, [r3, #84]	; 0x54
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800952e:	2300      	movs	r3, #0
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	08018968 	.word	0x08018968

0800953c <HAL_SPI_Transmit>:
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	4613      	mov	r3, r2
 800954a:	80fb      	strh	r3, [r7, #6]
 800954c:	2300      	movs	r3, #0
 800954e:	77fb      	strb	r3, [r7, #31]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <HAL_SPI_Transmit+0x30>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009560:	d004      	beq.n	800956c <HAL_SPI_Transmit+0x30>
 8009562:	f44f 7142 	mov.w	r1, #776	; 0x308
 8009566:	4880      	ldr	r0, [pc, #512]	; (8009768 <HAL_SPI_Transmit+0x22c>)
 8009568:	f7f8 fec5 	bl	80022f6 <assert_failed>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009572:	2b01      	cmp	r3, #1
 8009574:	d101      	bne.n	800957a <HAL_SPI_Transmit+0x3e>
 8009576:	2302      	movs	r3, #2
 8009578:	e128      	b.n	80097cc <HAL_SPI_Transmit+0x290>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009582:	f7fc fbb1 	bl	8005ce8 <HAL_GetTick>
 8009586:	61b8      	str	r0, [r7, #24]
 8009588:	88fb      	ldrh	r3, [r7, #6]
 800958a:	82fb      	strh	r3, [r7, #22]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b01      	cmp	r3, #1
 8009596:	d002      	beq.n	800959e <HAL_SPI_Transmit+0x62>
 8009598:	2302      	movs	r3, #2
 800959a:	77fb      	strb	r3, [r7, #31]
 800959c:	e10d      	b.n	80097ba <HAL_SPI_Transmit+0x27e>
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <HAL_SPI_Transmit+0x6e>
 80095a4:	88fb      	ldrh	r3, [r7, #6]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d102      	bne.n	80095b0 <HAL_SPI_Transmit+0x74>
 80095aa:	2301      	movs	r3, #1
 80095ac:	77fb      	strb	r3, [r7, #31]
 80095ae:	e104      	b.n	80097ba <HAL_SPI_Transmit+0x27e>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2203      	movs	r2, #3
 80095b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	655a      	str	r2, [r3, #84]	; 0x54
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	631a      	str	r2, [r3, #48]	; 0x30
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	88fa      	ldrh	r2, [r7, #6]
 80095c8:	869a      	strh	r2, [r3, #52]	; 0x34
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	88fa      	ldrh	r2, [r7, #6]
 80095ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	639a      	str	r2, [r3, #56]	; 0x38
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	879a      	strh	r2, [r3, #60]	; 0x3c
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	645a      	str	r2, [r3, #68]	; 0x44
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	641a      	str	r2, [r3, #64]	; 0x40
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095f6:	d10f      	bne.n	8009618 <HAL_SPI_Transmit+0xdc>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009622:	2b40      	cmp	r3, #64	; 0x40
 8009624:	d007      	beq.n	8009636 <HAL_SPI_Transmit+0xfa>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800963e:	d14b      	bne.n	80096d8 <HAL_SPI_Transmit+0x19c>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <HAL_SPI_Transmit+0x112>
 8009648:	8afb      	ldrh	r3, [r7, #22]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d13e      	bne.n	80096cc <HAL_SPI_Transmit+0x190>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	881a      	ldrh	r2, [r3, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	60da      	str	r2, [r3, #12]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	1c9a      	adds	r2, r3, #2
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	631a      	str	r2, [r3, #48]	; 0x30
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009668:	b29b      	uxth	r3, r3
 800966a:	3b01      	subs	r3, #1
 800966c:	b29a      	uxth	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	86da      	strh	r2, [r3, #54]	; 0x36
 8009672:	e02b      	b.n	80096cc <HAL_SPI_Transmit+0x190>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b02      	cmp	r3, #2
 8009680:	d112      	bne.n	80096a8 <HAL_SPI_Transmit+0x16c>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009686:	881a      	ldrh	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	60da      	str	r2, [r3, #12]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009692:	1c9a      	adds	r2, r3, #2
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	631a      	str	r2, [r3, #48]	; 0x30
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969c:	b29b      	uxth	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80096a6:	e011      	b.n	80096cc <HAL_SPI_Transmit+0x190>
 80096a8:	f7fc fb1e 	bl	8005ce8 <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d803      	bhi.n	80096c0 <HAL_SPI_Transmit+0x184>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096be:	d102      	bne.n	80096c6 <HAL_SPI_Transmit+0x18a>
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d102      	bne.n	80096cc <HAL_SPI_Transmit+0x190>
 80096c6:	2303      	movs	r3, #3
 80096c8:	77fb      	strb	r3, [r7, #31]
 80096ca:	e076      	b.n	80097ba <HAL_SPI_Transmit+0x27e>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1ce      	bne.n	8009674 <HAL_SPI_Transmit+0x138>
 80096d6:	e04e      	b.n	8009776 <HAL_SPI_Transmit+0x23a>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <HAL_SPI_Transmit+0x1aa>
 80096e0:	8afb      	ldrh	r3, [r7, #22]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d142      	bne.n	800976c <HAL_SPI_Transmit+0x230>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	330c      	adds	r3, #12
 80096f0:	7812      	ldrb	r2, [r2, #0]
 80096f2:	701a      	strb	r2, [r3, #0]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	1c5a      	adds	r2, r3, #1
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	631a      	str	r2, [r3, #48]	; 0x30
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009702:	b29b      	uxth	r3, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	86da      	strh	r2, [r3, #54]	; 0x36
 800970c:	e02e      	b.n	800976c <HAL_SPI_Transmit+0x230>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f003 0302 	and.w	r3, r3, #2
 8009718:	2b02      	cmp	r3, #2
 800971a:	d113      	bne.n	8009744 <HAL_SPI_Transmit+0x208>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	330c      	adds	r3, #12
 8009726:	7812      	ldrb	r2, [r2, #0]
 8009728:	701a      	strb	r2, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	631a      	str	r2, [r3, #48]	; 0x30
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009738:	b29b      	uxth	r3, r3
 800973a:	3b01      	subs	r3, #1
 800973c:	b29a      	uxth	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	86da      	strh	r2, [r3, #54]	; 0x36
 8009742:	e013      	b.n	800976c <HAL_SPI_Transmit+0x230>
 8009744:	f7fc fad0 	bl	8005ce8 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	429a      	cmp	r2, r3
 8009752:	d803      	bhi.n	800975c <HAL_SPI_Transmit+0x220>
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d102      	bne.n	8009762 <HAL_SPI_Transmit+0x226>
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d104      	bne.n	800976c <HAL_SPI_Transmit+0x230>
 8009762:	2303      	movs	r3, #3
 8009764:	77fb      	strb	r3, [r7, #31]
 8009766:	e028      	b.n	80097ba <HAL_SPI_Transmit+0x27e>
 8009768:	08018968 	.word	0x08018968
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009770:	b29b      	uxth	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1cb      	bne.n	800970e <HAL_SPI_Transmit+0x1d2>
 8009776:	69ba      	ldr	r2, [r7, #24]
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fd56 	bl	800a22c <SPI_EndRxTxTransaction>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <HAL_SPI_Transmit+0x250>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2220      	movs	r2, #32
 800978a:	655a      	str	r2, [r3, #84]	; 0x54
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10a      	bne.n	80097aa <HAL_SPI_Transmit+0x26e>
 8009794:	2300      	movs	r3, #0
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	613b      	str	r3, [r7, #16]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	613b      	str	r3, [r7, #16]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <HAL_SPI_Transmit+0x27c>
 80097b2:	2301      	movs	r3, #1
 80097b4:	77fb      	strb	r3, [r7, #31]
 80097b6:	e000      	b.n	80097ba <HAL_SPI_Transmit+0x27e>
 80097b8:	bf00      	nop
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80097ca:	7ffb      	ldrb	r3, [r7, #31]
 80097cc:	4618      	mov	r0, r3
 80097ce:	3720      	adds	r7, #32
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <HAL_SPI_Transmit_IT>:
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	4613      	mov	r3, r2
 80097e0:	80fb      	strh	r3, [r7, #6]
 80097e2:	2300      	movs	r3, #0
 80097e4:	75fb      	strb	r3, [r7, #23]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d009      	beq.n	8009802 <HAL_SPI_Transmit_IT+0x2e>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f6:	d004      	beq.n	8009802 <HAL_SPI_Transmit_IT+0x2e>
 80097f8:	f240 5151 	movw	r1, #1361	; 0x551
 80097fc:	483e      	ldr	r0, [pc, #248]	; (80098f8 <HAL_SPI_Transmit_IT+0x124>)
 80097fe:	f7f8 fd7a 	bl	80022f6 <assert_failed>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009808:	2b01      	cmp	r3, #1
 800980a:	d101      	bne.n	8009810 <HAL_SPI_Transmit_IT+0x3c>
 800980c:	2302      	movs	r3, #2
 800980e:	e06f      	b.n	80098f0 <HAL_SPI_Transmit_IT+0x11c>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <HAL_SPI_Transmit_IT+0x50>
 800981e:	88fb      	ldrh	r3, [r7, #6]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <HAL_SPI_Transmit_IT+0x56>
 8009824:	2301      	movs	r3, #1
 8009826:	75fb      	strb	r3, [r7, #23]
 8009828:	e05d      	b.n	80098e6 <HAL_SPI_Transmit_IT+0x112>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b01      	cmp	r3, #1
 8009834:	d002      	beq.n	800983c <HAL_SPI_Transmit_IT+0x68>
 8009836:	2302      	movs	r3, #2
 8009838:	75fb      	strb	r3, [r7, #23]
 800983a:	e054      	b.n	80098e6 <HAL_SPI_Transmit_IT+0x112>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2203      	movs	r2, #3
 8009840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	655a      	str	r2, [r3, #84]	; 0x54
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	631a      	str	r2, [r3, #48]	; 0x30
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	88fa      	ldrh	r2, [r7, #6]
 8009854:	869a      	strh	r2, [r3, #52]	; 0x34
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	88fa      	ldrh	r2, [r7, #6]
 800985a:	86da      	strh	r2, [r3, #54]	; 0x36
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	639a      	str	r2, [r3, #56]	; 0x38
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	879a      	strh	r2, [r3, #60]	; 0x3c
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	641a      	str	r2, [r3, #64]	; 0x40
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <HAL_SPI_Transmit_IT+0xb0>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4a1f      	ldr	r2, [pc, #124]	; (80098fc <HAL_SPI_Transmit_IT+0x128>)
 8009880:	645a      	str	r2, [r3, #68]	; 0x44
 8009882:	e002      	b.n	800988a <HAL_SPI_Transmit_IT+0xb6>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4a1e      	ldr	r2, [pc, #120]	; (8009900 <HAL_SPI_Transmit_IT+0x12c>)
 8009888:	645a      	str	r2, [r3, #68]	; 0x44
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009892:	d10f      	bne.n	80098b4 <HAL_SPI_Transmit_IT+0xe0>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80098c2:	605a      	str	r2, [r3, #4]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ce:	2b40      	cmp	r3, #64	; 0x40
 80098d0:	d008      	beq.n	80098e4 <HAL_SPI_Transmit_IT+0x110>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	e000      	b.n	80098e6 <HAL_SPI_Transmit_IT+0x112>
 80098e4:	bf00      	nop
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	4618      	mov	r0, r3
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	08018968 	.word	0x08018968
 80098fc:	0800a00d 	.word	0x0800a00d
 8009900:	08009fc7 	.word	0x08009fc7

08009904 <HAL_SPI_Receive_IT>:
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	4613      	mov	r3, r2
 8009910:	80fb      	strh	r3, [r7, #6]
 8009912:	2300      	movs	r3, #0
 8009914:	75fb      	strb	r3, [r7, #23]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d110      	bne.n	8009940 <HAL_SPI_Receive_IT+0x3c>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009926:	d10b      	bne.n	8009940 <HAL_SPI_Receive_IT+0x3c>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2204      	movs	r2, #4
 800992c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009930:	88fb      	ldrh	r3, [r7, #6]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	68b9      	ldr	r1, [r7, #8]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 f882 	bl	8009a40 <HAL_SPI_TransmitReceive_IT>
 800993c:	4603      	mov	r3, r0
 800993e:	e076      	b.n	8009a2e <HAL_SPI_Receive_IT+0x12a>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009946:	2b01      	cmp	r3, #1
 8009948:	d101      	bne.n	800994e <HAL_SPI_Receive_IT+0x4a>
 800994a:	2302      	movs	r3, #2
 800994c:	e06f      	b.n	8009a2e <HAL_SPI_Receive_IT+0x12a>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b01      	cmp	r3, #1
 8009960:	d002      	beq.n	8009968 <HAL_SPI_Receive_IT+0x64>
 8009962:	2302      	movs	r3, #2
 8009964:	75fb      	strb	r3, [r7, #23]
 8009966:	e05d      	b.n	8009a24 <HAL_SPI_Receive_IT+0x120>
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <HAL_SPI_Receive_IT+0x70>
 800996e:	88fb      	ldrh	r3, [r7, #6]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <HAL_SPI_Receive_IT+0x76>
 8009974:	2301      	movs	r3, #1
 8009976:	75fb      	strb	r3, [r7, #23]
 8009978:	e054      	b.n	8009a24 <HAL_SPI_Receive_IT+0x120>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2204      	movs	r2, #4
 800997e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	655a      	str	r2, [r3, #84]	; 0x54
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	639a      	str	r2, [r3, #56]	; 0x38
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	88fa      	ldrh	r2, [r7, #6]
 8009992:	879a      	strh	r2, [r3, #60]	; 0x3c
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	88fa      	ldrh	r2, [r7, #6]
 8009998:	87da      	strh	r2, [r3, #62]	; 0x3e
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	631a      	str	r2, [r3, #48]	; 0x30
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	869a      	strh	r2, [r3, #52]	; 0x34
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	645a      	str	r2, [r3, #68]	; 0x44
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_SPI_Receive_IT+0xbe>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4a1e      	ldr	r2, [pc, #120]	; (8009a38 <HAL_SPI_Receive_IT+0x134>)
 80099be:	641a      	str	r2, [r3, #64]	; 0x40
 80099c0:	e002      	b.n	80099c8 <HAL_SPI_Receive_IT+0xc4>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4a1d      	ldr	r2, [pc, #116]	; (8009a3c <HAL_SPI_Receive_IT+0x138>)
 80099c6:	641a      	str	r2, [r3, #64]	; 0x40
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099d0:	d10f      	bne.n	80099f2 <HAL_SPI_Receive_IT+0xee>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009a00:	605a      	str	r2, [r3, #4]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a0c:	2b40      	cmp	r3, #64	; 0x40
 8009a0e:	d008      	beq.n	8009a22 <HAL_SPI_Receive_IT+0x11e>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	e000      	b.n	8009a24 <HAL_SPI_Receive_IT+0x120>
 8009a22:	bf00      	nop
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	08009f81 	.word	0x08009f81
 8009a3c:	08009f37 	.word	0x08009f37

08009a40 <HAL_SPI_TransmitReceive_IT>:
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	807b      	strh	r3, [r7, #2]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	75fb      	strb	r3, [r7, #23]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d004      	beq.n	8009a64 <HAL_SPI_TransmitReceive_IT+0x24>
 8009a5a:	f240 6106 	movw	r1, #1542	; 0x606
 8009a5e:	4842      	ldr	r0, [pc, #264]	; (8009b68 <HAL_SPI_TransmitReceive_IT+0x128>)
 8009a60:	f7f8 fc49 	bl	80022f6 <assert_failed>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d101      	bne.n	8009a72 <HAL_SPI_TransmitReceive_IT+0x32>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e075      	b.n	8009b5e <HAL_SPI_TransmitReceive_IT+0x11e>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a80:	75bb      	strb	r3, [r7, #22]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	613b      	str	r3, [r7, #16]
 8009a88:	7dbb      	ldrb	r3, [r7, #22]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d00d      	beq.n	8009aaa <HAL_SPI_TransmitReceive_IT+0x6a>
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a94:	d106      	bne.n	8009aa4 <HAL_SPI_TransmitReceive_IT+0x64>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d102      	bne.n	8009aa4 <HAL_SPI_TransmitReceive_IT+0x64>
 8009a9e:	7dbb      	ldrb	r3, [r7, #22]
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d002      	beq.n	8009aaa <HAL_SPI_TransmitReceive_IT+0x6a>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	75fb      	strb	r3, [r7, #23]
 8009aa8:	e054      	b.n	8009b54 <HAL_SPI_TransmitReceive_IT+0x114>
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <HAL_SPI_TransmitReceive_IT+0x7c>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <HAL_SPI_TransmitReceive_IT+0x7c>
 8009ab6:	887b      	ldrh	r3, [r7, #2]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <HAL_SPI_TransmitReceive_IT+0x82>
 8009abc:	2301      	movs	r3, #1
 8009abe:	75fb      	strb	r3, [r7, #23]
 8009ac0:	e048      	b.n	8009b54 <HAL_SPI_TransmitReceive_IT+0x114>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	d003      	beq.n	8009ad6 <HAL_SPI_TransmitReceive_IT+0x96>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2205      	movs	r2, #5
 8009ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	655a      	str	r2, [r3, #84]	; 0x54
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	887a      	ldrh	r2, [r7, #2]
 8009ae6:	869a      	strh	r2, [r3, #52]	; 0x34
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	887a      	ldrh	r2, [r7, #2]
 8009aec:	86da      	strh	r2, [r3, #54]	; 0x36
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	639a      	str	r2, [r3, #56]	; 0x38
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	887a      	ldrh	r2, [r7, #2]
 8009af8:	879a      	strh	r2, [r3, #60]	; 0x3c
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	887a      	ldrh	r2, [r7, #2]
 8009afe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d006      	beq.n	8009b16 <HAL_SPI_TransmitReceive_IT+0xd6>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4a18      	ldr	r2, [pc, #96]	; (8009b6c <HAL_SPI_TransmitReceive_IT+0x12c>)
 8009b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	4a17      	ldr	r2, [pc, #92]	; (8009b70 <HAL_SPI_TransmitReceive_IT+0x130>)
 8009b12:	645a      	str	r2, [r3, #68]	; 0x44
 8009b14:	e005      	b.n	8009b22 <HAL_SPI_TransmitReceive_IT+0xe2>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4a16      	ldr	r2, [pc, #88]	; (8009b74 <HAL_SPI_TransmitReceive_IT+0x134>)
 8009b1a:	641a      	str	r2, [r3, #64]	; 0x40
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4a16      	ldr	r2, [pc, #88]	; (8009b78 <HAL_SPI_TransmitReceive_IT+0x138>)
 8009b20:	645a      	str	r2, [r3, #68]	; 0x44
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009b30:	605a      	str	r2, [r3, #4]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b3c:	2b40      	cmp	r3, #64	; 0x40
 8009b3e:	d008      	beq.n	8009b52 <HAL_SPI_TransmitReceive_IT+0x112>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	e000      	b.n	8009b54 <HAL_SPI_TransmitReceive_IT+0x114>
 8009b52:	bf00      	nop
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	08018968 	.word	0x08018968
 8009b6c:	08009e79 	.word	0x08009e79
 8009b70:	08009ed9 	.word	0x08009ed9
 8009b74:	08009db5 	.word	0x08009db5
 8009b78:	08009e19 	.word	0x08009e19

08009b7c <HAL_SPI_IRQHandler>:
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	61bb      	str	r3, [r7, #24]
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10e      	bne.n	8009bbc <HAL_SPI_IRQHandler+0x40>
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d009      	beq.n	8009bbc <HAL_SPI_IRQHandler+0x40>
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d004      	beq.n	8009bbc <HAL_SPI_IRQHandler+0x40>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	4798      	blx	r3
 8009bba:	e0ce      	b.n	8009d5a <HAL_SPI_IRQHandler+0x1de>
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	f003 0302 	and.w	r3, r3, #2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <HAL_SPI_IRQHandler+0x5e>
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d004      	beq.n	8009bda <HAL_SPI_IRQHandler+0x5e>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	4798      	blx	r3
 8009bd8:	e0bf      	b.n	8009d5a <HAL_SPI_IRQHandler+0x1de>
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	f003 0320 	and.w	r3, r3, #32
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10a      	bne.n	8009bfa <HAL_SPI_IRQHandler+0x7e>
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d105      	bne.n	8009bfa <HAL_SPI_IRQHandler+0x7e>
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 80b0 	beq.w	8009d5a <HAL_SPI_IRQHandler+0x1de>
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	f003 0320 	and.w	r3, r3, #32
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 80aa 	beq.w	8009d5a <HAL_SPI_IRQHandler+0x1de>
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d023      	beq.n	8009c58 <HAL_SPI_IRQHandler+0xdc>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d011      	beq.n	8009c40 <HAL_SPI_IRQHandler+0xc4>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c20:	f043 0204 	orr.w	r2, r3, #4
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	655a      	str	r2, [r3, #84]	; 0x54
 8009c28:	2300      	movs	r3, #0
 8009c2a:	617b      	str	r3, [r7, #20]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	617b      	str	r3, [r7, #20]
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	e00b      	b.n	8009c58 <HAL_SPI_IRQHandler+0xdc>
 8009c40:	2300      	movs	r3, #0
 8009c42:	613b      	str	r3, [r7, #16]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	613b      	str	r3, [r7, #16]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	e080      	b.n	8009d5a <HAL_SPI_IRQHandler+0x1de>
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d014      	beq.n	8009c8c <HAL_SPI_IRQHandler+0x110>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	f043 0201 	orr.w	r2, r3, #1
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	655a      	str	r2, [r3, #84]	; 0x54
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	60fb      	str	r3, [r7, #12]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00c      	beq.n	8009cb0 <HAL_SPI_IRQHandler+0x134>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9a:	f043 0208 	orr.w	r2, r3, #8
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	655a      	str	r2, [r3, #84]	; 0x54
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60bb      	str	r3, [r7, #8]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	60bb      	str	r3, [r7, #8]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d04f      	beq.n	8009d58 <HAL_SPI_IRQHandler+0x1dc>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cc6:	605a      	str	r2, [r3, #4]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <HAL_SPI_IRQHandler+0x168>
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d034      	beq.n	8009d4e <HAL_SPI_IRQHandler+0x1d2>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685a      	ldr	r2, [r3, #4]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f022 0203 	bic.w	r2, r2, #3
 8009cf2:	605a      	str	r2, [r3, #4]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d011      	beq.n	8009d20 <HAL_SPI_IRQHandler+0x1a4>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d00:	4a17      	ldr	r2, [pc, #92]	; (8009d60 <HAL_SPI_IRQHandler+0x1e4>)
 8009d02:	651a      	str	r2, [r3, #80]	; 0x50
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fc fc1f 	bl	800654c <HAL_DMA_Abort_IT>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d005      	beq.n	8009d20 <HAL_SPI_IRQHandler+0x1a4>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	655a      	str	r2, [r3, #84]	; 0x54
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d016      	beq.n	8009d56 <HAL_SPI_IRQHandler+0x1da>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d2c:	4a0c      	ldr	r2, [pc, #48]	; (8009d60 <HAL_SPI_IRQHandler+0x1e4>)
 8009d2e:	651a      	str	r2, [r3, #80]	; 0x50
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fc fc09 	bl	800654c <HAL_DMA_Abort_IT>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00a      	beq.n	8009d56 <HAL_SPI_IRQHandler+0x1da>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	655a      	str	r2, [r3, #84]	; 0x54
 8009d4c:	e003      	b.n	8009d56 <HAL_SPI_IRQHandler+0x1da>
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f812 	bl	8009d78 <HAL_SPI_ErrorCallback>
 8009d54:	e000      	b.n	8009d58 <HAL_SPI_IRQHandler+0x1dc>
 8009d56:	bf00      	nop
 8009d58:	bf00      	nop
 8009d5a:	3720      	adds	r7, #32
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	08009d8d 	.word	0x08009d8d

08009d64 <HAL_SPI_TxRxCpltCallback>:
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <HAL_SPI_ErrorCallback>:
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <SPI_DMAAbortOnError>:
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	86da      	strh	r2, [r3, #54]	; 0x36
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f7ff ffe6 	bl	8009d78 <HAL_SPI_ErrorCallback>
 8009dac:	bf00      	nop
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <SPI_2linesRxISR_8BIT>:
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f103 020c 	add.w	r2, r3, #12
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc8:	7812      	ldrb	r2, [r2, #0]
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10f      	bne.n	8009e10 <SPI_2linesRxISR_8BIT+0x5c>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009dfe:	605a      	str	r2, [r3, #4]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d102      	bne.n	8009e10 <SPI_2linesRxISR_8BIT+0x5c>
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fa50 	bl	800a2b0 <SPI_CloseRxTx_ISR>
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <SPI_2linesTxISR_8BIT>:
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	330c      	adds	r3, #12
 8009e2a:	7812      	ldrb	r2, [r2, #0]
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e32:	1c5a      	adds	r2, r3, #1
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	631a      	str	r2, [r3, #48]	; 0x30
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	86da      	strh	r2, [r3, #54]	; 0x36
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d10f      	bne.n	8009e70 <SPI_2linesTxISR_8BIT+0x58>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e5e:	605a      	str	r2, [r3, #4]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d102      	bne.n	8009e70 <SPI_2linesTxISR_8BIT+0x58>
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa20 	bl	800a2b0 <SPI_CloseRxTx_ISR>
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <SPI_2linesRxISR_16BIT>:
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68da      	ldr	r2, [r3, #12]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8a:	b292      	uxth	r2, r2
 8009e8c:	801a      	strh	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e92:	1c9a      	adds	r2, r3, #2
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	639a      	str	r2, [r3, #56]	; 0x38
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10f      	bne.n	8009ed0 <SPI_2linesRxISR_16BIT+0x58>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ebe:	605a      	str	r2, [r3, #4]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d102      	bne.n	8009ed0 <SPI_2linesRxISR_16BIT+0x58>
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f9f0 	bl	800a2b0 <SPI_CloseRxTx_ISR>
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <SPI_2linesTxISR_16BIT>:
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee4:	881a      	ldrh	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60da      	str	r2, [r3, #12]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef0:	1c9a      	adds	r2, r3, #2
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	3b01      	subs	r3, #1
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	86da      	strh	r2, [r3, #54]	; 0x36
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10f      	bne.n	8009f2e <SPI_2linesTxISR_16BIT+0x56>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685a      	ldr	r2, [r3, #4]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f1c:	605a      	str	r2, [r3, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d102      	bne.n	8009f2e <SPI_2linesTxISR_16BIT+0x56>
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f9c1 	bl	800a2b0 <SPI_CloseRxTx_ISR>
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <SPI_RxISR_8BIT>:
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f103 020c 	add.w	r2, r3, #12
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4a:	7812      	ldrb	r2, [r2, #0]
 8009f4c:	b2d2      	uxtb	r2, r2
 8009f4e:	701a      	strb	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	3b01      	subs	r3, #1
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d102      	bne.n	8009f78 <SPI_RxISR_8BIT+0x42>
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fa10 	bl	800a398 <SPI_CloseRx_ISR>
 8009f78:	bf00      	nop
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <SPI_RxISR_16BIT>:
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f92:	b292      	uxth	r2, r2
 8009f94:	801a      	strh	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	1c9a      	adds	r2, r3, #2
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	639a      	str	r2, [r3, #56]	; 0x38
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <SPI_RxISR_16BIT+0x3e>
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f9ed 	bl	800a398 <SPI_CloseRx_ISR>
 8009fbe:	bf00      	nop
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <SPI_TxISR_8BIT>:
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b082      	sub	sp, #8
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	7812      	ldrb	r2, [r2, #0]
 8009fda:	701a      	strb	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d102      	bne.n	800a004 <SPI_TxISR_8BIT+0x3e>
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fa0a 	bl	800a418 <SPI_CloseTx_ISR>
 800a004:	bf00      	nop
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <SPI_TxISR_16BIT>:
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a018:	881a      	ldrh	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	60da      	str	r2, [r3, #12]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a024:	1c9a      	adds	r2, r3, #2
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	631a      	str	r2, [r3, #48]	; 0x30
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a02e:	b29b      	uxth	r3, r3
 800a030:	3b01      	subs	r3, #1
 800a032:	b29a      	uxth	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	86da      	strh	r2, [r3, #54]	; 0x36
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d102      	bne.n	800a048 <SPI_TxISR_16BIT+0x3c>
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f9e8 	bl	800a418 <SPI_CloseTx_ISR>
 800a048:	bf00      	nop
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <SPI_WaitFlagStateUntilTimeout>:
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	4613      	mov	r3, r2
 800a05e:	71fb      	strb	r3, [r7, #7]
 800a060:	f7fb fe42 	bl	8005ce8 <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a068:	1a9b      	subs	r3, r3, r2
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	4413      	add	r3, r2
 800a06e:	61fb      	str	r3, [r7, #28]
 800a070:	f7fb fe3a 	bl	8005ce8 <HAL_GetTick>
 800a074:	61b8      	str	r0, [r7, #24]
 800a076:	4b39      	ldr	r3, [pc, #228]	; (800a15c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	015b      	lsls	r3, r3, #5
 800a07c:	0d1b      	lsrs	r3, r3, #20
 800a07e:	69fa      	ldr	r2, [r7, #28]
 800a080:	fb02 f303 	mul.w	r3, r2, r3
 800a084:	617b      	str	r3, [r7, #20]
 800a086:	e054      	b.n	800a132 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d050      	beq.n	800a132 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800a090:	f7fb fe2a 	bl	8005ce8 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d902      	bls.n	800a0a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d13d      	bne.n	800a122 <SPI_WaitFlagStateUntilTimeout+0xd2>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0b4:	605a      	str	r2, [r3, #4]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0be:	d111      	bne.n	800a0e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0c8:	d004      	beq.n	800a0d4 <SPI_WaitFlagStateUntilTimeout+0x84>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0d2:	d107      	bne.n	800a0e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ec:	d10f      	bne.n	800a10e <SPI_WaitFlagStateUntilTimeout+0xbe>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800a11e:	2303      	movs	r3, #3
 800a120:	e017      	b.n	800a152 <SPI_WaitFlagStateUntilTimeout+0x102>
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <SPI_WaitFlagStateUntilTimeout+0xdc>
 800a128:	2300      	movs	r3, #0
 800a12a:	61fb      	str	r3, [r7, #28]
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	3b01      	subs	r3, #1
 800a130:	617b      	str	r3, [r7, #20]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	4013      	ands	r3, r2
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	429a      	cmp	r2, r3
 800a140:	bf0c      	ite	eq
 800a142:	2301      	moveq	r3, #1
 800a144:	2300      	movne	r3, #0
 800a146:	b2db      	uxtb	r3, r3
 800a148:	461a      	mov	r2, r3
 800a14a:	79fb      	ldrb	r3, [r7, #7]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d19b      	bne.n	800a088 <SPI_WaitFlagStateUntilTimeout+0x38>
 800a150:	2300      	movs	r3, #0
 800a152:	4618      	mov	r0, r3
 800a154:	3720      	adds	r7, #32
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000010 	.word	0x20000010

0800a160 <SPI_EndRxTransaction>:
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af02      	add	r7, sp, #8
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a174:	d111      	bne.n	800a19a <SPI_EndRxTransaction+0x3a>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a17e:	d004      	beq.n	800a18a <SPI_EndRxTransaction+0x2a>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a188:	d107      	bne.n	800a19a <SPI_EndRxTransaction+0x3a>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1a2:	d12a      	bne.n	800a1fa <SPI_EndRxTransaction+0x9a>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1ac:	d012      	beq.n	800a1d4 <SPI_EndRxTransaction+0x74>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2180      	movs	r1, #128	; 0x80
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f7ff ff49 	bl	800a050 <SPI_WaitFlagStateUntilTimeout>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d02d      	beq.n	800a220 <SPI_EndRxTransaction+0xc0>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c8:	f043 0220 	orr.w	r2, r3, #32
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	655a      	str	r2, [r3, #84]	; 0x54
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e026      	b.n	800a222 <SPI_EndRxTransaction+0xc2>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2101      	movs	r1, #1
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7ff ff36 	bl	800a050 <SPI_WaitFlagStateUntilTimeout>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d01a      	beq.n	800a220 <SPI_EndRxTransaction+0xc0>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ee:	f043 0220 	orr.w	r2, r3, #32
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	655a      	str	r2, [r3, #84]	; 0x54
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e013      	b.n	800a222 <SPI_EndRxTransaction+0xc2>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2200      	movs	r2, #0
 800a202:	2101      	movs	r1, #1
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff ff23 	bl	800a050 <SPI_WaitFlagStateUntilTimeout>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d007      	beq.n	800a220 <SPI_EndRxTransaction+0xc0>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a214:	f043 0220 	orr.w	r2, r3, #32
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	655a      	str	r2, [r3, #84]	; 0x54
 800a21c:	2303      	movs	r3, #3
 800a21e:	e000      	b.n	800a222 <SPI_EndRxTransaction+0xc2>
 800a220:	2300      	movs	r3, #0
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
	...

0800a22c <SPI_EndRxTxTransaction>:
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af02      	add	r7, sp, #8
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	4b1b      	ldr	r3, [pc, #108]	; (800a2a8 <SPI_EndRxTxTransaction+0x7c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a1b      	ldr	r2, [pc, #108]	; (800a2ac <SPI_EndRxTxTransaction+0x80>)
 800a23e:	fba2 2303 	umull	r2, r3, r2, r3
 800a242:	0d5b      	lsrs	r3, r3, #21
 800a244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a248:	fb02 f303 	mul.w	r3, r2, r3
 800a24c:	617b      	str	r3, [r7, #20]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a256:	d112      	bne.n	800a27e <SPI_EndRxTxTransaction+0x52>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2200      	movs	r2, #0
 800a260:	2180      	movs	r1, #128	; 0x80
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff fef4 	bl	800a050 <SPI_WaitFlagStateUntilTimeout>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d016      	beq.n	800a29c <SPI_EndRxTxTransaction+0x70>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a272:	f043 0220 	orr.w	r2, r3, #32
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	655a      	str	r2, [r3, #84]	; 0x54
 800a27a:	2303      	movs	r3, #3
 800a27c:	e00f      	b.n	800a29e <SPI_EndRxTxTransaction+0x72>
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00a      	beq.n	800a29a <SPI_EndRxTxTransaction+0x6e>
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	3b01      	subs	r3, #1
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a294:	2b80      	cmp	r3, #128	; 0x80
 800a296:	d0f2      	beq.n	800a27e <SPI_EndRxTxTransaction+0x52>
 800a298:	e000      	b.n	800a29c <SPI_EndRxTxTransaction+0x70>
 800a29a:	bf00      	nop
 800a29c:	2300      	movs	r3, #0
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20000010 	.word	0x20000010
 800a2ac:	165e9f81 	.word	0x165e9f81

0800a2b0 <SPI_CloseRxTx_ISR>:
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	4b35      	ldr	r3, [pc, #212]	; (800a390 <SPI_CloseRxTx_ISR+0xe0>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a35      	ldr	r2, [pc, #212]	; (800a394 <SPI_CloseRxTx_ISR+0xe4>)
 800a2be:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c2:	0a5b      	lsrs	r3, r3, #9
 800a2c4:	2264      	movs	r2, #100	; 0x64
 800a2c6:	fb02 f303 	mul.w	r3, r2, r3
 800a2ca:	613b      	str	r3, [r7, #16]
 800a2cc:	f7fb fd0c 	bl	8005ce8 <HAL_GetTick>
 800a2d0:	6178      	str	r0, [r7, #20]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f022 0220 	bic.w	r2, r2, #32
 800a2e0:	605a      	str	r2, [r3, #4]
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d106      	bne.n	800a2f6 <SPI_CloseRxTx_ISR+0x46>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ec:	f043 0220 	orr.w	r2, r3, #32
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	655a      	str	r2, [r3, #84]	; 0x54
 800a2f4:	e009      	b.n	800a30a <SPI_CloseRxTx_ISR+0x5a>
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	613b      	str	r3, [r7, #16]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0eb      	beq.n	800a2e2 <SPI_CloseRxTx_ISR+0x32>
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	2164      	movs	r1, #100	; 0x64
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7ff ff8c 	bl	800a22c <SPI_EndRxTxTransaction>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d005      	beq.n	800a326 <SPI_CloseRxTx_ISR+0x76>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a31e:	f043 0220 	orr.w	r2, r3, #32
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	655a      	str	r2, [r3, #84]	; 0x54
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <SPI_CloseRxTx_ISR+0x94>
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	60fb      	str	r3, [r7, #12]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d115      	bne.n	800a378 <SPI_CloseRxTx_ISR+0xc8>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a352:	b2db      	uxtb	r3, r3
 800a354:	2b04      	cmp	r3, #4
 800a356:	d107      	bne.n	800a368 <SPI_CloseRxTx_ISR+0xb8>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7f6 ff67 	bl	8001234 <HAL_SPI_RxCpltCallback>
 800a366:	e00e      	b.n	800a386 <SPI_CloseRxTx_ISR+0xd6>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff fcf7 	bl	8009d64 <HAL_SPI_TxRxCpltCallback>
 800a376:	e006      	b.n	800a386 <SPI_CloseRxTx_ISR+0xd6>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff fcf9 	bl	8009d78 <HAL_SPI_ErrorCallback>
 800a386:	bf00      	nop
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20000010 	.word	0x20000010
 800a394:	057619f1 	.word	0x057619f1

0800a398 <SPI_CloseRx_ISR>:
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a3ae:	605a      	str	r2, [r3, #4]
 800a3b0:	f7fb fc9a 	bl	8005ce8 <HAL_GetTick>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	2164      	movs	r1, #100	; 0x64
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff fed0 	bl	800a160 <SPI_EndRxTransaction>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d005      	beq.n	800a3d2 <SPI_CloseRx_ISR+0x3a>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ca:	f043 0220 	orr.w	r2, r3, #32
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	655a      	str	r2, [r3, #84]	; 0x54
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10a      	bne.n	800a3f0 <SPI_CloseRx_ISR+0x58>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d103      	bne.n	800a408 <SPI_CloseRx_ISR+0x70>
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7f6 ff17 	bl	8001234 <HAL_SPI_RxCpltCallback>
 800a406:	e002      	b.n	800a40e <SPI_CloseRx_ISR+0x76>
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f7ff fcb5 	bl	8009d78 <HAL_SPI_ErrorCallback>
 800a40e:	bf00      	nop
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
	...

0800a418 <SPI_CloseTx_ISR>:
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	4b2c      	ldr	r3, [pc, #176]	; (800a4d4 <SPI_CloseTx_ISR+0xbc>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a2c      	ldr	r2, [pc, #176]	; (800a4d8 <SPI_CloseTx_ISR+0xc0>)
 800a426:	fba2 2303 	umull	r2, r3, r2, r3
 800a42a:	0a5b      	lsrs	r3, r3, #9
 800a42c:	2264      	movs	r2, #100	; 0x64
 800a42e:	fb02 f303 	mul.w	r3, r2, r3
 800a432:	613b      	str	r3, [r7, #16]
 800a434:	f7fb fc58 	bl	8005ce8 <HAL_GetTick>
 800a438:	6178      	str	r0, [r7, #20]
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d106      	bne.n	800a44e <SPI_CloseTx_ISR+0x36>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a444:	f043 0220 	orr.w	r2, r3, #32
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	655a      	str	r2, [r3, #84]	; 0x54
 800a44c:	e009      	b.n	800a462 <SPI_CloseTx_ISR+0x4a>
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	3b01      	subs	r3, #1
 800a452:	613b      	str	r3, [r7, #16]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f003 0302 	and.w	r3, r3, #2
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0eb      	beq.n	800a43a <SPI_CloseTx_ISR+0x22>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a470:	605a      	str	r2, [r3, #4]
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	2164      	movs	r1, #100	; 0x64
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7ff fed8 	bl	800a22c <SPI_EndRxTxTransaction>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d005      	beq.n	800a48e <SPI_CloseTx_ISR+0x76>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a486:	f043 0220 	orr.w	r2, r3, #32
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	655a      	str	r2, [r3, #84]	; 0x54
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10a      	bne.n	800a4ac <SPI_CloseTx_ISR+0x94>
 800a496:	2300      	movs	r3, #0
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d003      	beq.n	800a4c4 <SPI_CloseTx_ISR+0xac>
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff fc5b 	bl	8009d78 <HAL_SPI_ErrorCallback>
 800a4c2:	e002      	b.n	800a4ca <SPI_CloseTx_ISR+0xb2>
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7f6 fe9f 	bl	8001208 <HAL_SPI_TxCpltCallback>
 800a4ca:	bf00      	nop
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000010 	.word	0x20000010
 800a4d8:	057619f1 	.word	0x057619f1

0800a4dc <HAL_TIM_Base_Init>:
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d101      	bne.n	800a4ee <HAL_TIM_Base_Init+0x12>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e0c5      	b.n	800a67a <HAL_TIM_Base_Init+0x19e>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a64      	ldr	r2, [pc, #400]	; (800a684 <HAL_TIM_Base_Init+0x1a8>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d045      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a500:	d040      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a60      	ldr	r2, [pc, #384]	; (800a688 <HAL_TIM_Base_Init+0x1ac>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d03b      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a5e      	ldr	r2, [pc, #376]	; (800a68c <HAL_TIM_Base_Init+0x1b0>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d036      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a5d      	ldr	r2, [pc, #372]	; (800a690 <HAL_TIM_Base_Init+0x1b4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d031      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a5b      	ldr	r2, [pc, #364]	; (800a694 <HAL_TIM_Base_Init+0x1b8>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d02c      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a5a      	ldr	r2, [pc, #360]	; (800a698 <HAL_TIM_Base_Init+0x1bc>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d027      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a58      	ldr	r2, [pc, #352]	; (800a69c <HAL_TIM_Base_Init+0x1c0>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d022      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a57      	ldr	r2, [pc, #348]	; (800a6a0 <HAL_TIM_Base_Init+0x1c4>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d01d      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a55      	ldr	r2, [pc, #340]	; (800a6a4 <HAL_TIM_Base_Init+0x1c8>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d018      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a54      	ldr	r2, [pc, #336]	; (800a6a8 <HAL_TIM_Base_Init+0x1cc>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d013      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a52      	ldr	r2, [pc, #328]	; (800a6ac <HAL_TIM_Base_Init+0x1d0>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d00e      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a51      	ldr	r2, [pc, #324]	; (800a6b0 <HAL_TIM_Base_Init+0x1d4>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d009      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a4f      	ldr	r2, [pc, #316]	; (800a6b4 <HAL_TIM_Base_Init+0x1d8>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d004      	beq.n	800a584 <HAL_TIM_Base_Init+0xa8>
 800a57a:	f240 1113 	movw	r1, #275	; 0x113
 800a57e:	484e      	ldr	r0, [pc, #312]	; (800a6b8 <HAL_TIM_Base_Init+0x1dc>)
 800a580:	f7f7 feb9 	bl	80022f6 <assert_failed>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d014      	beq.n	800a5b6 <HAL_TIM_Base_Init+0xda>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	2b10      	cmp	r3, #16
 800a592:	d010      	beq.n	800a5b6 <HAL_TIM_Base_Init+0xda>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	2b20      	cmp	r3, #32
 800a59a:	d00c      	beq.n	800a5b6 <HAL_TIM_Base_Init+0xda>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	2b40      	cmp	r3, #64	; 0x40
 800a5a2:	d008      	beq.n	800a5b6 <HAL_TIM_Base_Init+0xda>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	2b60      	cmp	r3, #96	; 0x60
 800a5aa:	d004      	beq.n	800a5b6 <HAL_TIM_Base_Init+0xda>
 800a5ac:	f44f 718a 	mov.w	r1, #276	; 0x114
 800a5b0:	4841      	ldr	r0, [pc, #260]	; (800a6b8 <HAL_TIM_Base_Init+0x1dc>)
 800a5b2:	f7f7 fea0 	bl	80022f6 <assert_failed>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00e      	beq.n	800a5dc <HAL_TIM_Base_Init+0x100>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5c6:	d009      	beq.n	800a5dc <HAL_TIM_Base_Init+0x100>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5d0:	d004      	beq.n	800a5dc <HAL_TIM_Base_Init+0x100>
 800a5d2:	f240 1115 	movw	r1, #277	; 0x115
 800a5d6:	4838      	ldr	r0, [pc, #224]	; (800a6b8 <HAL_TIM_Base_Init+0x1dc>)
 800a5d8:	f7f7 fe8d 	bl	80022f6 <assert_failed>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d008      	beq.n	800a5f6 <HAL_TIM_Base_Init+0x11a>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	2b80      	cmp	r3, #128	; 0x80
 800a5ea:	d004      	beq.n	800a5f6 <HAL_TIM_Base_Init+0x11a>
 800a5ec:	f44f 718b 	mov.w	r1, #278	; 0x116
 800a5f0:	4831      	ldr	r0, [pc, #196]	; (800a6b8 <HAL_TIM_Base_Init+0x1dc>)
 800a5f2:	f7f7 fe80 	bl	80022f6 <assert_failed>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d106      	bne.n	800a610 <HAL_TIM_Base_Init+0x134>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7fb f9f2 	bl	80059f4 <HAL_TIM_Base_MspInit>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2202      	movs	r2, #2
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3304      	adds	r3, #4
 800a620:	4619      	mov	r1, r3
 800a622:	4610      	mov	r0, r2
 800a624:	f001 fe42 	bl	800c2ac <TIM_Base_SetConfig>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a678:	2300      	movs	r3, #0
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	40010000 	.word	0x40010000
 800a688:	40000400 	.word	0x40000400
 800a68c:	40000800 	.word	0x40000800
 800a690:	40000c00 	.word	0x40000c00
 800a694:	40001000 	.word	0x40001000
 800a698:	40001400 	.word	0x40001400
 800a69c:	40010400 	.word	0x40010400
 800a6a0:	40014000 	.word	0x40014000
 800a6a4:	40014400 	.word	0x40014400
 800a6a8:	40014800 	.word	0x40014800
 800a6ac:	40001800 	.word	0x40001800
 800a6b0:	40001c00 	.word	0x40001c00
 800a6b4:	40002000 	.word	0x40002000
 800a6b8:	080189a0 	.word	0x080189a0

0800a6bc <HAL_TIM_Base_Start>:
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a4d      	ldr	r2, [pc, #308]	; (800a800 <HAL_TIM_Base_Start+0x144>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d045      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6d6:	d040      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a49      	ldr	r2, [pc, #292]	; (800a804 <HAL_TIM_Base_Start+0x148>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d03b      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a48      	ldr	r2, [pc, #288]	; (800a808 <HAL_TIM_Base_Start+0x14c>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d036      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a46      	ldr	r2, [pc, #280]	; (800a80c <HAL_TIM_Base_Start+0x150>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d031      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a45      	ldr	r2, [pc, #276]	; (800a810 <HAL_TIM_Base_Start+0x154>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d02c      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a43      	ldr	r2, [pc, #268]	; (800a814 <HAL_TIM_Base_Start+0x158>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d027      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a42      	ldr	r2, [pc, #264]	; (800a818 <HAL_TIM_Base_Start+0x15c>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d022      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a40      	ldr	r2, [pc, #256]	; (800a81c <HAL_TIM_Base_Start+0x160>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d01d      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a3f      	ldr	r2, [pc, #252]	; (800a820 <HAL_TIM_Base_Start+0x164>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d018      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a3d      	ldr	r2, [pc, #244]	; (800a824 <HAL_TIM_Base_Start+0x168>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d013      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a3c      	ldr	r2, [pc, #240]	; (800a828 <HAL_TIM_Base_Start+0x16c>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d00e      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a3a      	ldr	r2, [pc, #232]	; (800a82c <HAL_TIM_Base_Start+0x170>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d009      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a39      	ldr	r2, [pc, #228]	; (800a830 <HAL_TIM_Base_Start+0x174>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d004      	beq.n	800a75a <HAL_TIM_Base_Start+0x9e>
 800a750:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800a754:	4837      	ldr	r0, [pc, #220]	; (800a834 <HAL_TIM_Base_Start+0x178>)
 800a756:	f7f7 fdce 	bl	80022f6 <assert_failed>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b01      	cmp	r3, #1
 800a764:	d001      	beq.n	800a76a <HAL_TIM_Base_Start+0xae>
 800a766:	2301      	movs	r3, #1
 800a768:	e046      	b.n	800a7f8 <HAL_TIM_Base_Start+0x13c>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2202      	movs	r2, #2
 800a76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a22      	ldr	r2, [pc, #136]	; (800a800 <HAL_TIM_Base_Start+0x144>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d022      	beq.n	800a7c2 <HAL_TIM_Base_Start+0x106>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a784:	d01d      	beq.n	800a7c2 <HAL_TIM_Base_Start+0x106>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a1e      	ldr	r2, [pc, #120]	; (800a804 <HAL_TIM_Base_Start+0x148>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d018      	beq.n	800a7c2 <HAL_TIM_Base_Start+0x106>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a1c      	ldr	r2, [pc, #112]	; (800a808 <HAL_TIM_Base_Start+0x14c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d013      	beq.n	800a7c2 <HAL_TIM_Base_Start+0x106>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a1b      	ldr	r2, [pc, #108]	; (800a80c <HAL_TIM_Base_Start+0x150>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d00e      	beq.n	800a7c2 <HAL_TIM_Base_Start+0x106>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a1b      	ldr	r2, [pc, #108]	; (800a818 <HAL_TIM_Base_Start+0x15c>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d009      	beq.n	800a7c2 <HAL_TIM_Base_Start+0x106>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a1a      	ldr	r2, [pc, #104]	; (800a81c <HAL_TIM_Base_Start+0x160>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d004      	beq.n	800a7c2 <HAL_TIM_Base_Start+0x106>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1a      	ldr	r2, [pc, #104]	; (800a828 <HAL_TIM_Base_Start+0x16c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d111      	bne.n	800a7e6 <HAL_TIM_Base_Start+0x12a>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	f003 0307 	and.w	r3, r3, #7
 800a7cc:	60fb      	str	r3, [r7, #12]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b06      	cmp	r3, #6
 800a7d2:	d010      	beq.n	800a7f6 <HAL_TIM_Base_Start+0x13a>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f042 0201 	orr.w	r2, r2, #1
 800a7e2:	601a      	str	r2, [r3, #0]
 800a7e4:	e007      	b.n	800a7f6 <HAL_TIM_Base_Start+0x13a>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f042 0201 	orr.w	r2, r2, #1
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	40010000 	.word	0x40010000
 800a804:	40000400 	.word	0x40000400
 800a808:	40000800 	.word	0x40000800
 800a80c:	40000c00 	.word	0x40000c00
 800a810:	40001000 	.word	0x40001000
 800a814:	40001400 	.word	0x40001400
 800a818:	40010400 	.word	0x40010400
 800a81c:	40014000 	.word	0x40014000
 800a820:	40014400 	.word	0x40014400
 800a824:	40014800 	.word	0x40014800
 800a828:	40001800 	.word	0x40001800
 800a82c:	40001c00 	.word	0x40001c00
 800a830:	40002000 	.word	0x40002000
 800a834:	080189a0 	.word	0x080189a0

0800a838 <HAL_TIM_Base_Start_IT>:
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a51      	ldr	r2, [pc, #324]	; (800a98c <HAL_TIM_Base_Start_IT+0x154>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d045      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a852:	d040      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a4d      	ldr	r2, [pc, #308]	; (800a990 <HAL_TIM_Base_Start_IT+0x158>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d03b      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a4c      	ldr	r2, [pc, #304]	; (800a994 <HAL_TIM_Base_Start_IT+0x15c>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d036      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a4a      	ldr	r2, [pc, #296]	; (800a998 <HAL_TIM_Base_Start_IT+0x160>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d031      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a49      	ldr	r2, [pc, #292]	; (800a99c <HAL_TIM_Base_Start_IT+0x164>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d02c      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a47      	ldr	r2, [pc, #284]	; (800a9a0 <HAL_TIM_Base_Start_IT+0x168>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d027      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a46      	ldr	r2, [pc, #280]	; (800a9a4 <HAL_TIM_Base_Start_IT+0x16c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d022      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a44      	ldr	r2, [pc, #272]	; (800a9a8 <HAL_TIM_Base_Start_IT+0x170>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d01d      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a43      	ldr	r2, [pc, #268]	; (800a9ac <HAL_TIM_Base_Start_IT+0x174>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d018      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a41      	ldr	r2, [pc, #260]	; (800a9b0 <HAL_TIM_Base_Start_IT+0x178>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d013      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a40      	ldr	r2, [pc, #256]	; (800a9b4 <HAL_TIM_Base_Start_IT+0x17c>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d00e      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a3e      	ldr	r2, [pc, #248]	; (800a9b8 <HAL_TIM_Base_Start_IT+0x180>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d009      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a3d      	ldr	r2, [pc, #244]	; (800a9bc <HAL_TIM_Base_Start_IT+0x184>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d004      	beq.n	800a8d6 <HAL_TIM_Base_Start_IT+0x9e>
 800a8cc:	f240 11cf 	movw	r1, #463	; 0x1cf
 800a8d0:	483b      	ldr	r0, [pc, #236]	; (800a9c0 <HAL_TIM_Base_Start_IT+0x188>)
 800a8d2:	f7f7 fd10 	bl	80022f6 <assert_failed>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d001      	beq.n	800a8e6 <HAL_TIM_Base_Start_IT+0xae>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e04e      	b.n	800a984 <HAL_TIM_Base_Start_IT+0x14c>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f042 0201 	orr.w	r2, r2, #1
 800a8fc:	60da      	str	r2, [r3, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a22      	ldr	r2, [pc, #136]	; (800a98c <HAL_TIM_Base_Start_IT+0x154>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d022      	beq.n	800a94e <HAL_TIM_Base_Start_IT+0x116>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a910:	d01d      	beq.n	800a94e <HAL_TIM_Base_Start_IT+0x116>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a1e      	ldr	r2, [pc, #120]	; (800a990 <HAL_TIM_Base_Start_IT+0x158>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d018      	beq.n	800a94e <HAL_TIM_Base_Start_IT+0x116>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a1c      	ldr	r2, [pc, #112]	; (800a994 <HAL_TIM_Base_Start_IT+0x15c>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d013      	beq.n	800a94e <HAL_TIM_Base_Start_IT+0x116>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a1b      	ldr	r2, [pc, #108]	; (800a998 <HAL_TIM_Base_Start_IT+0x160>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d00e      	beq.n	800a94e <HAL_TIM_Base_Start_IT+0x116>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a1b      	ldr	r2, [pc, #108]	; (800a9a4 <HAL_TIM_Base_Start_IT+0x16c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d009      	beq.n	800a94e <HAL_TIM_Base_Start_IT+0x116>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a1a      	ldr	r2, [pc, #104]	; (800a9a8 <HAL_TIM_Base_Start_IT+0x170>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d004      	beq.n	800a94e <HAL_TIM_Base_Start_IT+0x116>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a1a      	ldr	r2, [pc, #104]	; (800a9b4 <HAL_TIM_Base_Start_IT+0x17c>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d111      	bne.n	800a972 <HAL_TIM_Base_Start_IT+0x13a>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f003 0307 	and.w	r3, r3, #7
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2b06      	cmp	r3, #6
 800a95e:	d010      	beq.n	800a982 <HAL_TIM_Base_Start_IT+0x14a>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0201 	orr.w	r2, r2, #1
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	e007      	b.n	800a982 <HAL_TIM_Base_Start_IT+0x14a>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0201 	orr.w	r2, r2, #1
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	2300      	movs	r3, #0
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	40010000 	.word	0x40010000
 800a990:	40000400 	.word	0x40000400
 800a994:	40000800 	.word	0x40000800
 800a998:	40000c00 	.word	0x40000c00
 800a99c:	40001000 	.word	0x40001000
 800a9a0:	40001400 	.word	0x40001400
 800a9a4:	40010400 	.word	0x40010400
 800a9a8:	40014000 	.word	0x40014000
 800a9ac:	40014400 	.word	0x40014400
 800a9b0:	40014800 	.word	0x40014800
 800a9b4:	40001800 	.word	0x40001800
 800a9b8:	40001c00 	.word	0x40001c00
 800a9bc:	40002000 	.word	0x40002000
 800a9c0:	080189a0 	.word	0x080189a0

0800a9c4 <HAL_TIM_PWM_Init>:
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <HAL_TIM_PWM_Init+0x12>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e0c5      	b.n	800ab62 <HAL_TIM_PWM_Init+0x19e>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a64      	ldr	r2, [pc, #400]	; (800ab6c <HAL_TIM_PWM_Init+0x1a8>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d045      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e8:	d040      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a60      	ldr	r2, [pc, #384]	; (800ab70 <HAL_TIM_PWM_Init+0x1ac>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d03b      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a5e      	ldr	r2, [pc, #376]	; (800ab74 <HAL_TIM_PWM_Init+0x1b0>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d036      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a5d      	ldr	r2, [pc, #372]	; (800ab78 <HAL_TIM_PWM_Init+0x1b4>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d031      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a5b      	ldr	r2, [pc, #364]	; (800ab7c <HAL_TIM_PWM_Init+0x1b8>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d02c      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a5a      	ldr	r2, [pc, #360]	; (800ab80 <HAL_TIM_PWM_Init+0x1bc>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d027      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a58      	ldr	r2, [pc, #352]	; (800ab84 <HAL_TIM_PWM_Init+0x1c0>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d022      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a57      	ldr	r2, [pc, #348]	; (800ab88 <HAL_TIM_PWM_Init+0x1c4>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d01d      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a55      	ldr	r2, [pc, #340]	; (800ab8c <HAL_TIM_PWM_Init+0x1c8>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d018      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a54      	ldr	r2, [pc, #336]	; (800ab90 <HAL_TIM_PWM_Init+0x1cc>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d013      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a52      	ldr	r2, [pc, #328]	; (800ab94 <HAL_TIM_PWM_Init+0x1d0>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d00e      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a51      	ldr	r2, [pc, #324]	; (800ab98 <HAL_TIM_PWM_Init+0x1d4>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d009      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a4f      	ldr	r2, [pc, #316]	; (800ab9c <HAL_TIM_PWM_Init+0x1d8>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d004      	beq.n	800aa6c <HAL_TIM_PWM_Init+0xa8>
 800aa62:	f240 5129 	movw	r1, #1321	; 0x529
 800aa66:	484e      	ldr	r0, [pc, #312]	; (800aba0 <HAL_TIM_PWM_Init+0x1dc>)
 800aa68:	f7f7 fc45 	bl	80022f6 <assert_failed>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d014      	beq.n	800aa9e <HAL_TIM_PWM_Init+0xda>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	2b10      	cmp	r3, #16
 800aa7a:	d010      	beq.n	800aa9e <HAL_TIM_PWM_Init+0xda>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	2b20      	cmp	r3, #32
 800aa82:	d00c      	beq.n	800aa9e <HAL_TIM_PWM_Init+0xda>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	2b40      	cmp	r3, #64	; 0x40
 800aa8a:	d008      	beq.n	800aa9e <HAL_TIM_PWM_Init+0xda>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	2b60      	cmp	r3, #96	; 0x60
 800aa92:	d004      	beq.n	800aa9e <HAL_TIM_PWM_Init+0xda>
 800aa94:	f240 512a 	movw	r1, #1322	; 0x52a
 800aa98:	4841      	ldr	r0, [pc, #260]	; (800aba0 <HAL_TIM_PWM_Init+0x1dc>)
 800aa9a:	f7f7 fc2c 	bl	80022f6 <assert_failed>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00e      	beq.n	800aac4 <HAL_TIM_PWM_Init+0x100>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaae:	d009      	beq.n	800aac4 <HAL_TIM_PWM_Init+0x100>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab8:	d004      	beq.n	800aac4 <HAL_TIM_PWM_Init+0x100>
 800aaba:	f240 512b 	movw	r1, #1323	; 0x52b
 800aabe:	4838      	ldr	r0, [pc, #224]	; (800aba0 <HAL_TIM_PWM_Init+0x1dc>)
 800aac0:	f7f7 fc19 	bl	80022f6 <assert_failed>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d008      	beq.n	800aade <HAL_TIM_PWM_Init+0x11a>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	2b80      	cmp	r3, #128	; 0x80
 800aad2:	d004      	beq.n	800aade <HAL_TIM_PWM_Init+0x11a>
 800aad4:	f240 512c 	movw	r1, #1324	; 0x52c
 800aad8:	4831      	ldr	r0, [pc, #196]	; (800aba0 <HAL_TIM_PWM_Init+0x1dc>)
 800aada:	f7f7 fc0c 	bl	80022f6 <assert_failed>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <HAL_TIM_PWM_Init+0x134>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f856 	bl	800aba4 <HAL_TIM_PWM_MspInit>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2202      	movs	r2, #2
 800aafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	3304      	adds	r3, #4
 800ab08:	4619      	mov	r1, r3
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	f001 fbce 	bl	800c2ac <TIM_Base_SetConfig>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ab60:	2300      	movs	r3, #0
 800ab62:	4618      	mov	r0, r3
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	40010000 	.word	0x40010000
 800ab70:	40000400 	.word	0x40000400
 800ab74:	40000800 	.word	0x40000800
 800ab78:	40000c00 	.word	0x40000c00
 800ab7c:	40001000 	.word	0x40001000
 800ab80:	40001400 	.word	0x40001400
 800ab84:	40010400 	.word	0x40010400
 800ab88:	40014000 	.word	0x40014000
 800ab8c:	40014400 	.word	0x40014400
 800ab90:	40014800 	.word	0x40014800
 800ab94:	40001800 	.word	0x40001800
 800ab98:	40001c00 	.word	0x40001c00
 800ab9c:	40002000 	.word	0x40002000
 800aba0:	080189a0 	.word	0x080189a0

0800aba4 <HAL_TIM_PWM_MspInit>:
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_TIM_PWM_Start_DMA>:
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	807b      	strh	r3, [r7, #2]
 800abc6:	2300      	movs	r3, #0
 800abc8:	75fb      	strb	r3, [r7, #23]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a8a      	ldr	r2, [pc, #552]	; (800adf8 <HAL_TIM_PWM_Start_DMA+0x240>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d10f      	bne.n	800abf4 <HAL_TIM_PWM_Start_DMA+0x3c>
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 809f 	beq.w	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b04      	cmp	r3, #4
 800abe0:	f000 809b 	beq.w	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b08      	cmp	r3, #8
 800abe8:	f000 8097 	beq.w	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	2b0c      	cmp	r3, #12
 800abf0:	f000 8093 	beq.w	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abfc:	d10e      	bne.n	800ac1c <HAL_TIM_PWM_Start_DMA+0x64>
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 808a 	beq.w	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	f000 8086 	beq.w	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b08      	cmp	r3, #8
 800ac12:	f000 8082 	beq.w	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	2b0c      	cmp	r3, #12
 800ac1a:	d07e      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a76      	ldr	r2, [pc, #472]	; (800adfc <HAL_TIM_PWM_Start_DMA+0x244>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d10b      	bne.n	800ac3e <HAL_TIM_PWM_Start_DMA+0x86>
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d076      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	d073      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d070      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b0c      	cmp	r3, #12
 800ac3c:	d06d      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a6f      	ldr	r2, [pc, #444]	; (800ae00 <HAL_TIM_PWM_Start_DMA+0x248>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d10b      	bne.n	800ac60 <HAL_TIM_PWM_Start_DMA+0xa8>
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d065      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2b04      	cmp	r3, #4
 800ac52:	d062      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2b08      	cmp	r3, #8
 800ac58:	d05f      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2b0c      	cmp	r3, #12
 800ac5e:	d05c      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a67      	ldr	r2, [pc, #412]	; (800ae04 <HAL_TIM_PWM_Start_DMA+0x24c>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d10b      	bne.n	800ac82 <HAL_TIM_PWM_Start_DMA+0xca>
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d054      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2b04      	cmp	r3, #4
 800ac74:	d051      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b08      	cmp	r3, #8
 800ac7a:	d04e      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2b0c      	cmp	r3, #12
 800ac80:	d04b      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a60      	ldr	r2, [pc, #384]	; (800ae08 <HAL_TIM_PWM_Start_DMA+0x250>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d10b      	bne.n	800aca4 <HAL_TIM_PWM_Start_DMA+0xec>
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d043      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2b04      	cmp	r3, #4
 800ac96:	d040      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2b08      	cmp	r3, #8
 800ac9c:	d03d      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2b0c      	cmp	r3, #12
 800aca2:	d03a      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a58      	ldr	r2, [pc, #352]	; (800ae0c <HAL_TIM_PWM_Start_DMA+0x254>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d105      	bne.n	800acba <HAL_TIM_PWM_Start_DMA+0x102>
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d032      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2b04      	cmp	r3, #4
 800acb8:	d02f      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a54      	ldr	r2, [pc, #336]	; (800ae10 <HAL_TIM_PWM_Start_DMA+0x258>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d102      	bne.n	800acca <HAL_TIM_PWM_Start_DMA+0x112>
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d027      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a51      	ldr	r2, [pc, #324]	; (800ae14 <HAL_TIM_PWM_Start_DMA+0x25c>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d102      	bne.n	800acda <HAL_TIM_PWM_Start_DMA+0x122>
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d01f      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a4e      	ldr	r2, [pc, #312]	; (800ae18 <HAL_TIM_PWM_Start_DMA+0x260>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d105      	bne.n	800acf0 <HAL_TIM_PWM_Start_DMA+0x138>
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d017      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b04      	cmp	r3, #4
 800acee:	d014      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a49      	ldr	r2, [pc, #292]	; (800ae1c <HAL_TIM_PWM_Start_DMA+0x264>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d102      	bne.n	800ad00 <HAL_TIM_PWM_Start_DMA+0x148>
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00c      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a46      	ldr	r2, [pc, #280]	; (800ae20 <HAL_TIM_PWM_Start_DMA+0x268>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d102      	bne.n	800ad10 <HAL_TIM_PWM_Start_DMA+0x158>
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d004      	beq.n	800ad1a <HAL_TIM_PWM_Start_DMA+0x162>
 800ad10:	f240 61b3 	movw	r1, #1715	; 0x6b3
 800ad14:	4843      	ldr	r0, [pc, #268]	; (800ae24 <HAL_TIM_PWM_Start_DMA+0x26c>)
 800ad16:	f7f7 faee 	bl	80022f6 <assert_failed>
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d109      	bne.n	800ad34 <HAL_TIM_PWM_Start_DMA+0x17c>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	bf0c      	ite	eq
 800ad2c:	2301      	moveq	r3, #1
 800ad2e:	2300      	movne	r3, #0
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	e022      	b.n	800ad7a <HAL_TIM_PWM_Start_DMA+0x1c2>
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b04      	cmp	r3, #4
 800ad38:	d109      	bne.n	800ad4e <HAL_TIM_PWM_Start_DMA+0x196>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	bf0c      	ite	eq
 800ad46:	2301      	moveq	r3, #1
 800ad48:	2300      	movne	r3, #0
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	e015      	b.n	800ad7a <HAL_TIM_PWM_Start_DMA+0x1c2>
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b08      	cmp	r3, #8
 800ad52:	d109      	bne.n	800ad68 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	bf0c      	ite	eq
 800ad60:	2301      	moveq	r3, #1
 800ad62:	2300      	movne	r3, #0
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	e008      	b.n	800ad7a <HAL_TIM_PWM_Start_DMA+0x1c2>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	bf0c      	ite	eq
 800ad74:	2301      	moveq	r3, #1
 800ad76:	2300      	movne	r3, #0
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <HAL_TIM_PWM_Start_DMA+0x1ca>
 800ad7e:	2302      	movs	r3, #2
 800ad80:	e189      	b.n	800b096 <HAL_TIM_PWM_Start_DMA+0x4de>
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d109      	bne.n	800ad9c <HAL_TIM_PWM_Start_DMA+0x1e4>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	bf0c      	ite	eq
 800ad94:	2301      	moveq	r3, #1
 800ad96:	2300      	movne	r3, #0
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	e022      	b.n	800ade2 <HAL_TIM_PWM_Start_DMA+0x22a>
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	d109      	bne.n	800adb6 <HAL_TIM_PWM_Start_DMA+0x1fe>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b01      	cmp	r3, #1
 800adac:	bf0c      	ite	eq
 800adae:	2301      	moveq	r3, #1
 800adb0:	2300      	movne	r3, #0
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	e015      	b.n	800ade2 <HAL_TIM_PWM_Start_DMA+0x22a>
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b08      	cmp	r3, #8
 800adba:	d109      	bne.n	800add0 <HAL_TIM_PWM_Start_DMA+0x218>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	bf0c      	ite	eq
 800adc8:	2301      	moveq	r3, #1
 800adca:	2300      	movne	r3, #0
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	e008      	b.n	800ade2 <HAL_TIM_PWM_Start_DMA+0x22a>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b01      	cmp	r3, #1
 800adda:	bf0c      	ite	eq
 800addc:	2301      	moveq	r3, #1
 800adde:	2300      	movne	r3, #0
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d03d      	beq.n	800ae62 <HAL_TIM_PWM_Start_DMA+0x2aa>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d11d      	bne.n	800ae28 <HAL_TIM_PWM_Start_DMA+0x270>
 800adec:	887b      	ldrh	r3, [r7, #2]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d01a      	beq.n	800ae28 <HAL_TIM_PWM_Start_DMA+0x270>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e14f      	b.n	800b096 <HAL_TIM_PWM_Start_DMA+0x4de>
 800adf6:	bf00      	nop
 800adf8:	40010000 	.word	0x40010000
 800adfc:	40000400 	.word	0x40000400
 800ae00:	40000800 	.word	0x40000800
 800ae04:	40000c00 	.word	0x40000c00
 800ae08:	40010400 	.word	0x40010400
 800ae0c:	40014000 	.word	0x40014000
 800ae10:	40014400 	.word	0x40014400
 800ae14:	40014800 	.word	0x40014800
 800ae18:	40001800 	.word	0x40001800
 800ae1c:	40001c00 	.word	0x40001c00
 800ae20:	40002000 	.word	0x40002000
 800ae24:	080189a0 	.word	0x080189a0
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d104      	bne.n	800ae38 <HAL_TIM_PWM_Start_DMA+0x280>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2202      	movs	r2, #2
 800ae32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae36:	e016      	b.n	800ae66 <HAL_TIM_PWM_Start_DMA+0x2ae>
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b04      	cmp	r3, #4
 800ae3c:	d104      	bne.n	800ae48 <HAL_TIM_PWM_Start_DMA+0x290>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2202      	movs	r2, #2
 800ae42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae46:	e00e      	b.n	800ae66 <HAL_TIM_PWM_Start_DMA+0x2ae>
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b08      	cmp	r3, #8
 800ae4c:	d104      	bne.n	800ae58 <HAL_TIM_PWM_Start_DMA+0x2a0>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2202      	movs	r2, #2
 800ae52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae56:	e006      	b.n	800ae66 <HAL_TIM_PWM_Start_DMA+0x2ae>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2202      	movs	r2, #2
 800ae5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae60:	e001      	b.n	800ae66 <HAL_TIM_PWM_Start_DMA+0x2ae>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e117      	b.n	800b096 <HAL_TIM_PWM_Start_DMA+0x4de>
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2b0c      	cmp	r3, #12
 800ae6a:	f200 80ad 	bhi.w	800afc8 <HAL_TIM_PWM_Start_DMA+0x410>
 800ae6e:	a201      	add	r2, pc, #4	; (adr r2, 800ae74 <HAL_TIM_PWM_Start_DMA+0x2bc>)
 800ae70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae74:	0800aea9 	.word	0x0800aea9
 800ae78:	0800afc9 	.word	0x0800afc9
 800ae7c:	0800afc9 	.word	0x0800afc9
 800ae80:	0800afc9 	.word	0x0800afc9
 800ae84:	0800aef1 	.word	0x0800aef1
 800ae88:	0800afc9 	.word	0x0800afc9
 800ae8c:	0800afc9 	.word	0x0800afc9
 800ae90:	0800afc9 	.word	0x0800afc9
 800ae94:	0800af39 	.word	0x0800af39
 800ae98:	0800afc9 	.word	0x0800afc9
 800ae9c:	0800afc9 	.word	0x0800afc9
 800aea0:	0800afc9 	.word	0x0800afc9
 800aea4:	0800af81 	.word	0x0800af81
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	4a7c      	ldr	r2, [pc, #496]	; (800b0a0 <HAL_TIM_PWM_Start_DMA+0x4e8>)
 800aeae:	63da      	str	r2, [r3, #60]	; 0x3c
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb4:	4a7b      	ldr	r2, [pc, #492]	; (800b0a4 <HAL_TIM_PWM_Start_DMA+0x4ec>)
 800aeb6:	641a      	str	r2, [r3, #64]	; 0x40
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebc:	4a7a      	ldr	r2, [pc, #488]	; (800b0a8 <HAL_TIM_PWM_Start_DMA+0x4f0>)
 800aebe:	64da      	str	r2, [r3, #76]	; 0x4c
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3334      	adds	r3, #52	; 0x34
 800aecc:	461a      	mov	r2, r3
 800aece:	887b      	ldrh	r3, [r7, #2]
 800aed0:	f7fb fa66 	bl	80063a0 <HAL_DMA_Start_IT>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <HAL_TIM_PWM_Start_DMA+0x326>
 800aeda:	2301      	movs	r3, #1
 800aedc:	e0db      	b.n	800b096 <HAL_TIM_PWM_Start_DMA+0x4de>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68da      	ldr	r2, [r3, #12]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeec:	60da      	str	r2, [r3, #12]
 800aeee:	e06e      	b.n	800afce <HAL_TIM_PWM_Start_DMA+0x416>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef4:	4a6a      	ldr	r2, [pc, #424]	; (800b0a0 <HAL_TIM_PWM_Start_DMA+0x4e8>)
 800aef6:	63da      	str	r2, [r3, #60]	; 0x3c
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefc:	4a69      	ldr	r2, [pc, #420]	; (800b0a4 <HAL_TIM_PWM_Start_DMA+0x4ec>)
 800aefe:	641a      	str	r2, [r3, #64]	; 0x40
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af04:	4a68      	ldr	r2, [pc, #416]	; (800b0a8 <HAL_TIM_PWM_Start_DMA+0x4f0>)
 800af06:	64da      	str	r2, [r3, #76]	; 0x4c
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3338      	adds	r3, #56	; 0x38
 800af14:	461a      	mov	r2, r3
 800af16:	887b      	ldrh	r3, [r7, #2]
 800af18:	f7fb fa42 	bl	80063a0 <HAL_DMA_Start_IT>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <HAL_TIM_PWM_Start_DMA+0x36e>
 800af22:	2301      	movs	r3, #1
 800af24:	e0b7      	b.n	800b096 <HAL_TIM_PWM_Start_DMA+0x4de>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68da      	ldr	r2, [r3, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af34:	60da      	str	r2, [r3, #12]
 800af36:	e04a      	b.n	800afce <HAL_TIM_PWM_Start_DMA+0x416>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	4a58      	ldr	r2, [pc, #352]	; (800b0a0 <HAL_TIM_PWM_Start_DMA+0x4e8>)
 800af3e:	63da      	str	r2, [r3, #60]	; 0x3c
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af44:	4a57      	ldr	r2, [pc, #348]	; (800b0a4 <HAL_TIM_PWM_Start_DMA+0x4ec>)
 800af46:	641a      	str	r2, [r3, #64]	; 0x40
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4c:	4a56      	ldr	r2, [pc, #344]	; (800b0a8 <HAL_TIM_PWM_Start_DMA+0x4f0>)
 800af4e:	64da      	str	r2, [r3, #76]	; 0x4c
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	333c      	adds	r3, #60	; 0x3c
 800af5c:	461a      	mov	r2, r3
 800af5e:	887b      	ldrh	r3, [r7, #2]
 800af60:	f7fb fa1e 	bl	80063a0 <HAL_DMA_Start_IT>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <HAL_TIM_PWM_Start_DMA+0x3b6>
 800af6a:	2301      	movs	r3, #1
 800af6c:	e093      	b.n	800b096 <HAL_TIM_PWM_Start_DMA+0x4de>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68da      	ldr	r2, [r3, #12]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af7c:	60da      	str	r2, [r3, #12]
 800af7e:	e026      	b.n	800afce <HAL_TIM_PWM_Start_DMA+0x416>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af84:	4a46      	ldr	r2, [pc, #280]	; (800b0a0 <HAL_TIM_PWM_Start_DMA+0x4e8>)
 800af86:	63da      	str	r2, [r3, #60]	; 0x3c
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af8c:	4a45      	ldr	r2, [pc, #276]	; (800b0a4 <HAL_TIM_PWM_Start_DMA+0x4ec>)
 800af8e:	641a      	str	r2, [r3, #64]	; 0x40
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af94:	4a44      	ldr	r2, [pc, #272]	; (800b0a8 <HAL_TIM_PWM_Start_DMA+0x4f0>)
 800af96:	64da      	str	r2, [r3, #76]	; 0x4c
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af9c:	6879      	ldr	r1, [r7, #4]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3340      	adds	r3, #64	; 0x40
 800afa4:	461a      	mov	r2, r3
 800afa6:	887b      	ldrh	r3, [r7, #2]
 800afa8:	f7fb f9fa 	bl	80063a0 <HAL_DMA_Start_IT>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <HAL_TIM_PWM_Start_DMA+0x3fe>
 800afb2:	2301      	movs	r3, #1
 800afb4:	e06f      	b.n	800b096 <HAL_TIM_PWM_Start_DMA+0x4de>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68da      	ldr	r2, [r3, #12]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800afc4:	60da      	str	r2, [r3, #12]
 800afc6:	e002      	b.n	800afce <HAL_TIM_PWM_Start_DMA+0x416>
 800afc8:	2301      	movs	r3, #1
 800afca:	75fb      	strb	r3, [r7, #23]
 800afcc:	bf00      	nop
 800afce:	7dfb      	ldrb	r3, [r7, #23]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d15f      	bne.n	800b094 <HAL_TIM_PWM_Start_DMA+0x4dc>
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2201      	movs	r2, #1
 800afda:	68b9      	ldr	r1, [r7, #8]
 800afdc:	4618      	mov	r0, r3
 800afde:	f001 fcd9 	bl	800c994 <TIM_CCxChannelCmd>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a31      	ldr	r2, [pc, #196]	; (800b0ac <HAL_TIM_PWM_Start_DMA+0x4f4>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d004      	beq.n	800aff6 <HAL_TIM_PWM_Start_DMA+0x43e>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a2f      	ldr	r2, [pc, #188]	; (800b0b0 <HAL_TIM_PWM_Start_DMA+0x4f8>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d101      	bne.n	800affa <HAL_TIM_PWM_Start_DMA+0x442>
 800aff6:	2301      	movs	r3, #1
 800aff8:	e000      	b.n	800affc <HAL_TIM_PWM_Start_DMA+0x444>
 800affa:	2300      	movs	r3, #0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d007      	beq.n	800b010 <HAL_TIM_PWM_Start_DMA+0x458>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b00e:	645a      	str	r2, [r3, #68]	; 0x44
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a25      	ldr	r2, [pc, #148]	; (800b0ac <HAL_TIM_PWM_Start_DMA+0x4f4>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d022      	beq.n	800b060 <HAL_TIM_PWM_Start_DMA+0x4a8>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b022:	d01d      	beq.n	800b060 <HAL_TIM_PWM_Start_DMA+0x4a8>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a22      	ldr	r2, [pc, #136]	; (800b0b4 <HAL_TIM_PWM_Start_DMA+0x4fc>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d018      	beq.n	800b060 <HAL_TIM_PWM_Start_DMA+0x4a8>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a21      	ldr	r2, [pc, #132]	; (800b0b8 <HAL_TIM_PWM_Start_DMA+0x500>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d013      	beq.n	800b060 <HAL_TIM_PWM_Start_DMA+0x4a8>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a1f      	ldr	r2, [pc, #124]	; (800b0bc <HAL_TIM_PWM_Start_DMA+0x504>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d00e      	beq.n	800b060 <HAL_TIM_PWM_Start_DMA+0x4a8>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a1a      	ldr	r2, [pc, #104]	; (800b0b0 <HAL_TIM_PWM_Start_DMA+0x4f8>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d009      	beq.n	800b060 <HAL_TIM_PWM_Start_DMA+0x4a8>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a1b      	ldr	r2, [pc, #108]	; (800b0c0 <HAL_TIM_PWM_Start_DMA+0x508>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d004      	beq.n	800b060 <HAL_TIM_PWM_Start_DMA+0x4a8>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a1a      	ldr	r2, [pc, #104]	; (800b0c4 <HAL_TIM_PWM_Start_DMA+0x50c>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d111      	bne.n	800b084 <HAL_TIM_PWM_Start_DMA+0x4cc>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	613b      	str	r3, [r7, #16]
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	2b06      	cmp	r3, #6
 800b070:	d010      	beq.n	800b094 <HAL_TIM_PWM_Start_DMA+0x4dc>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f042 0201 	orr.w	r2, r2, #1
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	e007      	b.n	800b094 <HAL_TIM_PWM_Start_DMA+0x4dc>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f042 0201 	orr.w	r2, r2, #1
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	4618      	mov	r0, r3
 800b098:	3718      	adds	r7, #24
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	0800c19b 	.word	0x0800c19b
 800b0a4:	0800c243 	.word	0x0800c243
 800b0a8:	0800c109 	.word	0x0800c109
 800b0ac:	40010000 	.word	0x40010000
 800b0b0:	40010400 	.word	0x40010400
 800b0b4:	40000400 	.word	0x40000400
 800b0b8:	40000800 	.word	0x40000800
 800b0bc:	40000c00 	.word	0x40000c00
 800b0c0:	40014000 	.word	0x40014000
 800b0c4:	40001800 	.word	0x40001800

0800b0c8 <HAL_TIM_PWM_Stop_DMA>:
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73fb      	strb	r3, [r7, #15]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a8c      	ldr	r2, [pc, #560]	; (800b30c <HAL_TIM_PWM_Stop_DMA+0x244>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d10f      	bne.n	800b100 <HAL_TIM_PWM_Stop_DMA+0x38>
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 809f 	beq.w	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	2b04      	cmp	r3, #4
 800b0ec:	f000 809b 	beq.w	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	f000 8097 	beq.w	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b0c      	cmp	r3, #12
 800b0fc:	f000 8093 	beq.w	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b108:	d10e      	bne.n	800b128 <HAL_TIM_PWM_Stop_DMA+0x60>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 808a 	beq.w	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	2b04      	cmp	r3, #4
 800b116:	f000 8086 	beq.w	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b08      	cmp	r3, #8
 800b11e:	f000 8082 	beq.w	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b0c      	cmp	r3, #12
 800b126:	d07e      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a78      	ldr	r2, [pc, #480]	; (800b310 <HAL_TIM_PWM_Stop_DMA+0x248>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d10b      	bne.n	800b14a <HAL_TIM_PWM_Stop_DMA+0x82>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d076      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	2b04      	cmp	r3, #4
 800b13c:	d073      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2b08      	cmp	r3, #8
 800b142:	d070      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	2b0c      	cmp	r3, #12
 800b148:	d06d      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a71      	ldr	r2, [pc, #452]	; (800b314 <HAL_TIM_PWM_Stop_DMA+0x24c>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d10b      	bne.n	800b16c <HAL_TIM_PWM_Stop_DMA+0xa4>
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d065      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b04      	cmp	r3, #4
 800b15e:	d062      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	2b08      	cmp	r3, #8
 800b164:	d05f      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b0c      	cmp	r3, #12
 800b16a:	d05c      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a69      	ldr	r2, [pc, #420]	; (800b318 <HAL_TIM_PWM_Stop_DMA+0x250>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d10b      	bne.n	800b18e <HAL_TIM_PWM_Stop_DMA+0xc6>
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d054      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	2b04      	cmp	r3, #4
 800b180:	d051      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b08      	cmp	r3, #8
 800b186:	d04e      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	2b0c      	cmp	r3, #12
 800b18c:	d04b      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a62      	ldr	r2, [pc, #392]	; (800b31c <HAL_TIM_PWM_Stop_DMA+0x254>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d10b      	bne.n	800b1b0 <HAL_TIM_PWM_Stop_DMA+0xe8>
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d043      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b04      	cmp	r3, #4
 800b1a2:	d040      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	2b08      	cmp	r3, #8
 800b1a8:	d03d      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b0c      	cmp	r3, #12
 800b1ae:	d03a      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a5a      	ldr	r2, [pc, #360]	; (800b320 <HAL_TIM_PWM_Stop_DMA+0x258>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d105      	bne.n	800b1c6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d032      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	2b04      	cmp	r3, #4
 800b1c4:	d02f      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a56      	ldr	r2, [pc, #344]	; (800b324 <HAL_TIM_PWM_Stop_DMA+0x25c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d102      	bne.n	800b1d6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d027      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a53      	ldr	r2, [pc, #332]	; (800b328 <HAL_TIM_PWM_Stop_DMA+0x260>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d102      	bne.n	800b1e6 <HAL_TIM_PWM_Stop_DMA+0x11e>
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d01f      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a50      	ldr	r2, [pc, #320]	; (800b32c <HAL_TIM_PWM_Stop_DMA+0x264>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d105      	bne.n	800b1fc <HAL_TIM_PWM_Stop_DMA+0x134>
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d017      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	d014      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a4b      	ldr	r2, [pc, #300]	; (800b330 <HAL_TIM_PWM_Stop_DMA+0x268>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d102      	bne.n	800b20c <HAL_TIM_PWM_Stop_DMA+0x144>
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00c      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a48      	ldr	r2, [pc, #288]	; (800b334 <HAL_TIM_PWM_Stop_DMA+0x26c>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d102      	bne.n	800b21c <HAL_TIM_PWM_Stop_DMA+0x154>
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d004      	beq.n	800b226 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800b21c:	f240 7154 	movw	r1, #1876	; 0x754
 800b220:	4845      	ldr	r0, [pc, #276]	; (800b338 <HAL_TIM_PWM_Stop_DMA+0x270>)
 800b222:	f7f7 f868 	bl	80022f6 <assert_failed>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b0c      	cmp	r3, #12
 800b22a:	d855      	bhi.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0x210>
 800b22c:	a201      	add	r2, pc, #4	; (adr r2, 800b234 <HAL_TIM_PWM_Stop_DMA+0x16c>)
 800b22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b232:	bf00      	nop
 800b234:	0800b269 	.word	0x0800b269
 800b238:	0800b2d9 	.word	0x0800b2d9
 800b23c:	0800b2d9 	.word	0x0800b2d9
 800b240:	0800b2d9 	.word	0x0800b2d9
 800b244:	0800b285 	.word	0x0800b285
 800b248:	0800b2d9 	.word	0x0800b2d9
 800b24c:	0800b2d9 	.word	0x0800b2d9
 800b250:	0800b2d9 	.word	0x0800b2d9
 800b254:	0800b2a1 	.word	0x0800b2a1
 800b258:	0800b2d9 	.word	0x0800b2d9
 800b25c:	0800b2d9 	.word	0x0800b2d9
 800b260:	0800b2d9 	.word	0x0800b2d9
 800b264:	0800b2bd 	.word	0x0800b2bd
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68da      	ldr	r2, [r3, #12]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b276:	60da      	str	r2, [r3, #12]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fb f965 	bl	800654c <HAL_DMA_Abort_IT>
 800b282:	e02c      	b.n	800b2de <HAL_TIM_PWM_Stop_DMA+0x216>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68da      	ldr	r2, [r3, #12]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b292:	60da      	str	r2, [r3, #12]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fb f957 	bl	800654c <HAL_DMA_Abort_IT>
 800b29e:	e01e      	b.n	800b2de <HAL_TIM_PWM_Stop_DMA+0x216>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68da      	ldr	r2, [r3, #12]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2ae:	60da      	str	r2, [r3, #12]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fb f949 	bl	800654c <HAL_DMA_Abort_IT>
 800b2ba:	e010      	b.n	800b2de <HAL_TIM_PWM_Stop_DMA+0x216>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b2ca:	60da      	str	r2, [r3, #12]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fb f93b 	bl	800654c <HAL_DMA_Abort_IT>
 800b2d6:	e002      	b.n	800b2de <HAL_TIM_PWM_Stop_DMA+0x216>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	73fb      	strb	r3, [r7, #15]
 800b2dc:	bf00      	nop
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d17a      	bne.n	800b3da <HAL_TIM_PWM_Stop_DMA+0x312>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f001 fb51 	bl	800c994 <TIM_CCxChannelCmd>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a05      	ldr	r2, [pc, #20]	; (800b30c <HAL_TIM_PWM_Stop_DMA+0x244>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d004      	beq.n	800b306 <HAL_TIM_PWM_Stop_DMA+0x23e>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a06      	ldr	r2, [pc, #24]	; (800b31c <HAL_TIM_PWM_Stop_DMA+0x254>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d11a      	bne.n	800b33c <HAL_TIM_PWM_Stop_DMA+0x274>
 800b306:	2301      	movs	r3, #1
 800b308:	e019      	b.n	800b33e <HAL_TIM_PWM_Stop_DMA+0x276>
 800b30a:	bf00      	nop
 800b30c:	40010000 	.word	0x40010000
 800b310:	40000400 	.word	0x40000400
 800b314:	40000800 	.word	0x40000800
 800b318:	40000c00 	.word	0x40000c00
 800b31c:	40010400 	.word	0x40010400
 800b320:	40014000 	.word	0x40014000
 800b324:	40014400 	.word	0x40014400
 800b328:	40014800 	.word	0x40014800
 800b32c:	40001800 	.word	0x40001800
 800b330:	40001c00 	.word	0x40001c00
 800b334:	40002000 	.word	0x40002000
 800b338:	080189a0 	.word	0x080189a0
 800b33c:	2300      	movs	r3, #0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d017      	beq.n	800b372 <HAL_TIM_PWM_Stop_DMA+0x2aa>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	6a1a      	ldr	r2, [r3, #32]
 800b348:	f241 1311 	movw	r3, #4369	; 0x1111
 800b34c:	4013      	ands	r3, r2
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10f      	bne.n	800b372 <HAL_TIM_PWM_Stop_DMA+0x2aa>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6a1a      	ldr	r2, [r3, #32]
 800b358:	f240 4344 	movw	r3, #1092	; 0x444
 800b35c:	4013      	ands	r3, r2
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d107      	bne.n	800b372 <HAL_TIM_PWM_Stop_DMA+0x2aa>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b370:	645a      	str	r2, [r3, #68]	; 0x44
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6a1a      	ldr	r2, [r3, #32]
 800b378:	f241 1311 	movw	r3, #4369	; 0x1111
 800b37c:	4013      	ands	r3, r2
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10f      	bne.n	800b3a2 <HAL_TIM_PWM_Stop_DMA+0x2da>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6a1a      	ldr	r2, [r3, #32]
 800b388:	f240 4344 	movw	r3, #1092	; 0x444
 800b38c:	4013      	ands	r3, r2
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d107      	bne.n	800b3a2 <HAL_TIM_PWM_Stop_DMA+0x2da>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f022 0201 	bic.w	r2, r2, #1
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d104      	bne.n	800b3b2 <HAL_TIM_PWM_Stop_DMA+0x2ea>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3b0:	e013      	b.n	800b3da <HAL_TIM_PWM_Stop_DMA+0x312>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b04      	cmp	r3, #4
 800b3b6:	d104      	bne.n	800b3c2 <HAL_TIM_PWM_Stop_DMA+0x2fa>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3c0:	e00b      	b.n	800b3da <HAL_TIM_PWM_Stop_DMA+0x312>
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b08      	cmp	r3, #8
 800b3c6:	d104      	bne.n	800b3d2 <HAL_TIM_PWM_Stop_DMA+0x30a>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3d0:	e003      	b.n	800b3da <HAL_TIM_PWM_Stop_DMA+0x312>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <HAL_TIM_IRQHandler>:
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	f003 0302 	and.w	r3, r3, #2
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d122      	bne.n	800b440 <HAL_TIM_IRQHandler+0x5c>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	f003 0302 	and.w	r3, r3, #2
 800b404:	2b02      	cmp	r3, #2
 800b406:	d11b      	bne.n	800b440 <HAL_TIM_IRQHandler+0x5c>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f06f 0202 	mvn.w	r2, #2
 800b410:	611a      	str	r2, [r3, #16]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	771a      	strb	r2, [r3, #28]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	f003 0303 	and.w	r3, r3, #3
 800b422:	2b00      	cmp	r3, #0
 800b424:	d003      	beq.n	800b42e <HAL_TIM_IRQHandler+0x4a>
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fe46 	bl	800c0b8 <HAL_TIM_IC_CaptureCallback>
 800b42c:	e005      	b.n	800b43a <HAL_TIM_IRQHandler+0x56>
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fe38 	bl	800c0a4 <HAL_TIM_OC_DelayElapsedCallback>
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7f7 fa23 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	771a      	strb	r2, [r3, #28]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	f003 0304 	and.w	r3, r3, #4
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d122      	bne.n	800b494 <HAL_TIM_IRQHandler+0xb0>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	f003 0304 	and.w	r3, r3, #4
 800b458:	2b04      	cmp	r3, #4
 800b45a:	d11b      	bne.n	800b494 <HAL_TIM_IRQHandler+0xb0>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f06f 0204 	mvn.w	r2, #4
 800b464:	611a      	str	r2, [r3, #16]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2202      	movs	r2, #2
 800b46a:	771a      	strb	r2, [r3, #28]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <HAL_TIM_IRQHandler+0x9e>
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fe1c 	bl	800c0b8 <HAL_TIM_IC_CaptureCallback>
 800b480:	e005      	b.n	800b48e <HAL_TIM_IRQHandler+0xaa>
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fe0e 	bl	800c0a4 <HAL_TIM_OC_DelayElapsedCallback>
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7f7 f9f9 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	771a      	strb	r2, [r3, #28]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	f003 0308 	and.w	r3, r3, #8
 800b49e:	2b08      	cmp	r3, #8
 800b4a0:	d122      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x104>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	f003 0308 	and.w	r3, r3, #8
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d11b      	bne.n	800b4e8 <HAL_TIM_IRQHandler+0x104>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f06f 0208 	mvn.w	r2, #8
 800b4b8:	611a      	str	r2, [r3, #16]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2204      	movs	r2, #4
 800b4be:	771a      	strb	r2, [r3, #28]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	69db      	ldr	r3, [r3, #28]
 800b4c6:	f003 0303 	and.w	r3, r3, #3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <HAL_TIM_IRQHandler+0xf2>
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fdf2 	bl	800c0b8 <HAL_TIM_IC_CaptureCallback>
 800b4d4:	e005      	b.n	800b4e2 <HAL_TIM_IRQHandler+0xfe>
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fde4 	bl	800c0a4 <HAL_TIM_OC_DelayElapsedCallback>
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7f7 f9cf 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	771a      	strb	r2, [r3, #28]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	f003 0310 	and.w	r3, r3, #16
 800b4f2:	2b10      	cmp	r3, #16
 800b4f4:	d122      	bne.n	800b53c <HAL_TIM_IRQHandler+0x158>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	f003 0310 	and.w	r3, r3, #16
 800b500:	2b10      	cmp	r3, #16
 800b502:	d11b      	bne.n	800b53c <HAL_TIM_IRQHandler+0x158>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f06f 0210 	mvn.w	r2, #16
 800b50c:	611a      	str	r2, [r3, #16]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2208      	movs	r2, #8
 800b512:	771a      	strb	r2, [r3, #28]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_TIM_IRQHandler+0x146>
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fdc8 	bl	800c0b8 <HAL_TIM_IC_CaptureCallback>
 800b528:	e005      	b.n	800b536 <HAL_TIM_IRQHandler+0x152>
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 fdba 	bl	800c0a4 <HAL_TIM_OC_DelayElapsedCallback>
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7f7 f9a5 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	771a      	strb	r2, [r3, #28]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	2b01      	cmp	r3, #1
 800b548:	d10e      	bne.n	800b568 <HAL_TIM_IRQHandler+0x184>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b01      	cmp	r3, #1
 800b556:	d107      	bne.n	800b568 <HAL_TIM_IRQHandler+0x184>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f06f 0201 	mvn.w	r2, #1
 800b560:	611a      	str	r2, [r3, #16]
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7f6 feb0 	bl	80022c8 <HAL_TIM_PeriodElapsedCallback>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b572:	2b80      	cmp	r3, #128	; 0x80
 800b574:	d10e      	bne.n	800b594 <HAL_TIM_IRQHandler+0x1b0>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b580:	2b80      	cmp	r3, #128	; 0x80
 800b582:	d107      	bne.n	800b594 <HAL_TIM_IRQHandler+0x1b0>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b58c:	611a      	str	r2, [r3, #16]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f001 fb6c 	bl	800cc6c <HAL_TIMEx_BreakCallback>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b59e:	2b40      	cmp	r3, #64	; 0x40
 800b5a0:	d10e      	bne.n	800b5c0 <HAL_TIM_IRQHandler+0x1dc>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ac:	2b40      	cmp	r3, #64	; 0x40
 800b5ae:	d107      	bne.n	800b5c0 <HAL_TIM_IRQHandler+0x1dc>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5b8:	611a      	str	r2, [r3, #16]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fd90 	bl	800c0e0 <HAL_TIM_TriggerCallback>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	f003 0320 	and.w	r3, r3, #32
 800b5ca:	2b20      	cmp	r3, #32
 800b5cc:	d10e      	bne.n	800b5ec <HAL_TIM_IRQHandler+0x208>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	f003 0320 	and.w	r3, r3, #32
 800b5d8:	2b20      	cmp	r3, #32
 800b5da:	d107      	bne.n	800b5ec <HAL_TIM_IRQHandler+0x208>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f06f 0220 	mvn.w	r2, #32
 800b5e4:	611a      	str	r2, [r3, #16]
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f001 fb36 	bl	800cc58 <HAL_TIMEx_CommutCallback>
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <HAL_TIM_PWM_ConfigChannel>:
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	2300      	movs	r3, #0
 800b602:	75fb      	strb	r3, [r7, #23]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d010      	beq.n	800b62c <HAL_TIM_PWM_ConfigChannel+0x38>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d00d      	beq.n	800b62c <HAL_TIM_PWM_ConfigChannel+0x38>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b08      	cmp	r3, #8
 800b614:	d00a      	beq.n	800b62c <HAL_TIM_PWM_ConfigChannel+0x38>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b0c      	cmp	r3, #12
 800b61a:	d007      	beq.n	800b62c <HAL_TIM_PWM_ConfigChannel+0x38>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b3c      	cmp	r3, #60	; 0x3c
 800b620:	d004      	beq.n	800b62c <HAL_TIM_PWM_ConfigChannel+0x38>
 800b622:	f241 0177 	movw	r1, #4215	; 0x1077
 800b626:	4883      	ldr	r0, [pc, #524]	; (800b834 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800b628:	f7f6 fe65 	bl	80022f6 <assert_failed>
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b60      	cmp	r3, #96	; 0x60
 800b632:	d008      	beq.n	800b646 <HAL_TIM_PWM_ConfigChannel+0x52>
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b70      	cmp	r3, #112	; 0x70
 800b63a:	d004      	beq.n	800b646 <HAL_TIM_PWM_ConfigChannel+0x52>
 800b63c:	f241 0178 	movw	r1, #4216	; 0x1078
 800b640:	487c      	ldr	r0, [pc, #496]	; (800b834 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800b642:	f7f6 fe58 	bl	80022f6 <assert_failed>
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d008      	beq.n	800b660 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	2b02      	cmp	r3, #2
 800b654:	d004      	beq.n	800b660 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800b656:	f241 0179 	movw	r1, #4217	; 0x1079
 800b65a:	4876      	ldr	r0, [pc, #472]	; (800b834 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800b65c:	f7f6 fe4b 	bl	80022f6 <assert_failed>
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d008      	beq.n	800b67a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	d004      	beq.n	800b67a <HAL_TIM_PWM_ConfigChannel+0x86>
 800b670:	f241 017a 	movw	r1, #4218	; 0x107a
 800b674:	486f      	ldr	r0, [pc, #444]	; (800b834 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800b676:	f7f6 fe3e 	bl	80022f6 <assert_failed>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b680:	2b01      	cmp	r3, #1
 800b682:	d101      	bne.n	800b688 <HAL_TIM_PWM_ConfigChannel+0x94>
 800b684:	2302      	movs	r3, #2
 800b686:	e17c      	b.n	800b982 <HAL_TIM_PWM_ConfigChannel+0x38e>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b0c      	cmp	r3, #12
 800b694:	f200 816d 	bhi.w	800b972 <HAL_TIM_PWM_ConfigChannel+0x37e>
 800b698:	a201      	add	r2, pc, #4	; (adr r2, 800b6a0 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800b69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69e:	bf00      	nop
 800b6a0:	0800b6d5 	.word	0x0800b6d5
 800b6a4:	0800b973 	.word	0x0800b973
 800b6a8:	0800b973 	.word	0x0800b973
 800b6ac:	0800b973 	.word	0x0800b973
 800b6b0:	0800b797 	.word	0x0800b797
 800b6b4:	0800b973 	.word	0x0800b973
 800b6b8:	0800b973 	.word	0x0800b973
 800b6bc:	0800b973 	.word	0x0800b973
 800b6c0:	0800b865 	.word	0x0800b865
 800b6c4:	0800b973 	.word	0x0800b973
 800b6c8:	0800b973 	.word	0x0800b973
 800b6cc:	0800b973 	.word	0x0800b973
 800b6d0:	0800b8eb 	.word	0x0800b8eb
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a57      	ldr	r2, [pc, #348]	; (800b838 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d03b      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6e6:	d036      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a53      	ldr	r2, [pc, #332]	; (800b83c <HAL_TIM_PWM_ConfigChannel+0x248>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d031      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a52      	ldr	r2, [pc, #328]	; (800b840 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d02c      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a50      	ldr	r2, [pc, #320]	; (800b844 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d027      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a4f      	ldr	r2, [pc, #316]	; (800b848 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d022      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a4d      	ldr	r2, [pc, #308]	; (800b84c <HAL_TIM_PWM_ConfigChannel+0x258>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d01d      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a4c      	ldr	r2, [pc, #304]	; (800b850 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d018      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a4a      	ldr	r2, [pc, #296]	; (800b854 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d013      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a49      	ldr	r2, [pc, #292]	; (800b858 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d00e      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a47      	ldr	r2, [pc, #284]	; (800b85c <HAL_TIM_PWM_ConfigChannel+0x268>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d009      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a46      	ldr	r2, [pc, #280]	; (800b860 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d004      	beq.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x162>
 800b74c:	f241 0184 	movw	r1, #4228	; 0x1084
 800b750:	4838      	ldr	r0, [pc, #224]	; (800b834 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800b752:	f7f6 fdd0 	bl	80022f6 <assert_failed>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68b9      	ldr	r1, [r7, #8]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f000 fe45 	bl	800c3ec <TIM_OC1_SetConfig>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	699a      	ldr	r2, [r3, #24]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f042 0208 	orr.w	r2, r2, #8
 800b770:	619a      	str	r2, [r3, #24]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	699a      	ldr	r2, [r3, #24]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f022 0204 	bic.w	r2, r2, #4
 800b780:	619a      	str	r2, [r3, #24]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6999      	ldr	r1, [r3, #24]
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	691a      	ldr	r2, [r3, #16]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	430a      	orrs	r2, r1
 800b792:	619a      	str	r2, [r3, #24]
 800b794:	e0f0      	b.n	800b978 <HAL_TIM_PWM_ConfigChannel+0x384>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a27      	ldr	r2, [pc, #156]	; (800b838 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d027      	beq.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7a8:	d022      	beq.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a23      	ldr	r2, [pc, #140]	; (800b83c <HAL_TIM_PWM_ConfigChannel+0x248>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d01d      	beq.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a21      	ldr	r2, [pc, #132]	; (800b840 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d018      	beq.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a20      	ldr	r2, [pc, #128]	; (800b844 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d013      	beq.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a1e      	ldr	r2, [pc, #120]	; (800b848 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d00e      	beq.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a1d      	ldr	r2, [pc, #116]	; (800b84c <HAL_TIM_PWM_ConfigChannel+0x258>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d009      	beq.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a1d      	ldr	r2, [pc, #116]	; (800b858 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d004      	beq.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800b7e6:	f241 0195 	movw	r1, #4245	; 0x1095
 800b7ea:	4812      	ldr	r0, [pc, #72]	; (800b834 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800b7ec:	f7f6 fd83 	bl	80022f6 <assert_failed>
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68b9      	ldr	r1, [r7, #8]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 fe92 	bl	800c520 <TIM_OC2_SetConfig>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	699a      	ldr	r2, [r3, #24]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b80a:	619a      	str	r2, [r3, #24]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	699a      	ldr	r2, [r3, #24]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b81a:	619a      	str	r2, [r3, #24]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6999      	ldr	r1, [r3, #24]
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	021a      	lsls	r2, r3, #8
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	430a      	orrs	r2, r1
 800b82e:	619a      	str	r2, [r3, #24]
 800b830:	e0a2      	b.n	800b978 <HAL_TIM_PWM_ConfigChannel+0x384>
 800b832:	bf00      	nop
 800b834:	080189a0 	.word	0x080189a0
 800b838:	40010000 	.word	0x40010000
 800b83c:	40000400 	.word	0x40000400
 800b840:	40000800 	.word	0x40000800
 800b844:	40000c00 	.word	0x40000c00
 800b848:	40010400 	.word	0x40010400
 800b84c:	40014000 	.word	0x40014000
 800b850:	40014400 	.word	0x40014400
 800b854:	40014800 	.word	0x40014800
 800b858:	40001800 	.word	0x40001800
 800b85c:	40001c00 	.word	0x40001c00
 800b860:	40002000 	.word	0x40002000
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a48      	ldr	r2, [pc, #288]	; (800b98c <HAL_TIM_PWM_ConfigChannel+0x398>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d01d      	beq.n	800b8aa <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b876:	d018      	beq.n	800b8aa <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a44      	ldr	r2, [pc, #272]	; (800b990 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d013      	beq.n	800b8aa <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a43      	ldr	r2, [pc, #268]	; (800b994 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d00e      	beq.n	800b8aa <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a41      	ldr	r2, [pc, #260]	; (800b998 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d009      	beq.n	800b8aa <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a40      	ldr	r2, [pc, #256]	; (800b99c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d004      	beq.n	800b8aa <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800b8a0:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800b8a4:	483e      	ldr	r0, [pc, #248]	; (800b9a0 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800b8a6:	f7f6 fd26 	bl	80022f6 <assert_failed>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68b9      	ldr	r1, [r7, #8]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f000 fed3 	bl	800c65c <TIM_OC3_SetConfig>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	69da      	ldr	r2, [r3, #28]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f042 0208 	orr.w	r2, r2, #8
 800b8c4:	61da      	str	r2, [r3, #28]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	69da      	ldr	r2, [r3, #28]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f022 0204 	bic.w	r2, r2, #4
 800b8d4:	61da      	str	r2, [r3, #28]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	69d9      	ldr	r1, [r3, #28]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	691a      	ldr	r2, [r3, #16]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	430a      	orrs	r2, r1
 800b8e6:	61da      	str	r2, [r3, #28]
 800b8e8:	e046      	b.n	800b978 <HAL_TIM_PWM_ConfigChannel+0x384>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a27      	ldr	r2, [pc, #156]	; (800b98c <HAL_TIM_PWM_ConfigChannel+0x398>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d01d      	beq.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8fc:	d018      	beq.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a23      	ldr	r2, [pc, #140]	; (800b990 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d013      	beq.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a21      	ldr	r2, [pc, #132]	; (800b994 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d00e      	beq.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a20      	ldr	r2, [pc, #128]	; (800b998 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d009      	beq.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a1e      	ldr	r2, [pc, #120]	; (800b99c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d004      	beq.n	800b930 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800b926:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800b92a:	481d      	ldr	r0, [pc, #116]	; (800b9a0 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800b92c:	f7f6 fce3 	bl	80022f6 <assert_failed>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68b9      	ldr	r1, [r7, #8]
 800b936:	4618      	mov	r0, r3
 800b938:	f000 ff2e 	bl	800c798 <TIM_OC4_SetConfig>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	69da      	ldr	r2, [r3, #28]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b94a:	61da      	str	r2, [r3, #28]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	69da      	ldr	r2, [r3, #28]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b95a:	61da      	str	r2, [r3, #28]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	69d9      	ldr	r1, [r3, #28]
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	021a      	lsls	r2, r3, #8
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	430a      	orrs	r2, r1
 800b96e:	61da      	str	r2, [r3, #28]
 800b970:	e002      	b.n	800b978 <HAL_TIM_PWM_ConfigChannel+0x384>
 800b972:	2301      	movs	r3, #1
 800b974:	75fb      	strb	r3, [r7, #23]
 800b976:	bf00      	nop
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b980:	7dfb      	ldrb	r3, [r7, #23]
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	40010000 	.word	0x40010000
 800b990:	40000400 	.word	0x40000400
 800b994:	40000800 	.word	0x40000800
 800b998:	40000c00 	.word	0x40000c00
 800b99c:	40010400 	.word	0x40010400
 800b9a0:	080189a0 	.word	0x080189a0

0800b9a4 <HAL_TIM_ConfigClockSource>:
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	73fb      	strb	r3, [r7, #15]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d101      	bne.n	800b9c0 <HAL_TIM_ConfigClockSource+0x1c>
 800b9bc:	2302      	movs	r3, #2
 800b9be:	e35c      	b.n	800c07a <HAL_TIM_ConfigClockSource+0x6d6>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9d8:	d029      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x8a>
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b70      	cmp	r3, #112	; 0x70
 800b9e0:	d025      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x8a>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9ea:	d020      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x8a>
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b40      	cmp	r3, #64	; 0x40
 800b9f2:	d01c      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x8a>
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b50      	cmp	r3, #80	; 0x50
 800b9fa:	d018      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x8a>
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b60      	cmp	r3, #96	; 0x60
 800ba02:	d014      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x8a>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d010      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x8a>
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b10      	cmp	r3, #16
 800ba12:	d00c      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x8a>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b20      	cmp	r3, #32
 800ba1a:	d008      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x8a>
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2b30      	cmp	r3, #48	; 0x30
 800ba22:	d004      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x8a>
 800ba24:	f241 41b7 	movw	r1, #5303	; 0x14b7
 800ba28:	4893      	ldr	r0, [pc, #588]	; (800bc78 <HAL_TIM_ConfigClockSource+0x2d4>)
 800ba2a:	f7f6 fc64 	bl	80022f6 <assert_failed>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	60bb      	str	r3, [r7, #8]
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ba3c:	60bb      	str	r3, [r7, #8]
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba44:	60bb      	str	r3, [r7, #8]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	609a      	str	r2, [r3, #8]
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba56:	f000 812b 	beq.w	800bcb0 <HAL_TIM_ConfigClockSource+0x30c>
 800ba5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba5e:	f200 82ff 	bhi.w	800c060 <HAL_TIM_ConfigClockSource+0x6bc>
 800ba62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba66:	d02e      	beq.n	800bac6 <HAL_TIM_ConfigClockSource+0x122>
 800ba68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba6c:	f200 82f8 	bhi.w	800c060 <HAL_TIM_ConfigClockSource+0x6bc>
 800ba70:	2b70      	cmp	r3, #112	; 0x70
 800ba72:	f000 8082 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1d6>
 800ba76:	2b70      	cmp	r3, #112	; 0x70
 800ba78:	f200 82f2 	bhi.w	800c060 <HAL_TIM_ConfigClockSource+0x6bc>
 800ba7c:	2b60      	cmp	r3, #96	; 0x60
 800ba7e:	f000 81f9 	beq.w	800be74 <HAL_TIM_ConfigClockSource+0x4d0>
 800ba82:	2b60      	cmp	r3, #96	; 0x60
 800ba84:	f200 82ec 	bhi.w	800c060 <HAL_TIM_ConfigClockSource+0x6bc>
 800ba88:	2b50      	cmp	r3, #80	; 0x50
 800ba8a:	f000 8182 	beq.w	800bd92 <HAL_TIM_ConfigClockSource+0x3ee>
 800ba8e:	2b50      	cmp	r3, #80	; 0x50
 800ba90:	f200 82e6 	bhi.w	800c060 <HAL_TIM_ConfigClockSource+0x6bc>
 800ba94:	2b40      	cmp	r3, #64	; 0x40
 800ba96:	f000 824d 	beq.w	800bf34 <HAL_TIM_ConfigClockSource+0x590>
 800ba9a:	2b40      	cmp	r3, #64	; 0x40
 800ba9c:	f200 82e0 	bhi.w	800c060 <HAL_TIM_ConfigClockSource+0x6bc>
 800baa0:	2b30      	cmp	r3, #48	; 0x30
 800baa2:	f000 82a7 	beq.w	800bff4 <HAL_TIM_ConfigClockSource+0x650>
 800baa6:	2b30      	cmp	r3, #48	; 0x30
 800baa8:	f200 82da 	bhi.w	800c060 <HAL_TIM_ConfigClockSource+0x6bc>
 800baac:	2b20      	cmp	r3, #32
 800baae:	f000 82a1 	beq.w	800bff4 <HAL_TIM_ConfigClockSource+0x650>
 800bab2:	2b20      	cmp	r3, #32
 800bab4:	f200 82d4 	bhi.w	800c060 <HAL_TIM_ConfigClockSource+0x6bc>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f000 829b 	beq.w	800bff4 <HAL_TIM_ConfigClockSource+0x650>
 800babe:	2b10      	cmp	r3, #16
 800bac0:	f000 8298 	beq.w	800bff4 <HAL_TIM_ConfigClockSource+0x650>
 800bac4:	e2cc      	b.n	800c060 <HAL_TIM_ConfigClockSource+0x6bc>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a6c      	ldr	r2, [pc, #432]	; (800bc7c <HAL_TIM_ConfigClockSource+0x2d8>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	f000 82ca 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bada:	f000 82c4 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a67      	ldr	r2, [pc, #412]	; (800bc80 <HAL_TIM_ConfigClockSource+0x2dc>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	f000 82be 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a65      	ldr	r2, [pc, #404]	; (800bc84 <HAL_TIM_ConfigClockSource+0x2e0>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	f000 82b8 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a63      	ldr	r2, [pc, #396]	; (800bc88 <HAL_TIM_ConfigClockSource+0x2e4>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	f000 82b2 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a61      	ldr	r2, [pc, #388]	; (800bc8c <HAL_TIM_ConfigClockSource+0x2e8>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	f000 82ac 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a5f      	ldr	r2, [pc, #380]	; (800bc90 <HAL_TIM_ConfigClockSource+0x2ec>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	f000 82a6 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a5d      	ldr	r2, [pc, #372]	; (800bc94 <HAL_TIM_ConfigClockSource+0x2f0>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	f000 82a0 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a5b      	ldr	r2, [pc, #364]	; (800bc98 <HAL_TIM_ConfigClockSource+0x2f4>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	f000 829a 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a59      	ldr	r2, [pc, #356]	; (800bc9c <HAL_TIM_ConfigClockSource+0x2f8>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	f000 8294 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a57      	ldr	r2, [pc, #348]	; (800bca0 <HAL_TIM_ConfigClockSource+0x2fc>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	f000 828e 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a55      	ldr	r2, [pc, #340]	; (800bca4 <HAL_TIM_ConfigClockSource+0x300>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	f000 8288 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a53      	ldr	r2, [pc, #332]	; (800bca8 <HAL_TIM_ConfigClockSource+0x304>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	f000 8282 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a51      	ldr	r2, [pc, #324]	; (800bcac <HAL_TIM_ConfigClockSource+0x308>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	f000 827c 	beq.w	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb6e:	f241 41c3 	movw	r1, #5315	; 0x14c3
 800bb72:	4841      	ldr	r0, [pc, #260]	; (800bc78 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bb74:	f7f6 fbbf 	bl	80022f6 <assert_failed>
 800bb78:	e275      	b.n	800c066 <HAL_TIM_ConfigClockSource+0x6c2>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a3f      	ldr	r2, [pc, #252]	; (800bc7c <HAL_TIM_ConfigClockSource+0x2d8>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d027      	beq.n	800bbd4 <HAL_TIM_ConfigClockSource+0x230>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb8c:	d022      	beq.n	800bbd4 <HAL_TIM_ConfigClockSource+0x230>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a3b      	ldr	r2, [pc, #236]	; (800bc80 <HAL_TIM_ConfigClockSource+0x2dc>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d01d      	beq.n	800bbd4 <HAL_TIM_ConfigClockSource+0x230>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a39      	ldr	r2, [pc, #228]	; (800bc84 <HAL_TIM_ConfigClockSource+0x2e0>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d018      	beq.n	800bbd4 <HAL_TIM_ConfigClockSource+0x230>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a38      	ldr	r2, [pc, #224]	; (800bc88 <HAL_TIM_ConfigClockSource+0x2e4>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d013      	beq.n	800bbd4 <HAL_TIM_ConfigClockSource+0x230>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a38      	ldr	r2, [pc, #224]	; (800bc94 <HAL_TIM_ConfigClockSource+0x2f0>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d00e      	beq.n	800bbd4 <HAL_TIM_ConfigClockSource+0x230>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a37      	ldr	r2, [pc, #220]	; (800bc98 <HAL_TIM_ConfigClockSource+0x2f4>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d009      	beq.n	800bbd4 <HAL_TIM_ConfigClockSource+0x230>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a37      	ldr	r2, [pc, #220]	; (800bca4 <HAL_TIM_ConfigClockSource+0x300>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d004      	beq.n	800bbd4 <HAL_TIM_ConfigClockSource+0x230>
 800bbca:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800bbce:	482a      	ldr	r0, [pc, #168]	; (800bc78 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bbd0:	f7f6 fb91 	bl	80022f6 <assert_failed>
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d013      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x260>
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbe4:	d00e      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x260>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbee:	d009      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x260>
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbf8:	d004      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x260>
 800bbfa:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800bbfe:	481e      	ldr	r0, [pc, #120]	; (800bc78 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bc00:	f7f6 fb79 	bl	80022f6 <assert_failed>
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc0c:	d014      	beq.n	800bc38 <HAL_TIM_ConfigClockSource+0x294>
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d010      	beq.n	800bc38 <HAL_TIM_ConfigClockSource+0x294>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00c      	beq.n	800bc38 <HAL_TIM_ConfigClockSource+0x294>
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d008      	beq.n	800bc38 <HAL_TIM_ConfigClockSource+0x294>
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	2b0a      	cmp	r3, #10
 800bc2c:	d004      	beq.n	800bc38 <HAL_TIM_ConfigClockSource+0x294>
 800bc2e:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800bc32:	4811      	ldr	r0, [pc, #68]	; (800bc78 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bc34:	f7f6 fb5f 	bl	80022f6 <assert_failed>
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	2b0f      	cmp	r3, #15
 800bc3e:	d904      	bls.n	800bc4a <HAL_TIM_ConfigClockSource+0x2a6>
 800bc40:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800bc44:	480c      	ldr	r0, [pc, #48]	; (800bc78 <HAL_TIM_ConfigClockSource+0x2d4>)
 800bc46:	f7f6 fb56 	bl	80022f6 <assert_failed>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6818      	ldr	r0, [r3, #0]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	6899      	ldr	r1, [r3, #8]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	685a      	ldr	r2, [r3, #4]
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	f000 fe7b 	bl	800c954 <TIM_ETR_SetConfig>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	60bb      	str	r3, [r7, #8]
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc6c:	60bb      	str	r3, [r7, #8]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	609a      	str	r2, [r3, #8]
 800bc76:	e1f7      	b.n	800c068 <HAL_TIM_ConfigClockSource+0x6c4>
 800bc78:	080189a0 	.word	0x080189a0
 800bc7c:	40010000 	.word	0x40010000
 800bc80:	40000400 	.word	0x40000400
 800bc84:	40000800 	.word	0x40000800
 800bc88:	40000c00 	.word	0x40000c00
 800bc8c:	40001000 	.word	0x40001000
 800bc90:	40001400 	.word	0x40001400
 800bc94:	40010400 	.word	0x40010400
 800bc98:	40014000 	.word	0x40014000
 800bc9c:	40014400 	.word	0x40014400
 800bca0:	40014800 	.word	0x40014800
 800bca4:	40001800 	.word	0x40001800
 800bca8:	40001c00 	.word	0x40001c00
 800bcac:	40002000 	.word	0x40002000
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a67      	ldr	r2, [pc, #412]	; (800be54 <HAL_TIM_ConfigClockSource+0x4b0>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d01d      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x352>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcc2:	d018      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x352>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a63      	ldr	r2, [pc, #396]	; (800be58 <HAL_TIM_ConfigClockSource+0x4b4>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d013      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x352>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a62      	ldr	r2, [pc, #392]	; (800be5c <HAL_TIM_ConfigClockSource+0x4b8>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d00e      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x352>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a60      	ldr	r2, [pc, #384]	; (800be60 <HAL_TIM_ConfigClockSource+0x4bc>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d009      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x352>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a5f      	ldr	r2, [pc, #380]	; (800be64 <HAL_TIM_ConfigClockSource+0x4c0>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d004      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x352>
 800bcec:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800bcf0:	485d      	ldr	r0, [pc, #372]	; (800be68 <HAL_TIM_ConfigClockSource+0x4c4>)
 800bcf2:	f7f6 fb00 	bl	80022f6 <assert_failed>
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d013      	beq.n	800bd26 <HAL_TIM_ConfigClockSource+0x382>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd06:	d00e      	beq.n	800bd26 <HAL_TIM_ConfigClockSource+0x382>
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd10:	d009      	beq.n	800bd26 <HAL_TIM_ConfigClockSource+0x382>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bd1a:	d004      	beq.n	800bd26 <HAL_TIM_ConfigClockSource+0x382>
 800bd1c:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800bd20:	4851      	ldr	r0, [pc, #324]	; (800be68 <HAL_TIM_ConfigClockSource+0x4c4>)
 800bd22:	f7f6 fae8 	bl	80022f6 <assert_failed>
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd2e:	d014      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0x3b6>
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d010      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0x3b6>
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00c      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0x3b6>
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d008      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0x3b6>
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	2b0a      	cmp	r3, #10
 800bd4e:	d004      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0x3b6>
 800bd50:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800bd54:	4844      	ldr	r0, [pc, #272]	; (800be68 <HAL_TIM_ConfigClockSource+0x4c4>)
 800bd56:	f7f6 face 	bl	80022f6 <assert_failed>
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	2b0f      	cmp	r3, #15
 800bd60:	d904      	bls.n	800bd6c <HAL_TIM_ConfigClockSource+0x3c8>
 800bd62:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800bd66:	4840      	ldr	r0, [pc, #256]	; (800be68 <HAL_TIM_ConfigClockSource+0x4c4>)
 800bd68:	f7f6 fac5 	bl	80022f6 <assert_failed>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6818      	ldr	r0, [r3, #0]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	6899      	ldr	r1, [r3, #8]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	f000 fdea 	bl	800c954 <TIM_ETR_SetConfig>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	689a      	ldr	r2, [r3, #8]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd8e:	609a      	str	r2, [r3, #8]
 800bd90:	e16a      	b.n	800c068 <HAL_TIM_ConfigClockSource+0x6c4>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a2f      	ldr	r2, [pc, #188]	; (800be54 <HAL_TIM_ConfigClockSource+0x4b0>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d027      	beq.n	800bdec <HAL_TIM_ConfigClockSource+0x448>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bda4:	d022      	beq.n	800bdec <HAL_TIM_ConfigClockSource+0x448>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a2b      	ldr	r2, [pc, #172]	; (800be58 <HAL_TIM_ConfigClockSource+0x4b4>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d01d      	beq.n	800bdec <HAL_TIM_ConfigClockSource+0x448>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a29      	ldr	r2, [pc, #164]	; (800be5c <HAL_TIM_ConfigClockSource+0x4b8>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d018      	beq.n	800bdec <HAL_TIM_ConfigClockSource+0x448>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a28      	ldr	r2, [pc, #160]	; (800be60 <HAL_TIM_ConfigClockSource+0x4bc>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d013      	beq.n	800bdec <HAL_TIM_ConfigClockSource+0x448>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a26      	ldr	r2, [pc, #152]	; (800be64 <HAL_TIM_ConfigClockSource+0x4c0>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d00e      	beq.n	800bdec <HAL_TIM_ConfigClockSource+0x448>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a26      	ldr	r2, [pc, #152]	; (800be6c <HAL_TIM_ConfigClockSource+0x4c8>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d009      	beq.n	800bdec <HAL_TIM_ConfigClockSource+0x448>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a24      	ldr	r2, [pc, #144]	; (800be70 <HAL_TIM_ConfigClockSource+0x4cc>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d004      	beq.n	800bdec <HAL_TIM_ConfigClockSource+0x448>
 800bde2:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800bde6:	4820      	ldr	r0, [pc, #128]	; (800be68 <HAL_TIM_ConfigClockSource+0x4c4>)
 800bde8:	f7f6 fa85 	bl	80022f6 <assert_failed>
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdf4:	d014      	beq.n	800be20 <HAL_TIM_ConfigClockSource+0x47c>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d010      	beq.n	800be20 <HAL_TIM_ConfigClockSource+0x47c>
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00c      	beq.n	800be20 <HAL_TIM_ConfigClockSource+0x47c>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d008      	beq.n	800be20 <HAL_TIM_ConfigClockSource+0x47c>
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	2b0a      	cmp	r3, #10
 800be14:	d004      	beq.n	800be20 <HAL_TIM_ConfigClockSource+0x47c>
 800be16:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800be1a:	4813      	ldr	r0, [pc, #76]	; (800be68 <HAL_TIM_ConfigClockSource+0x4c4>)
 800be1c:	f7f6 fa6b 	bl	80022f6 <assert_failed>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	2b0f      	cmp	r3, #15
 800be26:	d904      	bls.n	800be32 <HAL_TIM_ConfigClockSource+0x48e>
 800be28:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800be2c:	480e      	ldr	r0, [pc, #56]	; (800be68 <HAL_TIM_ConfigClockSource+0x4c4>)
 800be2e:	f7f6 fa62 	bl	80022f6 <assert_failed>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6818      	ldr	r0, [r3, #0]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	6859      	ldr	r1, [r3, #4]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	461a      	mov	r2, r3
 800be40:	f000 fd0e 	bl	800c860 <TIM_TI1_ConfigInputStage>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2150      	movs	r1, #80	; 0x50
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 fd67 	bl	800c91e <TIM_ITRx_SetConfig>
 800be50:	e10a      	b.n	800c068 <HAL_TIM_ConfigClockSource+0x6c4>
 800be52:	bf00      	nop
 800be54:	40010000 	.word	0x40010000
 800be58:	40000400 	.word	0x40000400
 800be5c:	40000800 	.word	0x40000800
 800be60:	40000c00 	.word	0x40000c00
 800be64:	40010400 	.word	0x40010400
 800be68:	080189a0 	.word	0x080189a0
 800be6c:	40014000 	.word	0x40014000
 800be70:	40001800 	.word	0x40001800
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a82      	ldr	r2, [pc, #520]	; (800c084 <HAL_TIM_ConfigClockSource+0x6e0>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d027      	beq.n	800bece <HAL_TIM_ConfigClockSource+0x52a>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be86:	d022      	beq.n	800bece <HAL_TIM_ConfigClockSource+0x52a>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a7e      	ldr	r2, [pc, #504]	; (800c088 <HAL_TIM_ConfigClockSource+0x6e4>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d01d      	beq.n	800bece <HAL_TIM_ConfigClockSource+0x52a>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a7d      	ldr	r2, [pc, #500]	; (800c08c <HAL_TIM_ConfigClockSource+0x6e8>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d018      	beq.n	800bece <HAL_TIM_ConfigClockSource+0x52a>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a7b      	ldr	r2, [pc, #492]	; (800c090 <HAL_TIM_ConfigClockSource+0x6ec>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d013      	beq.n	800bece <HAL_TIM_ConfigClockSource+0x52a>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a7a      	ldr	r2, [pc, #488]	; (800c094 <HAL_TIM_ConfigClockSource+0x6f0>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d00e      	beq.n	800bece <HAL_TIM_ConfigClockSource+0x52a>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a78      	ldr	r2, [pc, #480]	; (800c098 <HAL_TIM_ConfigClockSource+0x6f4>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d009      	beq.n	800bece <HAL_TIM_ConfigClockSource+0x52a>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a77      	ldr	r2, [pc, #476]	; (800c09c <HAL_TIM_ConfigClockSource+0x6f8>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d004      	beq.n	800bece <HAL_TIM_ConfigClockSource+0x52a>
 800bec4:	f241 5106 	movw	r1, #5382	; 0x1506
 800bec8:	4875      	ldr	r0, [pc, #468]	; (800c0a0 <HAL_TIM_ConfigClockSource+0x6fc>)
 800beca:	f7f6 fa14 	bl	80022f6 <assert_failed>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bed6:	d014      	beq.n	800bf02 <HAL_TIM_ConfigClockSource+0x55e>
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d010      	beq.n	800bf02 <HAL_TIM_ConfigClockSource+0x55e>
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00c      	beq.n	800bf02 <HAL_TIM_ConfigClockSource+0x55e>
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	2b02      	cmp	r3, #2
 800beee:	d008      	beq.n	800bf02 <HAL_TIM_ConfigClockSource+0x55e>
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	2b0a      	cmp	r3, #10
 800bef6:	d004      	beq.n	800bf02 <HAL_TIM_ConfigClockSource+0x55e>
 800bef8:	f241 5109 	movw	r1, #5385	; 0x1509
 800befc:	4868      	ldr	r0, [pc, #416]	; (800c0a0 <HAL_TIM_ConfigClockSource+0x6fc>)
 800befe:	f7f6 f9fa 	bl	80022f6 <assert_failed>
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	2b0f      	cmp	r3, #15
 800bf08:	d904      	bls.n	800bf14 <HAL_TIM_ConfigClockSource+0x570>
 800bf0a:	f241 510a 	movw	r1, #5386	; 0x150a
 800bf0e:	4864      	ldr	r0, [pc, #400]	; (800c0a0 <HAL_TIM_ConfigClockSource+0x6fc>)
 800bf10:	f7f6 f9f1 	bl	80022f6 <assert_failed>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	6859      	ldr	r1, [r3, #4]
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	461a      	mov	r2, r3
 800bf22:	f000 fccc 	bl	800c8be <TIM_TI2_ConfigInputStage>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2160      	movs	r1, #96	; 0x60
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 fcf6 	bl	800c91e <TIM_ITRx_SetConfig>
 800bf32:	e099      	b.n	800c068 <HAL_TIM_ConfigClockSource+0x6c4>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a52      	ldr	r2, [pc, #328]	; (800c084 <HAL_TIM_ConfigClockSource+0x6e0>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d027      	beq.n	800bf8e <HAL_TIM_ConfigClockSource+0x5ea>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf46:	d022      	beq.n	800bf8e <HAL_TIM_ConfigClockSource+0x5ea>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a4e      	ldr	r2, [pc, #312]	; (800c088 <HAL_TIM_ConfigClockSource+0x6e4>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d01d      	beq.n	800bf8e <HAL_TIM_ConfigClockSource+0x5ea>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a4d      	ldr	r2, [pc, #308]	; (800c08c <HAL_TIM_ConfigClockSource+0x6e8>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d018      	beq.n	800bf8e <HAL_TIM_ConfigClockSource+0x5ea>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a4b      	ldr	r2, [pc, #300]	; (800c090 <HAL_TIM_ConfigClockSource+0x6ec>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d013      	beq.n	800bf8e <HAL_TIM_ConfigClockSource+0x5ea>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a4a      	ldr	r2, [pc, #296]	; (800c094 <HAL_TIM_ConfigClockSource+0x6f0>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d00e      	beq.n	800bf8e <HAL_TIM_ConfigClockSource+0x5ea>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a48      	ldr	r2, [pc, #288]	; (800c098 <HAL_TIM_ConfigClockSource+0x6f4>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d009      	beq.n	800bf8e <HAL_TIM_ConfigClockSource+0x5ea>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a47      	ldr	r2, [pc, #284]	; (800c09c <HAL_TIM_ConfigClockSource+0x6f8>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d004      	beq.n	800bf8e <HAL_TIM_ConfigClockSource+0x5ea>
 800bf84:	f241 5116 	movw	r1, #5398	; 0x1516
 800bf88:	4845      	ldr	r0, [pc, #276]	; (800c0a0 <HAL_TIM_ConfigClockSource+0x6fc>)
 800bf8a:	f7f6 f9b4 	bl	80022f6 <assert_failed>
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf96:	d014      	beq.n	800bfc2 <HAL_TIM_ConfigClockSource+0x61e>
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d010      	beq.n	800bfc2 <HAL_TIM_ConfigClockSource+0x61e>
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00c      	beq.n	800bfc2 <HAL_TIM_ConfigClockSource+0x61e>
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d008      	beq.n	800bfc2 <HAL_TIM_ConfigClockSource+0x61e>
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	2b0a      	cmp	r3, #10
 800bfb6:	d004      	beq.n	800bfc2 <HAL_TIM_ConfigClockSource+0x61e>
 800bfb8:	f241 5119 	movw	r1, #5401	; 0x1519
 800bfbc:	4838      	ldr	r0, [pc, #224]	; (800c0a0 <HAL_TIM_ConfigClockSource+0x6fc>)
 800bfbe:	f7f6 f99a 	bl	80022f6 <assert_failed>
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	2b0f      	cmp	r3, #15
 800bfc8:	d904      	bls.n	800bfd4 <HAL_TIM_ConfigClockSource+0x630>
 800bfca:	f241 511a 	movw	r1, #5402	; 0x151a
 800bfce:	4834      	ldr	r0, [pc, #208]	; (800c0a0 <HAL_TIM_ConfigClockSource+0x6fc>)
 800bfd0:	f7f6 f991 	bl	80022f6 <assert_failed>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6818      	ldr	r0, [r3, #0]
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	6859      	ldr	r1, [r3, #4]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	f000 fc3d 	bl	800c860 <TIM_TI1_ConfigInputStage>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2140      	movs	r1, #64	; 0x40
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fc96 	bl	800c91e <TIM_ITRx_SetConfig>
 800bff2:	e039      	b.n	800c068 <HAL_TIM_ConfigClockSource+0x6c4>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a22      	ldr	r2, [pc, #136]	; (800c084 <HAL_TIM_ConfigClockSource+0x6e0>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d027      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x6aa>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c006:	d022      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x6aa>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a1e      	ldr	r2, [pc, #120]	; (800c088 <HAL_TIM_ConfigClockSource+0x6e4>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d01d      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x6aa>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a1d      	ldr	r2, [pc, #116]	; (800c08c <HAL_TIM_ConfigClockSource+0x6e8>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d018      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x6aa>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a1b      	ldr	r2, [pc, #108]	; (800c090 <HAL_TIM_ConfigClockSource+0x6ec>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d013      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x6aa>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a1a      	ldr	r2, [pc, #104]	; (800c094 <HAL_TIM_ConfigClockSource+0x6f0>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d00e      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x6aa>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a18      	ldr	r2, [pc, #96]	; (800c098 <HAL_TIM_ConfigClockSource+0x6f4>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d009      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x6aa>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a17      	ldr	r2, [pc, #92]	; (800c09c <HAL_TIM_ConfigClockSource+0x6f8>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d004      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x6aa>
 800c044:	f241 5129 	movw	r1, #5417	; 0x1529
 800c048:	4815      	ldr	r0, [pc, #84]	; (800c0a0 <HAL_TIM_ConfigClockSource+0x6fc>)
 800c04a:	f7f6 f954 	bl	80022f6 <assert_failed>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4619      	mov	r1, r3
 800c058:	4610      	mov	r0, r2
 800c05a:	f000 fc60 	bl	800c91e <TIM_ITRx_SetConfig>
 800c05e:	e003      	b.n	800c068 <HAL_TIM_ConfigClockSource+0x6c4>
 800c060:	2301      	movs	r3, #1
 800c062:	73fb      	strb	r3, [r7, #15]
 800c064:	e000      	b.n	800c068 <HAL_TIM_ConfigClockSource+0x6c4>
 800c066:	bf00      	nop
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c078:	7bfb      	ldrb	r3, [r7, #15]
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	40010000 	.word	0x40010000
 800c088:	40000400 	.word	0x40000400
 800c08c:	40000800 	.word	0x40000800
 800c090:	40000c00 	.word	0x40000c00
 800c094:	40010400 	.word	0x40010400
 800c098:	40014000 	.word	0x40014000
 800c09c:	40001800 	.word	0x40001800
 800c0a0:	080189a0 	.word	0x080189a0

0800c0a4 <HAL_TIM_OC_DelayElapsedCallback>:
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	bf00      	nop
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <HAL_TIM_IC_CaptureCallback>:
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	bf00      	nop
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <HAL_TIM_TriggerCallback>:
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <HAL_TIM_ErrorCallback>:
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <TIM_DMAError>:
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d107      	bne.n	800c130 <TIM_DMAError+0x28>
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2201      	movs	r2, #1
 800c124:	771a      	strb	r2, [r3, #28]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2201      	movs	r2, #1
 800c12a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c12e:	e02a      	b.n	800c186 <TIM_DMAError+0x7e>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	429a      	cmp	r2, r3
 800c138:	d107      	bne.n	800c14a <TIM_DMAError+0x42>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2202      	movs	r2, #2
 800c13e:	771a      	strb	r2, [r3, #28]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c148:	e01d      	b.n	800c186 <TIM_DMAError+0x7e>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	429a      	cmp	r2, r3
 800c152:	d107      	bne.n	800c164 <TIM_DMAError+0x5c>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2204      	movs	r2, #4
 800c158:	771a      	strb	r2, [r3, #28]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c162:	e010      	b.n	800c186 <TIM_DMAError+0x7e>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d107      	bne.n	800c17e <TIM_DMAError+0x76>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2208      	movs	r2, #8
 800c172:	771a      	strb	r2, [r3, #28]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c17c:	e003      	b.n	800c186 <TIM_DMAError+0x7e>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f7ff ffb4 	bl	800c0f4 <HAL_TIM_ErrorCallback>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	771a      	strb	r2, [r3, #28]
 800c192:	bf00      	nop
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <TIM_DMADelayPulseCplt>:
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b084      	sub	sp, #16
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a6:	60fb      	str	r3, [r7, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d10b      	bne.n	800c1ca <TIM_DMADelayPulseCplt+0x30>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	771a      	strb	r2, [r3, #28]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	69db      	ldr	r3, [r3, #28]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d136      	bne.n	800c22e <TIM_DMADelayPulseCplt+0x94>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1c8:	e031      	b.n	800c22e <TIM_DMADelayPulseCplt+0x94>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d10b      	bne.n	800c1ec <TIM_DMADelayPulseCplt+0x52>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	771a      	strb	r2, [r3, #28]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d125      	bne.n	800c22e <TIM_DMADelayPulseCplt+0x94>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1ea:	e020      	b.n	800c22e <TIM_DMADelayPulseCplt+0x94>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d10b      	bne.n	800c20e <TIM_DMADelayPulseCplt+0x74>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2204      	movs	r2, #4
 800c1fa:	771a      	strb	r2, [r3, #28]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	69db      	ldr	r3, [r3, #28]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d114      	bne.n	800c22e <TIM_DMADelayPulseCplt+0x94>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c20c:	e00f      	b.n	800c22e <TIM_DMADelayPulseCplt+0x94>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	429a      	cmp	r2, r3
 800c216:	d10a      	bne.n	800c22e <TIM_DMADelayPulseCplt+0x94>
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2208      	movs	r2, #8
 800c21c:	771a      	strb	r2, [r3, #28]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d103      	bne.n	800c22e <TIM_DMADelayPulseCplt+0x94>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2201      	movs	r2, #1
 800c22a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f7f6 fb26 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	771a      	strb	r2, [r3, #28]
 800c23a:	bf00      	nop
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <TIM_DMADelayPulseHalfCplt>:
 800c242:	b580      	push	{r7, lr}
 800c244:	b084      	sub	sp, #16
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	429a      	cmp	r2, r3
 800c258:	d103      	bne.n	800c262 <TIM_DMADelayPulseHalfCplt+0x20>
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2201      	movs	r2, #1
 800c25e:	771a      	strb	r2, [r3, #28]
 800c260:	e019      	b.n	800c296 <TIM_DMADelayPulseHalfCplt+0x54>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d103      	bne.n	800c274 <TIM_DMADelayPulseHalfCplt+0x32>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2202      	movs	r2, #2
 800c270:	771a      	strb	r2, [r3, #28]
 800c272:	e010      	b.n	800c296 <TIM_DMADelayPulseHalfCplt+0x54>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d103      	bne.n	800c286 <TIM_DMADelayPulseHalfCplt+0x44>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2204      	movs	r2, #4
 800c282:	771a      	strb	r2, [r3, #28]
 800c284:	e007      	b.n	800c296 <TIM_DMADelayPulseHalfCplt+0x54>
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d102      	bne.n	800c296 <TIM_DMADelayPulseHalfCplt+0x54>
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2208      	movs	r2, #8
 800c294:	771a      	strb	r2, [r3, #28]
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f7ff ff18 	bl	800c0cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	771a      	strb	r2, [r3, #28]
 800c2a2:	bf00      	nop
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
	...

0800c2ac <TIM_Base_SetConfig>:
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a40      	ldr	r2, [pc, #256]	; (800c3c0 <TIM_Base_SetConfig+0x114>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d013      	beq.n	800c2ec <TIM_Base_SetConfig+0x40>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2ca:	d00f      	beq.n	800c2ec <TIM_Base_SetConfig+0x40>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a3d      	ldr	r2, [pc, #244]	; (800c3c4 <TIM_Base_SetConfig+0x118>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d00b      	beq.n	800c2ec <TIM_Base_SetConfig+0x40>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a3c      	ldr	r2, [pc, #240]	; (800c3c8 <TIM_Base_SetConfig+0x11c>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d007      	beq.n	800c2ec <TIM_Base_SetConfig+0x40>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a3b      	ldr	r2, [pc, #236]	; (800c3cc <TIM_Base_SetConfig+0x120>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d003      	beq.n	800c2ec <TIM_Base_SetConfig+0x40>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a3a      	ldr	r2, [pc, #232]	; (800c3d0 <TIM_Base_SetConfig+0x124>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d108      	bne.n	800c2fe <TIM_Base_SetConfig+0x52>
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a2f      	ldr	r2, [pc, #188]	; (800c3c0 <TIM_Base_SetConfig+0x114>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d02b      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c30c:	d027      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a2c      	ldr	r2, [pc, #176]	; (800c3c4 <TIM_Base_SetConfig+0x118>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d023      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a2b      	ldr	r2, [pc, #172]	; (800c3c8 <TIM_Base_SetConfig+0x11c>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d01f      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a2a      	ldr	r2, [pc, #168]	; (800c3cc <TIM_Base_SetConfig+0x120>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d01b      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a29      	ldr	r2, [pc, #164]	; (800c3d0 <TIM_Base_SetConfig+0x124>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d017      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a28      	ldr	r2, [pc, #160]	; (800c3d4 <TIM_Base_SetConfig+0x128>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d013      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a27      	ldr	r2, [pc, #156]	; (800c3d8 <TIM_Base_SetConfig+0x12c>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d00f      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a26      	ldr	r2, [pc, #152]	; (800c3dc <TIM_Base_SetConfig+0x130>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d00b      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a25      	ldr	r2, [pc, #148]	; (800c3e0 <TIM_Base_SetConfig+0x134>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d007      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a24      	ldr	r2, [pc, #144]	; (800c3e4 <TIM_Base_SetConfig+0x138>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d003      	beq.n	800c35e <TIM_Base_SetConfig+0xb2>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4a23      	ldr	r2, [pc, #140]	; (800c3e8 <TIM_Base_SetConfig+0x13c>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d108      	bne.n	800c370 <TIM_Base_SetConfig+0xc4>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c364:	60fb      	str	r3, [r7, #12]
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	60fb      	str	r3, [r7, #12]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	689a      	ldr	r2, [r3, #8]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	62da      	str	r2, [r3, #44]	; 0x2c
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	629a      	str	r2, [r3, #40]	; 0x28
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a0a      	ldr	r2, [pc, #40]	; (800c3c0 <TIM_Base_SetConfig+0x114>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d003      	beq.n	800c3a4 <TIM_Base_SetConfig+0xf8>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a0c      	ldr	r2, [pc, #48]	; (800c3d0 <TIM_Base_SetConfig+0x124>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d103      	bne.n	800c3ac <TIM_Base_SetConfig+0x100>
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	691a      	ldr	r2, [r3, #16]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	631a      	str	r2, [r3, #48]	; 0x30
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	615a      	str	r2, [r3, #20]
 800c3b2:	bf00      	nop
 800c3b4:	3714      	adds	r7, #20
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	40010000 	.word	0x40010000
 800c3c4:	40000400 	.word	0x40000400
 800c3c8:	40000800 	.word	0x40000800
 800c3cc:	40000c00 	.word	0x40000c00
 800c3d0:	40010400 	.word	0x40010400
 800c3d4:	40014000 	.word	0x40014000
 800c3d8:	40014400 	.word	0x40014400
 800c3dc:	40014800 	.word	0x40014800
 800c3e0:	40001800 	.word	0x40001800
 800c3e4:	40001c00 	.word	0x40001c00
 800c3e8:	40002000 	.word	0x40002000

0800c3ec <TIM_OC1_SetConfig>:
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	f023 0201 	bic.w	r2, r3, #1
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	621a      	str	r2, [r3, #32]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	617b      	str	r3, [r7, #20]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	613b      	str	r3, [r7, #16]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f023 0303 	bic.w	r3, r3, #3
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	60fb      	str	r3, [r7, #12]
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f023 0302 	bic.w	r3, r3, #2
 800c434:	617b      	str	r3, [r7, #20]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	697a      	ldr	r2, [r7, #20]
 800c43c:	4313      	orrs	r3, r2
 800c43e:	617b      	str	r3, [r7, #20]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a34      	ldr	r2, [pc, #208]	; (800c514 <TIM_OC1_SetConfig+0x128>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d003      	beq.n	800c450 <TIM_OC1_SetConfig+0x64>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a33      	ldr	r2, [pc, #204]	; (800c518 <TIM_OC1_SetConfig+0x12c>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d119      	bne.n	800c484 <TIM_OC1_SetConfig+0x98>
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d008      	beq.n	800c46a <TIM_OC1_SetConfig+0x7e>
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	2b08      	cmp	r3, #8
 800c45e:	d004      	beq.n	800c46a <TIM_OC1_SetConfig+0x7e>
 800c460:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 800c464:	482d      	ldr	r0, [pc, #180]	; (800c51c <TIM_OC1_SetConfig+0x130>)
 800c466:	f7f5 ff46 	bl	80022f6 <assert_failed>
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f023 0308 	bic.w	r3, r3, #8
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	4313      	orrs	r3, r2
 800c47a:	617b      	str	r3, [r7, #20]
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	f023 0304 	bic.w	r3, r3, #4
 800c482:	617b      	str	r3, [r7, #20]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4a23      	ldr	r2, [pc, #140]	; (800c514 <TIM_OC1_SetConfig+0x128>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d003      	beq.n	800c494 <TIM_OC1_SetConfig+0xa8>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a22      	ldr	r2, [pc, #136]	; (800c518 <TIM_OC1_SetConfig+0x12c>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d12d      	bne.n	800c4f0 <TIM_OC1_SetConfig+0x104>
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c49c:	d008      	beq.n	800c4b0 <TIM_OC1_SetConfig+0xc4>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d004      	beq.n	800c4b0 <TIM_OC1_SetConfig+0xc4>
 800c4a6:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 800c4aa:	481c      	ldr	r0, [pc, #112]	; (800c51c <TIM_OC1_SetConfig+0x130>)
 800c4ac:	f7f5 ff23 	bl	80022f6 <assert_failed>
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b8:	d008      	beq.n	800c4cc <TIM_OC1_SetConfig+0xe0>
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	695b      	ldr	r3, [r3, #20]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d004      	beq.n	800c4cc <TIM_OC1_SetConfig+0xe0>
 800c4c2:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 800c4c6:	4815      	ldr	r0, [pc, #84]	; (800c51c <TIM_OC1_SetConfig+0x130>)
 800c4c8:	f7f5 ff15 	bl	80022f6 <assert_failed>
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	695b      	ldr	r3, [r3, #20]
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	613b      	str	r3, [r7, #16]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	693a      	ldr	r2, [r7, #16]
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	613b      	str	r3, [r7, #16]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	605a      	str	r2, [r3, #4]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	619a      	str	r2, [r3, #24]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	635a      	str	r2, [r3, #52]	; 0x34
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	697a      	ldr	r2, [r7, #20]
 800c508:	621a      	str	r2, [r3, #32]
 800c50a:	bf00      	nop
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	40010000 	.word	0x40010000
 800c518:	40010400 	.word	0x40010400
 800c51c:	080189a0 	.word	0x080189a0

0800c520 <TIM_OC2_SetConfig>:
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a1b      	ldr	r3, [r3, #32]
 800c52e:	f023 0210 	bic.w	r2, r3, #16
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	621a      	str	r2, [r3, #32]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	617b      	str	r3, [r7, #20]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	613b      	str	r3, [r7, #16]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	699b      	ldr	r3, [r3, #24]
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c556:	60fb      	str	r3, [r7, #12]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	021b      	lsls	r3, r3, #8
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	4313      	orrs	r3, r2
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	f023 0320 	bic.w	r3, r3, #32
 800c56a:	617b      	str	r3, [r7, #20]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	011b      	lsls	r3, r3, #4
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	4313      	orrs	r3, r2
 800c576:	617b      	str	r3, [r7, #20]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a35      	ldr	r2, [pc, #212]	; (800c650 <TIM_OC2_SetConfig+0x130>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d003      	beq.n	800c588 <TIM_OC2_SetConfig+0x68>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a34      	ldr	r2, [pc, #208]	; (800c654 <TIM_OC2_SetConfig+0x134>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d11a      	bne.n	800c5be <TIM_OC2_SetConfig+0x9e>
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d008      	beq.n	800c5a2 <TIM_OC2_SetConfig+0x82>
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	2b08      	cmp	r3, #8
 800c596:	d004      	beq.n	800c5a2 <TIM_OC2_SetConfig+0x82>
 800c598:	f641 3112 	movw	r1, #6930	; 0x1b12
 800c59c:	482e      	ldr	r0, [pc, #184]	; (800c658 <TIM_OC2_SetConfig+0x138>)
 800c59e:	f7f5 feaa 	bl	80022f6 <assert_failed>
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5a8:	617b      	str	r3, [r7, #20]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	011b      	lsls	r3, r3, #4
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	617b      	str	r3, [r7, #20]
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5bc:	617b      	str	r3, [r7, #20]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4a23      	ldr	r2, [pc, #140]	; (800c650 <TIM_OC2_SetConfig+0x130>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d003      	beq.n	800c5ce <TIM_OC2_SetConfig+0xae>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a22      	ldr	r2, [pc, #136]	; (800c654 <TIM_OC2_SetConfig+0x134>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d12f      	bne.n	800c62e <TIM_OC2_SetConfig+0x10e>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5d6:	d008      	beq.n	800c5ea <TIM_OC2_SetConfig+0xca>
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	699b      	ldr	r3, [r3, #24]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d004      	beq.n	800c5ea <TIM_OC2_SetConfig+0xca>
 800c5e0:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 800c5e4:	481c      	ldr	r0, [pc, #112]	; (800c658 <TIM_OC2_SetConfig+0x138>)
 800c5e6:	f7f5 fe86 	bl	80022f6 <assert_failed>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	695b      	ldr	r3, [r3, #20]
 800c5ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5f2:	d008      	beq.n	800c606 <TIM_OC2_SetConfig+0xe6>
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d004      	beq.n	800c606 <TIM_OC2_SetConfig+0xe6>
 800c5fc:	f641 3121 	movw	r1, #6945	; 0x1b21
 800c600:	4815      	ldr	r0, [pc, #84]	; (800c658 <TIM_OC2_SetConfig+0x138>)
 800c602:	f7f5 fe78 	bl	80022f6 <assert_failed>
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c60c:	613b      	str	r3, [r7, #16]
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c614:	613b      	str	r3, [r7, #16]
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	695b      	ldr	r3, [r3, #20]
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	4313      	orrs	r3, r2
 800c620:	613b      	str	r3, [r7, #16]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	613b      	str	r3, [r7, #16]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	693a      	ldr	r2, [r7, #16]
 800c632:	605a      	str	r2, [r3, #4]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	619a      	str	r2, [r3, #24]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	639a      	str	r2, [r3, #56]	; 0x38
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	621a      	str	r2, [r3, #32]
 800c648:	bf00      	nop
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	40010000 	.word	0x40010000
 800c654:	40010400 	.word	0x40010400
 800c658:	080189a0 	.word	0x080189a0

0800c65c <TIM_OC3_SetConfig>:
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	621a      	str	r2, [r3, #32]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	613b      	str	r3, [r7, #16]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	69db      	ldr	r3, [r3, #28]
 800c682:	60fb      	str	r3, [r7, #12]
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c68a:	60fb      	str	r3, [r7, #12]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f023 0303 	bic.w	r3, r3, #3
 800c692:	60fb      	str	r3, [r7, #12]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	60fb      	str	r3, [r7, #12]
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	021b      	lsls	r3, r3, #8
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a35      	ldr	r2, [pc, #212]	; (800c78c <TIM_OC3_SetConfig+0x130>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d003      	beq.n	800c6c2 <TIM_OC3_SetConfig+0x66>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a34      	ldr	r2, [pc, #208]	; (800c790 <TIM_OC3_SetConfig+0x134>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d11a      	bne.n	800c6f8 <TIM_OC3_SetConfig+0x9c>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d008      	beq.n	800c6dc <TIM_OC3_SetConfig+0x80>
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	2b08      	cmp	r3, #8
 800c6d0:	d004      	beq.n	800c6dc <TIM_OC3_SetConfig+0x80>
 800c6d2:	f641 315d 	movw	r1, #7005	; 0x1b5d
 800c6d6:	482f      	ldr	r0, [pc, #188]	; (800c794 <TIM_OC3_SetConfig+0x138>)
 800c6d8:	f7f5 fe0d 	bl	80022f6 <assert_failed>
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6e2:	617b      	str	r3, [r7, #20]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	021b      	lsls	r3, r3, #8
 800c6ea:	697a      	ldr	r2, [r7, #20]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	617b      	str	r3, [r7, #20]
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6f6:	617b      	str	r3, [r7, #20]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a24      	ldr	r2, [pc, #144]	; (800c78c <TIM_OC3_SetConfig+0x130>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d003      	beq.n	800c708 <TIM_OC3_SetConfig+0xac>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a23      	ldr	r2, [pc, #140]	; (800c790 <TIM_OC3_SetConfig+0x134>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d12f      	bne.n	800c768 <TIM_OC3_SetConfig+0x10c>
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	699b      	ldr	r3, [r3, #24]
 800c70c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c710:	d008      	beq.n	800c724 <TIM_OC3_SetConfig+0xc8>
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	699b      	ldr	r3, [r3, #24]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d004      	beq.n	800c724 <TIM_OC3_SetConfig+0xc8>
 800c71a:	f641 316a 	movw	r1, #7018	; 0x1b6a
 800c71e:	481d      	ldr	r0, [pc, #116]	; (800c794 <TIM_OC3_SetConfig+0x138>)
 800c720:	f7f5 fde9 	bl	80022f6 <assert_failed>
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	695b      	ldr	r3, [r3, #20]
 800c728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c72c:	d008      	beq.n	800c740 <TIM_OC3_SetConfig+0xe4>
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d004      	beq.n	800c740 <TIM_OC3_SetConfig+0xe4>
 800c736:	f641 316b 	movw	r1, #7019	; 0x1b6b
 800c73a:	4816      	ldr	r0, [pc, #88]	; (800c794 <TIM_OC3_SetConfig+0x138>)
 800c73c:	f7f5 fddb 	bl	80022f6 <assert_failed>
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c746:	613b      	str	r3, [r7, #16]
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c74e:	613b      	str	r3, [r7, #16]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	011b      	lsls	r3, r3, #4
 800c756:	693a      	ldr	r2, [r7, #16]
 800c758:	4313      	orrs	r3, r2
 800c75a:	613b      	str	r3, [r7, #16]
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	011b      	lsls	r3, r3, #4
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	4313      	orrs	r3, r2
 800c766:	613b      	str	r3, [r7, #16]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	605a      	str	r2, [r3, #4]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	61da      	str	r2, [r3, #28]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	63da      	str	r2, [r3, #60]	; 0x3c
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	621a      	str	r2, [r3, #32]
 800c782:	bf00      	nop
 800c784:	3718      	adds	r7, #24
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	40010000 	.word	0x40010000
 800c790:	40010400 	.word	0x40010400
 800c794:	080189a0 	.word	0x080189a0

0800c798 <TIM_OC4_SetConfig>:
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a1b      	ldr	r3, [r3, #32]
 800c7a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	621a      	str	r2, [r3, #32]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a1b      	ldr	r3, [r3, #32]
 800c7b2:	613b      	str	r3, [r7, #16]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	617b      	str	r3, [r7, #20]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	69db      	ldr	r3, [r3, #28]
 800c7be:	60fb      	str	r3, [r7, #12]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	021b      	lsls	r3, r3, #8
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	60fb      	str	r3, [r7, #12]
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7e2:	613b      	str	r3, [r7, #16]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	031b      	lsls	r3, r3, #12
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	613b      	str	r3, [r7, #16]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a18      	ldr	r2, [pc, #96]	; (800c854 <TIM_OC4_SetConfig+0xbc>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d003      	beq.n	800c800 <TIM_OC4_SetConfig+0x68>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a17      	ldr	r2, [pc, #92]	; (800c858 <TIM_OC4_SetConfig+0xc0>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d117      	bne.n	800c830 <TIM_OC4_SetConfig+0x98>
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c808:	d008      	beq.n	800c81c <TIM_OC4_SetConfig+0x84>
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d004      	beq.n	800c81c <TIM_OC4_SetConfig+0x84>
 800c812:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 800c816:	4811      	ldr	r0, [pc, #68]	; (800c85c <TIM_OC4_SetConfig+0xc4>)
 800c818:	f7f5 fd6d 	bl	80022f6 <assert_failed>
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c822:	617b      	str	r3, [r7, #20]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	695b      	ldr	r3, [r3, #20]
 800c828:	019b      	lsls	r3, r3, #6
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	617b      	str	r3, [r7, #20]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	605a      	str	r2, [r3, #4]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	61da      	str	r2, [r3, #28]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	641a      	str	r2, [r3, #64]	; 0x40
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	693a      	ldr	r2, [r7, #16]
 800c848:	621a      	str	r2, [r3, #32]
 800c84a:	bf00      	nop
 800c84c:	3718      	adds	r7, #24
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	40010000 	.word	0x40010000
 800c858:	40010400 	.word	0x40010400
 800c85c:	080189a0 	.word	0x080189a0

0800c860 <TIM_TI1_ConfigInputStage>:
 800c860:	b480      	push	{r7}
 800c862:	b087      	sub	sp, #28
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	617b      	str	r3, [r7, #20]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6a1b      	ldr	r3, [r3, #32]
 800c876:	f023 0201 	bic.w	r2, r3, #1
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	621a      	str	r2, [r3, #32]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	613b      	str	r3, [r7, #16]
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c88a:	613b      	str	r3, [r7, #16]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	011b      	lsls	r3, r3, #4
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	4313      	orrs	r3, r2
 800c894:	613b      	str	r3, [r7, #16]
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	f023 030a 	bic.w	r3, r3, #10
 800c89c:	617b      	str	r3, [r7, #20]
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	617b      	str	r3, [r7, #20]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	619a      	str	r2, [r3, #24]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	621a      	str	r2, [r3, #32]
 800c8b2:	bf00      	nop
 800c8b4:	371c      	adds	r7, #28
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <TIM_TI2_ConfigInputStage>:
 800c8be:	b480      	push	{r7}
 800c8c0:	b087      	sub	sp, #28
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	60f8      	str	r0, [r7, #12]
 800c8c6:	60b9      	str	r1, [r7, #8]
 800c8c8:	607a      	str	r2, [r7, #4]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	f023 0210 	bic.w	r2, r3, #16
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	621a      	str	r2, [r3, #32]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	617b      	str	r3, [r7, #20]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6a1b      	ldr	r3, [r3, #32]
 800c8e0:	613b      	str	r3, [r7, #16]
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c8e8:	617b      	str	r3, [r7, #20]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	031b      	lsls	r3, r3, #12
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	617b      	str	r3, [r7, #20]
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c8fa:	613b      	str	r3, [r7, #16]
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	011b      	lsls	r3, r3, #4
 800c900:	693a      	ldr	r2, [r7, #16]
 800c902:	4313      	orrs	r3, r2
 800c904:	613b      	str	r3, [r7, #16]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	619a      	str	r2, [r3, #24]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	621a      	str	r2, [r3, #32]
 800c912:	bf00      	nop
 800c914:	371c      	adds	r7, #28
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr

0800c91e <TIM_ITRx_SetConfig>:
 800c91e:	b480      	push	{r7}
 800c920:	b085      	sub	sp, #20
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	6039      	str	r1, [r7, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	60fb      	str	r3, [r7, #12]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c934:	60fb      	str	r3, [r7, #12]
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	f043 0307 	orr.w	r3, r3, #7
 800c940:	60fb      	str	r3, [r7, #12]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	609a      	str	r2, [r3, #8]
 800c948:	bf00      	nop
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <TIM_ETR_SetConfig>:
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
 800c960:	603b      	str	r3, [r7, #0]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	617b      	str	r3, [r7, #20]
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c96e:	617b      	str	r3, [r7, #20]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	021a      	lsls	r2, r3, #8
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	431a      	orrs	r2, r3
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	4313      	orrs	r3, r2
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	4313      	orrs	r3, r2
 800c980:	617b      	str	r3, [r7, #20]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	697a      	ldr	r2, [r7, #20]
 800c986:	609a      	str	r2, [r3, #8]
 800c988:	bf00      	nop
 800c98a:	371c      	adds	r7, #28
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <TIM_CCxChannelCmd>:
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	4a32      	ldr	r2, [pc, #200]	; (800ca6c <TIM_CCxChannelCmd+0xd8>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d030      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9ae:	d02c      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	4a2f      	ldr	r2, [pc, #188]	; (800ca70 <TIM_CCxChannelCmd+0xdc>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d028      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	4a2e      	ldr	r2, [pc, #184]	; (800ca74 <TIM_CCxChannelCmd+0xe0>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d024      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	4a2d      	ldr	r2, [pc, #180]	; (800ca78 <TIM_CCxChannelCmd+0xe4>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d020      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	4a2c      	ldr	r2, [pc, #176]	; (800ca7c <TIM_CCxChannelCmd+0xe8>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d01c      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	4a2b      	ldr	r2, [pc, #172]	; (800ca80 <TIM_CCxChannelCmd+0xec>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d018      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	4a2a      	ldr	r2, [pc, #168]	; (800ca84 <TIM_CCxChannelCmd+0xf0>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d014      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4a29      	ldr	r2, [pc, #164]	; (800ca88 <TIM_CCxChannelCmd+0xf4>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d010      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	4a28      	ldr	r2, [pc, #160]	; (800ca8c <TIM_CCxChannelCmd+0xf8>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d00c      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	4a27      	ldr	r2, [pc, #156]	; (800ca90 <TIM_CCxChannelCmd+0xfc>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d008      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	4a26      	ldr	r2, [pc, #152]	; (800ca94 <TIM_CCxChannelCmd+0x100>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d004      	beq.n	800ca0a <TIM_CCxChannelCmd+0x76>
 800ca00:	f641 5194 	movw	r1, #7572	; 0x1d94
 800ca04:	4824      	ldr	r0, [pc, #144]	; (800ca98 <TIM_CCxChannelCmd+0x104>)
 800ca06:	f7f5 fc76 	bl	80022f6 <assert_failed>
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d010      	beq.n	800ca32 <TIM_CCxChannelCmd+0x9e>
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	2b04      	cmp	r3, #4
 800ca14:	d00d      	beq.n	800ca32 <TIM_CCxChannelCmd+0x9e>
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2b08      	cmp	r3, #8
 800ca1a:	d00a      	beq.n	800ca32 <TIM_CCxChannelCmd+0x9e>
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	2b0c      	cmp	r3, #12
 800ca20:	d007      	beq.n	800ca32 <TIM_CCxChannelCmd+0x9e>
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	2b3c      	cmp	r3, #60	; 0x3c
 800ca26:	d004      	beq.n	800ca32 <TIM_CCxChannelCmd+0x9e>
 800ca28:	f641 5195 	movw	r1, #7573	; 0x1d95
 800ca2c:	481a      	ldr	r0, [pc, #104]	; (800ca98 <TIM_CCxChannelCmd+0x104>)
 800ca2e:	f7f5 fc62 	bl	80022f6 <assert_failed>
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	f003 031f 	and.w	r3, r3, #31
 800ca38:	2201      	movs	r2, #1
 800ca3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca3e:	617b      	str	r3, [r7, #20]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6a1a      	ldr	r2, [r3, #32]
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	43db      	mvns	r3, r3
 800ca48:	401a      	ands	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	621a      	str	r2, [r3, #32]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6a1a      	ldr	r2, [r3, #32]
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	f003 031f 	and.w	r3, r3, #31
 800ca58:	6879      	ldr	r1, [r7, #4]
 800ca5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca5e:	431a      	orrs	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	621a      	str	r2, [r3, #32]
 800ca64:	bf00      	nop
 800ca66:	3718      	adds	r7, #24
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	40010000 	.word	0x40010000
 800ca70:	40000400 	.word	0x40000400
 800ca74:	40000800 	.word	0x40000800
 800ca78:	40000c00 	.word	0x40000c00
 800ca7c:	40010400 	.word	0x40010400
 800ca80:	40014000 	.word	0x40014000
 800ca84:	40014400 	.word	0x40014400
 800ca88:	40014800 	.word	0x40014800
 800ca8c:	40001800 	.word	0x40001800
 800ca90:	40001c00 	.word	0x40001c00
 800ca94:	40002000 	.word	0x40002000
 800ca98:	080189a0 	.word	0x080189a0

0800ca9c <HAL_TIMEx_MasterConfigSynchronization>:
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a61      	ldr	r2, [pc, #388]	; (800cc30 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d027      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cab8:	d022      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a5d      	ldr	r2, [pc, #372]	; (800cc34 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d01d      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a5b      	ldr	r2, [pc, #364]	; (800cc38 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d018      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a5a      	ldr	r2, [pc, #360]	; (800cc3c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d013      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a58      	ldr	r2, [pc, #352]	; (800cc40 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d00e      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a57      	ldr	r2, [pc, #348]	; (800cc44 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d009      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a55      	ldr	r2, [pc, #340]	; (800cc48 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d004      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800caf6:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800cafa:	4854      	ldr	r0, [pc, #336]	; (800cc4c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800cafc:	f7f5 fbfb 	bl	80022f6 <assert_failed>
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d020      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b10      	cmp	r3, #16
 800cb0e:	d01c      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2b20      	cmp	r3, #32
 800cb16:	d018      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b30      	cmp	r3, #48	; 0x30
 800cb1e:	d014      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2b40      	cmp	r3, #64	; 0x40
 800cb26:	d010      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b50      	cmp	r3, #80	; 0x50
 800cb2e:	d00c      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2b60      	cmp	r3, #96	; 0x60
 800cb36:	d008      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b70      	cmp	r3, #112	; 0x70
 800cb3e:	d004      	beq.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cb40:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800cb44:	4841      	ldr	r0, [pc, #260]	; (800cc4c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800cb46:	f7f5 fbd6 	bl	80022f6 <assert_failed>
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	2b80      	cmp	r3, #128	; 0x80
 800cb50:	d008      	beq.n	800cb64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d004      	beq.n	800cb64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb5a:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800cb5e:	483b      	ldr	r0, [pc, #236]	; (800cc4c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800cb60:	f7f5 fbc9 	bl	80022f6 <assert_failed>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d101      	bne.n	800cb72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb6e:	2302      	movs	r3, #2
 800cb70:	e05a      	b.n	800cc28 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2201      	movs	r2, #1
 800cb76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2202      	movs	r2, #2
 800cb7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	60fb      	str	r3, [r7, #12]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	60bb      	str	r3, [r7, #8]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb98:	60fb      	str	r3, [r7, #12]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	605a      	str	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a1f      	ldr	r2, [pc, #124]	; (800cc30 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d022      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbbe:	d01d      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a1b      	ldr	r2, [pc, #108]	; (800cc34 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d018      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a1a      	ldr	r2, [pc, #104]	; (800cc38 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d013      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a18      	ldr	r2, [pc, #96]	; (800cc3c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d00e      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a19      	ldr	r2, [pc, #100]	; (800cc48 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d009      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a18      	ldr	r2, [pc, #96]	; (800cc50 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d004      	beq.n	800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a17      	ldr	r2, [pc, #92]	; (800cc54 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d10c      	bne.n	800cc16 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc02:	60bb      	str	r3, [r7, #8]
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60bb      	str	r3, [r7, #8]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	609a      	str	r2, [r3, #8]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cc26:	2300      	movs	r3, #0
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	40010000 	.word	0x40010000
 800cc34:	40000400 	.word	0x40000400
 800cc38:	40000800 	.word	0x40000800
 800cc3c:	40000c00 	.word	0x40000c00
 800cc40:	40001000 	.word	0x40001000
 800cc44:	40001400 	.word	0x40001400
 800cc48:	40010400 	.word	0x40010400
 800cc4c:	080189d8 	.word	0x080189d8
 800cc50:	40014000 	.word	0x40014000
 800cc54:	40001800 	.word	0x40001800

0800cc58 <HAL_TIMEx_CommutCallback>:
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <HAL_TIMEx_BreakCallback>:
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <HAL_UART_Init>:
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <HAL_UART_Init+0x12>
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e0b4      	b.n	800cdfc <HAL_UART_Init+0x17c>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	699b      	ldr	r3, [r3, #24]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d031      	beq.n	800ccfe <HAL_UART_Init+0x7e>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a59      	ldr	r2, [pc, #356]	; (800ce04 <HAL_UART_Init+0x184>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d013      	beq.n	800cccc <HAL_UART_Init+0x4c>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a57      	ldr	r2, [pc, #348]	; (800ce08 <HAL_UART_Init+0x188>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d00e      	beq.n	800cccc <HAL_UART_Init+0x4c>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a56      	ldr	r2, [pc, #344]	; (800ce0c <HAL_UART_Init+0x18c>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d009      	beq.n	800cccc <HAL_UART_Init+0x4c>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a54      	ldr	r2, [pc, #336]	; (800ce10 <HAL_UART_Init+0x190>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d004      	beq.n	800cccc <HAL_UART_Init+0x4c>
 800ccc2:	f240 1173 	movw	r1, #371	; 0x173
 800ccc6:	4853      	ldr	r0, [pc, #332]	; (800ce14 <HAL_UART_Init+0x194>)
 800ccc8:	f7f5 fb15 	bl	80022f6 <assert_failed>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	699b      	ldr	r3, [r3, #24]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d037      	beq.n	800cd44 <HAL_UART_Init+0xc4>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccdc:	d032      	beq.n	800cd44 <HAL_UART_Init+0xc4>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	699b      	ldr	r3, [r3, #24]
 800cce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cce6:	d02d      	beq.n	800cd44 <HAL_UART_Init+0xc4>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccf0:	d028      	beq.n	800cd44 <HAL_UART_Init+0xc4>
 800ccf2:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800ccf6:	4847      	ldr	r0, [pc, #284]	; (800ce14 <HAL_UART_Init+0x194>)
 800ccf8:	f7f5 fafd 	bl	80022f6 <assert_failed>
 800ccfc:	e022      	b.n	800cd44 <HAL_UART_Init+0xc4>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a40      	ldr	r2, [pc, #256]	; (800ce04 <HAL_UART_Init+0x184>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d01d      	beq.n	800cd44 <HAL_UART_Init+0xc4>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a3e      	ldr	r2, [pc, #248]	; (800ce08 <HAL_UART_Init+0x188>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d018      	beq.n	800cd44 <HAL_UART_Init+0xc4>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a3d      	ldr	r2, [pc, #244]	; (800ce0c <HAL_UART_Init+0x18c>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d013      	beq.n	800cd44 <HAL_UART_Init+0xc4>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a3d      	ldr	r2, [pc, #244]	; (800ce18 <HAL_UART_Init+0x198>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d00e      	beq.n	800cd44 <HAL_UART_Init+0xc4>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a3c      	ldr	r2, [pc, #240]	; (800ce1c <HAL_UART_Init+0x19c>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d009      	beq.n	800cd44 <HAL_UART_Init+0xc4>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a36      	ldr	r2, [pc, #216]	; (800ce10 <HAL_UART_Init+0x190>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d004      	beq.n	800cd44 <HAL_UART_Init+0xc4>
 800cd3a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800cd3e:	4835      	ldr	r0, [pc, #212]	; (800ce14 <HAL_UART_Init+0x194>)
 800cd40:	f7f5 fad9 	bl	80022f6 <assert_failed>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d009      	beq.n	800cd60 <HAL_UART_Init+0xe0>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd54:	d004      	beq.n	800cd60 <HAL_UART_Init+0xe0>
 800cd56:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800cd5a:	482e      	ldr	r0, [pc, #184]	; (800ce14 <HAL_UART_Init+0x194>)
 800cd5c:	f7f5 facb 	bl	80022f6 <assert_failed>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d009      	beq.n	800cd7c <HAL_UART_Init+0xfc>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	69db      	ldr	r3, [r3, #28]
 800cd6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd70:	d004      	beq.n	800cd7c <HAL_UART_Init+0xfc>
 800cd72:	f240 117b 	movw	r1, #379	; 0x17b
 800cd76:	4827      	ldr	r0, [pc, #156]	; (800ce14 <HAL_UART_Init+0x194>)
 800cd78:	f7f5 fabd 	bl	80022f6 <assert_failed>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d106      	bne.n	800cd96 <HAL_UART_Init+0x116>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7f8 fef9 	bl	8005b88 <HAL_UART_MspInit>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2224      	movs	r2, #36	; 0x24
 800cd9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68da      	ldr	r2, [r3, #12]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cdac:	60da      	str	r2, [r3, #12]
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 fcce 	bl	800d750 <UART_SetConfig>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	691a      	ldr	r2, [r3, #16]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cdc2:	611a      	str	r2, [r3, #16]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	695a      	ldr	r2, [r3, #20]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cdd2:	615a      	str	r2, [r3, #20]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68da      	ldr	r2, [r3, #12]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cde2:	60da      	str	r2, [r3, #12]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	641a      	str	r2, [r3, #64]	; 0x40
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2220      	movs	r2, #32
 800cdee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2220      	movs	r2, #32
 800cdf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	40011000 	.word	0x40011000
 800ce08:	40004400 	.word	0x40004400
 800ce0c:	40004800 	.word	0x40004800
 800ce10:	40011400 	.word	0x40011400
 800ce14:	08018a14 	.word	0x08018a14
 800ce18:	40004c00 	.word	0x40004c00
 800ce1c:	40005000 	.word	0x40005000

0800ce20 <HAL_UART_Transmit_IT>:
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	80fb      	strh	r3, [r7, #6]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b20      	cmp	r3, #32
 800ce38:	d130      	bne.n	800ce9c <HAL_UART_Transmit_IT+0x7c>
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d002      	beq.n	800ce46 <HAL_UART_Transmit_IT+0x26>
 800ce40:	88fb      	ldrh	r3, [r7, #6]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d101      	bne.n	800ce4a <HAL_UART_Transmit_IT+0x2a>
 800ce46:	2301      	movs	r3, #1
 800ce48:	e029      	b.n	800ce9e <HAL_UART_Transmit_IT+0x7e>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d101      	bne.n	800ce58 <HAL_UART_Transmit_IT+0x38>
 800ce54:	2302      	movs	r3, #2
 800ce56:	e022      	b.n	800ce9e <HAL_UART_Transmit_IT+0x7e>
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	621a      	str	r2, [r3, #32]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	88fa      	ldrh	r2, [r7, #6]
 800ce6a:	849a      	strh	r2, [r3, #36]	; 0x24
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	88fa      	ldrh	r2, [r7, #6]
 800ce70:	84da      	strh	r2, [r3, #38]	; 0x26
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2200      	movs	r2, #0
 800ce76:	641a      	str	r2, [r3, #64]	; 0x40
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2221      	movs	r2, #33	; 0x21
 800ce7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68da      	ldr	r2, [r3, #12]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce96:	60da      	str	r2, [r3, #12]
 800ce98:	2300      	movs	r3, #0
 800ce9a:	e000      	b.n	800ce9e <HAL_UART_Transmit_IT+0x7e>
 800ce9c:	2302      	movs	r3, #2
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr
	...

0800ceac <HAL_UART_IRQHandler>:
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b0ba      	sub	sp, #232	; 0xe8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	695b      	ldr	r3, [r3, #20]
 800cece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ced2:	2300      	movs	r3, #0
 800ced4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ced8:	2300      	movs	r3, #0
 800ceda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cee2:	f003 030f 	and.w	r3, r3, #15
 800cee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ceea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10f      	bne.n	800cf12 <HAL_UART_IRQHandler+0x66>
 800cef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cef6:	f003 0320 	and.w	r3, r3, #32
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d009      	beq.n	800cf12 <HAL_UART_IRQHandler+0x66>
 800cefe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf02:	f003 0320 	and.w	r3, r3, #32
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d003      	beq.n	800cf12 <HAL_UART_IRQHandler+0x66>
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fb65 	bl	800d5da <UART_Receive_IT>
 800cf10:	e256      	b.n	800d3c0 <HAL_UART_IRQHandler+0x514>
 800cf12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f000 80de 	beq.w	800d0d8 <HAL_UART_IRQHandler+0x22c>
 800cf1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf20:	f003 0301 	and.w	r3, r3, #1
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d106      	bne.n	800cf36 <HAL_UART_IRQHandler+0x8a>
 800cf28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f000 80d1 	beq.w	800d0d8 <HAL_UART_IRQHandler+0x22c>
 800cf36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf3a:	f003 0301 	and.w	r3, r3, #1
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00b      	beq.n	800cf5a <HAL_UART_IRQHandler+0xae>
 800cf42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d005      	beq.n	800cf5a <HAL_UART_IRQHandler+0xae>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf52:	f043 0201 	orr.w	r2, r3, #1
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	641a      	str	r2, [r3, #64]	; 0x40
 800cf5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf5e:	f003 0304 	and.w	r3, r3, #4
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00b      	beq.n	800cf7e <HAL_UART_IRQHandler+0xd2>
 800cf66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d005      	beq.n	800cf7e <HAL_UART_IRQHandler+0xd2>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf76:	f043 0202 	orr.w	r2, r3, #2
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	641a      	str	r2, [r3, #64]	; 0x40
 800cf7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf82:	f003 0302 	and.w	r3, r3, #2
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00b      	beq.n	800cfa2 <HAL_UART_IRQHandler+0xf6>
 800cf8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf8e:	f003 0301 	and.w	r3, r3, #1
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d005      	beq.n	800cfa2 <HAL_UART_IRQHandler+0xf6>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf9a:	f043 0204 	orr.w	r2, r3, #4
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	641a      	str	r2, [r3, #64]	; 0x40
 800cfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfa6:	f003 0308 	and.w	r3, r3, #8
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d011      	beq.n	800cfd2 <HAL_UART_IRQHandler+0x126>
 800cfae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfb2:	f003 0320 	and.w	r3, r3, #32
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d105      	bne.n	800cfc6 <HAL_UART_IRQHandler+0x11a>
 800cfba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfbe:	f003 0301 	and.w	r3, r3, #1
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d005      	beq.n	800cfd2 <HAL_UART_IRQHandler+0x126>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfca:	f043 0208 	orr.w	r2, r3, #8
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	641a      	str	r2, [r3, #64]	; 0x40
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f000 81ed 	beq.w	800d3b6 <HAL_UART_IRQHandler+0x50a>
 800cfdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfe0:	f003 0320 	and.w	r3, r3, #32
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d008      	beq.n	800cffa <HAL_UART_IRQHandler+0x14e>
 800cfe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfec:	f003 0320 	and.w	r3, r3, #32
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <HAL_UART_IRQHandler+0x14e>
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 faf0 	bl	800d5da <UART_Receive_IT>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	695b      	ldr	r3, [r3, #20]
 800d000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d004:	2b40      	cmp	r3, #64	; 0x40
 800d006:	bf0c      	ite	eq
 800d008:	2301      	moveq	r3, #1
 800d00a:	2300      	movne	r3, #0
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d016:	f003 0308 	and.w	r3, r3, #8
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d103      	bne.n	800d026 <HAL_UART_IRQHandler+0x17a>
 800d01e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d022:	2b00      	cmp	r3, #0
 800d024:	d04f      	beq.n	800d0c6 <HAL_UART_IRQHandler+0x21a>
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 f9f8 	bl	800d41c <UART_EndRxTransfer>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d036:	2b40      	cmp	r3, #64	; 0x40
 800d038:	d141      	bne.n	800d0be <HAL_UART_IRQHandler+0x212>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	3314      	adds	r3, #20
 800d040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d048:	e853 3f00 	ldrex	r3, [r3]
 800d04c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	3314      	adds	r3, #20
 800d062:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d066:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d06a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d06e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d072:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d076:	e841 2300 	strex	r3, r2, [r1]
 800d07a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d07e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d1d9      	bne.n	800d03a <HAL_UART_IRQHandler+0x18e>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d013      	beq.n	800d0b6 <HAL_UART_IRQHandler+0x20a>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d092:	4a7d      	ldr	r2, [pc, #500]	; (800d288 <HAL_UART_IRQHandler+0x3dc>)
 800d094:	651a      	str	r2, [r3, #80]	; 0x50
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7f9 fa56 	bl	800654c <HAL_DMA_Abort_IT>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d016      	beq.n	800d0d4 <HAL_UART_IRQHandler+0x228>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	4798      	blx	r3
 800d0b4:	e00e      	b.n	800d0d4 <HAL_UART_IRQHandler+0x228>
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f99a 	bl	800d3f0 <HAL_UART_ErrorCallback>
 800d0bc:	e00a      	b.n	800d0d4 <HAL_UART_IRQHandler+0x228>
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f996 	bl	800d3f0 <HAL_UART_ErrorCallback>
 800d0c4:	e006      	b.n	800d0d4 <HAL_UART_IRQHandler+0x228>
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 f992 	bl	800d3f0 <HAL_UART_ErrorCallback>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	641a      	str	r2, [r3, #64]	; 0x40
 800d0d2:	e170      	b.n	800d3b6 <HAL_UART_IRQHandler+0x50a>
 800d0d4:	bf00      	nop
 800d0d6:	e16e      	b.n	800d3b6 <HAL_UART_IRQHandler+0x50a>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	f040 814a 	bne.w	800d376 <HAL_UART_IRQHandler+0x4ca>
 800d0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0e6:	f003 0310 	and.w	r3, r3, #16
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f000 8143 	beq.w	800d376 <HAL_UART_IRQHandler+0x4ca>
 800d0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0f4:	f003 0310 	and.w	r3, r3, #16
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 813c 	beq.w	800d376 <HAL_UART_IRQHandler+0x4ca>
 800d0fe:	2300      	movs	r3, #0
 800d100:	60bb      	str	r3, [r7, #8]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	60bb      	str	r3, [r7, #8]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	60bb      	str	r3, [r7, #8]
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	695b      	ldr	r3, [r3, #20]
 800d11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d11e:	2b40      	cmp	r3, #64	; 0x40
 800d120:	f040 80b4 	bne.w	800d28c <HAL_UART_IRQHandler+0x3e0>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800d130:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 8140 	beq.w	800d3ba <HAL_UART_IRQHandler+0x50e>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d13e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d142:	429a      	cmp	r2, r3
 800d144:	f080 8139 	bcs.w	800d3ba <HAL_UART_IRQHandler+0x50e>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d14e:	85da      	strh	r2, [r3, #46]	; 0x2e
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d154:	69db      	ldr	r3, [r3, #28]
 800d156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d15a:	f000 8088 	beq.w	800d26e <HAL_UART_IRQHandler+0x3c2>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	330c      	adds	r3, #12
 800d164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d16c:	e853 3f00 	ldrex	r3, [r3]
 800d170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d17c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	330c      	adds	r3, #12
 800d186:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d18a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d18e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d192:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d196:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d19a:	e841 2300 	strex	r3, r2, [r1]
 800d19e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d1a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1d9      	bne.n	800d15e <HAL_UART_IRQHandler+0x2b2>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	3314      	adds	r3, #20
 800d1b0:	677b      	str	r3, [r7, #116]	; 0x74
 800d1b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1b4:	e853 3f00 	ldrex	r3, [r3]
 800d1b8:	673b      	str	r3, [r7, #112]	; 0x70
 800d1ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1bc:	f023 0301 	bic.w	r3, r3, #1
 800d1c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	3314      	adds	r3, #20
 800d1ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d1ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d1d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d1d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d1da:	e841 2300 	strex	r3, r2, [r1]
 800d1de:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1e1      	bne.n	800d1aa <HAL_UART_IRQHandler+0x2fe>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3314      	adds	r3, #20
 800d1ec:	663b      	str	r3, [r7, #96]	; 0x60
 800d1ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1f0:	e853 3f00 	ldrex	r3, [r3]
 800d1f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	3314      	adds	r3, #20
 800d206:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d20a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d20c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d20e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d210:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d212:	e841 2300 	strex	r3, r2, [r1]
 800d216:	667b      	str	r3, [r7, #100]	; 0x64
 800d218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1e3      	bne.n	800d1e6 <HAL_UART_IRQHandler+0x33a>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2220      	movs	r2, #32
 800d222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	631a      	str	r2, [r3, #48]	; 0x30
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	330c      	adds	r3, #12
 800d232:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d236:	e853 3f00 	ldrex	r3, [r3]
 800d23a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d23c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d23e:	f023 0310 	bic.w	r3, r3, #16
 800d242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	330c      	adds	r3, #12
 800d24c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d250:	65ba      	str	r2, [r7, #88]	; 0x58
 800d252:	657b      	str	r3, [r7, #84]	; 0x54
 800d254:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d256:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d258:	e841 2300 	strex	r3, r2, [r1]
 800d25c:	653b      	str	r3, [r7, #80]	; 0x50
 800d25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1e3      	bne.n	800d22c <HAL_UART_IRQHandler+0x380>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d268:	4618      	mov	r0, r3
 800d26a:	f7f9 f8ff 	bl	800646c <HAL_DMA_Abort>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d276:	b29b      	uxth	r3, r3
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 f8c0 	bl	800d404 <HAL_UARTEx_RxEventCallback>
 800d284:	e099      	b.n	800d3ba <HAL_UART_IRQHandler+0x50e>
 800d286:	bf00      	nop
 800d288:	0800d4e3 	.word	0x0800d4e3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d294:	b29b      	uxth	r3, r3
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f000 808b 	beq.w	800d3be <HAL_UART_IRQHandler+0x512>
 800d2a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f000 8086 	beq.w	800d3be <HAL_UART_IRQHandler+0x512>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	330c      	adds	r3, #12
 800d2b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2bc:	e853 3f00 	ldrex	r3, [r3]
 800d2c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	330c      	adds	r3, #12
 800d2d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d2d6:	647a      	str	r2, [r7, #68]	; 0x44
 800d2d8:	643b      	str	r3, [r7, #64]	; 0x40
 800d2da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2de:	e841 2300 	strex	r3, r2, [r1]
 800d2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1e3      	bne.n	800d2b2 <HAL_UART_IRQHandler+0x406>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	3314      	adds	r3, #20
 800d2f0:	627b      	str	r3, [r7, #36]	; 0x24
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f4:	e853 3f00 	ldrex	r3, [r3]
 800d2f8:	623b      	str	r3, [r7, #32]
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	f023 0301 	bic.w	r3, r3, #1
 800d300:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	3314      	adds	r3, #20
 800d30a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d30e:	633a      	str	r2, [r7, #48]	; 0x30
 800d310:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d316:	e841 2300 	strex	r3, r2, [r1]
 800d31a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d1e3      	bne.n	800d2ea <HAL_UART_IRQHandler+0x43e>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2220      	movs	r2, #32
 800d326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	631a      	str	r2, [r3, #48]	; 0x30
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	330c      	adds	r3, #12
 800d336:	613b      	str	r3, [r7, #16]
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	e853 3f00 	ldrex	r3, [r3]
 800d33e:	60fb      	str	r3, [r7, #12]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f023 0310 	bic.w	r3, r3, #16
 800d346:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	330c      	adds	r3, #12
 800d350:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d354:	61fa      	str	r2, [r7, #28]
 800d356:	61bb      	str	r3, [r7, #24]
 800d358:	69b9      	ldr	r1, [r7, #24]
 800d35a:	69fa      	ldr	r2, [r7, #28]
 800d35c:	e841 2300 	strex	r3, r2, [r1]
 800d360:	617b      	str	r3, [r7, #20]
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d1e3      	bne.n	800d330 <HAL_UART_IRQHandler+0x484>
 800d368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d36c:	4619      	mov	r1, r3
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f848 	bl	800d404 <HAL_UARTEx_RxEventCallback>
 800d374:	e023      	b.n	800d3be <HAL_UART_IRQHandler+0x512>
 800d376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d009      	beq.n	800d396 <HAL_UART_IRQHandler+0x4ea>
 800d382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d003      	beq.n	800d396 <HAL_UART_IRQHandler+0x4ea>
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f8bb 	bl	800d50a <UART_Transmit_IT>
 800d394:	e014      	b.n	800d3c0 <HAL_UART_IRQHandler+0x514>
 800d396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00e      	beq.n	800d3c0 <HAL_UART_IRQHandler+0x514>
 800d3a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d008      	beq.n	800d3c0 <HAL_UART_IRQHandler+0x514>
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 f8fb 	bl	800d5aa <UART_EndTransmit_IT>
 800d3b4:	e004      	b.n	800d3c0 <HAL_UART_IRQHandler+0x514>
 800d3b6:	bf00      	nop
 800d3b8:	e002      	b.n	800d3c0 <HAL_UART_IRQHandler+0x514>
 800d3ba:	bf00      	nop
 800d3bc:	e000      	b.n	800d3c0 <HAL_UART_IRQHandler+0x514>
 800d3be:	bf00      	nop
 800d3c0:	37e8      	adds	r7, #232	; 0xe8
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop

0800d3c8 <HAL_UART_TxCpltCallback>:
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	bf00      	nop
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <HAL_UART_RxCpltCallback>:
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	bf00      	nop
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <HAL_UART_ErrorCallback>:
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <HAL_UARTEx_RxEventCallback>:
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	460b      	mov	r3, r1
 800d40e:	807b      	strh	r3, [r7, #2]
 800d410:	bf00      	nop
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <UART_EndRxTransfer>:
 800d41c:	b480      	push	{r7}
 800d41e:	b095      	sub	sp, #84	; 0x54
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	330c      	adds	r3, #12
 800d42a:	637b      	str	r3, [r7, #52]	; 0x34
 800d42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42e:	e853 3f00 	ldrex	r3, [r3]
 800d432:	633b      	str	r3, [r7, #48]	; 0x30
 800d434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d43a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	330c      	adds	r3, #12
 800d442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d444:	643a      	str	r2, [r7, #64]	; 0x40
 800d446:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d448:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d44a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d44c:	e841 2300 	strex	r3, r2, [r1]
 800d450:	63bb      	str	r3, [r7, #56]	; 0x38
 800d452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1e5      	bne.n	800d424 <UART_EndRxTransfer+0x8>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	3314      	adds	r3, #20
 800d45e:	623b      	str	r3, [r7, #32]
 800d460:	6a3b      	ldr	r3, [r7, #32]
 800d462:	e853 3f00 	ldrex	r3, [r3]
 800d466:	61fb      	str	r3, [r7, #28]
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	f023 0301 	bic.w	r3, r3, #1
 800d46e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3314      	adds	r3, #20
 800d476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d478:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d47a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d47c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d47e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d480:	e841 2300 	strex	r3, r2, [r1]
 800d484:	627b      	str	r3, [r7, #36]	; 0x24
 800d486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1e5      	bne.n	800d458 <UART_EndRxTransfer+0x3c>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d490:	2b01      	cmp	r3, #1
 800d492:	d119      	bne.n	800d4c8 <UART_EndRxTransfer+0xac>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	330c      	adds	r3, #12
 800d49a:	60fb      	str	r3, [r7, #12]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	e853 3f00 	ldrex	r3, [r3]
 800d4a2:	60bb      	str	r3, [r7, #8]
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	f023 0310 	bic.w	r3, r3, #16
 800d4aa:	647b      	str	r3, [r7, #68]	; 0x44
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	330c      	adds	r3, #12
 800d4b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4b4:	61ba      	str	r2, [r7, #24]
 800d4b6:	617b      	str	r3, [r7, #20]
 800d4b8:	6979      	ldr	r1, [r7, #20]
 800d4ba:	69ba      	ldr	r2, [r7, #24]
 800d4bc:	e841 2300 	strex	r3, r2, [r1]
 800d4c0:	613b      	str	r3, [r7, #16]
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d1e5      	bne.n	800d494 <UART_EndRxTransfer+0x78>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2220      	movs	r2, #32
 800d4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	631a      	str	r2, [r3, #48]	; 0x30
 800d4d6:	bf00      	nop
 800d4d8:	3754      	adds	r7, #84	; 0x54
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <UART_DMAAbortOnError>:
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b084      	sub	sp, #16
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ee:	60fb      	str	r3, [r7, #12]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	85da      	strh	r2, [r3, #46]	; 0x2e
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	84da      	strh	r2, [r3, #38]	; 0x26
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f7ff ff77 	bl	800d3f0 <HAL_UART_ErrorCallback>
 800d502:	bf00      	nop
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <UART_Transmit_IT>:
 800d50a:	b480      	push	{r7}
 800d50c:	b085      	sub	sp, #20
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	2b21      	cmp	r3, #33	; 0x21
 800d51c:	d13e      	bne.n	800d59c <UART_Transmit_IT+0x92>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	689b      	ldr	r3, [r3, #8]
 800d522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d526:	d114      	bne.n	800d552 <UART_Transmit_IT+0x48>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d110      	bne.n	800d552 <UART_Transmit_IT+0x48>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6a1b      	ldr	r3, [r3, #32]
 800d534:	60fb      	str	r3, [r7, #12]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	881b      	ldrh	r3, [r3, #0]
 800d53a:	461a      	mov	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d544:	605a      	str	r2, [r3, #4]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a1b      	ldr	r3, [r3, #32]
 800d54a:	1c9a      	adds	r2, r3, #2
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	621a      	str	r2, [r3, #32]
 800d550:	e008      	b.n	800d564 <UART_Transmit_IT+0x5a>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	1c59      	adds	r1, r3, #1
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	6211      	str	r1, [r2, #32]
 800d55c:	781a      	ldrb	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	605a      	str	r2, [r3, #4]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d568:	b29b      	uxth	r3, r3
 800d56a:	3b01      	subs	r3, #1
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	4619      	mov	r1, r3
 800d572:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10f      	bne.n	800d598 <UART_Transmit_IT+0x8e>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68da      	ldr	r2, [r3, #12]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d586:	60da      	str	r2, [r3, #12]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68da      	ldr	r2, [r3, #12]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d596:	60da      	str	r2, [r3, #12]
 800d598:	2300      	movs	r3, #0
 800d59a:	e000      	b.n	800d59e <UART_Transmit_IT+0x94>
 800d59c:	2302      	movs	r3, #2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3714      	adds	r7, #20
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <UART_EndTransmit_IT>:
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b082      	sub	sp, #8
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68da      	ldr	r2, [r3, #12]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5c0:	60da      	str	r2, [r3, #12]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2220      	movs	r2, #32
 800d5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7ff fefc 	bl	800d3c8 <HAL_UART_TxCpltCallback>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <UART_Receive_IT>:
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b08c      	sub	sp, #48	; 0x30
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b22      	cmp	r3, #34	; 0x22
 800d5ec:	f040 80ab 	bne.w	800d746 <UART_Receive_IT+0x16c>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5f8:	d117      	bne.n	800d62a <UART_Receive_IT+0x50>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d113      	bne.n	800d62a <UART_Receive_IT+0x50>
 800d602:	2300      	movs	r3, #0
 800d604:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d60a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	b29b      	uxth	r3, r3
 800d614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d618:	b29a      	uxth	r2, r3
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	801a      	strh	r2, [r3, #0]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d622:	1c9a      	adds	r2, r3, #2
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	629a      	str	r2, [r3, #40]	; 0x28
 800d628:	e026      	b.n	800d678 <UART_Receive_IT+0x9e>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d630:	2300      	movs	r3, #0
 800d632:	62bb      	str	r3, [r7, #40]	; 0x28
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	689b      	ldr	r3, [r3, #8]
 800d638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d63c:	d007      	beq.n	800d64e <UART_Receive_IT+0x74>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10a      	bne.n	800d65c <UART_Receive_IT+0x82>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d106      	bne.n	800d65c <UART_Receive_IT+0x82>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	b2da      	uxtb	r2, r3
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	701a      	strb	r2, [r3, #0]
 800d65a:	e008      	b.n	800d66e <UART_Receive_IT+0x94>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66c:	701a      	strb	r2, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	629a      	str	r2, [r3, #40]	; 0x28
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	3b01      	subs	r3, #1
 800d680:	b29b      	uxth	r3, r3
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	4619      	mov	r1, r3
 800d686:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d15a      	bne.n	800d742 <UART_Receive_IT+0x168>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	68da      	ldr	r2, [r3, #12]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f022 0220 	bic.w	r2, r2, #32
 800d69a:	60da      	str	r2, [r3, #12]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	68da      	ldr	r2, [r3, #12]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d6aa:	60da      	str	r2, [r3, #12]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	695a      	ldr	r2, [r3, #20]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f022 0201 	bic.w	r2, r2, #1
 800d6ba:	615a      	str	r2, [r3, #20]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2220      	movs	r2, #32
 800d6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d135      	bne.n	800d738 <UART_Receive_IT+0x15e>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	631a      	str	r2, [r3, #48]	; 0x30
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	330c      	adds	r3, #12
 800d6d8:	617b      	str	r3, [r7, #20]
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	e853 3f00 	ldrex	r3, [r3]
 800d6e0:	613b      	str	r3, [r7, #16]
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	f023 0310 	bic.w	r3, r3, #16
 800d6e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	330c      	adds	r3, #12
 800d6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6f2:	623a      	str	r2, [r7, #32]
 800d6f4:	61fb      	str	r3, [r7, #28]
 800d6f6:	69f9      	ldr	r1, [r7, #28]
 800d6f8:	6a3a      	ldr	r2, [r7, #32]
 800d6fa:	e841 2300 	strex	r3, r2, [r1]
 800d6fe:	61bb      	str	r3, [r7, #24]
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1e5      	bne.n	800d6d2 <UART_Receive_IT+0xf8>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f003 0310 	and.w	r3, r3, #16
 800d710:	2b10      	cmp	r3, #16
 800d712:	d10a      	bne.n	800d72a <UART_Receive_IT+0x150>
 800d714:	2300      	movs	r3, #0
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	60fb      	str	r3, [r7, #12]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d72e:	4619      	mov	r1, r3
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f7ff fe67 	bl	800d404 <HAL_UARTEx_RxEventCallback>
 800d736:	e002      	b.n	800d73e <UART_Receive_IT+0x164>
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff fe4f 	bl	800d3dc <HAL_UART_RxCpltCallback>
 800d73e:	2300      	movs	r3, #0
 800d740:	e002      	b.n	800d748 <UART_Receive_IT+0x16e>
 800d742:	2300      	movs	r3, #0
 800d744:	e000      	b.n	800d748 <UART_Receive_IT+0x16e>
 800d746:	2302      	movs	r3, #2
 800d748:	4618      	mov	r0, r3
 800d74a:	3730      	adds	r7, #48	; 0x30
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <UART_SetConfig>:
 800d750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d754:	b0c0      	sub	sp, #256	; 0x100
 800d756:	af00      	add	r7, sp, #0
 800d758:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800d75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	4bcf      	ldr	r3, [pc, #828]	; (800daa0 <UART_SetConfig+0x350>)
 800d764:	429a      	cmp	r2, r3
 800d766:	d904      	bls.n	800d772 <UART_SetConfig+0x22>
 800d768:	f640 6161 	movw	r1, #3681	; 0xe61
 800d76c:	48cd      	ldr	r0, [pc, #820]	; (800daa4 <UART_SetConfig+0x354>)
 800d76e:	f7f4 fdc2 	bl	80022f6 <assert_failed>
 800d772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00a      	beq.n	800d792 <UART_SetConfig+0x42>
 800d77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d786:	d004      	beq.n	800d792 <UART_SetConfig+0x42>
 800d788:	f640 6162 	movw	r1, #3682	; 0xe62
 800d78c:	48c5      	ldr	r0, [pc, #788]	; (800daa4 <UART_SetConfig+0x354>)
 800d78e:	f7f4 fdb2 	bl	80022f6 <assert_failed>
 800d792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d796:	691b      	ldr	r3, [r3, #16]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d010      	beq.n	800d7be <UART_SetConfig+0x6e>
 800d79c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7a6:	d00a      	beq.n	800d7be <UART_SetConfig+0x6e>
 800d7a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7ac:	691b      	ldr	r3, [r3, #16]
 800d7ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d7b2:	d004      	beq.n	800d7be <UART_SetConfig+0x6e>
 800d7b4:	f640 6163 	movw	r1, #3683	; 0xe63
 800d7b8:	48ba      	ldr	r0, [pc, #744]	; (800daa4 <UART_SetConfig+0x354>)
 800d7ba:	f7f4 fd9c 	bl	80022f6 <assert_failed>
 800d7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7c2:	695a      	ldr	r2, [r3, #20]
 800d7c4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d104      	bne.n	800d7d8 <UART_SetConfig+0x88>
 800d7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7d2:	695b      	ldr	r3, [r3, #20]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d104      	bne.n	800d7e2 <UART_SetConfig+0x92>
 800d7d8:	f640 6164 	movw	r1, #3684	; 0xe64
 800d7dc:	48b1      	ldr	r0, [pc, #708]	; (800daa4 <UART_SetConfig+0x354>)
 800d7de:	f7f4 fd8a 	bl	80022f6 <assert_failed>
 800d7e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	691b      	ldr	r3, [r3, #16]
 800d7ea:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d7ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7f2:	68d9      	ldr	r1, [r3, #12]
 800d7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	ea40 0301 	orr.w	r3, r0, r1
 800d7fe:	6113      	str	r3, [r2, #16]
 800d800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d804:	689a      	ldr	r2, [r3, #8]
 800d806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	431a      	orrs	r2, r3
 800d80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d812:	695b      	ldr	r3, [r3, #20]
 800d814:	431a      	orrs	r2, r3
 800d816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d81a:	69db      	ldr	r3, [r3, #28]
 800d81c:	4313      	orrs	r3, r2
 800d81e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d82e:	f021 010c 	bic.w	r1, r1, #12
 800d832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d83c:	430b      	orrs	r3, r1
 800d83e:	60d3      	str	r3, [r2, #12]
 800d840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	695b      	ldr	r3, [r3, #20]
 800d848:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d850:	6999      	ldr	r1, [r3, #24]
 800d852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	ea40 0301 	orr.w	r3, r0, r1
 800d85c:	6153      	str	r3, [r2, #20]
 800d85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	4b90      	ldr	r3, [pc, #576]	; (800daa8 <UART_SetConfig+0x358>)
 800d866:	429a      	cmp	r2, r3
 800d868:	d005      	beq.n	800d876 <UART_SetConfig+0x126>
 800d86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	4b8e      	ldr	r3, [pc, #568]	; (800daac <UART_SetConfig+0x35c>)
 800d872:	429a      	cmp	r2, r3
 800d874:	d104      	bne.n	800d880 <UART_SetConfig+0x130>
 800d876:	f7fb fc8d 	bl	8009194 <HAL_RCC_GetPCLK2Freq>
 800d87a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d87e:	e003      	b.n	800d888 <UART_SetConfig+0x138>
 800d880:	f7fb fc74 	bl	800916c <HAL_RCC_GetPCLK1Freq>
 800d884:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d88c:	69db      	ldr	r3, [r3, #28]
 800d88e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d892:	f040 810f 	bne.w	800dab4 <UART_SetConfig+0x364>
 800d896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d89a:	2200      	movs	r2, #0
 800d89c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d8a0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d8a4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d8a8:	4622      	mov	r2, r4
 800d8aa:	462b      	mov	r3, r5
 800d8ac:	1891      	adds	r1, r2, r2
 800d8ae:	65b9      	str	r1, [r7, #88]	; 0x58
 800d8b0:	415b      	adcs	r3, r3
 800d8b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d8b8:	4621      	mov	r1, r4
 800d8ba:	eb12 0801 	adds.w	r8, r2, r1
 800d8be:	4629      	mov	r1, r5
 800d8c0:	eb43 0901 	adc.w	r9, r3, r1
 800d8c4:	f04f 0200 	mov.w	r2, #0
 800d8c8:	f04f 0300 	mov.w	r3, #0
 800d8cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d8d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d8d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d8d8:	4690      	mov	r8, r2
 800d8da:	4699      	mov	r9, r3
 800d8dc:	4623      	mov	r3, r4
 800d8de:	eb18 0303 	adds.w	r3, r8, r3
 800d8e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d8e6:	462b      	mov	r3, r5
 800d8e8:	eb49 0303 	adc.w	r3, r9, r3
 800d8ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d8f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d8fc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d900:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d904:	460b      	mov	r3, r1
 800d906:	18db      	adds	r3, r3, r3
 800d908:	653b      	str	r3, [r7, #80]	; 0x50
 800d90a:	4613      	mov	r3, r2
 800d90c:	eb42 0303 	adc.w	r3, r2, r3
 800d910:	657b      	str	r3, [r7, #84]	; 0x54
 800d912:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d916:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d91a:	f7f3 faa3 	bl	8000e64 <__aeabi_uldivmod>
 800d91e:	4602      	mov	r2, r0
 800d920:	460b      	mov	r3, r1
 800d922:	4b63      	ldr	r3, [pc, #396]	; (800dab0 <UART_SetConfig+0x360>)
 800d924:	fba3 2302 	umull	r2, r3, r3, r2
 800d928:	095b      	lsrs	r3, r3, #5
 800d92a:	011c      	lsls	r4, r3, #4
 800d92c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d930:	2200      	movs	r2, #0
 800d932:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d936:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d93a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d93e:	4642      	mov	r2, r8
 800d940:	464b      	mov	r3, r9
 800d942:	1891      	adds	r1, r2, r2
 800d944:	64b9      	str	r1, [r7, #72]	; 0x48
 800d946:	415b      	adcs	r3, r3
 800d948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d94a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d94e:	4641      	mov	r1, r8
 800d950:	eb12 0a01 	adds.w	sl, r2, r1
 800d954:	4649      	mov	r1, r9
 800d956:	eb43 0b01 	adc.w	fp, r3, r1
 800d95a:	f04f 0200 	mov.w	r2, #0
 800d95e:	f04f 0300 	mov.w	r3, #0
 800d962:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d966:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d96a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d96e:	4692      	mov	sl, r2
 800d970:	469b      	mov	fp, r3
 800d972:	4643      	mov	r3, r8
 800d974:	eb1a 0303 	adds.w	r3, sl, r3
 800d978:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d97c:	464b      	mov	r3, r9
 800d97e:	eb4b 0303 	adc.w	r3, fp, r3
 800d982:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	2200      	movs	r2, #0
 800d98e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d992:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d996:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d99a:	460b      	mov	r3, r1
 800d99c:	18db      	adds	r3, r3, r3
 800d99e:	643b      	str	r3, [r7, #64]	; 0x40
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	eb42 0303 	adc.w	r3, r2, r3
 800d9a6:	647b      	str	r3, [r7, #68]	; 0x44
 800d9a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d9ac:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d9b0:	f7f3 fa58 	bl	8000e64 <__aeabi_uldivmod>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4611      	mov	r1, r2
 800d9ba:	4b3d      	ldr	r3, [pc, #244]	; (800dab0 <UART_SetConfig+0x360>)
 800d9bc:	fba3 2301 	umull	r2, r3, r3, r1
 800d9c0:	095b      	lsrs	r3, r3, #5
 800d9c2:	2264      	movs	r2, #100	; 0x64
 800d9c4:	fb02 f303 	mul.w	r3, r2, r3
 800d9c8:	1acb      	subs	r3, r1, r3
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d9d0:	4b37      	ldr	r3, [pc, #220]	; (800dab0 <UART_SetConfig+0x360>)
 800d9d2:	fba3 2302 	umull	r2, r3, r3, r2
 800d9d6:	095b      	lsrs	r3, r3, #5
 800d9d8:	005b      	lsls	r3, r3, #1
 800d9da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d9de:	441c      	add	r4, r3
 800d9e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d9ea:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d9ee:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d9f2:	4642      	mov	r2, r8
 800d9f4:	464b      	mov	r3, r9
 800d9f6:	1891      	adds	r1, r2, r2
 800d9f8:	63b9      	str	r1, [r7, #56]	; 0x38
 800d9fa:	415b      	adcs	r3, r3
 800d9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800da02:	4641      	mov	r1, r8
 800da04:	1851      	adds	r1, r2, r1
 800da06:	6339      	str	r1, [r7, #48]	; 0x30
 800da08:	4649      	mov	r1, r9
 800da0a:	414b      	adcs	r3, r1
 800da0c:	637b      	str	r3, [r7, #52]	; 0x34
 800da0e:	f04f 0200 	mov.w	r2, #0
 800da12:	f04f 0300 	mov.w	r3, #0
 800da16:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800da1a:	4659      	mov	r1, fp
 800da1c:	00cb      	lsls	r3, r1, #3
 800da1e:	4651      	mov	r1, sl
 800da20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800da24:	4651      	mov	r1, sl
 800da26:	00ca      	lsls	r2, r1, #3
 800da28:	4610      	mov	r0, r2
 800da2a:	4619      	mov	r1, r3
 800da2c:	4603      	mov	r3, r0
 800da2e:	4642      	mov	r2, r8
 800da30:	189b      	adds	r3, r3, r2
 800da32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800da36:	464b      	mov	r3, r9
 800da38:	460a      	mov	r2, r1
 800da3a:	eb42 0303 	adc.w	r3, r2, r3
 800da3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800da42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800da4e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800da52:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800da56:	460b      	mov	r3, r1
 800da58:	18db      	adds	r3, r3, r3
 800da5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800da5c:	4613      	mov	r3, r2
 800da5e:	eb42 0303 	adc.w	r3, r2, r3
 800da62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800da68:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800da6c:	f7f3 f9fa 	bl	8000e64 <__aeabi_uldivmod>
 800da70:	4602      	mov	r2, r0
 800da72:	460b      	mov	r3, r1
 800da74:	4b0e      	ldr	r3, [pc, #56]	; (800dab0 <UART_SetConfig+0x360>)
 800da76:	fba3 1302 	umull	r1, r3, r3, r2
 800da7a:	095b      	lsrs	r3, r3, #5
 800da7c:	2164      	movs	r1, #100	; 0x64
 800da7e:	fb01 f303 	mul.w	r3, r1, r3
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	00db      	lsls	r3, r3, #3
 800da86:	3332      	adds	r3, #50	; 0x32
 800da88:	4a09      	ldr	r2, [pc, #36]	; (800dab0 <UART_SetConfig+0x360>)
 800da8a:	fba2 2303 	umull	r2, r3, r2, r3
 800da8e:	095b      	lsrs	r3, r3, #5
 800da90:	f003 0207 	and.w	r2, r3, #7
 800da94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4422      	add	r2, r4
 800da9c:	609a      	str	r2, [r3, #8]
 800da9e:	e109      	b.n	800dcb4 <UART_SetConfig+0x564>
 800daa0:	00a037a0 	.word	0x00a037a0
 800daa4:	08018a14 	.word	0x08018a14
 800daa8:	40011000 	.word	0x40011000
 800daac:	40011400 	.word	0x40011400
 800dab0:	51eb851f 	.word	0x51eb851f
 800dab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dab8:	2200      	movs	r2, #0
 800daba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dabe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dac2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800dac6:	4642      	mov	r2, r8
 800dac8:	464b      	mov	r3, r9
 800daca:	1891      	adds	r1, r2, r2
 800dacc:	6239      	str	r1, [r7, #32]
 800dace:	415b      	adcs	r3, r3
 800dad0:	627b      	str	r3, [r7, #36]	; 0x24
 800dad2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dad6:	4641      	mov	r1, r8
 800dad8:	1854      	adds	r4, r2, r1
 800dada:	4649      	mov	r1, r9
 800dadc:	eb43 0501 	adc.w	r5, r3, r1
 800dae0:	f04f 0200 	mov.w	r2, #0
 800dae4:	f04f 0300 	mov.w	r3, #0
 800dae8:	00eb      	lsls	r3, r5, #3
 800daea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800daee:	00e2      	lsls	r2, r4, #3
 800daf0:	4614      	mov	r4, r2
 800daf2:	461d      	mov	r5, r3
 800daf4:	4643      	mov	r3, r8
 800daf6:	18e3      	adds	r3, r4, r3
 800daf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dafc:	464b      	mov	r3, r9
 800dafe:	eb45 0303 	adc.w	r3, r5, r3
 800db02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800db06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800db16:	f04f 0200 	mov.w	r2, #0
 800db1a:	f04f 0300 	mov.w	r3, #0
 800db1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800db22:	4629      	mov	r1, r5
 800db24:	008b      	lsls	r3, r1, #2
 800db26:	4621      	mov	r1, r4
 800db28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db2c:	4621      	mov	r1, r4
 800db2e:	008a      	lsls	r2, r1, #2
 800db30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800db34:	f7f3 f996 	bl	8000e64 <__aeabi_uldivmod>
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	4b60      	ldr	r3, [pc, #384]	; (800dcc0 <UART_SetConfig+0x570>)
 800db3e:	fba3 2302 	umull	r2, r3, r3, r2
 800db42:	095b      	lsrs	r3, r3, #5
 800db44:	011c      	lsls	r4, r3, #4
 800db46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db4a:	2200      	movs	r2, #0
 800db4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800db50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800db54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800db58:	4642      	mov	r2, r8
 800db5a:	464b      	mov	r3, r9
 800db5c:	1891      	adds	r1, r2, r2
 800db5e:	61b9      	str	r1, [r7, #24]
 800db60:	415b      	adcs	r3, r3
 800db62:	61fb      	str	r3, [r7, #28]
 800db64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800db68:	4641      	mov	r1, r8
 800db6a:	1851      	adds	r1, r2, r1
 800db6c:	6139      	str	r1, [r7, #16]
 800db6e:	4649      	mov	r1, r9
 800db70:	414b      	adcs	r3, r1
 800db72:	617b      	str	r3, [r7, #20]
 800db74:	f04f 0200 	mov.w	r2, #0
 800db78:	f04f 0300 	mov.w	r3, #0
 800db7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800db80:	4659      	mov	r1, fp
 800db82:	00cb      	lsls	r3, r1, #3
 800db84:	4651      	mov	r1, sl
 800db86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db8a:	4651      	mov	r1, sl
 800db8c:	00ca      	lsls	r2, r1, #3
 800db8e:	4610      	mov	r0, r2
 800db90:	4619      	mov	r1, r3
 800db92:	4603      	mov	r3, r0
 800db94:	4642      	mov	r2, r8
 800db96:	189b      	adds	r3, r3, r2
 800db98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db9c:	464b      	mov	r3, r9
 800db9e:	460a      	mov	r2, r1
 800dba0:	eb42 0303 	adc.w	r3, r2, r3
 800dba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	67bb      	str	r3, [r7, #120]	; 0x78
 800dbb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800dbb4:	f04f 0200 	mov.w	r2, #0
 800dbb8:	f04f 0300 	mov.w	r3, #0
 800dbbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800dbc0:	4649      	mov	r1, r9
 800dbc2:	008b      	lsls	r3, r1, #2
 800dbc4:	4641      	mov	r1, r8
 800dbc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dbca:	4641      	mov	r1, r8
 800dbcc:	008a      	lsls	r2, r1, #2
 800dbce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dbd2:	f7f3 f947 	bl	8000e64 <__aeabi_uldivmod>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	4611      	mov	r1, r2
 800dbdc:	4b38      	ldr	r3, [pc, #224]	; (800dcc0 <UART_SetConfig+0x570>)
 800dbde:	fba3 2301 	umull	r2, r3, r3, r1
 800dbe2:	095b      	lsrs	r3, r3, #5
 800dbe4:	2264      	movs	r2, #100	; 0x64
 800dbe6:	fb02 f303 	mul.w	r3, r2, r3
 800dbea:	1acb      	subs	r3, r1, r3
 800dbec:	011b      	lsls	r3, r3, #4
 800dbee:	3332      	adds	r3, #50	; 0x32
 800dbf0:	4a33      	ldr	r2, [pc, #204]	; (800dcc0 <UART_SetConfig+0x570>)
 800dbf2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbf6:	095b      	lsrs	r3, r3, #5
 800dbf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbfc:	441c      	add	r4, r3
 800dbfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc02:	2200      	movs	r2, #0
 800dc04:	673b      	str	r3, [r7, #112]	; 0x70
 800dc06:	677a      	str	r2, [r7, #116]	; 0x74
 800dc08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800dc0c:	4642      	mov	r2, r8
 800dc0e:	464b      	mov	r3, r9
 800dc10:	1891      	adds	r1, r2, r2
 800dc12:	60b9      	str	r1, [r7, #8]
 800dc14:	415b      	adcs	r3, r3
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dc1c:	4641      	mov	r1, r8
 800dc1e:	1851      	adds	r1, r2, r1
 800dc20:	6039      	str	r1, [r7, #0]
 800dc22:	4649      	mov	r1, r9
 800dc24:	414b      	adcs	r3, r1
 800dc26:	607b      	str	r3, [r7, #4]
 800dc28:	f04f 0200 	mov.w	r2, #0
 800dc2c:	f04f 0300 	mov.w	r3, #0
 800dc30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dc34:	4659      	mov	r1, fp
 800dc36:	00cb      	lsls	r3, r1, #3
 800dc38:	4651      	mov	r1, sl
 800dc3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dc3e:	4651      	mov	r1, sl
 800dc40:	00ca      	lsls	r2, r1, #3
 800dc42:	4610      	mov	r0, r2
 800dc44:	4619      	mov	r1, r3
 800dc46:	4603      	mov	r3, r0
 800dc48:	4642      	mov	r2, r8
 800dc4a:	189b      	adds	r3, r3, r2
 800dc4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc4e:	464b      	mov	r3, r9
 800dc50:	460a      	mov	r2, r1
 800dc52:	eb42 0303 	adc.w	r3, r2, r3
 800dc56:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dc58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	663b      	str	r3, [r7, #96]	; 0x60
 800dc62:	667a      	str	r2, [r7, #100]	; 0x64
 800dc64:	f04f 0200 	mov.w	r2, #0
 800dc68:	f04f 0300 	mov.w	r3, #0
 800dc6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800dc70:	4649      	mov	r1, r9
 800dc72:	008b      	lsls	r3, r1, #2
 800dc74:	4641      	mov	r1, r8
 800dc76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dc7a:	4641      	mov	r1, r8
 800dc7c:	008a      	lsls	r2, r1, #2
 800dc7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dc82:	f7f3 f8ef 	bl	8000e64 <__aeabi_uldivmod>
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	4b0d      	ldr	r3, [pc, #52]	; (800dcc0 <UART_SetConfig+0x570>)
 800dc8c:	fba3 1302 	umull	r1, r3, r3, r2
 800dc90:	095b      	lsrs	r3, r3, #5
 800dc92:	2164      	movs	r1, #100	; 0x64
 800dc94:	fb01 f303 	mul.w	r3, r1, r3
 800dc98:	1ad3      	subs	r3, r2, r3
 800dc9a:	011b      	lsls	r3, r3, #4
 800dc9c:	3332      	adds	r3, #50	; 0x32
 800dc9e:	4a08      	ldr	r2, [pc, #32]	; (800dcc0 <UART_SetConfig+0x570>)
 800dca0:	fba2 2303 	umull	r2, r3, r2, r3
 800dca4:	095b      	lsrs	r3, r3, #5
 800dca6:	f003 020f 	and.w	r2, r3, #15
 800dcaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4422      	add	r2, r4
 800dcb2:	609a      	str	r2, [r3, #8]
 800dcb4:	bf00      	nop
 800dcb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dcc0:	51eb851f 	.word	0x51eb851f

0800dcc4 <USB_CoreInit>:
 800dcc4:	b084      	sub	sp, #16
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b084      	sub	sp, #16
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	f107 001c 	add.w	r0, r7, #28
 800dcd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d122      	bne.n	800dd22 <USB_CoreInit+0x5e>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	639a      	str	r2, [r3, #56]	; 0x38
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800dcf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	60d3      	str	r3, [r2, #12]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	60da      	str	r2, [r3, #12]
 800dd04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d105      	bne.n	800dd16 <USB_CoreInit+0x52>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	60da      	str	r2, [r3, #12]
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f001 fbee 	bl	800f4f8 <USB_CoreReset>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73fb      	strb	r3, [r7, #15]
 800dd20:	e01a      	b.n	800dd58 <USB_CoreInit+0x94>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	60da      	str	r2, [r3, #12]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f001 fbe2 	bl	800f4f8 <USB_CoreReset>
 800dd34:	4603      	mov	r3, r0
 800dd36:	73fb      	strb	r3, [r7, #15]
 800dd38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d106      	bne.n	800dd4c <USB_CoreInit+0x88>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	639a      	str	r2, [r3, #56]	; 0x38
 800dd4a:	e005      	b.n	800dd58 <USB_CoreInit+0x94>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	639a      	str	r2, [r3, #56]	; 0x38
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d10b      	bne.n	800dd76 <USB_CoreInit+0xb2>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	f043 0206 	orr.w	r2, r3, #6
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	609a      	str	r2, [r3, #8]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	f043 0220 	orr.w	r2, r3, #32
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	609a      	str	r2, [r3, #8]
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd82:	b004      	add	sp, #16
 800dd84:	4770      	bx	lr
	...

0800dd88 <USB_SetTurnaroundTime>:
 800dd88:	b480      	push	{r7}
 800dd8a:	b087      	sub	sp, #28
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	4613      	mov	r3, r2
 800dd94:	71fb      	strb	r3, [r7, #7]
 800dd96:	79fb      	ldrb	r3, [r7, #7]
 800dd98:	2b02      	cmp	r3, #2
 800dd9a:	d165      	bne.n	800de68 <USB_SetTurnaroundTime+0xe0>
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	4a41      	ldr	r2, [pc, #260]	; (800dea4 <USB_SetTurnaroundTime+0x11c>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d906      	bls.n	800ddb2 <USB_SetTurnaroundTime+0x2a>
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	4a40      	ldr	r2, [pc, #256]	; (800dea8 <USB_SetTurnaroundTime+0x120>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d202      	bcs.n	800ddb2 <USB_SetTurnaroundTime+0x2a>
 800ddac:	230f      	movs	r3, #15
 800ddae:	617b      	str	r3, [r7, #20]
 800ddb0:	e062      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	4a3c      	ldr	r2, [pc, #240]	; (800dea8 <USB_SetTurnaroundTime+0x120>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d306      	bcc.n	800ddc8 <USB_SetTurnaroundTime+0x40>
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	4a3b      	ldr	r2, [pc, #236]	; (800deac <USB_SetTurnaroundTime+0x124>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d202      	bcs.n	800ddc8 <USB_SetTurnaroundTime+0x40>
 800ddc2:	230e      	movs	r3, #14
 800ddc4:	617b      	str	r3, [r7, #20]
 800ddc6:	e057      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	4a38      	ldr	r2, [pc, #224]	; (800deac <USB_SetTurnaroundTime+0x124>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d306      	bcc.n	800ddde <USB_SetTurnaroundTime+0x56>
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	4a37      	ldr	r2, [pc, #220]	; (800deb0 <USB_SetTurnaroundTime+0x128>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d202      	bcs.n	800ddde <USB_SetTurnaroundTime+0x56>
 800ddd8:	230d      	movs	r3, #13
 800ddda:	617b      	str	r3, [r7, #20]
 800dddc:	e04c      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	4a33      	ldr	r2, [pc, #204]	; (800deb0 <USB_SetTurnaroundTime+0x128>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d306      	bcc.n	800ddf4 <USB_SetTurnaroundTime+0x6c>
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	4a32      	ldr	r2, [pc, #200]	; (800deb4 <USB_SetTurnaroundTime+0x12c>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d802      	bhi.n	800ddf4 <USB_SetTurnaroundTime+0x6c>
 800ddee:	230c      	movs	r3, #12
 800ddf0:	617b      	str	r3, [r7, #20]
 800ddf2:	e041      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	4a2f      	ldr	r2, [pc, #188]	; (800deb4 <USB_SetTurnaroundTime+0x12c>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d906      	bls.n	800de0a <USB_SetTurnaroundTime+0x82>
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	4a2e      	ldr	r2, [pc, #184]	; (800deb8 <USB_SetTurnaroundTime+0x130>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d802      	bhi.n	800de0a <USB_SetTurnaroundTime+0x82>
 800de04:	230b      	movs	r3, #11
 800de06:	617b      	str	r3, [r7, #20]
 800de08:	e036      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	4a2a      	ldr	r2, [pc, #168]	; (800deb8 <USB_SetTurnaroundTime+0x130>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d906      	bls.n	800de20 <USB_SetTurnaroundTime+0x98>
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	4a29      	ldr	r2, [pc, #164]	; (800debc <USB_SetTurnaroundTime+0x134>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d802      	bhi.n	800de20 <USB_SetTurnaroundTime+0x98>
 800de1a:	230a      	movs	r3, #10
 800de1c:	617b      	str	r3, [r7, #20]
 800de1e:	e02b      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	4a26      	ldr	r2, [pc, #152]	; (800debc <USB_SetTurnaroundTime+0x134>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d906      	bls.n	800de36 <USB_SetTurnaroundTime+0xae>
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	4a25      	ldr	r2, [pc, #148]	; (800dec0 <USB_SetTurnaroundTime+0x138>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d202      	bcs.n	800de36 <USB_SetTurnaroundTime+0xae>
 800de30:	2309      	movs	r3, #9
 800de32:	617b      	str	r3, [r7, #20]
 800de34:	e020      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	4a21      	ldr	r2, [pc, #132]	; (800dec0 <USB_SetTurnaroundTime+0x138>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d306      	bcc.n	800de4c <USB_SetTurnaroundTime+0xc4>
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	4a20      	ldr	r2, [pc, #128]	; (800dec4 <USB_SetTurnaroundTime+0x13c>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d802      	bhi.n	800de4c <USB_SetTurnaroundTime+0xc4>
 800de46:	2308      	movs	r3, #8
 800de48:	617b      	str	r3, [r7, #20]
 800de4a:	e015      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	4a1d      	ldr	r2, [pc, #116]	; (800dec4 <USB_SetTurnaroundTime+0x13c>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d906      	bls.n	800de62 <USB_SetTurnaroundTime+0xda>
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	4a1c      	ldr	r2, [pc, #112]	; (800dec8 <USB_SetTurnaroundTime+0x140>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d202      	bcs.n	800de62 <USB_SetTurnaroundTime+0xda>
 800de5c:	2307      	movs	r3, #7
 800de5e:	617b      	str	r3, [r7, #20]
 800de60:	e00a      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800de62:	2306      	movs	r3, #6
 800de64:	617b      	str	r3, [r7, #20]
 800de66:	e007      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800de68:	79fb      	ldrb	r3, [r7, #7]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d102      	bne.n	800de74 <USB_SetTurnaroundTime+0xec>
 800de6e:	2309      	movs	r3, #9
 800de70:	617b      	str	r3, [r7, #20]
 800de72:	e001      	b.n	800de78 <USB_SetTurnaroundTime+0xf0>
 800de74:	2309      	movs	r3, #9
 800de76:	617b      	str	r3, [r7, #20]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	60da      	str	r2, [r3, #12]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	68da      	ldr	r2, [r3, #12]
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	029b      	lsls	r3, r3, #10
 800de8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800de90:	431a      	orrs	r2, r3
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	60da      	str	r2, [r3, #12]
 800de96:	2300      	movs	r3, #0
 800de98:	4618      	mov	r0, r3
 800de9a:	371c      	adds	r7, #28
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	00d8acbf 	.word	0x00d8acbf
 800dea8:	00e4e1c0 	.word	0x00e4e1c0
 800deac:	00f42400 	.word	0x00f42400
 800deb0:	01067380 	.word	0x01067380
 800deb4:	011a499f 	.word	0x011a499f
 800deb8:	01312cff 	.word	0x01312cff
 800debc:	014ca43f 	.word	0x014ca43f
 800dec0:	016e3600 	.word	0x016e3600
 800dec4:	01a6ab1f 	.word	0x01a6ab1f
 800dec8:	01e84800 	.word	0x01e84800

0800decc <USB_EnableGlobalInt>:
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	f043 0201 	orr.w	r2, r3, #1
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	609a      	str	r2, [r3, #8]
 800dee0:	2300      	movs	r3, #0
 800dee2:	4618      	mov	r0, r3
 800dee4:	370c      	adds	r7, #12
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <USB_DisableGlobalInt>:
 800deee:	b480      	push	{r7}
 800def0:	b083      	sub	sp, #12
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	f023 0201 	bic.w	r2, r3, #1
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	609a      	str	r2, [r3, #8]
 800df02:	2300      	movs	r3, #0
 800df04:	4618      	mov	r0, r3
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <USB_SetCurrentMode>:
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	460b      	mov	r3, r1
 800df1a:	70fb      	strb	r3, [r7, #3]
 800df1c:	2300      	movs	r3, #0
 800df1e:	60fb      	str	r3, [r7, #12]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	60da      	str	r2, [r3, #12]
 800df2c:	78fb      	ldrb	r3, [r7, #3]
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d115      	bne.n	800df5e <USB_SetCurrentMode+0x4e>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	68db      	ldr	r3, [r3, #12]
 800df36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	60da      	str	r2, [r3, #12]
 800df3e:	2001      	movs	r0, #1
 800df40:	f7f7 fede 	bl	8005d00 <HAL_Delay>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	3301      	adds	r3, #1
 800df48:	60fb      	str	r3, [r7, #12]
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f001 fa45 	bl	800f3da <USB_GetMode>
 800df50:	4603      	mov	r3, r0
 800df52:	2b01      	cmp	r3, #1
 800df54:	d01e      	beq.n	800df94 <USB_SetCurrentMode+0x84>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2b31      	cmp	r3, #49	; 0x31
 800df5a:	d9f0      	bls.n	800df3e <USB_SetCurrentMode+0x2e>
 800df5c:	e01a      	b.n	800df94 <USB_SetCurrentMode+0x84>
 800df5e:	78fb      	ldrb	r3, [r7, #3]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d115      	bne.n	800df90 <USB_SetCurrentMode+0x80>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	60da      	str	r2, [r3, #12]
 800df70:	2001      	movs	r0, #1
 800df72:	f7f7 fec5 	bl	8005d00 <HAL_Delay>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	3301      	adds	r3, #1
 800df7a:	60fb      	str	r3, [r7, #12]
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f001 fa2c 	bl	800f3da <USB_GetMode>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	d005      	beq.n	800df94 <USB_SetCurrentMode+0x84>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2b31      	cmp	r3, #49	; 0x31
 800df8c:	d9f0      	bls.n	800df70 <USB_SetCurrentMode+0x60>
 800df8e:	e001      	b.n	800df94 <USB_SetCurrentMode+0x84>
 800df90:	2301      	movs	r3, #1
 800df92:	e005      	b.n	800dfa0 <USB_SetCurrentMode+0x90>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2b32      	cmp	r3, #50	; 0x32
 800df98:	d101      	bne.n	800df9e <USB_SetCurrentMode+0x8e>
 800df9a:	2301      	movs	r3, #1
 800df9c:	e000      	b.n	800dfa0 <USB_SetCurrentMode+0x90>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3710      	adds	r7, #16
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <USB_DevInit>:
 800dfa8:	b084      	sub	sp, #16
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b086      	sub	sp, #24
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
 800dfb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dfb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800dfba:	2300      	movs	r3, #0
 800dfbc:	75fb      	strb	r3, [r7, #23]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	60fb      	str	r3, [r7, #12]
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	613b      	str	r3, [r7, #16]
 800dfc6:	e009      	b.n	800dfdc <USB_DevInit+0x34>
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	3340      	adds	r3, #64	; 0x40
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	4413      	add	r3, r2
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	605a      	str	r2, [r3, #4]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	613b      	str	r3, [r7, #16]
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	2b0e      	cmp	r3, #14
 800dfe0:	d9f2      	bls.n	800dfc8 <USB_DevInit+0x20>
 800dfe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d11c      	bne.n	800e022 <USB_DevInit+0x7a>
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dff6:	f043 0302 	orr.w	r3, r3, #2
 800dffa:	6053      	str	r3, [r2, #4]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e000:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	639a      	str	r2, [r3, #56]	; 0x38
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e00c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	639a      	str	r2, [r3, #56]	; 0x38
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e018:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	639a      	str	r2, [r3, #56]	; 0x38
 800e020:	e00b      	b.n	800e03a <USB_DevInit+0x92>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e026:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	639a      	str	r2, [r3, #56]	; 0x38
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e032:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	639a      	str	r2, [r3, #56]	; 0x38
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e040:	461a      	mov	r2, r3
 800e042:	2300      	movs	r3, #0
 800e044:	6013      	str	r3, [r2, #0]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e04c:	4619      	mov	r1, r3
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e054:	461a      	mov	r2, r3
 800e056:	680b      	ldr	r3, [r1, #0]
 800e058:	6013      	str	r3, [r2, #0]
 800e05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d10c      	bne.n	800e07a <USB_DevInit+0xd2>
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	2b00      	cmp	r3, #0
 800e064:	d104      	bne.n	800e070 <USB_DevInit+0xc8>
 800e066:	2100      	movs	r1, #0
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f965 	bl	800e338 <USB_SetDevSpeed>
 800e06e:	e008      	b.n	800e082 <USB_DevInit+0xda>
 800e070:	2101      	movs	r1, #1
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 f960 	bl	800e338 <USB_SetDevSpeed>
 800e078:	e003      	b.n	800e082 <USB_DevInit+0xda>
 800e07a:	2103      	movs	r1, #3
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 f95b 	bl	800e338 <USB_SetDevSpeed>
 800e082:	2110      	movs	r1, #16
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 f8f3 	bl	800e270 <USB_FlushTxFifo>
 800e08a:	4603      	mov	r3, r0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d001      	beq.n	800e094 <USB_DevInit+0xec>
 800e090:	2301      	movs	r3, #1
 800e092:	75fb      	strb	r3, [r7, #23]
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 f91f 	bl	800e2d8 <USB_FlushRxFifo>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <USB_DevInit+0xfc>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	75fb      	strb	r3, [r7, #23]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	6113      	str	r3, [r2, #16]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	6153      	str	r3, [r2, #20]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	61d3      	str	r3, [r2, #28]
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	613b      	str	r3, [r7, #16]
 800e0cc:	e043      	b.n	800e156 <USB_DevInit+0x1ae>
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	015a      	lsls	r2, r3, #5
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0e4:	d118      	bne.n	800e118 <USB_DevInit+0x170>
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10a      	bne.n	800e102 <USB_DevInit+0x15a>
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	015a      	lsls	r2, r3, #5
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e0fe:	6013      	str	r3, [r2, #0]
 800e100:	e013      	b.n	800e12a <USB_DevInit+0x182>
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	015a      	lsls	r2, r3, #5
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	4413      	add	r3, r2
 800e10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e10e:	461a      	mov	r2, r3
 800e110:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e114:	6013      	str	r3, [r2, #0]
 800e116:	e008      	b.n	800e12a <USB_DevInit+0x182>
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	015a      	lsls	r2, r3, #5
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	4413      	add	r3, r2
 800e120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e124:	461a      	mov	r2, r3
 800e126:	2300      	movs	r3, #0
 800e128:	6013      	str	r3, [r2, #0]
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	015a      	lsls	r2, r3, #5
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	4413      	add	r3, r2
 800e132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e136:	461a      	mov	r2, r3
 800e138:	2300      	movs	r3, #0
 800e13a:	6113      	str	r3, [r2, #16]
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	015a      	lsls	r2, r3, #5
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	4413      	add	r3, r2
 800e144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e148:	461a      	mov	r2, r3
 800e14a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e14e:	6093      	str	r3, [r2, #8]
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	3301      	adds	r3, #1
 800e154:	613b      	str	r3, [r7, #16]
 800e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e158:	693a      	ldr	r2, [r7, #16]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d3b7      	bcc.n	800e0ce <USB_DevInit+0x126>
 800e15e:	2300      	movs	r3, #0
 800e160:	613b      	str	r3, [r7, #16]
 800e162:	e043      	b.n	800e1ec <USB_DevInit+0x244>
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	015a      	lsls	r2, r3, #5
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	4413      	add	r3, r2
 800e16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e17a:	d118      	bne.n	800e1ae <USB_DevInit+0x206>
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10a      	bne.n	800e198 <USB_DevInit+0x1f0>
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	015a      	lsls	r2, r3, #5
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	4413      	add	r3, r2
 800e18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e18e:	461a      	mov	r2, r3
 800e190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e194:	6013      	str	r3, [r2, #0]
 800e196:	e013      	b.n	800e1c0 <USB_DevInit+0x218>
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	015a      	lsls	r2, r3, #5
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	4413      	add	r3, r2
 800e1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e1aa:	6013      	str	r3, [r2, #0]
 800e1ac:	e008      	b.n	800e1c0 <USB_DevInit+0x218>
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	015a      	lsls	r2, r3, #5
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	2300      	movs	r3, #0
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	015a      	lsls	r2, r3, #5
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	4413      	add	r3, r2
 800e1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	6113      	str	r3, [r2, #16]
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	015a      	lsls	r2, r3, #5
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	4413      	add	r3, r2
 800e1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1de:	461a      	mov	r2, r3
 800e1e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e1e4:	6093      	str	r3, [r2, #8]
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	613b      	str	r3, [r7, #16]
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	693a      	ldr	r2, [r7, #16]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d3b7      	bcc.n	800e164 <USB_DevInit+0x1bc>
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e206:	6113      	str	r3, [r2, #16]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	619a      	str	r2, [r3, #24]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e214:	615a      	str	r2, [r3, #20]
 800e216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d105      	bne.n	800e228 <USB_DevInit+0x280>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	699b      	ldr	r3, [r3, #24]
 800e220:	f043 0210 	orr.w	r2, r3, #16
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	619a      	str	r2, [r3, #24]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	699a      	ldr	r2, [r3, #24]
 800e22c:	4b0f      	ldr	r3, [pc, #60]	; (800e26c <USB_DevInit+0x2c4>)
 800e22e:	4313      	orrs	r3, r2
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	6193      	str	r3, [r2, #24]
 800e234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e236:	2b00      	cmp	r3, #0
 800e238:	d005      	beq.n	800e246 <USB_DevInit+0x29e>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	699b      	ldr	r3, [r3, #24]
 800e23e:	f043 0208 	orr.w	r2, r3, #8
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	619a      	str	r2, [r3, #24]
 800e246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e248:	2b01      	cmp	r3, #1
 800e24a:	d107      	bne.n	800e25c <USB_DevInit+0x2b4>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e254:	f043 0304 	orr.w	r3, r3, #4
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	6193      	str	r3, [r2, #24]
 800e25c:	7dfb      	ldrb	r3, [r7, #23]
 800e25e:	4618      	mov	r0, r3
 800e260:	3718      	adds	r7, #24
 800e262:	46bd      	mov	sp, r7
 800e264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e268:	b004      	add	sp, #16
 800e26a:	4770      	bx	lr
 800e26c:	803c3800 	.word	0x803c3800

0800e270 <USB_FlushTxFifo>:
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
 800e27a:	2300      	movs	r3, #0
 800e27c:	60fb      	str	r3, [r7, #12]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	3301      	adds	r3, #1
 800e282:	60fb      	str	r3, [r7, #12]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	4a13      	ldr	r2, [pc, #76]	; (800e2d4 <USB_FlushTxFifo+0x64>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d901      	bls.n	800e290 <USB_FlushTxFifo+0x20>
 800e28c:	2303      	movs	r3, #3
 800e28e:	e01b      	b.n	800e2c8 <USB_FlushTxFifo+0x58>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	2b00      	cmp	r3, #0
 800e296:	daf2      	bge.n	800e27e <USB_FlushTxFifo+0xe>
 800e298:	2300      	movs	r3, #0
 800e29a:	60fb      	str	r3, [r7, #12]
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	019b      	lsls	r3, r3, #6
 800e2a0:	f043 0220 	orr.w	r2, r3, #32
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	611a      	str	r2, [r3, #16]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	4a08      	ldr	r2, [pc, #32]	; (800e2d4 <USB_FlushTxFifo+0x64>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d901      	bls.n	800e2ba <USB_FlushTxFifo+0x4a>
 800e2b6:	2303      	movs	r3, #3
 800e2b8:	e006      	b.n	800e2c8 <USB_FlushTxFifo+0x58>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	f003 0320 	and.w	r3, r3, #32
 800e2c2:	2b20      	cmp	r3, #32
 800e2c4:	d0f0      	beq.n	800e2a8 <USB_FlushTxFifo+0x38>
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3714      	adds	r7, #20
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr
 800e2d4:	00030d40 	.word	0x00030d40

0800e2d8 <USB_FlushRxFifo>:
 800e2d8:	b480      	push	{r7}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	60fb      	str	r3, [r7, #12]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	60fb      	str	r3, [r7, #12]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	4a11      	ldr	r2, [pc, #68]	; (800e334 <USB_FlushRxFifo+0x5c>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d901      	bls.n	800e2f6 <USB_FlushRxFifo+0x1e>
 800e2f2:	2303      	movs	r3, #3
 800e2f4:	e018      	b.n	800e328 <USB_FlushRxFifo+0x50>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	691b      	ldr	r3, [r3, #16]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	daf2      	bge.n	800e2e4 <USB_FlushRxFifo+0xc>
 800e2fe:	2300      	movs	r3, #0
 800e300:	60fb      	str	r3, [r7, #12]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2210      	movs	r2, #16
 800e306:	611a      	str	r2, [r3, #16]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	3301      	adds	r3, #1
 800e30c:	60fb      	str	r3, [r7, #12]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	4a08      	ldr	r2, [pc, #32]	; (800e334 <USB_FlushRxFifo+0x5c>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d901      	bls.n	800e31a <USB_FlushRxFifo+0x42>
 800e316:	2303      	movs	r3, #3
 800e318:	e006      	b.n	800e328 <USB_FlushRxFifo+0x50>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	691b      	ldr	r3, [r3, #16]
 800e31e:	f003 0310 	and.w	r3, r3, #16
 800e322:	2b10      	cmp	r3, #16
 800e324:	d0f0      	beq.n	800e308 <USB_FlushRxFifo+0x30>
 800e326:	2300      	movs	r3, #0
 800e328:	4618      	mov	r0, r3
 800e32a:	3714      	adds	r7, #20
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr
 800e334:	00030d40 	.word	0x00030d40

0800e338 <USB_SetDevSpeed>:
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	460b      	mov	r3, r1
 800e342:	70fb      	strb	r3, [r7, #3]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	68f9      	ldr	r1, [r7, #12]
 800e354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e358:	4313      	orrs	r3, r2
 800e35a:	600b      	str	r3, [r1, #0]
 800e35c:	2300      	movs	r3, #0
 800e35e:	4618      	mov	r0, r3
 800e360:	3714      	adds	r7, #20
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr

0800e36a <USB_GetDevSpeed>:
 800e36a:	b480      	push	{r7}
 800e36c:	b087      	sub	sp, #28
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	613b      	str	r3, [r7, #16]
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	f003 0306 	and.w	r3, r3, #6
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d102      	bne.n	800e390 <USB_GetDevSpeed+0x26>
 800e38a:	2300      	movs	r3, #0
 800e38c:	75fb      	strb	r3, [r7, #23]
 800e38e:	e00a      	b.n	800e3a6 <USB_GetDevSpeed+0x3c>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b02      	cmp	r3, #2
 800e394:	d002      	beq.n	800e39c <USB_GetDevSpeed+0x32>
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2b06      	cmp	r3, #6
 800e39a:	d102      	bne.n	800e3a2 <USB_GetDevSpeed+0x38>
 800e39c:	2302      	movs	r3, #2
 800e39e:	75fb      	strb	r3, [r7, #23]
 800e3a0:	e001      	b.n	800e3a6 <USB_GetDevSpeed+0x3c>
 800e3a2:	230f      	movs	r3, #15
 800e3a4:	75fb      	strb	r3, [r7, #23]
 800e3a6:	7dfb      	ldrb	r3, [r7, #23]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	371c      	adds	r7, #28
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b2:	4770      	bx	lr

0800e3b4 <USB_ActivateEndpoint>:
 800e3b4:	b480      	push	{r7}
 800e3b6:	b085      	sub	sp, #20
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	60fb      	str	r3, [r7, #12]
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	60bb      	str	r3, [r7, #8]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	785b      	ldrb	r3, [r3, #1]
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	d13a      	bne.n	800e446 <USB_ActivateEndpoint+0x92>
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3d6:	69da      	ldr	r2, [r3, #28]
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	f003 030f 	and.w	r3, r3, #15
 800e3e0:	2101      	movs	r1, #1
 800e3e2:	fa01 f303 	lsl.w	r3, r1, r3
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	68f9      	ldr	r1, [r7, #12]
 800e3ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	61cb      	str	r3, [r1, #28]
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	015a      	lsls	r2, r3, #5
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e404:	2b00      	cmp	r3, #0
 800e406:	d155      	bne.n	800e4b4 <USB_ActivateEndpoint+0x100>
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	015a      	lsls	r2, r3, #5
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	4413      	add	r3, r2
 800e410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	791b      	ldrb	r3, [r3, #4]
 800e422:	049b      	lsls	r3, r3, #18
 800e424:	4319      	orrs	r1, r3
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	059b      	lsls	r3, r3, #22
 800e42a:	430b      	orrs	r3, r1
 800e42c:	4313      	orrs	r3, r2
 800e42e:	68ba      	ldr	r2, [r7, #8]
 800e430:	0151      	lsls	r1, r2, #5
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	440a      	add	r2, r1
 800e436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e43a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e43e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e442:	6013      	str	r3, [r2, #0]
 800e444:	e036      	b.n	800e4b4 <USB_ActivateEndpoint+0x100>
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e44c:	69da      	ldr	r2, [r3, #28]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	f003 030f 	and.w	r3, r3, #15
 800e456:	2101      	movs	r1, #1
 800e458:	fa01 f303 	lsl.w	r3, r1, r3
 800e45c:	041b      	lsls	r3, r3, #16
 800e45e:	68f9      	ldr	r1, [r7, #12]
 800e460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e464:	4313      	orrs	r3, r2
 800e466:	61cb      	str	r3, [r1, #28]
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	015a      	lsls	r2, r3, #5
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	4413      	add	r3, r2
 800e470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d11a      	bne.n	800e4b4 <USB_ActivateEndpoint+0x100>
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	015a      	lsls	r2, r3, #5
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	4413      	add	r3, r2
 800e486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	791b      	ldrb	r3, [r3, #4]
 800e498:	049b      	lsls	r3, r3, #18
 800e49a:	430b      	orrs	r3, r1
 800e49c:	4313      	orrs	r3, r2
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	0151      	lsls	r1, r2, #5
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	440a      	add	r2, r1
 800e4a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4b2:	6013      	str	r3, [r2, #0]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3714      	adds	r7, #20
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
	...

0800e4c4 <USB_DeactivateEndpoint>:
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	60fb      	str	r3, [r7, #12]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	60bb      	str	r3, [r7, #8]
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	785b      	ldrb	r3, [r3, #1]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d161      	bne.n	800e5a4 <USB_DeactivateEndpoint+0xe0>
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	015a      	lsls	r2, r3, #5
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e4f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4f6:	d11f      	bne.n	800e538 <USB_DeactivateEndpoint+0x74>
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	015a      	lsls	r2, r3, #5
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4413      	add	r3, r2
 800e500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68ba      	ldr	r2, [r7, #8]
 800e508:	0151      	lsls	r1, r2, #5
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	440a      	add	r2, r1
 800e50e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e516:	6013      	str	r3, [r2, #0]
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	015a      	lsls	r2, r3, #5
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	4413      	add	r3, r2
 800e520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	68ba      	ldr	r2, [r7, #8]
 800e528:	0151      	lsls	r1, r2, #5
 800e52a:	68fa      	ldr	r2, [r7, #12]
 800e52c:	440a      	add	r2, r1
 800e52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e532:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e536:	6013      	str	r3, [r2, #0]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e53e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	f003 030f 	and.w	r3, r3, #15
 800e548:	2101      	movs	r1, #1
 800e54a:	fa01 f303 	lsl.w	r3, r1, r3
 800e54e:	b29b      	uxth	r3, r3
 800e550:	43db      	mvns	r3, r3
 800e552:	68f9      	ldr	r1, [r7, #12]
 800e554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e558:	4013      	ands	r3, r2
 800e55a:	63cb      	str	r3, [r1, #60]	; 0x3c
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e562:	69da      	ldr	r2, [r3, #28]
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	f003 030f 	and.w	r3, r3, #15
 800e56c:	2101      	movs	r1, #1
 800e56e:	fa01 f303 	lsl.w	r3, r1, r3
 800e572:	b29b      	uxth	r3, r3
 800e574:	43db      	mvns	r3, r3
 800e576:	68f9      	ldr	r1, [r7, #12]
 800e578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e57c:	4013      	ands	r3, r2
 800e57e:	61cb      	str	r3, [r1, #28]
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	015a      	lsls	r2, r3, #5
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	4413      	add	r3, r2
 800e588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	0159      	lsls	r1, r3, #5
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	440b      	add	r3, r1
 800e596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e59a:	4619      	mov	r1, r3
 800e59c:	4b35      	ldr	r3, [pc, #212]	; (800e674 <USB_DeactivateEndpoint+0x1b0>)
 800e59e:	4013      	ands	r3, r2
 800e5a0:	600b      	str	r3, [r1, #0]
 800e5a2:	e060      	b.n	800e666 <USB_DeactivateEndpoint+0x1a2>
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	015a      	lsls	r2, r3, #5
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5ba:	d11f      	bne.n	800e5fc <USB_DeactivateEndpoint+0x138>
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	015a      	lsls	r2, r3, #5
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	68ba      	ldr	r2, [r7, #8]
 800e5cc:	0151      	lsls	r1, r2, #5
 800e5ce:	68fa      	ldr	r2, [r7, #12]
 800e5d0:	440a      	add	r2, r1
 800e5d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e5da:	6013      	str	r3, [r2, #0]
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	015a      	lsls	r2, r3, #5
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	0151      	lsls	r1, r2, #5
 800e5ee:	68fa      	ldr	r2, [r7, #12]
 800e5f0:	440a      	add	r2, r1
 800e5f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	f003 030f 	and.w	r3, r3, #15
 800e60c:	2101      	movs	r1, #1
 800e60e:	fa01 f303 	lsl.w	r3, r1, r3
 800e612:	041b      	lsls	r3, r3, #16
 800e614:	43db      	mvns	r3, r3
 800e616:	68f9      	ldr	r1, [r7, #12]
 800e618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e61c:	4013      	ands	r3, r2
 800e61e:	63cb      	str	r3, [r1, #60]	; 0x3c
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e626:	69da      	ldr	r2, [r3, #28]
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	f003 030f 	and.w	r3, r3, #15
 800e630:	2101      	movs	r1, #1
 800e632:	fa01 f303 	lsl.w	r3, r1, r3
 800e636:	041b      	lsls	r3, r3, #16
 800e638:	43db      	mvns	r3, r3
 800e63a:	68f9      	ldr	r1, [r7, #12]
 800e63c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e640:	4013      	ands	r3, r2
 800e642:	61cb      	str	r3, [r1, #28]
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	015a      	lsls	r2, r3, #5
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	4413      	add	r3, r2
 800e64c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	0159      	lsls	r1, r3, #5
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	440b      	add	r3, r1
 800e65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e65e:	4619      	mov	r1, r3
 800e660:	4b05      	ldr	r3, [pc, #20]	; (800e678 <USB_DeactivateEndpoint+0x1b4>)
 800e662:	4013      	ands	r3, r2
 800e664:	600b      	str	r3, [r1, #0]
 800e666:	2300      	movs	r3, #0
 800e668:	4618      	mov	r0, r3
 800e66a:	3714      	adds	r7, #20
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr
 800e674:	ec337800 	.word	0xec337800
 800e678:	eff37800 	.word	0xeff37800

0800e67c <USB_EPStartXfer>:
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b08a      	sub	sp, #40	; 0x28
 800e680:	af02      	add	r7, sp, #8
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	4613      	mov	r3, r2
 800e688:	71fb      	strb	r3, [r7, #7]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	61fb      	str	r3, [r7, #28]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	61bb      	str	r3, [r7, #24]
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	785b      	ldrb	r3, [r3, #1]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	f040 815c 	bne.w	800e956 <USB_EPStartXfer+0x2da>
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	699b      	ldr	r3, [r3, #24]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d132      	bne.n	800e70c <USB_EPStartXfer+0x90>
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	015a      	lsls	r2, r3, #5
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6b2:	691b      	ldr	r3, [r3, #16]
 800e6b4:	69ba      	ldr	r2, [r7, #24]
 800e6b6:	0151      	lsls	r1, r2, #5
 800e6b8:	69fa      	ldr	r2, [r7, #28]
 800e6ba:	440a      	add	r2, r1
 800e6bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e6c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e6c8:	6113      	str	r3, [r2, #16]
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	015a      	lsls	r2, r3, #5
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	69ba      	ldr	r2, [r7, #24]
 800e6da:	0151      	lsls	r1, r2, #5
 800e6dc:	69fa      	ldr	r2, [r7, #28]
 800e6de:	440a      	add	r2, r1
 800e6e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e6e8:	6113      	str	r3, [r2, #16]
 800e6ea:	69bb      	ldr	r3, [r7, #24]
 800e6ec:	015a      	lsls	r2, r3, #5
 800e6ee:	69fb      	ldr	r3, [r7, #28]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6f6:	691b      	ldr	r3, [r3, #16]
 800e6f8:	69ba      	ldr	r2, [r7, #24]
 800e6fa:	0151      	lsls	r1, r2, #5
 800e6fc:	69fa      	ldr	r2, [r7, #28]
 800e6fe:	440a      	add	r2, r1
 800e700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e704:	0cdb      	lsrs	r3, r3, #19
 800e706:	04db      	lsls	r3, r3, #19
 800e708:	6113      	str	r3, [r2, #16]
 800e70a:	e074      	b.n	800e7f6 <USB_EPStartXfer+0x17a>
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	015a      	lsls	r2, r3, #5
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	4413      	add	r3, r2
 800e714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	69ba      	ldr	r2, [r7, #24]
 800e71c:	0151      	lsls	r1, r2, #5
 800e71e:	69fa      	ldr	r2, [r7, #28]
 800e720:	440a      	add	r2, r1
 800e722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e726:	0cdb      	lsrs	r3, r3, #19
 800e728:	04db      	lsls	r3, r3, #19
 800e72a:	6113      	str	r3, [r2, #16]
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	015a      	lsls	r2, r3, #5
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	4413      	add	r3, r2
 800e734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e738:	691b      	ldr	r3, [r3, #16]
 800e73a:	69ba      	ldr	r2, [r7, #24]
 800e73c:	0151      	lsls	r1, r2, #5
 800e73e:	69fa      	ldr	r2, [r7, #28]
 800e740:	440a      	add	r2, r1
 800e742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e746:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e74a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e74e:	6113      	str	r3, [r2, #16]
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	015a      	lsls	r2, r3, #5
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	4413      	add	r3, r2
 800e758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e75c:	691a      	ldr	r2, [r3, #16]
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	6999      	ldr	r1, [r3, #24]
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	440b      	add	r3, r1
 800e768:	1e59      	subs	r1, r3, #1
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e772:	04d9      	lsls	r1, r3, #19
 800e774:	4b9d      	ldr	r3, [pc, #628]	; (800e9ec <USB_EPStartXfer+0x370>)
 800e776:	400b      	ands	r3, r1
 800e778:	69b9      	ldr	r1, [r7, #24]
 800e77a:	0148      	lsls	r0, r1, #5
 800e77c:	69f9      	ldr	r1, [r7, #28]
 800e77e:	4401      	add	r1, r0
 800e780:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e784:	4313      	orrs	r3, r2
 800e786:	610b      	str	r3, [r1, #16]
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	015a      	lsls	r2, r3, #5
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	4413      	add	r3, r2
 800e790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e794:	691a      	ldr	r2, [r3, #16]
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e79e:	69b9      	ldr	r1, [r7, #24]
 800e7a0:	0148      	lsls	r0, r1, #5
 800e7a2:	69f9      	ldr	r1, [r7, #28]
 800e7a4:	4401      	add	r1, r0
 800e7a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	610b      	str	r3, [r1, #16]
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	791b      	ldrb	r3, [r3, #4]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d11f      	bne.n	800e7f6 <USB_EPStartXfer+0x17a>
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	015a      	lsls	r2, r3, #5
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	4413      	add	r3, r2
 800e7be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7c2:	691b      	ldr	r3, [r3, #16]
 800e7c4:	69ba      	ldr	r2, [r7, #24]
 800e7c6:	0151      	lsls	r1, r2, #5
 800e7c8:	69fa      	ldr	r2, [r7, #28]
 800e7ca:	440a      	add	r2, r1
 800e7cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e7d4:	6113      	str	r3, [r2, #16]
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	015a      	lsls	r2, r3, #5
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	4413      	add	r3, r2
 800e7de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7e2:	691b      	ldr	r3, [r3, #16]
 800e7e4:	69ba      	ldr	r2, [r7, #24]
 800e7e6:	0151      	lsls	r1, r2, #5
 800e7e8:	69fa      	ldr	r2, [r7, #28]
 800e7ea:	440a      	add	r2, r1
 800e7ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e7f4:	6113      	str	r3, [r2, #16]
 800e7f6:	79fb      	ldrb	r3, [r7, #7]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d14b      	bne.n	800e894 <USB_EPStartXfer+0x218>
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	695b      	ldr	r3, [r3, #20]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d009      	beq.n	800e818 <USB_EPStartXfer+0x19c>
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	015a      	lsls	r2, r3, #5
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	4413      	add	r3, r2
 800e80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e810:	461a      	mov	r2, r3
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	6153      	str	r3, [r2, #20]
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	791b      	ldrb	r3, [r3, #4]
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d128      	bne.n	800e872 <USB_EPStartXfer+0x1f6>
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e826:	689b      	ldr	r3, [r3, #8]
 800e828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d110      	bne.n	800e852 <USB_EPStartXfer+0x1d6>
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	015a      	lsls	r2, r3, #5
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	4413      	add	r3, r2
 800e838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	69ba      	ldr	r2, [r7, #24]
 800e840:	0151      	lsls	r1, r2, #5
 800e842:	69fa      	ldr	r2, [r7, #28]
 800e844:	440a      	add	r2, r1
 800e846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e84a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e84e:	6013      	str	r3, [r2, #0]
 800e850:	e00f      	b.n	800e872 <USB_EPStartXfer+0x1f6>
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	015a      	lsls	r2, r3, #5
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	4413      	add	r3, r2
 800e85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	69ba      	ldr	r2, [r7, #24]
 800e862:	0151      	lsls	r1, r2, #5
 800e864:	69fa      	ldr	r2, [r7, #28]
 800e866:	440a      	add	r2, r1
 800e868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e86c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e870:	6013      	str	r3, [r2, #0]
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	015a      	lsls	r2, r3, #5
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	4413      	add	r3, r2
 800e87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	69ba      	ldr	r2, [r7, #24]
 800e882:	0151      	lsls	r1, r2, #5
 800e884:	69fa      	ldr	r2, [r7, #28]
 800e886:	440a      	add	r2, r1
 800e888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e88c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e890:	6013      	str	r3, [r2, #0]
 800e892:	e133      	b.n	800eafc <USB_EPStartXfer+0x480>
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	015a      	lsls	r2, r3, #5
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	4413      	add	r3, r2
 800e89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	69ba      	ldr	r2, [r7, #24]
 800e8a4:	0151      	lsls	r1, r2, #5
 800e8a6:	69fa      	ldr	r2, [r7, #28]
 800e8a8:	440a      	add	r2, r1
 800e8aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e8b2:	6013      	str	r3, [r2, #0]
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	791b      	ldrb	r3, [r3, #4]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d015      	beq.n	800e8e8 <USB_EPStartXfer+0x26c>
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	699b      	ldr	r3, [r3, #24]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f000 811b 	beq.w	800eafc <USB_EPStartXfer+0x480>
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	f003 030f 	and.w	r3, r3, #15
 800e8d6:	2101      	movs	r1, #1
 800e8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800e8dc:	69f9      	ldr	r1, [r7, #28]
 800e8de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	634b      	str	r3, [r1, #52]	; 0x34
 800e8e6:	e109      	b.n	800eafc <USB_EPStartXfer+0x480>
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d110      	bne.n	800e91a <USB_EPStartXfer+0x29e>
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	015a      	lsls	r2, r3, #5
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	4413      	add	r3, r2
 800e900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	69ba      	ldr	r2, [r7, #24]
 800e908:	0151      	lsls	r1, r2, #5
 800e90a:	69fa      	ldr	r2, [r7, #28]
 800e90c:	440a      	add	r2, r1
 800e90e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e916:	6013      	str	r3, [r2, #0]
 800e918:	e00f      	b.n	800e93a <USB_EPStartXfer+0x2be>
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	015a      	lsls	r2, r3, #5
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	4413      	add	r3, r2
 800e922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	69ba      	ldr	r2, [r7, #24]
 800e92a:	0151      	lsls	r1, r2, #5
 800e92c:	69fa      	ldr	r2, [r7, #28]
 800e92e:	440a      	add	r2, r1
 800e930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e938:	6013      	str	r3, [r2, #0]
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	6919      	ldr	r1, [r3, #16]
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	781a      	ldrb	r2, [r3, #0]
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	699b      	ldr	r3, [r3, #24]
 800e946:	b298      	uxth	r0, r3
 800e948:	79fb      	ldrb	r3, [r7, #7]
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	4603      	mov	r3, r0
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f000 fade 	bl	800ef10 <USB_WritePacket>
 800e954:	e0d2      	b.n	800eafc <USB_EPStartXfer+0x480>
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	015a      	lsls	r2, r3, #5
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	4413      	add	r3, r2
 800e95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e962:	691b      	ldr	r3, [r3, #16]
 800e964:	69ba      	ldr	r2, [r7, #24]
 800e966:	0151      	lsls	r1, r2, #5
 800e968:	69fa      	ldr	r2, [r7, #28]
 800e96a:	440a      	add	r2, r1
 800e96c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e970:	0cdb      	lsrs	r3, r3, #19
 800e972:	04db      	lsls	r3, r3, #19
 800e974:	6113      	str	r3, [r2, #16]
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	015a      	lsls	r2, r3, #5
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	4413      	add	r3, r2
 800e97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e982:	691b      	ldr	r3, [r3, #16]
 800e984:	69ba      	ldr	r2, [r7, #24]
 800e986:	0151      	lsls	r1, r2, #5
 800e988:	69fa      	ldr	r2, [r7, #28]
 800e98a:	440a      	add	r2, r1
 800e98c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e990:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e994:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e998:	6113      	str	r3, [r2, #16]
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d126      	bne.n	800e9f0 <USB_EPStartXfer+0x374>
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	015a      	lsls	r2, r3, #5
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9ae:	691a      	ldr	r2, [r3, #16]
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e9b8:	69b9      	ldr	r1, [r7, #24]
 800e9ba:	0148      	lsls	r0, r1, #5
 800e9bc:	69f9      	ldr	r1, [r7, #28]
 800e9be:	4401      	add	r1, r0
 800e9c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	610b      	str	r3, [r1, #16]
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	015a      	lsls	r2, r3, #5
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9d4:	691b      	ldr	r3, [r3, #16]
 800e9d6:	69ba      	ldr	r2, [r7, #24]
 800e9d8:	0151      	lsls	r1, r2, #5
 800e9da:	69fa      	ldr	r2, [r7, #28]
 800e9dc:	440a      	add	r2, r1
 800e9de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e9e6:	6113      	str	r3, [r2, #16]
 800e9e8:	e03a      	b.n	800ea60 <USB_EPStartXfer+0x3e4>
 800e9ea:	bf00      	nop
 800e9ec:	1ff80000 	.word	0x1ff80000
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	699a      	ldr	r2, [r3, #24]
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	4413      	add	r3, r2
 800e9fa:	1e5a      	subs	r2, r3, #1
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea04:	82fb      	strh	r3, [r7, #22]
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	68db      	ldr	r3, [r3, #12]
 800ea0a:	8afa      	ldrh	r2, [r7, #22]
 800ea0c:	fb03 f202 	mul.w	r2, r3, r2
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	61da      	str	r2, [r3, #28]
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	015a      	lsls	r2, r3, #5
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea20:	691a      	ldr	r2, [r3, #16]
 800ea22:	8afb      	ldrh	r3, [r7, #22]
 800ea24:	04d9      	lsls	r1, r3, #19
 800ea26:	4b38      	ldr	r3, [pc, #224]	; (800eb08 <USB_EPStartXfer+0x48c>)
 800ea28:	400b      	ands	r3, r1
 800ea2a:	69b9      	ldr	r1, [r7, #24]
 800ea2c:	0148      	lsls	r0, r1, #5
 800ea2e:	69f9      	ldr	r1, [r7, #28]
 800ea30:	4401      	add	r1, r0
 800ea32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ea36:	4313      	orrs	r3, r2
 800ea38:	610b      	str	r3, [r1, #16]
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	015a      	lsls	r2, r3, #5
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	4413      	add	r3, r2
 800ea42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea46:	691a      	ldr	r2, [r3, #16]
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	69db      	ldr	r3, [r3, #28]
 800ea4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea50:	69b9      	ldr	r1, [r7, #24]
 800ea52:	0148      	lsls	r0, r1, #5
 800ea54:	69f9      	ldr	r1, [r7, #28]
 800ea56:	4401      	add	r1, r0
 800ea58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	610b      	str	r3, [r1, #16]
 800ea60:	79fb      	ldrb	r3, [r7, #7]
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d10d      	bne.n	800ea82 <USB_EPStartXfer+0x406>
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	691b      	ldr	r3, [r3, #16]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d009      	beq.n	800ea82 <USB_EPStartXfer+0x406>
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	6919      	ldr	r1, [r3, #16]
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	015a      	lsls	r2, r3, #5
 800ea76:	69fb      	ldr	r3, [r7, #28]
 800ea78:	4413      	add	r3, r2
 800ea7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea7e:	460a      	mov	r2, r1
 800ea80:	615a      	str	r2, [r3, #20]
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	791b      	ldrb	r3, [r3, #4]
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d128      	bne.n	800eadc <USB_EPStartXfer+0x460>
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d110      	bne.n	800eabc <USB_EPStartXfer+0x440>
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	015a      	lsls	r2, r3, #5
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	69ba      	ldr	r2, [r7, #24]
 800eaaa:	0151      	lsls	r1, r2, #5
 800eaac:	69fa      	ldr	r2, [r7, #28]
 800eaae:	440a      	add	r2, r1
 800eab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eab8:	6013      	str	r3, [r2, #0]
 800eaba:	e00f      	b.n	800eadc <USB_EPStartXfer+0x460>
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	015a      	lsls	r2, r3, #5
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	4413      	add	r3, r2
 800eac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	69ba      	ldr	r2, [r7, #24]
 800eacc:	0151      	lsls	r1, r2, #5
 800eace:	69fa      	ldr	r2, [r7, #28]
 800ead0:	440a      	add	r2, r1
 800ead2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ead6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eada:	6013      	str	r3, [r2, #0]
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	015a      	lsls	r2, r3, #5
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	4413      	add	r3, r2
 800eae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	69ba      	ldr	r2, [r7, #24]
 800eaec:	0151      	lsls	r1, r2, #5
 800eaee:	69fa      	ldr	r2, [r7, #28]
 800eaf0:	440a      	add	r2, r1
 800eaf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eaf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eafa:	6013      	str	r3, [r2, #0]
 800eafc:	2300      	movs	r3, #0
 800eafe:	4618      	mov	r0, r3
 800eb00:	3720      	adds	r7, #32
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	1ff80000 	.word	0x1ff80000

0800eb0c <USB_EP0StartXfer>:
 800eb0c:	b480      	push	{r7}
 800eb0e:	b087      	sub	sp, #28
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	4613      	mov	r3, r2
 800eb18:	71fb      	strb	r3, [r7, #7]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	617b      	str	r3, [r7, #20]
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	613b      	str	r3, [r7, #16]
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	785b      	ldrb	r3, [r3, #1]
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	f040 80ce 	bne.w	800ecca <USB_EP0StartXfer+0x1be>
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	699b      	ldr	r3, [r3, #24]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d132      	bne.n	800eb9c <USB_EP0StartXfer+0x90>
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	015a      	lsls	r2, r3, #5
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	693a      	ldr	r2, [r7, #16]
 800eb46:	0151      	lsls	r1, r2, #5
 800eb48:	697a      	ldr	r2, [r7, #20]
 800eb4a:	440a      	add	r2, r1
 800eb4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eb54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eb58:	6113      	str	r3, [r2, #16]
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	015a      	lsls	r2, r3, #5
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	4413      	add	r3, r2
 800eb62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	693a      	ldr	r2, [r7, #16]
 800eb6a:	0151      	lsls	r1, r2, #5
 800eb6c:	697a      	ldr	r2, [r7, #20]
 800eb6e:	440a      	add	r2, r1
 800eb70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb78:	6113      	str	r3, [r2, #16]
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	015a      	lsls	r2, r3, #5
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	4413      	add	r3, r2
 800eb82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb86:	691b      	ldr	r3, [r3, #16]
 800eb88:	693a      	ldr	r2, [r7, #16]
 800eb8a:	0151      	lsls	r1, r2, #5
 800eb8c:	697a      	ldr	r2, [r7, #20]
 800eb8e:	440a      	add	r2, r1
 800eb90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb94:	0cdb      	lsrs	r3, r3, #19
 800eb96:	04db      	lsls	r3, r3, #19
 800eb98:	6113      	str	r3, [r2, #16]
 800eb9a:	e04e      	b.n	800ec3a <USB_EP0StartXfer+0x12e>
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	015a      	lsls	r2, r3, #5
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	4413      	add	r3, r2
 800eba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	693a      	ldr	r2, [r7, #16]
 800ebac:	0151      	lsls	r1, r2, #5
 800ebae:	697a      	ldr	r2, [r7, #20]
 800ebb0:	440a      	add	r2, r1
 800ebb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebb6:	0cdb      	lsrs	r3, r3, #19
 800ebb8:	04db      	lsls	r3, r3, #19
 800ebba:	6113      	str	r3, [r2, #16]
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	015a      	lsls	r2, r3, #5
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebc8:	691b      	ldr	r3, [r3, #16]
 800ebca:	693a      	ldr	r2, [r7, #16]
 800ebcc:	0151      	lsls	r1, r2, #5
 800ebce:	697a      	ldr	r2, [r7, #20]
 800ebd0:	440a      	add	r2, r1
 800ebd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ebda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ebde:	6113      	str	r3, [r2, #16]
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	699a      	ldr	r2, [r3, #24]
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d903      	bls.n	800ebf4 <USB_EP0StartXfer+0xe8>
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	68da      	ldr	r2, [r3, #12]
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	619a      	str	r2, [r3, #24]
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	015a      	lsls	r2, r3, #5
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec00:	691b      	ldr	r3, [r3, #16]
 800ec02:	693a      	ldr	r2, [r7, #16]
 800ec04:	0151      	lsls	r1, r2, #5
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	440a      	add	r2, r1
 800ec0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec12:	6113      	str	r3, [r2, #16]
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	015a      	lsls	r2, r3, #5
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec20:	691a      	ldr	r2, [r3, #16]
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	699b      	ldr	r3, [r3, #24]
 800ec26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec2a:	6939      	ldr	r1, [r7, #16]
 800ec2c:	0148      	lsls	r0, r1, #5
 800ec2e:	6979      	ldr	r1, [r7, #20]
 800ec30:	4401      	add	r1, r0
 800ec32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ec36:	4313      	orrs	r3, r2
 800ec38:	610b      	str	r3, [r1, #16]
 800ec3a:	79fb      	ldrb	r3, [r7, #7]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d11e      	bne.n	800ec7e <USB_EP0StartXfer+0x172>
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	695b      	ldr	r3, [r3, #20]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d009      	beq.n	800ec5c <USB_EP0StartXfer+0x150>
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	015a      	lsls	r2, r3, #5
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	4413      	add	r3, r2
 800ec50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec54:	461a      	mov	r2, r3
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	695b      	ldr	r3, [r3, #20]
 800ec5a:	6153      	str	r3, [r2, #20]
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	015a      	lsls	r2, r3, #5
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	4413      	add	r3, r2
 800ec64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	693a      	ldr	r2, [r7, #16]
 800ec6c:	0151      	lsls	r1, r2, #5
 800ec6e:	697a      	ldr	r2, [r7, #20]
 800ec70:	440a      	add	r2, r1
 800ec72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ec7a:	6013      	str	r3, [r2, #0]
 800ec7c:	e097      	b.n	800edae <USB_EP0StartXfer+0x2a2>
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	015a      	lsls	r2, r3, #5
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	4413      	add	r3, r2
 800ec86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	693a      	ldr	r2, [r7, #16]
 800ec8e:	0151      	lsls	r1, r2, #5
 800ec90:	697a      	ldr	r2, [r7, #20]
 800ec92:	440a      	add	r2, r1
 800ec94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ec9c:	6013      	str	r3, [r2, #0]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	699b      	ldr	r3, [r3, #24]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	f000 8083 	beq.w	800edae <USB_EP0StartXfer+0x2a2>
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	f003 030f 	and.w	r3, r3, #15
 800ecb8:	2101      	movs	r1, #1
 800ecba:	fa01 f303 	lsl.w	r3, r1, r3
 800ecbe:	6979      	ldr	r1, [r7, #20]
 800ecc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	634b      	str	r3, [r1, #52]	; 0x34
 800ecc8:	e071      	b.n	800edae <USB_EP0StartXfer+0x2a2>
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	015a      	lsls	r2, r3, #5
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	4413      	add	r3, r2
 800ecd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecd6:	691b      	ldr	r3, [r3, #16]
 800ecd8:	693a      	ldr	r2, [r7, #16]
 800ecda:	0151      	lsls	r1, r2, #5
 800ecdc:	697a      	ldr	r2, [r7, #20]
 800ecde:	440a      	add	r2, r1
 800ece0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ece4:	0cdb      	lsrs	r3, r3, #19
 800ece6:	04db      	lsls	r3, r3, #19
 800ece8:	6113      	str	r3, [r2, #16]
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	015a      	lsls	r2, r3, #5
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	693a      	ldr	r2, [r7, #16]
 800ecfa:	0151      	lsls	r1, r2, #5
 800ecfc:	697a      	ldr	r2, [r7, #20]
 800ecfe:	440a      	add	r2, r1
 800ed00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ed08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ed0c:	6113      	str	r3, [r2, #16]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	699b      	ldr	r3, [r3, #24]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d003      	beq.n	800ed1e <USB_EP0StartXfer+0x212>
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	68da      	ldr	r2, [r3, #12]
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	619a      	str	r2, [r3, #24]
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	68da      	ldr	r2, [r3, #12]
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	61da      	str	r2, [r3, #28]
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	015a      	lsls	r2, r3, #5
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	693a      	ldr	r2, [r7, #16]
 800ed36:	0151      	lsls	r1, r2, #5
 800ed38:	697a      	ldr	r2, [r7, #20]
 800ed3a:	440a      	add	r2, r1
 800ed3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed44:	6113      	str	r3, [r2, #16]
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	015a      	lsls	r2, r3, #5
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed52:	691a      	ldr	r2, [r3, #16]
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	69db      	ldr	r3, [r3, #28]
 800ed58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed5c:	6939      	ldr	r1, [r7, #16]
 800ed5e:	0148      	lsls	r0, r1, #5
 800ed60:	6979      	ldr	r1, [r7, #20]
 800ed62:	4401      	add	r1, r0
 800ed64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	610b      	str	r3, [r1, #16]
 800ed6c:	79fb      	ldrb	r3, [r7, #7]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d10d      	bne.n	800ed8e <USB_EP0StartXfer+0x282>
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	691b      	ldr	r3, [r3, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d009      	beq.n	800ed8e <USB_EP0StartXfer+0x282>
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	6919      	ldr	r1, [r3, #16]
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	015a      	lsls	r2, r3, #5
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	4413      	add	r3, r2
 800ed86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed8a:	460a      	mov	r2, r1
 800ed8c:	615a      	str	r2, [r3, #20]
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	015a      	lsls	r2, r3, #5
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	4413      	add	r3, r2
 800ed96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	693a      	ldr	r2, [r7, #16]
 800ed9e:	0151      	lsls	r1, r2, #5
 800eda0:	697a      	ldr	r2, [r7, #20]
 800eda2:	440a      	add	r2, r1
 800eda4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eda8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800edac:	6013      	str	r3, [r2, #0]
 800edae:	2300      	movs	r3, #0
 800edb0:	4618      	mov	r0, r3
 800edb2:	371c      	adds	r7, #28
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <USB_EPStopXfer>:
 800edbc:	b480      	push	{r7}
 800edbe:	b087      	sub	sp, #28
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
 800edc6:	2300      	movs	r3, #0
 800edc8:	60fb      	str	r3, [r7, #12]
 800edca:	2300      	movs	r3, #0
 800edcc:	75fb      	strb	r3, [r7, #23]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	613b      	str	r3, [r7, #16]
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	785b      	ldrb	r3, [r3, #1]
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d14a      	bne.n	800ee70 <USB_EPStopXfer+0xb4>
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	015a      	lsls	r2, r3, #5
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	4413      	add	r3, r2
 800ede4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800edee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800edf2:	f040 8086 	bne.w	800ef02 <USB_EPStopXfer+0x146>
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	015a      	lsls	r2, r3, #5
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	4413      	add	r3, r2
 800ee00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	683a      	ldr	r2, [r7, #0]
 800ee08:	7812      	ldrb	r2, [r2, #0]
 800ee0a:	0151      	lsls	r1, r2, #5
 800ee0c:	693a      	ldr	r2, [r7, #16]
 800ee0e:	440a      	add	r2, r1
 800ee10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ee18:	6013      	str	r3, [r2, #0]
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	015a      	lsls	r2, r3, #5
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	4413      	add	r3, r2
 800ee24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	683a      	ldr	r2, [r7, #0]
 800ee2c:	7812      	ldrb	r2, [r2, #0]
 800ee2e:	0151      	lsls	r1, r2, #5
 800ee30:	693a      	ldr	r2, [r7, #16]
 800ee32:	440a      	add	r2, r1
 800ee34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee3c:	6013      	str	r3, [r2, #0]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	3301      	adds	r3, #1
 800ee42:	60fb      	str	r3, [r7, #12]
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f242 7210 	movw	r2, #10000	; 0x2710
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d902      	bls.n	800ee54 <USB_EPStopXfer+0x98>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	75fb      	strb	r3, [r7, #23]
 800ee52:	e056      	b.n	800ef02 <USB_EPStopXfer+0x146>
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	015a      	lsls	r2, r3, #5
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee6c:	d0e7      	beq.n	800ee3e <USB_EPStopXfer+0x82>
 800ee6e:	e048      	b.n	800ef02 <USB_EPStopXfer+0x146>
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	015a      	lsls	r2, r3, #5
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	4413      	add	r3, r2
 800ee7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee88:	d13b      	bne.n	800ef02 <USB_EPStopXfer+0x146>
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	015a      	lsls	r2, r3, #5
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	4413      	add	r3, r2
 800ee94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	7812      	ldrb	r2, [r2, #0]
 800ee9e:	0151      	lsls	r1, r2, #5
 800eea0:	693a      	ldr	r2, [r7, #16]
 800eea2:	440a      	add	r2, r1
 800eea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eeac:	6013      	str	r3, [r2, #0]
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	015a      	lsls	r2, r3, #5
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	683a      	ldr	r2, [r7, #0]
 800eec0:	7812      	ldrb	r2, [r2, #0]
 800eec2:	0151      	lsls	r1, r2, #5
 800eec4:	693a      	ldr	r2, [r7, #16]
 800eec6:	440a      	add	r2, r1
 800eec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eed0:	6013      	str	r3, [r2, #0]
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	3301      	adds	r3, #1
 800eed6:	60fb      	str	r3, [r7, #12]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f242 7210 	movw	r2, #10000	; 0x2710
 800eede:	4293      	cmp	r3, r2
 800eee0:	d902      	bls.n	800eee8 <USB_EPStopXfer+0x12c>
 800eee2:	2301      	movs	r3, #1
 800eee4:	75fb      	strb	r3, [r7, #23]
 800eee6:	e00c      	b.n	800ef02 <USB_EPStopXfer+0x146>
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	015a      	lsls	r2, r3, #5
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	4413      	add	r3, r2
 800eef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eefc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef00:	d0e7      	beq.n	800eed2 <USB_EPStopXfer+0x116>
 800ef02:	7dfb      	ldrb	r3, [r7, #23]
 800ef04:	4618      	mov	r0, r3
 800ef06:	371c      	adds	r7, #28
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <USB_WritePacket>:
 800ef10:	b480      	push	{r7}
 800ef12:	b089      	sub	sp, #36	; 0x24
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	60b9      	str	r1, [r7, #8]
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	460b      	mov	r3, r1
 800ef20:	71fb      	strb	r3, [r7, #7]
 800ef22:	4613      	mov	r3, r2
 800ef24:	80bb      	strh	r3, [r7, #4]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	617b      	str	r3, [r7, #20]
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	61fb      	str	r3, [r7, #28]
 800ef2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d123      	bne.n	800ef7e <USB_WritePacket+0x6e>
 800ef36:	88bb      	ldrh	r3, [r7, #4]
 800ef38:	3303      	adds	r3, #3
 800ef3a:	089b      	lsrs	r3, r3, #2
 800ef3c:	613b      	str	r3, [r7, #16]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	61bb      	str	r3, [r7, #24]
 800ef42:	e018      	b.n	800ef76 <USB_WritePacket+0x66>
 800ef44:	79fb      	ldrb	r3, [r7, #7]
 800ef46:	031a      	lsls	r2, r3, #12
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef50:	461a      	mov	r2, r3
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	6013      	str	r3, [r2, #0]
 800ef58:	69fb      	ldr	r3, [r7, #28]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	61fb      	str	r3, [r7, #28]
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	3301      	adds	r3, #1
 800ef62:	61fb      	str	r3, [r7, #28]
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	3301      	adds	r3, #1
 800ef68:	61fb      	str	r3, [r7, #28]
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	61fb      	str	r3, [r7, #28]
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	3301      	adds	r3, #1
 800ef74:	61bb      	str	r3, [r7, #24]
 800ef76:	69ba      	ldr	r2, [r7, #24]
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d3e2      	bcc.n	800ef44 <USB_WritePacket+0x34>
 800ef7e:	2300      	movs	r3, #0
 800ef80:	4618      	mov	r0, r3
 800ef82:	3724      	adds	r7, #36	; 0x24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <USB_ReadPacket>:
 800ef8c:	b480      	push	{r7}
 800ef8e:	b08b      	sub	sp, #44	; 0x2c
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	4613      	mov	r3, r2
 800ef98:	80fb      	strh	r3, [r7, #6]
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	61bb      	str	r3, [r7, #24]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	627b      	str	r3, [r7, #36]	; 0x24
 800efa2:	88fb      	ldrh	r3, [r7, #6]
 800efa4:	089b      	lsrs	r3, r3, #2
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	617b      	str	r3, [r7, #20]
 800efaa:	88fb      	ldrh	r3, [r7, #6]
 800efac:	f003 0303 	and.w	r3, r3, #3
 800efb0:	83fb      	strh	r3, [r7, #30]
 800efb2:	2300      	movs	r3, #0
 800efb4:	623b      	str	r3, [r7, #32]
 800efb6:	e014      	b.n	800efe2 <USB_ReadPacket+0x56>
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc6:	3301      	adds	r3, #1
 800efc8:	627b      	str	r3, [r7, #36]	; 0x24
 800efca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efcc:	3301      	adds	r3, #1
 800efce:	627b      	str	r3, [r7, #36]	; 0x24
 800efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd2:	3301      	adds	r3, #1
 800efd4:	627b      	str	r3, [r7, #36]	; 0x24
 800efd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd8:	3301      	adds	r3, #1
 800efda:	627b      	str	r3, [r7, #36]	; 0x24
 800efdc:	6a3b      	ldr	r3, [r7, #32]
 800efde:	3301      	adds	r3, #1
 800efe0:	623b      	str	r3, [r7, #32]
 800efe2:	6a3a      	ldr	r2, [r7, #32]
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d3e6      	bcc.n	800efb8 <USB_ReadPacket+0x2c>
 800efea:	8bfb      	ldrh	r3, [r7, #30]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d01e      	beq.n	800f02e <USB_ReadPacket+0xa2>
 800eff0:	2300      	movs	r3, #0
 800eff2:	623b      	str	r3, [r7, #32]
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800effa:	461a      	mov	r2, r3
 800effc:	f107 0310 	add.w	r3, r7, #16
 800f000:	6812      	ldr	r2, [r2, #0]
 800f002:	601a      	str	r2, [r3, #0]
 800f004:	693a      	ldr	r2, [r7, #16]
 800f006:	6a3b      	ldr	r3, [r7, #32]
 800f008:	b2db      	uxtb	r3, r3
 800f00a:	00db      	lsls	r3, r3, #3
 800f00c:	fa22 f303 	lsr.w	r3, r2, r3
 800f010:	b2da      	uxtb	r2, r3
 800f012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f014:	701a      	strb	r2, [r3, #0]
 800f016:	6a3b      	ldr	r3, [r7, #32]
 800f018:	3301      	adds	r3, #1
 800f01a:	623b      	str	r3, [r7, #32]
 800f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01e:	3301      	adds	r3, #1
 800f020:	627b      	str	r3, [r7, #36]	; 0x24
 800f022:	8bfb      	ldrh	r3, [r7, #30]
 800f024:	3b01      	subs	r3, #1
 800f026:	83fb      	strh	r3, [r7, #30]
 800f028:	8bfb      	ldrh	r3, [r7, #30]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1ea      	bne.n	800f004 <USB_ReadPacket+0x78>
 800f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f030:	4618      	mov	r0, r3
 800f032:	372c      	adds	r7, #44	; 0x2c
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <USB_EPSetStall>:
 800f03c:	b480      	push	{r7}
 800f03e:	b085      	sub	sp, #20
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	60fb      	str	r3, [r7, #12]
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	60bb      	str	r3, [r7, #8]
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	785b      	ldrb	r3, [r3, #1]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d12c      	bne.n	800f0b2 <USB_EPSetStall+0x76>
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	015a      	lsls	r2, r3, #5
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	4413      	add	r3, r2
 800f060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	db12      	blt.n	800f090 <USB_EPSetStall+0x54>
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d00f      	beq.n	800f090 <USB_EPSetStall+0x54>
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	015a      	lsls	r2, r3, #5
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	4413      	add	r3, r2
 800f078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	68ba      	ldr	r2, [r7, #8]
 800f080:	0151      	lsls	r1, r2, #5
 800f082:	68fa      	ldr	r2, [r7, #12]
 800f084:	440a      	add	r2, r1
 800f086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f08a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	015a      	lsls	r2, r3, #5
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	4413      	add	r3, r2
 800f098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	0151      	lsls	r1, r2, #5
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	440a      	add	r2, r1
 800f0a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f0ae:	6013      	str	r3, [r2, #0]
 800f0b0:	e02b      	b.n	800f10a <USB_EPSetStall+0xce>
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	015a      	lsls	r2, r3, #5
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	db12      	blt.n	800f0ea <USB_EPSetStall+0xae>
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00f      	beq.n	800f0ea <USB_EPSetStall+0xae>
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	015a      	lsls	r2, r3, #5
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	68ba      	ldr	r2, [r7, #8]
 800f0da:	0151      	lsls	r1, r2, #5
 800f0dc:	68fa      	ldr	r2, [r7, #12]
 800f0de:	440a      	add	r2, r1
 800f0e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f0e8:	6013      	str	r3, [r2, #0]
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	015a      	lsls	r2, r3, #5
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	68ba      	ldr	r2, [r7, #8]
 800f0fa:	0151      	lsls	r1, r2, #5
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	440a      	add	r2, r1
 800f100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f108:	6013      	str	r3, [r2, #0]
 800f10a:	2300      	movs	r3, #0
 800f10c:	4618      	mov	r0, r3
 800f10e:	3714      	adds	r7, #20
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <USB_EPClearStall>:
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	60fb      	str	r3, [r7, #12]
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	60bb      	str	r3, [r7, #8]
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	785b      	ldrb	r3, [r3, #1]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d128      	bne.n	800f186 <USB_EPClearStall+0x6e>
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	015a      	lsls	r2, r3, #5
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	4413      	add	r3, r2
 800f13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	68ba      	ldr	r2, [r7, #8]
 800f144:	0151      	lsls	r1, r2, #5
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	440a      	add	r2, r1
 800f14a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f14e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f152:	6013      	str	r3, [r2, #0]
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	791b      	ldrb	r3, [r3, #4]
 800f158:	2b03      	cmp	r3, #3
 800f15a:	d003      	beq.n	800f164 <USB_EPClearStall+0x4c>
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	791b      	ldrb	r3, [r3, #4]
 800f160:	2b02      	cmp	r3, #2
 800f162:	d138      	bne.n	800f1d6 <USB_EPClearStall+0xbe>
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	015a      	lsls	r2, r3, #5
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	4413      	add	r3, r2
 800f16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	68ba      	ldr	r2, [r7, #8]
 800f174:	0151      	lsls	r1, r2, #5
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	440a      	add	r2, r1
 800f17a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f17e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f182:	6013      	str	r3, [r2, #0]
 800f184:	e027      	b.n	800f1d6 <USB_EPClearStall+0xbe>
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	015a      	lsls	r2, r3, #5
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	4413      	add	r3, r2
 800f18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	0151      	lsls	r1, r2, #5
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	440a      	add	r2, r1
 800f19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f1a4:	6013      	str	r3, [r2, #0]
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	791b      	ldrb	r3, [r3, #4]
 800f1aa:	2b03      	cmp	r3, #3
 800f1ac:	d003      	beq.n	800f1b6 <USB_EPClearStall+0x9e>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	791b      	ldrb	r3, [r3, #4]
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	d10f      	bne.n	800f1d6 <USB_EPClearStall+0xbe>
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	015a      	lsls	r2, r3, #5
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	4413      	add	r3, r2
 800f1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	68ba      	ldr	r2, [r7, #8]
 800f1c6:	0151      	lsls	r1, r2, #5
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	440a      	add	r2, r1
 800f1cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1d4:	6013      	str	r3, [r2, #0]
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3714      	adds	r7, #20
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <USB_SetDevAddress>:
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	70fb      	strb	r3, [r7, #3]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	60fb      	str	r3, [r7, #12]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f202:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f206:	6013      	str	r3, [r2, #0]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	78fb      	ldrb	r3, [r7, #3]
 800f212:	011b      	lsls	r3, r3, #4
 800f214:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f218:	68f9      	ldr	r1, [r7, #12]
 800f21a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f21e:	4313      	orrs	r3, r2
 800f220:	600b      	str	r3, [r1, #0]
 800f222:	2300      	movs	r3, #0
 800f224:	4618      	mov	r0, r3
 800f226:	3714      	adds	r7, #20
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <USB_DevConnect>:
 800f230:	b480      	push	{r7}
 800f232:	b085      	sub	sp, #20
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	60fb      	str	r3, [r7, #12]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f24a:	f023 0303 	bic.w	r3, r3, #3
 800f24e:	6013      	str	r3, [r2, #0]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	68fa      	ldr	r2, [r7, #12]
 800f25a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f25e:	f023 0302 	bic.w	r3, r3, #2
 800f262:	6053      	str	r3, [r2, #4]
 800f264:	2300      	movs	r3, #0
 800f266:	4618      	mov	r0, r3
 800f268:	3714      	adds	r7, #20
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr

0800f272 <USB_DevDisconnect>:
 800f272:	b480      	push	{r7}
 800f274:	b085      	sub	sp, #20
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	60fb      	str	r3, [r7, #12]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	68fa      	ldr	r2, [r7, #12]
 800f288:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f28c:	f023 0303 	bic.w	r3, r3, #3
 800f290:	6013      	str	r3, [r2, #0]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	68fa      	ldr	r2, [r7, #12]
 800f29c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f2a0:	f043 0302 	orr.w	r3, r3, #2
 800f2a4:	6053      	str	r3, [r2, #4]
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3714      	adds	r7, #20
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <USB_ReadInterrupts>:
 800f2b4:	b480      	push	{r7}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	695b      	ldr	r3, [r3, #20]
 800f2c0:	60fb      	str	r3, [r7, #12]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	699b      	ldr	r3, [r3, #24]
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	4013      	ands	r3, r2
 800f2ca:	60fb      	str	r3, [r7, #12]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3714      	adds	r7, #20
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr

0800f2da <USB_ReadDevAllOutEpInterrupt>:
 800f2da:	b480      	push	{r7}
 800f2dc:	b085      	sub	sp, #20
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	60fb      	str	r3, [r7, #12]
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2ec:	699b      	ldr	r3, [r3, #24]
 800f2ee:	60bb      	str	r3, [r7, #8]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2f6:	69db      	ldr	r3, [r3, #28]
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	4013      	ands	r3, r2
 800f2fc:	60bb      	str	r3, [r7, #8]
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	0c1b      	lsrs	r3, r3, #16
 800f302:	4618      	mov	r0, r3
 800f304:	3714      	adds	r7, #20
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr

0800f30e <USB_ReadDevAllInEpInterrupt>:
 800f30e:	b480      	push	{r7}
 800f310:	b085      	sub	sp, #20
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	60fb      	str	r3, [r7, #12]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f320:	699b      	ldr	r3, [r3, #24]
 800f322:	60bb      	str	r3, [r7, #8]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f32a:	69db      	ldr	r3, [r3, #28]
 800f32c:	68ba      	ldr	r2, [r7, #8]
 800f32e:	4013      	ands	r3, r2
 800f330:	60bb      	str	r3, [r7, #8]
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	b29b      	uxth	r3, r3
 800f336:	4618      	mov	r0, r3
 800f338:	3714      	adds	r7, #20
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <USB_ReadDevOutEPInterrupt>:
 800f342:	b480      	push	{r7}
 800f344:	b085      	sub	sp, #20
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	460b      	mov	r3, r1
 800f34c:	70fb      	strb	r3, [r7, #3]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	60fb      	str	r3, [r7, #12]
 800f352:	78fb      	ldrb	r3, [r7, #3]
 800f354:	015a      	lsls	r2, r3, #5
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	4413      	add	r3, r2
 800f35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f35e:	689b      	ldr	r3, [r3, #8]
 800f360:	60bb      	str	r3, [r7, #8]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f368:	695b      	ldr	r3, [r3, #20]
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	4013      	ands	r3, r2
 800f36e:	60bb      	str	r3, [r7, #8]
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	4618      	mov	r0, r3
 800f374:	3714      	adds	r7, #20
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr

0800f37e <USB_ReadDevInEPInterrupt>:
 800f37e:	b480      	push	{r7}
 800f380:	b087      	sub	sp, #28
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
 800f386:	460b      	mov	r3, r1
 800f388:	70fb      	strb	r3, [r7, #3]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	617b      	str	r3, [r7, #20]
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f394:	691b      	ldr	r3, [r3, #16]
 800f396:	613b      	str	r3, [r7, #16]
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a0:	60fb      	str	r3, [r7, #12]
 800f3a2:	78fb      	ldrb	r3, [r7, #3]
 800f3a4:	f003 030f 	and.w	r3, r3, #15
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800f3ae:	01db      	lsls	r3, r3, #7
 800f3b0:	b2db      	uxtb	r3, r3
 800f3b2:	693a      	ldr	r2, [r7, #16]
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	613b      	str	r3, [r7, #16]
 800f3b8:	78fb      	ldrb	r3, [r7, #3]
 800f3ba:	015a      	lsls	r2, r3, #5
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	4413      	add	r3, r2
 800f3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	693a      	ldr	r2, [r7, #16]
 800f3c8:	4013      	ands	r3, r2
 800f3ca:	60bb      	str	r3, [r7, #8]
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	371c      	adds	r7, #28
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr

0800f3da <USB_GetMode>:
 800f3da:	b480      	push	{r7}
 800f3dc:	b083      	sub	sp, #12
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	695b      	ldr	r3, [r3, #20]
 800f3e6:	f003 0301 	and.w	r3, r3, #1
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	370c      	adds	r7, #12
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr

0800f3f6 <USB_ActivateSetup>:
 800f3f6:	b480      	push	{r7}
 800f3f8:	b085      	sub	sp, #20
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	60fb      	str	r3, [r7, #12]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	68fa      	ldr	r2, [r7, #12]
 800f40c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f410:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f414:	f023 0307 	bic.w	r3, r3, #7
 800f418:	6013      	str	r3, [r2, #0]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f42c:	6053      	str	r3, [r2, #4]
 800f42e:	2300      	movs	r3, #0
 800f430:	4618      	mov	r0, r3
 800f432:	3714      	adds	r7, #20
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr

0800f43c <USB_EP0_OutStart>:
 800f43c:	b480      	push	{r7}
 800f43e:	b087      	sub	sp, #28
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	460b      	mov	r3, r1
 800f446:	607a      	str	r2, [r7, #4]
 800f448:	72fb      	strb	r3, [r7, #11]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	617b      	str	r3, [r7, #20]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	333c      	adds	r3, #60	; 0x3c
 800f452:	3304      	adds	r3, #4
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	613b      	str	r3, [r7, #16]
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	4a26      	ldr	r2, [pc, #152]	; (800f4f4 <USB_EP0_OutStart+0xb8>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d90a      	bls.n	800f476 <USB_EP0_OutStart+0x3a>
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f46c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f470:	d101      	bne.n	800f476 <USB_EP0_OutStart+0x3a>
 800f472:	2300      	movs	r3, #0
 800f474:	e037      	b.n	800f4e6 <USB_EP0_OutStart+0xaa>
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f47c:	461a      	mov	r2, r3
 800f47e:	2300      	movs	r3, #0
 800f480:	6113      	str	r3, [r2, #16]
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f494:	6113      	str	r3, [r2, #16]
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f49c:	691b      	ldr	r3, [r3, #16]
 800f49e:	697a      	ldr	r2, [r7, #20]
 800f4a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4a4:	f043 0318 	orr.w	r3, r3, #24
 800f4a8:	6113      	str	r3, [r2, #16]
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b0:	691b      	ldr	r3, [r3, #16]
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f4bc:	6113      	str	r3, [r2, #16]
 800f4be:	7afb      	ldrb	r3, [r7, #11]
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d10f      	bne.n	800f4e4 <USB_EP0_OutStart+0xa8>
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6153      	str	r3, [r2, #20]
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	697a      	ldr	r2, [r7, #20]
 800f4da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f4e2:	6013      	str	r3, [r2, #0]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	371c      	adds	r7, #28
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
 800f4f4:	4f54300a 	.word	0x4f54300a

0800f4f8 <USB_CoreReset>:
 800f4f8:	b480      	push	{r7}
 800f4fa:	b085      	sub	sp, #20
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	2300      	movs	r3, #0
 800f502:	60fb      	str	r3, [r7, #12]
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	3301      	adds	r3, #1
 800f508:	60fb      	str	r3, [r7, #12]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	4a13      	ldr	r2, [pc, #76]	; (800f55c <USB_CoreReset+0x64>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d901      	bls.n	800f516 <USB_CoreReset+0x1e>
 800f512:	2303      	movs	r3, #3
 800f514:	e01b      	b.n	800f54e <USB_CoreReset+0x56>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	daf2      	bge.n	800f504 <USB_CoreReset+0xc>
 800f51e:	2300      	movs	r3, #0
 800f520:	60fb      	str	r3, [r7, #12]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	f043 0201 	orr.w	r2, r3, #1
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	611a      	str	r2, [r3, #16]
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3301      	adds	r3, #1
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	4a09      	ldr	r2, [pc, #36]	; (800f55c <USB_CoreReset+0x64>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d901      	bls.n	800f540 <USB_CoreReset+0x48>
 800f53c:	2303      	movs	r3, #3
 800f53e:	e006      	b.n	800f54e <USB_CoreReset+0x56>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	691b      	ldr	r3, [r3, #16]
 800f544:	f003 0301 	and.w	r3, r3, #1
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d0f0      	beq.n	800f52e <USB_CoreReset+0x36>
 800f54c:	2300      	movs	r3, #0
 800f54e:	4618      	mov	r0, r3
 800f550:	3714      	adds	r7, #20
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	00030d40 	.word	0x00030d40

0800f560 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	460b      	mov	r3, r1
 800f56a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f56c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f570:	f005 fdca 	bl	8015108 <USBD_static_malloc>
 800f574:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d109      	bne.n	800f590 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	32b0      	adds	r2, #176	; 0xb0
 800f586:	2100      	movs	r1, #0
 800f588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f58c:	2302      	movs	r3, #2
 800f58e:	e0d4      	b.n	800f73a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f590:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800f594:	2100      	movs	r1, #0
 800f596:	68f8      	ldr	r0, [r7, #12]
 800f598:	f006 febf 	bl	801631a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	32b0      	adds	r2, #176	; 0xb0
 800f5a6:	68f9      	ldr	r1, [r7, #12]
 800f5a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	32b0      	adds	r2, #176	; 0xb0
 800f5b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	7c1b      	ldrb	r3, [r3, #16]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d138      	bne.n	800f63a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f5c8:	4b5e      	ldr	r3, [pc, #376]	; (800f744 <USBD_CDC_Init+0x1e4>)
 800f5ca:	7819      	ldrb	r1, [r3, #0]
 800f5cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5d0:	2202      	movs	r2, #2
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f005 fc75 	bl	8014ec2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f5d8:	4b5a      	ldr	r3, [pc, #360]	; (800f744 <USBD_CDC_Init+0x1e4>)
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	f003 020f 	and.w	r2, r3, #15
 800f5e0:	6879      	ldr	r1, [r7, #4]
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	4413      	add	r3, r2
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	440b      	add	r3, r1
 800f5ec:	3324      	adds	r3, #36	; 0x24
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f5f2:	4b55      	ldr	r3, [pc, #340]	; (800f748 <USBD_CDC_Init+0x1e8>)
 800f5f4:	7819      	ldrb	r1, [r3, #0]
 800f5f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5fa:	2202      	movs	r2, #2
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f005 fc60 	bl	8014ec2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f602:	4b51      	ldr	r3, [pc, #324]	; (800f748 <USBD_CDC_Init+0x1e8>)
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	f003 020f 	and.w	r2, r3, #15
 800f60a:	6879      	ldr	r1, [r7, #4]
 800f60c:	4613      	mov	r3, r2
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	4413      	add	r3, r2
 800f612:	009b      	lsls	r3, r3, #2
 800f614:	440b      	add	r3, r1
 800f616:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f61a:	2201      	movs	r2, #1
 800f61c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f61e:	4b4b      	ldr	r3, [pc, #300]	; (800f74c <USBD_CDC_Init+0x1ec>)
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	f003 020f 	and.w	r2, r3, #15
 800f626:	6879      	ldr	r1, [r7, #4]
 800f628:	4613      	mov	r3, r2
 800f62a:	009b      	lsls	r3, r3, #2
 800f62c:	4413      	add	r3, r2
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	440b      	add	r3, r1
 800f632:	3326      	adds	r3, #38	; 0x26
 800f634:	2210      	movs	r2, #16
 800f636:	801a      	strh	r2, [r3, #0]
 800f638:	e035      	b.n	800f6a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f63a:	4b42      	ldr	r3, [pc, #264]	; (800f744 <USBD_CDC_Init+0x1e4>)
 800f63c:	7819      	ldrb	r1, [r3, #0]
 800f63e:	2340      	movs	r3, #64	; 0x40
 800f640:	2202      	movs	r2, #2
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f005 fc3d 	bl	8014ec2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f648:	4b3e      	ldr	r3, [pc, #248]	; (800f744 <USBD_CDC_Init+0x1e4>)
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	f003 020f 	and.w	r2, r3, #15
 800f650:	6879      	ldr	r1, [r7, #4]
 800f652:	4613      	mov	r3, r2
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	4413      	add	r3, r2
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	440b      	add	r3, r1
 800f65c:	3324      	adds	r3, #36	; 0x24
 800f65e:	2201      	movs	r2, #1
 800f660:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f662:	4b39      	ldr	r3, [pc, #228]	; (800f748 <USBD_CDC_Init+0x1e8>)
 800f664:	7819      	ldrb	r1, [r3, #0]
 800f666:	2340      	movs	r3, #64	; 0x40
 800f668:	2202      	movs	r2, #2
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f005 fc29 	bl	8014ec2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f670:	4b35      	ldr	r3, [pc, #212]	; (800f748 <USBD_CDC_Init+0x1e8>)
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	f003 020f 	and.w	r2, r3, #15
 800f678:	6879      	ldr	r1, [r7, #4]
 800f67a:	4613      	mov	r3, r2
 800f67c:	009b      	lsls	r3, r3, #2
 800f67e:	4413      	add	r3, r2
 800f680:	009b      	lsls	r3, r3, #2
 800f682:	440b      	add	r3, r1
 800f684:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f688:	2201      	movs	r2, #1
 800f68a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f68c:	4b2f      	ldr	r3, [pc, #188]	; (800f74c <USBD_CDC_Init+0x1ec>)
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	f003 020f 	and.w	r2, r3, #15
 800f694:	6879      	ldr	r1, [r7, #4]
 800f696:	4613      	mov	r3, r2
 800f698:	009b      	lsls	r3, r3, #2
 800f69a:	4413      	add	r3, r2
 800f69c:	009b      	lsls	r3, r3, #2
 800f69e:	440b      	add	r3, r1
 800f6a0:	3326      	adds	r3, #38	; 0x26
 800f6a2:	2210      	movs	r2, #16
 800f6a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f6a6:	4b29      	ldr	r3, [pc, #164]	; (800f74c <USBD_CDC_Init+0x1ec>)
 800f6a8:	7819      	ldrb	r1, [r3, #0]
 800f6aa:	2308      	movs	r3, #8
 800f6ac:	2203      	movs	r2, #3
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f005 fc07 	bl	8014ec2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f6b4:	4b25      	ldr	r3, [pc, #148]	; (800f74c <USBD_CDC_Init+0x1ec>)
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	f003 020f 	and.w	r2, r3, #15
 800f6bc:	6879      	ldr	r1, [r7, #4]
 800f6be:	4613      	mov	r3, r2
 800f6c0:	009b      	lsls	r3, r3, #2
 800f6c2:	4413      	add	r3, r2
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	440b      	add	r3, r1
 800f6c8:	3324      	adds	r3, #36	; 0x24
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	33b0      	adds	r3, #176	; 0xb0
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	4413      	add	r3, r2
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800f700:	2b00      	cmp	r3, #0
 800f702:	d101      	bne.n	800f708 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f704:	2302      	movs	r3, #2
 800f706:	e018      	b.n	800f73a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	7c1b      	ldrb	r3, [r3, #16]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d10a      	bne.n	800f726 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f710:	4b0d      	ldr	r3, [pc, #52]	; (800f748 <USBD_CDC_Init+0x1e8>)
 800f712:	7819      	ldrb	r1, [r3, #0]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f71a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f005 fcbe 	bl	80150a0 <USBD_LL_PrepareReceive>
 800f724:	e008      	b.n	800f738 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f726:	4b08      	ldr	r3, [pc, #32]	; (800f748 <USBD_CDC_Init+0x1e8>)
 800f728:	7819      	ldrb	r1, [r3, #0]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f730:	2340      	movs	r3, #64	; 0x40
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f005 fcb4 	bl	80150a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f738:	2300      	movs	r3, #0
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	2000132f 	.word	0x2000132f
 800f748:	20001330 	.word	0x20001330
 800f74c:	20001331 	.word	0x20001331

0800f750 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	460b      	mov	r3, r1
 800f75a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f75c:	4b3a      	ldr	r3, [pc, #232]	; (800f848 <USBD_CDC_DeInit+0xf8>)
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	4619      	mov	r1, r3
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f005 fbd3 	bl	8014f0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f768:	4b37      	ldr	r3, [pc, #220]	; (800f848 <USBD_CDC_DeInit+0xf8>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	f003 020f 	and.w	r2, r3, #15
 800f770:	6879      	ldr	r1, [r7, #4]
 800f772:	4613      	mov	r3, r2
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	4413      	add	r3, r2
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	440b      	add	r3, r1
 800f77c:	3324      	adds	r3, #36	; 0x24
 800f77e:	2200      	movs	r2, #0
 800f780:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f782:	4b32      	ldr	r3, [pc, #200]	; (800f84c <USBD_CDC_DeInit+0xfc>)
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	4619      	mov	r1, r3
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f005 fbc0 	bl	8014f0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f78e:	4b2f      	ldr	r3, [pc, #188]	; (800f84c <USBD_CDC_DeInit+0xfc>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	f003 020f 	and.w	r2, r3, #15
 800f796:	6879      	ldr	r1, [r7, #4]
 800f798:	4613      	mov	r3, r2
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	440b      	add	r3, r1
 800f7a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f7aa:	4b29      	ldr	r3, [pc, #164]	; (800f850 <USBD_CDC_DeInit+0x100>)
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f005 fbac 	bl	8014f0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f7b6:	4b26      	ldr	r3, [pc, #152]	; (800f850 <USBD_CDC_DeInit+0x100>)
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	f003 020f 	and.w	r2, r3, #15
 800f7be:	6879      	ldr	r1, [r7, #4]
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	4413      	add	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	440b      	add	r3, r1
 800f7ca:	3324      	adds	r3, #36	; 0x24
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f7d0:	4b1f      	ldr	r3, [pc, #124]	; (800f850 <USBD_CDC_DeInit+0x100>)
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	f003 020f 	and.w	r2, r3, #15
 800f7d8:	6879      	ldr	r1, [r7, #4]
 800f7da:	4613      	mov	r3, r2
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	4413      	add	r3, r2
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	440b      	add	r3, r1
 800f7e4:	3326      	adds	r3, #38	; 0x26
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	32b0      	adds	r2, #176	; 0xb0
 800f7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d01f      	beq.n	800f83c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	33b0      	adds	r3, #176	; 0xb0
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	4413      	add	r3, r2
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	32b0      	adds	r2, #176	; 0xb0
 800f81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f81e:	4618      	mov	r0, r3
 800f820:	f005 fc80 	bl	8015124 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	32b0      	adds	r2, #176	; 0xb0
 800f82e:	2100      	movs	r1, #0
 800f830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2200      	movs	r2, #0
 800f838:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f83c:	2300      	movs	r3, #0
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3708      	adds	r7, #8
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	2000132f 	.word	0x2000132f
 800f84c:	20001330 	.word	0x20001330
 800f850:	20001331 	.word	0x20001331

0800f854 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b086      	sub	sp, #24
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	32b0      	adds	r2, #176	; 0xb0
 800f868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f86c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f86e:	2300      	movs	r3, #0
 800f870:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f872:	2300      	movs	r3, #0
 800f874:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f876:	2300      	movs	r3, #0
 800f878:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d101      	bne.n	800f884 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f880:	2303      	movs	r3, #3
 800f882:	e0bf      	b.n	800fa04 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d050      	beq.n	800f932 <USBD_CDC_Setup+0xde>
 800f890:	2b20      	cmp	r3, #32
 800f892:	f040 80af 	bne.w	800f9f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	88db      	ldrh	r3, [r3, #6]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d03a      	beq.n	800f914 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	b25b      	sxtb	r3, r3
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	da1b      	bge.n	800f8e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	33b0      	adds	r3, #176	; 0xb0
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	4413      	add	r3, r2
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	689b      	ldr	r3, [r3, #8]
 800f8ba:	683a      	ldr	r2, [r7, #0]
 800f8bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f8be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f8c0:	683a      	ldr	r2, [r7, #0]
 800f8c2:	88d2      	ldrh	r2, [r2, #6]
 800f8c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	88db      	ldrh	r3, [r3, #6]
 800f8ca:	2b07      	cmp	r3, #7
 800f8cc:	bf28      	it	cs
 800f8ce:	2307      	movcs	r3, #7
 800f8d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f8d2:	693b      	ldr	r3, [r7, #16]
 800f8d4:	89fa      	ldrh	r2, [r7, #14]
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f001 fd89 	bl	80113f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f8de:	e090      	b.n	800fa02 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	785a      	ldrb	r2, [r3, #1]
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	88db      	ldrh	r3, [r3, #6]
 800f8ee:	2b3f      	cmp	r3, #63	; 0x3f
 800f8f0:	d803      	bhi.n	800f8fa <USBD_CDC_Setup+0xa6>
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	88db      	ldrh	r3, [r3, #6]
 800f8f6:	b2da      	uxtb	r2, r3
 800f8f8:	e000      	b.n	800f8fc <USBD_CDC_Setup+0xa8>
 800f8fa:	2240      	movs	r2, #64	; 0x40
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f902:	6939      	ldr	r1, [r7, #16]
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800f90a:	461a      	mov	r2, r3
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f001 fd9b 	bl	8011448 <USBD_CtlPrepareRx>
      break;
 800f912:	e076      	b.n	800fa02 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	33b0      	adds	r3, #176	; 0xb0
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	4413      	add	r3, r2
 800f922:	685b      	ldr	r3, [r3, #4]
 800f924:	689b      	ldr	r3, [r3, #8]
 800f926:	683a      	ldr	r2, [r7, #0]
 800f928:	7850      	ldrb	r0, [r2, #1]
 800f92a:	2200      	movs	r2, #0
 800f92c:	6839      	ldr	r1, [r7, #0]
 800f92e:	4798      	blx	r3
      break;
 800f930:	e067      	b.n	800fa02 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	785b      	ldrb	r3, [r3, #1]
 800f936:	2b0b      	cmp	r3, #11
 800f938:	d851      	bhi.n	800f9de <USBD_CDC_Setup+0x18a>
 800f93a:	a201      	add	r2, pc, #4	; (adr r2, 800f940 <USBD_CDC_Setup+0xec>)
 800f93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f940:	0800f971 	.word	0x0800f971
 800f944:	0800f9ed 	.word	0x0800f9ed
 800f948:	0800f9df 	.word	0x0800f9df
 800f94c:	0800f9df 	.word	0x0800f9df
 800f950:	0800f9df 	.word	0x0800f9df
 800f954:	0800f9df 	.word	0x0800f9df
 800f958:	0800f9df 	.word	0x0800f9df
 800f95c:	0800f9df 	.word	0x0800f9df
 800f960:	0800f9df 	.word	0x0800f9df
 800f964:	0800f9df 	.word	0x0800f9df
 800f968:	0800f99b 	.word	0x0800f99b
 800f96c:	0800f9c5 	.word	0x0800f9c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b03      	cmp	r3, #3
 800f97a:	d107      	bne.n	800f98c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f97c:	f107 030a 	add.w	r3, r7, #10
 800f980:	2202      	movs	r2, #2
 800f982:	4619      	mov	r1, r3
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f001 fd33 	bl	80113f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f98a:	e032      	b.n	800f9f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f98c:	6839      	ldr	r1, [r7, #0]
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f001 fcbd 	bl	801130e <USBD_CtlError>
            ret = USBD_FAIL;
 800f994:	2303      	movs	r3, #3
 800f996:	75fb      	strb	r3, [r7, #23]
          break;
 800f998:	e02b      	b.n	800f9f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	2b03      	cmp	r3, #3
 800f9a4:	d107      	bne.n	800f9b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f9a6:	f107 030d 	add.w	r3, r7, #13
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f001 fd1e 	bl	80113f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f9b4:	e01d      	b.n	800f9f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f9b6:	6839      	ldr	r1, [r7, #0]
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f001 fca8 	bl	801130e <USBD_CtlError>
            ret = USBD_FAIL;
 800f9be:	2303      	movs	r3, #3
 800f9c0:	75fb      	strb	r3, [r7, #23]
          break;
 800f9c2:	e016      	b.n	800f9f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	2b03      	cmp	r3, #3
 800f9ce:	d00f      	beq.n	800f9f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f9d0:	6839      	ldr	r1, [r7, #0]
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f001 fc9b 	bl	801130e <USBD_CtlError>
            ret = USBD_FAIL;
 800f9d8:	2303      	movs	r3, #3
 800f9da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f9dc:	e008      	b.n	800f9f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f9de:	6839      	ldr	r1, [r7, #0]
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f001 fc94 	bl	801130e <USBD_CtlError>
          ret = USBD_FAIL;
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	75fb      	strb	r3, [r7, #23]
          break;
 800f9ea:	e002      	b.n	800f9f2 <USBD_CDC_Setup+0x19e>
          break;
 800f9ec:	bf00      	nop
 800f9ee:	e008      	b.n	800fa02 <USBD_CDC_Setup+0x1ae>
          break;
 800f9f0:	bf00      	nop
      }
      break;
 800f9f2:	e006      	b.n	800fa02 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f9f4:	6839      	ldr	r1, [r7, #0]
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f001 fc89 	bl	801130e <USBD_CtlError>
      ret = USBD_FAIL;
 800f9fc:	2303      	movs	r3, #3
 800f9fe:	75fb      	strb	r3, [r7, #23]
      break;
 800fa00:	bf00      	nop
  }

  return (uint8_t)ret;
 800fa02:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3718      	adds	r7, #24
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	460b      	mov	r3, r1
 800fa16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	32b0      	adds	r2, #176	; 0xb0
 800fa2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d101      	bne.n	800fa36 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fa32:	2303      	movs	r3, #3
 800fa34:	e065      	b.n	800fb02 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	32b0      	adds	r2, #176	; 0xb0
 800fa40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fa46:	78fb      	ldrb	r3, [r7, #3]
 800fa48:	f003 020f 	and.w	r2, r3, #15
 800fa4c:	6879      	ldr	r1, [r7, #4]
 800fa4e:	4613      	mov	r3, r2
 800fa50:	009b      	lsls	r3, r3, #2
 800fa52:	4413      	add	r3, r2
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	440b      	add	r3, r1
 800fa58:	3318      	adds	r3, #24
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d02f      	beq.n	800fac0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fa60:	78fb      	ldrb	r3, [r7, #3]
 800fa62:	f003 020f 	and.w	r2, r3, #15
 800fa66:	6879      	ldr	r1, [r7, #4]
 800fa68:	4613      	mov	r3, r2
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	4413      	add	r3, r2
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	440b      	add	r3, r1
 800fa72:	3318      	adds	r3, #24
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	78fb      	ldrb	r3, [r7, #3]
 800fa78:	f003 010f 	and.w	r1, r3, #15
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	460b      	mov	r3, r1
 800fa80:	00db      	lsls	r3, r3, #3
 800fa82:	440b      	add	r3, r1
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	4403      	add	r3, r0
 800fa88:	3348      	adds	r3, #72	; 0x48
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	fbb2 f1f3 	udiv	r1, r2, r3
 800fa90:	fb01 f303 	mul.w	r3, r1, r3
 800fa94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d112      	bne.n	800fac0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fa9a:	78fb      	ldrb	r3, [r7, #3]
 800fa9c:	f003 020f 	and.w	r2, r3, #15
 800faa0:	6879      	ldr	r1, [r7, #4]
 800faa2:	4613      	mov	r3, r2
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	4413      	add	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	440b      	add	r3, r1
 800faac:	3318      	adds	r3, #24
 800faae:	2200      	movs	r2, #0
 800fab0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fab2:	78f9      	ldrb	r1, [r7, #3]
 800fab4:	2300      	movs	r3, #0
 800fab6:	2200      	movs	r2, #0
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f005 fad0 	bl	801505e <USBD_LL_Transmit>
 800fabe:	e01f      	b.n	800fb00 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800face:	687a      	ldr	r2, [r7, #4]
 800fad0:	33b0      	adds	r3, #176	; 0xb0
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	4413      	add	r3, r2
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	691b      	ldr	r3, [r3, #16]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d010      	beq.n	800fb00 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	33b0      	adds	r3, #176	; 0xb0
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	4413      	add	r3, r2
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	691b      	ldr	r3, [r3, #16]
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800faf6:	68ba      	ldr	r2, [r7, #8]
 800faf8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800fafc:	78fa      	ldrb	r2, [r7, #3]
 800fafe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b084      	sub	sp, #16
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	460b      	mov	r3, r1
 800fb14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	32b0      	adds	r2, #176	; 0xb0
 800fb20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	32b0      	adds	r2, #176	; 0xb0
 800fb30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d101      	bne.n	800fb3c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fb38:	2303      	movs	r3, #3
 800fb3a:	e01a      	b.n	800fb72 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fb3c:	78fb      	ldrb	r3, [r7, #3]
 800fb3e:	4619      	mov	r1, r3
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f005 face 	bl	80150e2 <USBD_LL_GetRxDataSize>
 800fb46:	4602      	mov	r2, r0
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fb54:	687a      	ldr	r2, [r7, #4]
 800fb56:	33b0      	adds	r3, #176	; 0xb0
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	4413      	add	r3, r2
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	68db      	ldr	r3, [r3, #12]
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800fb6c:	4611      	mov	r1, r2
 800fb6e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3710      	adds	r7, #16
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b084      	sub	sp, #16
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	32b0      	adds	r2, #176	; 0xb0
 800fb8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d101      	bne.n	800fb9c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fb98:	2303      	movs	r3, #3
 800fb9a:	e025      	b.n	800fbe8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	33b0      	adds	r3, #176	; 0xb0
 800fba6:	009b      	lsls	r3, r3, #2
 800fba8:	4413      	add	r3, r2
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d01a      	beq.n	800fbe6 <USBD_CDC_EP0_RxReady+0x6c>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fbb6:	2bff      	cmp	r3, #255	; 0xff
 800fbb8:	d015      	beq.n	800fbe6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	33b0      	adds	r3, #176	; 0xb0
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	4413      	add	r3, r2
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800fbd2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fbda:	b292      	uxth	r2, r2
 800fbdc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	22ff      	movs	r2, #255	; 0xff
 800fbe2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800fbe6:	2300      	movs	r3, #0
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3710      	adds	r7, #16
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}

0800fbf0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b086      	sub	sp, #24
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fbf8:	2182      	movs	r1, #130	; 0x82
 800fbfa:	4818      	ldr	r0, [pc, #96]	; (800fc5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fbfc:	f000 fd4f 	bl	801069e <USBD_GetEpDesc>
 800fc00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fc02:	2101      	movs	r1, #1
 800fc04:	4815      	ldr	r0, [pc, #84]	; (800fc5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fc06:	f000 fd4a 	bl	801069e <USBD_GetEpDesc>
 800fc0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fc0c:	2181      	movs	r1, #129	; 0x81
 800fc0e:	4813      	ldr	r0, [pc, #76]	; (800fc5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fc10:	f000 fd45 	bl	801069e <USBD_GetEpDesc>
 800fc14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d002      	beq.n	800fc22 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	2210      	movs	r2, #16
 800fc20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d006      	beq.n	800fc36 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fc30:	711a      	strb	r2, [r3, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d006      	beq.n	800fc4a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fc44:	711a      	strb	r2, [r3, #4]
 800fc46:	2200      	movs	r2, #0
 800fc48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2243      	movs	r2, #67	; 0x43
 800fc4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fc50:	4b02      	ldr	r3, [pc, #8]	; (800fc5c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3718      	adds	r7, #24
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	200012ec 	.word	0x200012ec

0800fc60 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fc68:	2182      	movs	r1, #130	; 0x82
 800fc6a:	4818      	ldr	r0, [pc, #96]	; (800fccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fc6c:	f000 fd17 	bl	801069e <USBD_GetEpDesc>
 800fc70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fc72:	2101      	movs	r1, #1
 800fc74:	4815      	ldr	r0, [pc, #84]	; (800fccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fc76:	f000 fd12 	bl	801069e <USBD_GetEpDesc>
 800fc7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fc7c:	2181      	movs	r1, #129	; 0x81
 800fc7e:	4813      	ldr	r0, [pc, #76]	; (800fccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fc80:	f000 fd0d 	bl	801069e <USBD_GetEpDesc>
 800fc84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d002      	beq.n	800fc92 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	2210      	movs	r2, #16
 800fc90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d006      	beq.n	800fca6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	711a      	strb	r2, [r3, #4]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	f042 0202 	orr.w	r2, r2, #2
 800fca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d006      	beq.n	800fcba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	711a      	strb	r2, [r3, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	f042 0202 	orr.w	r2, r2, #2
 800fcb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2243      	movs	r2, #67	; 0x43
 800fcbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fcc0:	4b02      	ldr	r3, [pc, #8]	; (800fccc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3718      	adds	r7, #24
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	200012ec 	.word	0x200012ec

0800fcd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b086      	sub	sp, #24
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fcd8:	2182      	movs	r1, #130	; 0x82
 800fcda:	4818      	ldr	r0, [pc, #96]	; (800fd3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fcdc:	f000 fcdf 	bl	801069e <USBD_GetEpDesc>
 800fce0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fce2:	2101      	movs	r1, #1
 800fce4:	4815      	ldr	r0, [pc, #84]	; (800fd3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fce6:	f000 fcda 	bl	801069e <USBD_GetEpDesc>
 800fcea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fcec:	2181      	movs	r1, #129	; 0x81
 800fcee:	4813      	ldr	r0, [pc, #76]	; (800fd3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fcf0:	f000 fcd5 	bl	801069e <USBD_GetEpDesc>
 800fcf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d002      	beq.n	800fd02 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	2210      	movs	r2, #16
 800fd00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d006      	beq.n	800fd16 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd10:	711a      	strb	r2, [r3, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d006      	beq.n	800fd2a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd24:	711a      	strb	r2, [r3, #4]
 800fd26:	2200      	movs	r2, #0
 800fd28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2243      	movs	r2, #67	; 0x43
 800fd2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fd30:	4b02      	ldr	r3, [pc, #8]	; (800fd3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3718      	adds	r7, #24
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	200012ec 	.word	0x200012ec

0800fd40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b083      	sub	sp, #12
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	220a      	movs	r2, #10
 800fd4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fd4e:	4b03      	ldr	r3, [pc, #12]	; (800fd5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	370c      	adds	r7, #12
 800fd54:	46bd      	mov	sp, r7
 800fd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5a:	4770      	bx	lr
 800fd5c:	200012a8 	.word	0x200012a8

0800fd60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d101      	bne.n	800fd74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fd70:	2303      	movs	r3, #3
 800fd72:	e009      	b.n	800fd88 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	33b0      	adds	r3, #176	; 0xb0
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	4413      	add	r3, r2
 800fd82:	683a      	ldr	r2, [r7, #0]
 800fd84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fd86:	2300      	movs	r3, #0
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b087      	sub	sp, #28
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	60b9      	str	r1, [r7, #8]
 800fd9e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	32b0      	adds	r2, #176	; 0xb0
 800fdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d101      	bne.n	800fdba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fdb6:	2303      	movs	r3, #3
 800fdb8:	e008      	b.n	800fdcc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800fdca:	2300      	movs	r3, #0
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	371c      	adds	r7, #28
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b085      	sub	sp, #20
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	32b0      	adds	r2, #176	; 0xb0
 800fdec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdf0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d101      	bne.n	800fdfc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fdf8:	2303      	movs	r3, #3
 800fdfa:	e004      	b.n	800fe06 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	683a      	ldr	r2, [r7, #0]
 800fe00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800fe04:	2300      	movs	r3, #0
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3714      	adds	r7, #20
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
	...

0800fe14 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	32b0      	adds	r2, #176	; 0xb0
 800fe26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe2a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	32b0      	adds	r2, #176	; 0xb0
 800fe3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d101      	bne.n	800fe46 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fe42:	2303      	movs	r3, #3
 800fe44:	e025      	b.n	800fe92 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d11f      	bne.n	800fe90 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	2201      	movs	r2, #1
 800fe54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fe58:	4b10      	ldr	r3, [pc, #64]	; (800fe9c <USBD_CDC_TransmitPacket+0x88>)
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	f003 020f 	and.w	r2, r3, #15
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	4613      	mov	r3, r2
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	4413      	add	r3, r2
 800fe6e:	009b      	lsls	r3, r3, #2
 800fe70:	4403      	add	r3, r0
 800fe72:	3318      	adds	r3, #24
 800fe74:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fe76:	4b09      	ldr	r3, [pc, #36]	; (800fe9c <USBD_CDC_TransmitPacket+0x88>)
 800fe78:	7819      	ldrb	r1, [r3, #0]
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f005 f8e9 	bl	801505e <USBD_LL_Transmit>

    ret = USBD_OK;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fe90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3710      	adds	r7, #16
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	2000132f 	.word	0x2000132f

0800fea0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b084      	sub	sp, #16
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	32b0      	adds	r2, #176	; 0xb0
 800feb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feb6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	32b0      	adds	r2, #176	; 0xb0
 800fec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d101      	bne.n	800fece <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800feca:	2303      	movs	r3, #3
 800fecc:	e018      	b.n	800ff00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	7c1b      	ldrb	r3, [r3, #16]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d10a      	bne.n	800feec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fed6:	4b0c      	ldr	r3, [pc, #48]	; (800ff08 <USBD_CDC_ReceivePacket+0x68>)
 800fed8:	7819      	ldrb	r1, [r3, #0]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f005 f8db 	bl	80150a0 <USBD_LL_PrepareReceive>
 800feea:	e008      	b.n	800fefe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800feec:	4b06      	ldr	r3, [pc, #24]	; (800ff08 <USBD_CDC_ReceivePacket+0x68>)
 800feee:	7819      	ldrb	r1, [r3, #0]
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fef6:	2340      	movs	r3, #64	; 0x40
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f005 f8d1 	bl	80150a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fefe:	2300      	movs	r3, #0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3710      	adds	r7, #16
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	20001330 	.word	0x20001330

0800ff0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b086      	sub	sp, #24
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	4613      	mov	r3, r2
 800ff18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d101      	bne.n	800ff24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ff20:	2303      	movs	r3, #3
 800ff22:	e01f      	b.n	800ff64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2200      	movs	r2, #0
 800ff28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2200      	movs	r2, #0
 800ff38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d003      	beq.n	800ff4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	68ba      	ldr	r2, [r7, #8]
 800ff46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	79fa      	ldrb	r2, [r7, #7]
 800ff56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f004 ff4b 	bl	8014df4 <USBD_LL_Init>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ff62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3718      	adds	r7, #24
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b084      	sub	sp, #16
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ff76:	2300      	movs	r3, #0
 800ff78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d101      	bne.n	800ff84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ff80:	2303      	movs	r3, #3
 800ff82:	e025      	b.n	800ffd0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	683a      	ldr	r2, [r7, #0]
 800ff88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	32ae      	adds	r2, #174	; 0xae
 800ff96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00f      	beq.n	800ffc0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	32ae      	adds	r2, #174	; 0xae
 800ffaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb0:	f107 020e 	add.w	r2, r7, #14
 800ffb4:	4610      	mov	r0, r2
 800ffb6:	4798      	blx	r3
 800ffb8:	4602      	mov	r2, r0
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ffc6:	1c5a      	adds	r2, r3, #1
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3710      	adds	r7, #16
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f004 ff53 	bl	8014e8c <USBD_LL_Start>
 800ffe6:	4603      	mov	r3, r0
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fff8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	370c      	adds	r7, #12
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr

08010006 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010006:	b580      	push	{r7, lr}
 8010008:	b084      	sub	sp, #16
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
 801000e:	460b      	mov	r3, r1
 8010010:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010012:	2300      	movs	r3, #0
 8010014:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801001c:	2b00      	cmp	r3, #0
 801001e:	d009      	beq.n	8010034 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	78fa      	ldrb	r2, [r7, #3]
 801002a:	4611      	mov	r1, r2
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	4798      	blx	r3
 8010030:	4603      	mov	r3, r0
 8010032:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010034:	7bfb      	ldrb	r3, [r7, #15]
}
 8010036:	4618      	mov	r0, r3
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b084      	sub	sp, #16
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	460b      	mov	r3, r1
 8010048:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801004a:	2300      	movs	r3, #0
 801004c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	78fa      	ldrb	r2, [r7, #3]
 8010058:	4611      	mov	r1, r2
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	4798      	blx	r3
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d001      	beq.n	8010068 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010064:	2303      	movs	r3, #3
 8010066:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010068:	7bfb      	ldrb	r3, [r7, #15]
}
 801006a:	4618      	mov	r0, r3
 801006c:	3710      	adds	r7, #16
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b084      	sub	sp, #16
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
 801007a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010082:	6839      	ldr	r1, [r7, #0]
 8010084:	4618      	mov	r0, r3
 8010086:	f001 f908 	bl	801129a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2201      	movs	r2, #1
 801008e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010098:	461a      	mov	r2, r3
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80100a6:	f003 031f 	and.w	r3, r3, #31
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	d01a      	beq.n	80100e4 <USBD_LL_SetupStage+0x72>
 80100ae:	2b02      	cmp	r3, #2
 80100b0:	d822      	bhi.n	80100f8 <USBD_LL_SetupStage+0x86>
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d002      	beq.n	80100bc <USBD_LL_SetupStage+0x4a>
 80100b6:	2b01      	cmp	r3, #1
 80100b8:	d00a      	beq.n	80100d0 <USBD_LL_SetupStage+0x5e>
 80100ba:	e01d      	b.n	80100f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80100c2:	4619      	mov	r1, r3
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 fb5f 	bl	8010788 <USBD_StdDevReq>
 80100ca:	4603      	mov	r3, r0
 80100cc:	73fb      	strb	r3, [r7, #15]
      break;
 80100ce:	e020      	b.n	8010112 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80100d6:	4619      	mov	r1, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fbc7 	bl	801086c <USBD_StdItfReq>
 80100de:	4603      	mov	r3, r0
 80100e0:	73fb      	strb	r3, [r7, #15]
      break;
 80100e2:	e016      	b.n	8010112 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80100ea:	4619      	mov	r1, r3
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 fc29 	bl	8010944 <USBD_StdEPReq>
 80100f2:	4603      	mov	r3, r0
 80100f4:	73fb      	strb	r3, [r7, #15]
      break;
 80100f6:	e00c      	b.n	8010112 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80100fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010102:	b2db      	uxtb	r3, r3
 8010104:	4619      	mov	r1, r3
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f004 ff20 	bl	8014f4c <USBD_LL_StallEP>
 801010c:	4603      	mov	r3, r0
 801010e:	73fb      	strb	r3, [r7, #15]
      break;
 8010110:	bf00      	nop
  }

  return ret;
 8010112:	7bfb      	ldrb	r3, [r7, #15]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3710      	adds	r7, #16
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b086      	sub	sp, #24
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	460b      	mov	r3, r1
 8010126:	607a      	str	r2, [r7, #4]
 8010128:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801012a:	2300      	movs	r3, #0
 801012c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801012e:	7afb      	ldrb	r3, [r7, #11]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d16e      	bne.n	8010212 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801013a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010142:	2b03      	cmp	r3, #3
 8010144:	f040 8098 	bne.w	8010278 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	689a      	ldr	r2, [r3, #8]
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	68db      	ldr	r3, [r3, #12]
 8010150:	429a      	cmp	r2, r3
 8010152:	d913      	bls.n	801017c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	689a      	ldr	r2, [r3, #8]
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	1ad2      	subs	r2, r2, r3
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	68da      	ldr	r2, [r3, #12]
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	689b      	ldr	r3, [r3, #8]
 801016a:	4293      	cmp	r3, r2
 801016c:	bf28      	it	cs
 801016e:	4613      	movcs	r3, r2
 8010170:	461a      	mov	r2, r3
 8010172:	6879      	ldr	r1, [r7, #4]
 8010174:	68f8      	ldr	r0, [r7, #12]
 8010176:	f001 f984 	bl	8011482 <USBD_CtlContinueRx>
 801017a:	e07d      	b.n	8010278 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010182:	f003 031f 	and.w	r3, r3, #31
 8010186:	2b02      	cmp	r3, #2
 8010188:	d014      	beq.n	80101b4 <USBD_LL_DataOutStage+0x98>
 801018a:	2b02      	cmp	r3, #2
 801018c:	d81d      	bhi.n	80101ca <USBD_LL_DataOutStage+0xae>
 801018e:	2b00      	cmp	r3, #0
 8010190:	d002      	beq.n	8010198 <USBD_LL_DataOutStage+0x7c>
 8010192:	2b01      	cmp	r3, #1
 8010194:	d003      	beq.n	801019e <USBD_LL_DataOutStage+0x82>
 8010196:	e018      	b.n	80101ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010198:	2300      	movs	r3, #0
 801019a:	75bb      	strb	r3, [r7, #22]
            break;
 801019c:	e018      	b.n	80101d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	4619      	mov	r1, r3
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f000 fa5e 	bl	801066a <USBD_CoreFindIF>
 80101ae:	4603      	mov	r3, r0
 80101b0:	75bb      	strb	r3, [r7, #22]
            break;
 80101b2:	e00d      	b.n	80101d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	4619      	mov	r1, r3
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f000 fa60 	bl	8010684 <USBD_CoreFindEP>
 80101c4:	4603      	mov	r3, r0
 80101c6:	75bb      	strb	r3, [r7, #22]
            break;
 80101c8:	e002      	b.n	80101d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80101ca:	2300      	movs	r3, #0
 80101cc:	75bb      	strb	r3, [r7, #22]
            break;
 80101ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80101d0:	7dbb      	ldrb	r3, [r7, #22]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d119      	bne.n	801020a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	2b03      	cmp	r3, #3
 80101e0:	d113      	bne.n	801020a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80101e2:	7dba      	ldrb	r2, [r7, #22]
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	32ae      	adds	r2, #174	; 0xae
 80101e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ec:	691b      	ldr	r3, [r3, #16]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d00b      	beq.n	801020a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80101f2:	7dba      	ldrb	r2, [r7, #22]
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80101fa:	7dba      	ldrb	r2, [r7, #22]
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	32ae      	adds	r2, #174	; 0xae
 8010200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010204:	691b      	ldr	r3, [r3, #16]
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f001 f94a 	bl	80114a4 <USBD_CtlSendStatus>
 8010210:	e032      	b.n	8010278 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010212:	7afb      	ldrb	r3, [r7, #11]
 8010214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010218:	b2db      	uxtb	r3, r3
 801021a:	4619      	mov	r1, r3
 801021c:	68f8      	ldr	r0, [r7, #12]
 801021e:	f000 fa31 	bl	8010684 <USBD_CoreFindEP>
 8010222:	4603      	mov	r3, r0
 8010224:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010226:	7dbb      	ldrb	r3, [r7, #22]
 8010228:	2bff      	cmp	r3, #255	; 0xff
 801022a:	d025      	beq.n	8010278 <USBD_LL_DataOutStage+0x15c>
 801022c:	7dbb      	ldrb	r3, [r7, #22]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d122      	bne.n	8010278 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010238:	b2db      	uxtb	r3, r3
 801023a:	2b03      	cmp	r3, #3
 801023c:	d117      	bne.n	801026e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801023e:	7dba      	ldrb	r2, [r7, #22]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	32ae      	adds	r2, #174	; 0xae
 8010244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010248:	699b      	ldr	r3, [r3, #24]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d00f      	beq.n	801026e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801024e:	7dba      	ldrb	r2, [r7, #22]
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010256:	7dba      	ldrb	r2, [r7, #22]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	32ae      	adds	r2, #174	; 0xae
 801025c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010260:	699b      	ldr	r3, [r3, #24]
 8010262:	7afa      	ldrb	r2, [r7, #11]
 8010264:	4611      	mov	r1, r2
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	4798      	blx	r3
 801026a:	4603      	mov	r3, r0
 801026c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801026e:	7dfb      	ldrb	r3, [r7, #23]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d001      	beq.n	8010278 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010274:	7dfb      	ldrb	r3, [r7, #23]
 8010276:	e000      	b.n	801027a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010278:	2300      	movs	r3, #0
}
 801027a:	4618      	mov	r0, r3
 801027c:	3718      	adds	r7, #24
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b086      	sub	sp, #24
 8010286:	af00      	add	r7, sp, #0
 8010288:	60f8      	str	r0, [r7, #12]
 801028a:	460b      	mov	r3, r1
 801028c:	607a      	str	r2, [r7, #4]
 801028e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010290:	7afb      	ldrb	r3, [r7, #11]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d16f      	bne.n	8010376 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	3314      	adds	r3, #20
 801029a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	d15a      	bne.n	801035c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	689a      	ldr	r2, [r3, #8]
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d914      	bls.n	80102dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	689a      	ldr	r2, [r3, #8]
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	1ad2      	subs	r2, r2, r3
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	461a      	mov	r2, r3
 80102c6:	6879      	ldr	r1, [r7, #4]
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f001 f8ac 	bl	8011426 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102ce:	2300      	movs	r3, #0
 80102d0:	2200      	movs	r2, #0
 80102d2:	2100      	movs	r1, #0
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f004 fee3 	bl	80150a0 <USBD_LL_PrepareReceive>
 80102da:	e03f      	b.n	801035c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	68da      	ldr	r2, [r3, #12]
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d11c      	bne.n	8010322 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	685a      	ldr	r2, [r3, #4]
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d316      	bcc.n	8010322 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	685a      	ldr	r2, [r3, #4]
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80102fe:	429a      	cmp	r2, r3
 8010300:	d20f      	bcs.n	8010322 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010302:	2200      	movs	r2, #0
 8010304:	2100      	movs	r1, #0
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f001 f88d 	bl	8011426 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2200      	movs	r2, #0
 8010310:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010314:	2300      	movs	r3, #0
 8010316:	2200      	movs	r2, #0
 8010318:	2100      	movs	r1, #0
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	f004 fec0 	bl	80150a0 <USBD_LL_PrepareReceive>
 8010320:	e01c      	b.n	801035c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010328:	b2db      	uxtb	r3, r3
 801032a:	2b03      	cmp	r3, #3
 801032c:	d10f      	bne.n	801034e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d009      	beq.n	801034e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2200      	movs	r2, #0
 801033e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010348:	68db      	ldr	r3, [r3, #12]
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801034e:	2180      	movs	r1, #128	; 0x80
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f004 fdfb 	bl	8014f4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	f001 f8b7 	bl	80114ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d03a      	beq.n	80103dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010366:	68f8      	ldr	r0, [r7, #12]
 8010368:	f7ff fe42 	bl	800fff0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2200      	movs	r2, #0
 8010370:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010374:	e032      	b.n	80103dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010376:	7afb      	ldrb	r3, [r7, #11]
 8010378:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801037c:	b2db      	uxtb	r3, r3
 801037e:	4619      	mov	r1, r3
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f000 f97f 	bl	8010684 <USBD_CoreFindEP>
 8010386:	4603      	mov	r3, r0
 8010388:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801038a:	7dfb      	ldrb	r3, [r7, #23]
 801038c:	2bff      	cmp	r3, #255	; 0xff
 801038e:	d025      	beq.n	80103dc <USBD_LL_DataInStage+0x15a>
 8010390:	7dfb      	ldrb	r3, [r7, #23]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d122      	bne.n	80103dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801039c:	b2db      	uxtb	r3, r3
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d11c      	bne.n	80103dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80103a2:	7dfa      	ldrb	r2, [r7, #23]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	32ae      	adds	r2, #174	; 0xae
 80103a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d014      	beq.n	80103dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80103b2:	7dfa      	ldrb	r2, [r7, #23]
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80103ba:	7dfa      	ldrb	r2, [r7, #23]
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	32ae      	adds	r2, #174	; 0xae
 80103c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103c4:	695b      	ldr	r3, [r3, #20]
 80103c6:	7afa      	ldrb	r2, [r7, #11]
 80103c8:	4611      	mov	r1, r2
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	4798      	blx	r3
 80103ce:	4603      	mov	r3, r0
 80103d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80103d2:	7dbb      	ldrb	r3, [r7, #22]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d001      	beq.n	80103dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80103d8:	7dbb      	ldrb	r3, [r7, #22]
 80103da:	e000      	b.n	80103de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80103dc:	2300      	movs	r3, #0
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3718      	adds	r7, #24
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}

080103e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b084      	sub	sp, #16
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80103ee:	2300      	movs	r3, #0
 80103f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2201      	movs	r2, #1
 80103f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2200      	movs	r2, #0
 80103fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2200      	movs	r2, #0
 8010406:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2200      	movs	r2, #0
 8010414:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801041e:	2b00      	cmp	r3, #0
 8010420:	d014      	beq.n	801044c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d00e      	beq.n	801044c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	6852      	ldr	r2, [r2, #4]
 801043a:	b2d2      	uxtb	r2, r2
 801043c:	4611      	mov	r1, r2
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	4798      	blx	r3
 8010442:	4603      	mov	r3, r0
 8010444:	2b00      	cmp	r3, #0
 8010446:	d001      	beq.n	801044c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010448:	2303      	movs	r3, #3
 801044a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801044c:	2340      	movs	r3, #64	; 0x40
 801044e:	2200      	movs	r2, #0
 8010450:	2100      	movs	r1, #0
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f004 fd35 	bl	8014ec2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2201      	movs	r2, #1
 801045c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2240      	movs	r2, #64	; 0x40
 8010464:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010468:	2340      	movs	r3, #64	; 0x40
 801046a:	2200      	movs	r2, #0
 801046c:	2180      	movs	r1, #128	; 0x80
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f004 fd27 	bl	8014ec2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2201      	movs	r2, #1
 8010478:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2240      	movs	r2, #64	; 0x40
 801047e:	621a      	str	r2, [r3, #32]

  return ret;
 8010480:	7bfb      	ldrb	r3, [r7, #15]
}
 8010482:	4618      	mov	r0, r3
 8010484:	3710      	adds	r7, #16
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801048a:	b480      	push	{r7}
 801048c:	b083      	sub	sp, #12
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
 8010492:	460b      	mov	r3, r1
 8010494:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	78fa      	ldrb	r2, [r7, #3]
 801049a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801049c:	2300      	movs	r3, #0
}
 801049e:	4618      	mov	r0, r3
 80104a0:	370c      	adds	r7, #12
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr

080104aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80104aa:	b480      	push	{r7}
 80104ac:	b083      	sub	sp, #12
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2204      	movs	r2, #4
 80104c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80104c8:	2300      	movs	r3, #0
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	370c      	adds	r7, #12
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr

080104d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80104d6:	b480      	push	{r7}
 80104d8:	b083      	sub	sp, #12
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104e4:	b2db      	uxtb	r3, r3
 80104e6:	2b04      	cmp	r3, #4
 80104e8:	d106      	bne.n	80104f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80104f8:	2300      	movs	r3, #0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	370c      	adds	r7, #12
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr

08010506 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010506:	b580      	push	{r7, lr}
 8010508:	b082      	sub	sp, #8
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010514:	b2db      	uxtb	r3, r3
 8010516:	2b03      	cmp	r3, #3
 8010518:	d110      	bne.n	801053c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00b      	beq.n	801053c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801052a:	69db      	ldr	r3, [r3, #28]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d005      	beq.n	801053c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010536:	69db      	ldr	r3, [r3, #28]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801053c:	2300      	movs	r3, #0
}
 801053e:	4618      	mov	r0, r3
 8010540:	3708      	adds	r7, #8
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010546:	b580      	push	{r7, lr}
 8010548:	b082      	sub	sp, #8
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
 801054e:	460b      	mov	r3, r1
 8010550:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	32ae      	adds	r2, #174	; 0xae
 801055c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d101      	bne.n	8010568 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010564:	2303      	movs	r3, #3
 8010566:	e01c      	b.n	80105a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801056e:	b2db      	uxtb	r3, r3
 8010570:	2b03      	cmp	r3, #3
 8010572:	d115      	bne.n	80105a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	32ae      	adds	r2, #174	; 0xae
 801057e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010582:	6a1b      	ldr	r3, [r3, #32]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00b      	beq.n	80105a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	32ae      	adds	r2, #174	; 0xae
 8010592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010596:	6a1b      	ldr	r3, [r3, #32]
 8010598:	78fa      	ldrb	r2, [r7, #3]
 801059a:	4611      	mov	r1, r2
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80105a0:	2300      	movs	r3, #0
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3708      	adds	r7, #8
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b082      	sub	sp, #8
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
 80105b2:	460b      	mov	r3, r1
 80105b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	32ae      	adds	r2, #174	; 0xae
 80105c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d101      	bne.n	80105cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80105c8:	2303      	movs	r3, #3
 80105ca:	e01c      	b.n	8010606 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	2b03      	cmp	r3, #3
 80105d6:	d115      	bne.n	8010604 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	32ae      	adds	r2, #174	; 0xae
 80105e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d00b      	beq.n	8010604 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	32ae      	adds	r2, #174	; 0xae
 80105f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105fc:	78fa      	ldrb	r2, [r7, #3]
 80105fe:	4611      	mov	r1, r2
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010604:	2300      	movs	r3, #0
}
 8010606:	4618      	mov	r0, r3
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801060e:	b480      	push	{r7}
 8010610:	b083      	sub	sp, #12
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010616:	2300      	movs	r3, #0
}
 8010618:	4618      	mov	r0, r3
 801061a:	370c      	adds	r7, #12
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr

08010624 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801062c:	2300      	movs	r3, #0
 801062e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2201      	movs	r2, #1
 8010634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801063e:	2b00      	cmp	r3, #0
 8010640:	d00e      	beq.n	8010660 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	6852      	ldr	r2, [r2, #4]
 801064e:	b2d2      	uxtb	r2, r2
 8010650:	4611      	mov	r1, r2
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	4798      	blx	r3
 8010656:	4603      	mov	r3, r0
 8010658:	2b00      	cmp	r3, #0
 801065a:	d001      	beq.n	8010660 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801065c:	2303      	movs	r3, #3
 801065e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010660:	7bfb      	ldrb	r3, [r7, #15]
}
 8010662:	4618      	mov	r0, r3
 8010664:	3710      	adds	r7, #16
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}

0801066a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801066a:	b480      	push	{r7}
 801066c:	b083      	sub	sp, #12
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
 8010672:	460b      	mov	r3, r1
 8010674:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010676:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010678:	4618      	mov	r0, r3
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010684:	b480      	push	{r7}
 8010686:	b083      	sub	sp, #12
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	460b      	mov	r3, r1
 801068e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010690:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010692:	4618      	mov	r0, r3
 8010694:	370c      	adds	r7, #12
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr

0801069e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b086      	sub	sp, #24
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	460b      	mov	r3, r1
 80106a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80106b2:	2300      	movs	r3, #0
 80106b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	885b      	ldrh	r3, [r3, #2]
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d920      	bls.n	8010708 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80106ce:	e013      	b.n	80106f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80106d0:	f107 030a 	add.w	r3, r7, #10
 80106d4:	4619      	mov	r1, r3
 80106d6:	6978      	ldr	r0, [r7, #20]
 80106d8:	f000 f81b 	bl	8010712 <USBD_GetNextDesc>
 80106dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	785b      	ldrb	r3, [r3, #1]
 80106e2:	2b05      	cmp	r3, #5
 80106e4:	d108      	bne.n	80106f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	789b      	ldrb	r3, [r3, #2]
 80106ee:	78fa      	ldrb	r2, [r7, #3]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d008      	beq.n	8010706 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80106f4:	2300      	movs	r3, #0
 80106f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	885b      	ldrh	r3, [r3, #2]
 80106fc:	b29a      	uxth	r2, r3
 80106fe:	897b      	ldrh	r3, [r7, #10]
 8010700:	429a      	cmp	r2, r3
 8010702:	d8e5      	bhi.n	80106d0 <USBD_GetEpDesc+0x32>
 8010704:	e000      	b.n	8010708 <USBD_GetEpDesc+0x6a>
          break;
 8010706:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010708:	693b      	ldr	r3, [r7, #16]
}
 801070a:	4618      	mov	r0, r3
 801070c:	3718      	adds	r7, #24
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}

08010712 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010712:	b480      	push	{r7}
 8010714:	b085      	sub	sp, #20
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
 801071a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	881a      	ldrh	r2, [r3, #0]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	b29b      	uxth	r3, r3
 801072a:	4413      	add	r3, r2
 801072c:	b29a      	uxth	r2, r3
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	4413      	add	r3, r2
 801073c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801073e:	68fb      	ldr	r3, [r7, #12]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801074c:	b480      	push	{r7}
 801074e:	b087      	sub	sp, #28
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	3301      	adds	r3, #1
 8010762:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801076a:	8a3b      	ldrh	r3, [r7, #16]
 801076c:	021b      	lsls	r3, r3, #8
 801076e:	b21a      	sxth	r2, r3
 8010770:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010774:	4313      	orrs	r3, r2
 8010776:	b21b      	sxth	r3, r3
 8010778:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801077a:	89fb      	ldrh	r3, [r7, #14]
}
 801077c:	4618      	mov	r0, r3
 801077e:	371c      	adds	r7, #28
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr

08010788 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010792:	2300      	movs	r3, #0
 8010794:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801079e:	2b40      	cmp	r3, #64	; 0x40
 80107a0:	d005      	beq.n	80107ae <USBD_StdDevReq+0x26>
 80107a2:	2b40      	cmp	r3, #64	; 0x40
 80107a4:	d857      	bhi.n	8010856 <USBD_StdDevReq+0xce>
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d00f      	beq.n	80107ca <USBD_StdDevReq+0x42>
 80107aa:	2b20      	cmp	r3, #32
 80107ac:	d153      	bne.n	8010856 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	32ae      	adds	r2, #174	; 0xae
 80107b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	6839      	ldr	r1, [r7, #0]
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	4798      	blx	r3
 80107c4:	4603      	mov	r3, r0
 80107c6:	73fb      	strb	r3, [r7, #15]
      break;
 80107c8:	e04a      	b.n	8010860 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	785b      	ldrb	r3, [r3, #1]
 80107ce:	2b09      	cmp	r3, #9
 80107d0:	d83b      	bhi.n	801084a <USBD_StdDevReq+0xc2>
 80107d2:	a201      	add	r2, pc, #4	; (adr r2, 80107d8 <USBD_StdDevReq+0x50>)
 80107d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d8:	0801082d 	.word	0x0801082d
 80107dc:	08010841 	.word	0x08010841
 80107e0:	0801084b 	.word	0x0801084b
 80107e4:	08010837 	.word	0x08010837
 80107e8:	0801084b 	.word	0x0801084b
 80107ec:	0801080b 	.word	0x0801080b
 80107f0:	08010801 	.word	0x08010801
 80107f4:	0801084b 	.word	0x0801084b
 80107f8:	08010823 	.word	0x08010823
 80107fc:	08010815 	.word	0x08010815
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010800:	6839      	ldr	r1, [r7, #0]
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 fa3c 	bl	8010c80 <USBD_GetDescriptor>
          break;
 8010808:	e024      	b.n	8010854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801080a:	6839      	ldr	r1, [r7, #0]
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f000 fba1 	bl	8010f54 <USBD_SetAddress>
          break;
 8010812:	e01f      	b.n	8010854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010814:	6839      	ldr	r1, [r7, #0]
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 fbe0 	bl	8010fdc <USBD_SetConfig>
 801081c:	4603      	mov	r3, r0
 801081e:	73fb      	strb	r3, [r7, #15]
          break;
 8010820:	e018      	b.n	8010854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010822:	6839      	ldr	r1, [r7, #0]
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f000 fc83 	bl	8011130 <USBD_GetConfig>
          break;
 801082a:	e013      	b.n	8010854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801082c:	6839      	ldr	r1, [r7, #0]
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 fcb4 	bl	801119c <USBD_GetStatus>
          break;
 8010834:	e00e      	b.n	8010854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010836:	6839      	ldr	r1, [r7, #0]
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f000 fce3 	bl	8011204 <USBD_SetFeature>
          break;
 801083e:	e009      	b.n	8010854 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010840:	6839      	ldr	r1, [r7, #0]
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f000 fd07 	bl	8011256 <USBD_ClrFeature>
          break;
 8010848:	e004      	b.n	8010854 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801084a:	6839      	ldr	r1, [r7, #0]
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 fd5e 	bl	801130e <USBD_CtlError>
          break;
 8010852:	bf00      	nop
      }
      break;
 8010854:	e004      	b.n	8010860 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 fd58 	bl	801130e <USBD_CtlError>
      break;
 801085e:	bf00      	nop
  }

  return ret;
 8010860:	7bfb      	ldrb	r3, [r7, #15]
}
 8010862:	4618      	mov	r0, r3
 8010864:	3710      	adds	r7, #16
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop

0801086c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b084      	sub	sp, #16
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010876:	2300      	movs	r3, #0
 8010878:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	781b      	ldrb	r3, [r3, #0]
 801087e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010882:	2b40      	cmp	r3, #64	; 0x40
 8010884:	d005      	beq.n	8010892 <USBD_StdItfReq+0x26>
 8010886:	2b40      	cmp	r3, #64	; 0x40
 8010888:	d852      	bhi.n	8010930 <USBD_StdItfReq+0xc4>
 801088a:	2b00      	cmp	r3, #0
 801088c:	d001      	beq.n	8010892 <USBD_StdItfReq+0x26>
 801088e:	2b20      	cmp	r3, #32
 8010890:	d14e      	bne.n	8010930 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010898:	b2db      	uxtb	r3, r3
 801089a:	3b01      	subs	r3, #1
 801089c:	2b02      	cmp	r3, #2
 801089e:	d840      	bhi.n	8010922 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	889b      	ldrh	r3, [r3, #4]
 80108a4:	b2db      	uxtb	r3, r3
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d836      	bhi.n	8010918 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	889b      	ldrh	r3, [r3, #4]
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	4619      	mov	r1, r3
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f7ff fed9 	bl	801066a <USBD_CoreFindIF>
 80108b8:	4603      	mov	r3, r0
 80108ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80108bc:	7bbb      	ldrb	r3, [r7, #14]
 80108be:	2bff      	cmp	r3, #255	; 0xff
 80108c0:	d01d      	beq.n	80108fe <USBD_StdItfReq+0x92>
 80108c2:	7bbb      	ldrb	r3, [r7, #14]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d11a      	bne.n	80108fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80108c8:	7bba      	ldrb	r2, [r7, #14]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	32ae      	adds	r2, #174	; 0xae
 80108ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d00f      	beq.n	80108f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80108d8:	7bba      	ldrb	r2, [r7, #14]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80108e0:	7bba      	ldrb	r2, [r7, #14]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	32ae      	adds	r2, #174	; 0xae
 80108e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	6839      	ldr	r1, [r7, #0]
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	4798      	blx	r3
 80108f2:	4603      	mov	r3, r0
 80108f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80108f6:	e004      	b.n	8010902 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80108f8:	2303      	movs	r3, #3
 80108fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80108fc:	e001      	b.n	8010902 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80108fe:	2303      	movs	r3, #3
 8010900:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	88db      	ldrh	r3, [r3, #6]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d110      	bne.n	801092c <USBD_StdItfReq+0xc0>
 801090a:	7bfb      	ldrb	r3, [r7, #15]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d10d      	bne.n	801092c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f000 fdc7 	bl	80114a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010916:	e009      	b.n	801092c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010918:	6839      	ldr	r1, [r7, #0]
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 fcf7 	bl	801130e <USBD_CtlError>
          break;
 8010920:	e004      	b.n	801092c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010922:	6839      	ldr	r1, [r7, #0]
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f000 fcf2 	bl	801130e <USBD_CtlError>
          break;
 801092a:	e000      	b.n	801092e <USBD_StdItfReq+0xc2>
          break;
 801092c:	bf00      	nop
      }
      break;
 801092e:	e004      	b.n	801093a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010930:	6839      	ldr	r1, [r7, #0]
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 fceb 	bl	801130e <USBD_CtlError>
      break;
 8010938:	bf00      	nop
  }

  return ret;
 801093a:	7bfb      	ldrb	r3, [r7, #15]
}
 801093c:	4618      	mov	r0, r3
 801093e:	3710      	adds	r7, #16
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801094e:	2300      	movs	r3, #0
 8010950:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	889b      	ldrh	r3, [r3, #4]
 8010956:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010960:	2b40      	cmp	r3, #64	; 0x40
 8010962:	d007      	beq.n	8010974 <USBD_StdEPReq+0x30>
 8010964:	2b40      	cmp	r3, #64	; 0x40
 8010966:	f200 817f 	bhi.w	8010c68 <USBD_StdEPReq+0x324>
 801096a:	2b00      	cmp	r3, #0
 801096c:	d02a      	beq.n	80109c4 <USBD_StdEPReq+0x80>
 801096e:	2b20      	cmp	r3, #32
 8010970:	f040 817a 	bne.w	8010c68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010974:	7bbb      	ldrb	r3, [r7, #14]
 8010976:	4619      	mov	r1, r3
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f7ff fe83 	bl	8010684 <USBD_CoreFindEP>
 801097e:	4603      	mov	r3, r0
 8010980:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010982:	7b7b      	ldrb	r3, [r7, #13]
 8010984:	2bff      	cmp	r3, #255	; 0xff
 8010986:	f000 8174 	beq.w	8010c72 <USBD_StdEPReq+0x32e>
 801098a:	7b7b      	ldrb	r3, [r7, #13]
 801098c:	2b00      	cmp	r3, #0
 801098e:	f040 8170 	bne.w	8010c72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010992:	7b7a      	ldrb	r2, [r7, #13]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801099a:	7b7a      	ldrb	r2, [r7, #13]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	32ae      	adds	r2, #174	; 0xae
 80109a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109a4:	689b      	ldr	r3, [r3, #8]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	f000 8163 	beq.w	8010c72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80109ac:	7b7a      	ldrb	r2, [r7, #13]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	32ae      	adds	r2, #174	; 0xae
 80109b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109b6:	689b      	ldr	r3, [r3, #8]
 80109b8:	6839      	ldr	r1, [r7, #0]
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	4798      	blx	r3
 80109be:	4603      	mov	r3, r0
 80109c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80109c2:	e156      	b.n	8010c72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	785b      	ldrb	r3, [r3, #1]
 80109c8:	2b03      	cmp	r3, #3
 80109ca:	d008      	beq.n	80109de <USBD_StdEPReq+0x9a>
 80109cc:	2b03      	cmp	r3, #3
 80109ce:	f300 8145 	bgt.w	8010c5c <USBD_StdEPReq+0x318>
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f000 809b 	beq.w	8010b0e <USBD_StdEPReq+0x1ca>
 80109d8:	2b01      	cmp	r3, #1
 80109da:	d03c      	beq.n	8010a56 <USBD_StdEPReq+0x112>
 80109dc:	e13e      	b.n	8010c5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	2b02      	cmp	r3, #2
 80109e8:	d002      	beq.n	80109f0 <USBD_StdEPReq+0xac>
 80109ea:	2b03      	cmp	r3, #3
 80109ec:	d016      	beq.n	8010a1c <USBD_StdEPReq+0xd8>
 80109ee:	e02c      	b.n	8010a4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80109f0:	7bbb      	ldrb	r3, [r7, #14]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00d      	beq.n	8010a12 <USBD_StdEPReq+0xce>
 80109f6:	7bbb      	ldrb	r3, [r7, #14]
 80109f8:	2b80      	cmp	r3, #128	; 0x80
 80109fa:	d00a      	beq.n	8010a12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80109fc:	7bbb      	ldrb	r3, [r7, #14]
 80109fe:	4619      	mov	r1, r3
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f004 faa3 	bl	8014f4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a06:	2180      	movs	r1, #128	; 0x80
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f004 fa9f 	bl	8014f4c <USBD_LL_StallEP>
 8010a0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a10:	e020      	b.n	8010a54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010a12:	6839      	ldr	r1, [r7, #0]
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 fc7a 	bl	801130e <USBD_CtlError>
              break;
 8010a1a:	e01b      	b.n	8010a54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	885b      	ldrh	r3, [r3, #2]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d10e      	bne.n	8010a42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010a24:	7bbb      	ldrb	r3, [r7, #14]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00b      	beq.n	8010a42 <USBD_StdEPReq+0xfe>
 8010a2a:	7bbb      	ldrb	r3, [r7, #14]
 8010a2c:	2b80      	cmp	r3, #128	; 0x80
 8010a2e:	d008      	beq.n	8010a42 <USBD_StdEPReq+0xfe>
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	88db      	ldrh	r3, [r3, #6]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d104      	bne.n	8010a42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a38:	7bbb      	ldrb	r3, [r7, #14]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f004 fa85 	bl	8014f4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 fd2e 	bl	80114a4 <USBD_CtlSendStatus>

              break;
 8010a48:	e004      	b.n	8010a54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010a4a:	6839      	ldr	r1, [r7, #0]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f000 fc5e 	bl	801130e <USBD_CtlError>
              break;
 8010a52:	bf00      	nop
          }
          break;
 8010a54:	e107      	b.n	8010c66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	d002      	beq.n	8010a68 <USBD_StdEPReq+0x124>
 8010a62:	2b03      	cmp	r3, #3
 8010a64:	d016      	beq.n	8010a94 <USBD_StdEPReq+0x150>
 8010a66:	e04b      	b.n	8010b00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a68:	7bbb      	ldrb	r3, [r7, #14]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d00d      	beq.n	8010a8a <USBD_StdEPReq+0x146>
 8010a6e:	7bbb      	ldrb	r3, [r7, #14]
 8010a70:	2b80      	cmp	r3, #128	; 0x80
 8010a72:	d00a      	beq.n	8010a8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a74:	7bbb      	ldrb	r3, [r7, #14]
 8010a76:	4619      	mov	r1, r3
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f004 fa67 	bl	8014f4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a7e:	2180      	movs	r1, #128	; 0x80
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f004 fa63 	bl	8014f4c <USBD_LL_StallEP>
 8010a86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a88:	e040      	b.n	8010b0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010a8a:	6839      	ldr	r1, [r7, #0]
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f000 fc3e 	bl	801130e <USBD_CtlError>
              break;
 8010a92:	e03b      	b.n	8010b0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	885b      	ldrh	r3, [r3, #2]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d136      	bne.n	8010b0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010a9c:	7bbb      	ldrb	r3, [r7, #14]
 8010a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d004      	beq.n	8010ab0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010aa6:	7bbb      	ldrb	r3, [r7, #14]
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f004 fa6d 	bl	8014f8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 fcf7 	bl	80114a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010ab6:	7bbb      	ldrb	r3, [r7, #14]
 8010ab8:	4619      	mov	r1, r3
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f7ff fde2 	bl	8010684 <USBD_CoreFindEP>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ac4:	7b7b      	ldrb	r3, [r7, #13]
 8010ac6:	2bff      	cmp	r3, #255	; 0xff
 8010ac8:	d01f      	beq.n	8010b0a <USBD_StdEPReq+0x1c6>
 8010aca:	7b7b      	ldrb	r3, [r7, #13]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d11c      	bne.n	8010b0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010ad0:	7b7a      	ldrb	r2, [r7, #13]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010ad8:	7b7a      	ldrb	r2, [r7, #13]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	32ae      	adds	r2, #174	; 0xae
 8010ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ae2:	689b      	ldr	r3, [r3, #8]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d010      	beq.n	8010b0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010ae8:	7b7a      	ldrb	r2, [r7, #13]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	32ae      	adds	r2, #174	; 0xae
 8010aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	6839      	ldr	r1, [r7, #0]
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	4798      	blx	r3
 8010afa:	4603      	mov	r3, r0
 8010afc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010afe:	e004      	b.n	8010b0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010b00:	6839      	ldr	r1, [r7, #0]
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f000 fc03 	bl	801130e <USBD_CtlError>
              break;
 8010b08:	e000      	b.n	8010b0c <USBD_StdEPReq+0x1c8>
              break;
 8010b0a:	bf00      	nop
          }
          break;
 8010b0c:	e0ab      	b.n	8010c66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b14:	b2db      	uxtb	r3, r3
 8010b16:	2b02      	cmp	r3, #2
 8010b18:	d002      	beq.n	8010b20 <USBD_StdEPReq+0x1dc>
 8010b1a:	2b03      	cmp	r3, #3
 8010b1c:	d032      	beq.n	8010b84 <USBD_StdEPReq+0x240>
 8010b1e:	e097      	b.n	8010c50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b20:	7bbb      	ldrb	r3, [r7, #14]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d007      	beq.n	8010b36 <USBD_StdEPReq+0x1f2>
 8010b26:	7bbb      	ldrb	r3, [r7, #14]
 8010b28:	2b80      	cmp	r3, #128	; 0x80
 8010b2a:	d004      	beq.n	8010b36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010b2c:	6839      	ldr	r1, [r7, #0]
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 fbed 	bl	801130e <USBD_CtlError>
                break;
 8010b34:	e091      	b.n	8010c5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	da0b      	bge.n	8010b56 <USBD_StdEPReq+0x212>
 8010b3e:	7bbb      	ldrb	r3, [r7, #14]
 8010b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b44:	4613      	mov	r3, r2
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	4413      	add	r3, r2
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	3310      	adds	r3, #16
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	4413      	add	r3, r2
 8010b52:	3304      	adds	r3, #4
 8010b54:	e00b      	b.n	8010b6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010b56:	7bbb      	ldrb	r3, [r7, #14]
 8010b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b5c:	4613      	mov	r3, r2
 8010b5e:	009b      	lsls	r3, r3, #2
 8010b60:	4413      	add	r3, r2
 8010b62:	009b      	lsls	r3, r3, #2
 8010b64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	4413      	add	r3, r2
 8010b6c:	3304      	adds	r3, #4
 8010b6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	2200      	movs	r2, #0
 8010b74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	2202      	movs	r2, #2
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f000 fc37 	bl	80113f0 <USBD_CtlSendData>
              break;
 8010b82:	e06a      	b.n	8010c5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	da11      	bge.n	8010bb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010b8c:	7bbb      	ldrb	r3, [r7, #14]
 8010b8e:	f003 020f 	and.w	r2, r3, #15
 8010b92:	6879      	ldr	r1, [r7, #4]
 8010b94:	4613      	mov	r3, r2
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	4413      	add	r3, r2
 8010b9a:	009b      	lsls	r3, r3, #2
 8010b9c:	440b      	add	r3, r1
 8010b9e:	3324      	adds	r3, #36	; 0x24
 8010ba0:	881b      	ldrh	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d117      	bne.n	8010bd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010ba6:	6839      	ldr	r1, [r7, #0]
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f000 fbb0 	bl	801130e <USBD_CtlError>
                  break;
 8010bae:	e054      	b.n	8010c5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010bb0:	7bbb      	ldrb	r3, [r7, #14]
 8010bb2:	f003 020f 	and.w	r2, r3, #15
 8010bb6:	6879      	ldr	r1, [r7, #4]
 8010bb8:	4613      	mov	r3, r2
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	4413      	add	r3, r2
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	440b      	add	r3, r1
 8010bc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010bc6:	881b      	ldrh	r3, [r3, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d104      	bne.n	8010bd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010bcc:	6839      	ldr	r1, [r7, #0]
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 fb9d 	bl	801130e <USBD_CtlError>
                  break;
 8010bd4:	e041      	b.n	8010c5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	da0b      	bge.n	8010bf6 <USBD_StdEPReq+0x2b2>
 8010bde:	7bbb      	ldrb	r3, [r7, #14]
 8010be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010be4:	4613      	mov	r3, r2
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	4413      	add	r3, r2
 8010bea:	009b      	lsls	r3, r3, #2
 8010bec:	3310      	adds	r3, #16
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	3304      	adds	r3, #4
 8010bf4:	e00b      	b.n	8010c0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010bf6:	7bbb      	ldrb	r3, [r7, #14]
 8010bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	4413      	add	r3, r2
 8010c02:	009b      	lsls	r3, r3, #2
 8010c04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	4413      	add	r3, r2
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010c10:	7bbb      	ldrb	r3, [r7, #14]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d002      	beq.n	8010c1c <USBD_StdEPReq+0x2d8>
 8010c16:	7bbb      	ldrb	r3, [r7, #14]
 8010c18:	2b80      	cmp	r3, #128	; 0x80
 8010c1a:	d103      	bne.n	8010c24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	601a      	str	r2, [r3, #0]
 8010c22:	e00e      	b.n	8010c42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010c24:	7bbb      	ldrb	r3, [r7, #14]
 8010c26:	4619      	mov	r1, r3
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f004 f9cd 	bl	8014fc8 <USBD_LL_IsStallEP>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d003      	beq.n	8010c3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	2201      	movs	r2, #1
 8010c38:	601a      	str	r2, [r3, #0]
 8010c3a:	e002      	b.n	8010c42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	2202      	movs	r2, #2
 8010c46:	4619      	mov	r1, r3
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 fbd1 	bl	80113f0 <USBD_CtlSendData>
              break;
 8010c4e:	e004      	b.n	8010c5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010c50:	6839      	ldr	r1, [r7, #0]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f000 fb5b 	bl	801130e <USBD_CtlError>
              break;
 8010c58:	bf00      	nop
          }
          break;
 8010c5a:	e004      	b.n	8010c66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010c5c:	6839      	ldr	r1, [r7, #0]
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 fb55 	bl	801130e <USBD_CtlError>
          break;
 8010c64:	bf00      	nop
      }
      break;
 8010c66:	e005      	b.n	8010c74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010c68:	6839      	ldr	r1, [r7, #0]
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 fb4f 	bl	801130e <USBD_CtlError>
      break;
 8010c70:	e000      	b.n	8010c74 <USBD_StdEPReq+0x330>
      break;
 8010c72:	bf00      	nop
  }

  return ret;
 8010c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3710      	adds	r7, #16
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
	...

08010c80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b084      	sub	sp, #16
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010c92:	2300      	movs	r3, #0
 8010c94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	885b      	ldrh	r3, [r3, #2]
 8010c9a:	0a1b      	lsrs	r3, r3, #8
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	3b01      	subs	r3, #1
 8010ca0:	2b06      	cmp	r3, #6
 8010ca2:	f200 8128 	bhi.w	8010ef6 <USBD_GetDescriptor+0x276>
 8010ca6:	a201      	add	r2, pc, #4	; (adr r2, 8010cac <USBD_GetDescriptor+0x2c>)
 8010ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cac:	08010cc9 	.word	0x08010cc9
 8010cb0:	08010ce1 	.word	0x08010ce1
 8010cb4:	08010d21 	.word	0x08010d21
 8010cb8:	08010ef7 	.word	0x08010ef7
 8010cbc:	08010ef7 	.word	0x08010ef7
 8010cc0:	08010e97 	.word	0x08010e97
 8010cc4:	08010ec3 	.word	0x08010ec3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	7c12      	ldrb	r2, [r2, #16]
 8010cd4:	f107 0108 	add.w	r1, r7, #8
 8010cd8:	4610      	mov	r0, r2
 8010cda:	4798      	blx	r3
 8010cdc:	60f8      	str	r0, [r7, #12]
      break;
 8010cde:	e112      	b.n	8010f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	7c1b      	ldrb	r3, [r3, #16]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d10d      	bne.n	8010d04 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cf0:	f107 0208 	add.w	r2, r7, #8
 8010cf4:	4610      	mov	r0, r2
 8010cf6:	4798      	blx	r3
 8010cf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	3301      	adds	r3, #1
 8010cfe:	2202      	movs	r2, #2
 8010d00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010d02:	e100      	b.n	8010f06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d0c:	f107 0208 	add.w	r2, r7, #8
 8010d10:	4610      	mov	r0, r2
 8010d12:	4798      	blx	r3
 8010d14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	2202      	movs	r2, #2
 8010d1c:	701a      	strb	r2, [r3, #0]
      break;
 8010d1e:	e0f2      	b.n	8010f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	885b      	ldrh	r3, [r3, #2]
 8010d24:	b2db      	uxtb	r3, r3
 8010d26:	2b05      	cmp	r3, #5
 8010d28:	f200 80ac 	bhi.w	8010e84 <USBD_GetDescriptor+0x204>
 8010d2c:	a201      	add	r2, pc, #4	; (adr r2, 8010d34 <USBD_GetDescriptor+0xb4>)
 8010d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d32:	bf00      	nop
 8010d34:	08010d4d 	.word	0x08010d4d
 8010d38:	08010d81 	.word	0x08010d81
 8010d3c:	08010db5 	.word	0x08010db5
 8010d40:	08010de9 	.word	0x08010de9
 8010d44:	08010e1d 	.word	0x08010e1d
 8010d48:	08010e51 	.word	0x08010e51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d00b      	beq.n	8010d70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	687a      	ldr	r2, [r7, #4]
 8010d62:	7c12      	ldrb	r2, [r2, #16]
 8010d64:	f107 0108 	add.w	r1, r7, #8
 8010d68:	4610      	mov	r0, r2
 8010d6a:	4798      	blx	r3
 8010d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010d6e:	e091      	b.n	8010e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010d70:	6839      	ldr	r1, [r7, #0]
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f000 facb 	bl	801130e <USBD_CtlError>
            err++;
 8010d78:	7afb      	ldrb	r3, [r7, #11]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8010d7e:	e089      	b.n	8010e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d86:	689b      	ldr	r3, [r3, #8]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d00b      	beq.n	8010da4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d92:	689b      	ldr	r3, [r3, #8]
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	7c12      	ldrb	r2, [r2, #16]
 8010d98:	f107 0108 	add.w	r1, r7, #8
 8010d9c:	4610      	mov	r0, r2
 8010d9e:	4798      	blx	r3
 8010da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010da2:	e077      	b.n	8010e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010da4:	6839      	ldr	r1, [r7, #0]
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f000 fab1 	bl	801130e <USBD_CtlError>
            err++;
 8010dac:	7afb      	ldrb	r3, [r7, #11]
 8010dae:	3301      	adds	r3, #1
 8010db0:	72fb      	strb	r3, [r7, #11]
          break;
 8010db2:	e06f      	b.n	8010e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d00b      	beq.n	8010dd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	7c12      	ldrb	r2, [r2, #16]
 8010dcc:	f107 0108 	add.w	r1, r7, #8
 8010dd0:	4610      	mov	r0, r2
 8010dd2:	4798      	blx	r3
 8010dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010dd6:	e05d      	b.n	8010e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010dd8:	6839      	ldr	r1, [r7, #0]
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f000 fa97 	bl	801130e <USBD_CtlError>
            err++;
 8010de0:	7afb      	ldrb	r3, [r7, #11]
 8010de2:	3301      	adds	r3, #1
 8010de4:	72fb      	strb	r3, [r7, #11]
          break;
 8010de6:	e055      	b.n	8010e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dee:	691b      	ldr	r3, [r3, #16]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00b      	beq.n	8010e0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dfa:	691b      	ldr	r3, [r3, #16]
 8010dfc:	687a      	ldr	r2, [r7, #4]
 8010dfe:	7c12      	ldrb	r2, [r2, #16]
 8010e00:	f107 0108 	add.w	r1, r7, #8
 8010e04:	4610      	mov	r0, r2
 8010e06:	4798      	blx	r3
 8010e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e0a:	e043      	b.n	8010e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010e0c:	6839      	ldr	r1, [r7, #0]
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 fa7d 	bl	801130e <USBD_CtlError>
            err++;
 8010e14:	7afb      	ldrb	r3, [r7, #11]
 8010e16:	3301      	adds	r3, #1
 8010e18:	72fb      	strb	r3, [r7, #11]
          break;
 8010e1a:	e03b      	b.n	8010e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e22:	695b      	ldr	r3, [r3, #20]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d00b      	beq.n	8010e40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e2e:	695b      	ldr	r3, [r3, #20]
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	7c12      	ldrb	r2, [r2, #16]
 8010e34:	f107 0108 	add.w	r1, r7, #8
 8010e38:	4610      	mov	r0, r2
 8010e3a:	4798      	blx	r3
 8010e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e3e:	e029      	b.n	8010e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010e40:	6839      	ldr	r1, [r7, #0]
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f000 fa63 	bl	801130e <USBD_CtlError>
            err++;
 8010e48:	7afb      	ldrb	r3, [r7, #11]
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8010e4e:	e021      	b.n	8010e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e56:	699b      	ldr	r3, [r3, #24]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d00b      	beq.n	8010e74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e62:	699b      	ldr	r3, [r3, #24]
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	7c12      	ldrb	r2, [r2, #16]
 8010e68:	f107 0108 	add.w	r1, r7, #8
 8010e6c:	4610      	mov	r0, r2
 8010e6e:	4798      	blx	r3
 8010e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e72:	e00f      	b.n	8010e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010e74:	6839      	ldr	r1, [r7, #0]
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f000 fa49 	bl	801130e <USBD_CtlError>
            err++;
 8010e7c:	7afb      	ldrb	r3, [r7, #11]
 8010e7e:	3301      	adds	r3, #1
 8010e80:	72fb      	strb	r3, [r7, #11]
          break;
 8010e82:	e007      	b.n	8010e94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010e84:	6839      	ldr	r1, [r7, #0]
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 fa41 	bl	801130e <USBD_CtlError>
          err++;
 8010e8c:	7afb      	ldrb	r3, [r7, #11]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010e92:	bf00      	nop
      }
      break;
 8010e94:	e037      	b.n	8010f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	7c1b      	ldrb	r3, [r3, #16]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d109      	bne.n	8010eb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ea6:	f107 0208 	add.w	r2, r7, #8
 8010eaa:	4610      	mov	r0, r2
 8010eac:	4798      	blx	r3
 8010eae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010eb0:	e029      	b.n	8010f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010eb2:	6839      	ldr	r1, [r7, #0]
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 fa2a 	bl	801130e <USBD_CtlError>
        err++;
 8010eba:	7afb      	ldrb	r3, [r7, #11]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8010ec0:	e021      	b.n	8010f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	7c1b      	ldrb	r3, [r3, #16]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d10d      	bne.n	8010ee6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ed2:	f107 0208 	add.w	r2, r7, #8
 8010ed6:	4610      	mov	r0, r2
 8010ed8:	4798      	blx	r3
 8010eda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	3301      	adds	r3, #1
 8010ee0:	2207      	movs	r2, #7
 8010ee2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ee4:	e00f      	b.n	8010f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010ee6:	6839      	ldr	r1, [r7, #0]
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 fa10 	bl	801130e <USBD_CtlError>
        err++;
 8010eee:	7afb      	ldrb	r3, [r7, #11]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8010ef4:	e007      	b.n	8010f06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010ef6:	6839      	ldr	r1, [r7, #0]
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f000 fa08 	bl	801130e <USBD_CtlError>
      err++;
 8010efe:	7afb      	ldrb	r3, [r7, #11]
 8010f00:	3301      	adds	r3, #1
 8010f02:	72fb      	strb	r3, [r7, #11]
      break;
 8010f04:	bf00      	nop
  }

  if (err != 0U)
 8010f06:	7afb      	ldrb	r3, [r7, #11]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d11e      	bne.n	8010f4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	88db      	ldrh	r3, [r3, #6]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d016      	beq.n	8010f42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010f14:	893b      	ldrh	r3, [r7, #8]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d00e      	beq.n	8010f38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	88da      	ldrh	r2, [r3, #6]
 8010f1e:	893b      	ldrh	r3, [r7, #8]
 8010f20:	4293      	cmp	r3, r2
 8010f22:	bf28      	it	cs
 8010f24:	4613      	movcs	r3, r2
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010f2a:	893b      	ldrh	r3, [r7, #8]
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	68f9      	ldr	r1, [r7, #12]
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f000 fa5d 	bl	80113f0 <USBD_CtlSendData>
 8010f36:	e009      	b.n	8010f4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010f38:	6839      	ldr	r1, [r7, #0]
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 f9e7 	bl	801130e <USBD_CtlError>
 8010f40:	e004      	b.n	8010f4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f000 faae 	bl	80114a4 <USBD_CtlSendStatus>
 8010f48:	e000      	b.n	8010f4c <USBD_GetDescriptor+0x2cc>
    return;
 8010f4a:	bf00      	nop
  }
}
 8010f4c:	3710      	adds	r7, #16
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop

08010f54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	889b      	ldrh	r3, [r3, #4]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d131      	bne.n	8010fca <USBD_SetAddress+0x76>
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	88db      	ldrh	r3, [r3, #6]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d12d      	bne.n	8010fca <USBD_SetAddress+0x76>
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	885b      	ldrh	r3, [r3, #2]
 8010f72:	2b7f      	cmp	r3, #127	; 0x7f
 8010f74:	d829      	bhi.n	8010fca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	885b      	ldrh	r3, [r3, #2]
 8010f7a:	b2db      	uxtb	r3, r3
 8010f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	2b03      	cmp	r3, #3
 8010f8c:	d104      	bne.n	8010f98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010f8e:	6839      	ldr	r1, [r7, #0]
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f000 f9bc 	bl	801130e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f96:	e01d      	b.n	8010fd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	7bfa      	ldrb	r2, [r7, #15]
 8010f9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010fa0:	7bfb      	ldrb	r3, [r7, #15]
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f004 f83b 	bl	8015020 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f000 fa7a 	bl	80114a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010fb0:	7bfb      	ldrb	r3, [r7, #15]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d004      	beq.n	8010fc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2202      	movs	r2, #2
 8010fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fbe:	e009      	b.n	8010fd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fc8:	e004      	b.n	8010fd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010fca:	6839      	ldr	r1, [r7, #0]
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 f99e 	bl	801130e <USBD_CtlError>
  }
}
 8010fd2:	bf00      	nop
 8010fd4:	bf00      	nop
 8010fd6:	3710      	adds	r7, #16
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b084      	sub	sp, #16
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	885b      	ldrh	r3, [r3, #2]
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	4b4e      	ldr	r3, [pc, #312]	; (801112c <USBD_SetConfig+0x150>)
 8010ff2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010ff4:	4b4d      	ldr	r3, [pc, #308]	; (801112c <USBD_SetConfig+0x150>)
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d905      	bls.n	8011008 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010ffc:	6839      	ldr	r1, [r7, #0]
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f000 f985 	bl	801130e <USBD_CtlError>
    return USBD_FAIL;
 8011004:	2303      	movs	r3, #3
 8011006:	e08c      	b.n	8011122 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801100e:	b2db      	uxtb	r3, r3
 8011010:	2b02      	cmp	r3, #2
 8011012:	d002      	beq.n	801101a <USBD_SetConfig+0x3e>
 8011014:	2b03      	cmp	r3, #3
 8011016:	d029      	beq.n	801106c <USBD_SetConfig+0x90>
 8011018:	e075      	b.n	8011106 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801101a:	4b44      	ldr	r3, [pc, #272]	; (801112c <USBD_SetConfig+0x150>)
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d020      	beq.n	8011064 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011022:	4b42      	ldr	r3, [pc, #264]	; (801112c <USBD_SetConfig+0x150>)
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	461a      	mov	r2, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801102c:	4b3f      	ldr	r3, [pc, #252]	; (801112c <USBD_SetConfig+0x150>)
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	4619      	mov	r1, r3
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f7fe ffe7 	bl	8010006 <USBD_SetClassConfig>
 8011038:	4603      	mov	r3, r0
 801103a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801103c:	7bfb      	ldrb	r3, [r7, #15]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d008      	beq.n	8011054 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011042:	6839      	ldr	r1, [r7, #0]
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 f962 	bl	801130e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2202      	movs	r2, #2
 801104e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011052:	e065      	b.n	8011120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 fa25 	bl	80114a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2203      	movs	r2, #3
 801105e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011062:	e05d      	b.n	8011120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 fa1d 	bl	80114a4 <USBD_CtlSendStatus>
      break;
 801106a:	e059      	b.n	8011120 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801106c:	4b2f      	ldr	r3, [pc, #188]	; (801112c <USBD_SetConfig+0x150>)
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d112      	bne.n	801109a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2202      	movs	r2, #2
 8011078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801107c:	4b2b      	ldr	r3, [pc, #172]	; (801112c <USBD_SetConfig+0x150>)
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	461a      	mov	r2, r3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011086:	4b29      	ldr	r3, [pc, #164]	; (801112c <USBD_SetConfig+0x150>)
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	4619      	mov	r1, r3
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f7fe ffd6 	bl	801003e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f000 fa06 	bl	80114a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011098:	e042      	b.n	8011120 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801109a:	4b24      	ldr	r3, [pc, #144]	; (801112c <USBD_SetConfig+0x150>)
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	461a      	mov	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d02a      	beq.n	80110fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	4619      	mov	r1, r3
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7fe ffc4 	bl	801003e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80110b6:	4b1d      	ldr	r3, [pc, #116]	; (801112c <USBD_SetConfig+0x150>)
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	461a      	mov	r2, r3
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80110c0:	4b1a      	ldr	r3, [pc, #104]	; (801112c <USBD_SetConfig+0x150>)
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	4619      	mov	r1, r3
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f7fe ff9d 	bl	8010006 <USBD_SetClassConfig>
 80110cc:	4603      	mov	r3, r0
 80110ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80110d0:	7bfb      	ldrb	r3, [r7, #15]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d00f      	beq.n	80110f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80110d6:	6839      	ldr	r1, [r7, #0]
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f918 	bl	801130e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	4619      	mov	r1, r3
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7fe ffa9 	bl	801003e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2202      	movs	r2, #2
 80110f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80110f4:	e014      	b.n	8011120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 f9d4 	bl	80114a4 <USBD_CtlSendStatus>
      break;
 80110fc:	e010      	b.n	8011120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f000 f9d0 	bl	80114a4 <USBD_CtlSendStatus>
      break;
 8011104:	e00c      	b.n	8011120 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011106:	6839      	ldr	r1, [r7, #0]
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f000 f900 	bl	801130e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801110e:	4b07      	ldr	r3, [pc, #28]	; (801112c <USBD_SetConfig+0x150>)
 8011110:	781b      	ldrb	r3, [r3, #0]
 8011112:	4619      	mov	r1, r3
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f7fe ff92 	bl	801003e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801111a:	2303      	movs	r3, #3
 801111c:	73fb      	strb	r3, [r7, #15]
      break;
 801111e:	bf00      	nop
  }

  return ret;
 8011120:	7bfb      	ldrb	r3, [r7, #15]
}
 8011122:	4618      	mov	r0, r3
 8011124:	3710      	adds	r7, #16
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	2000494c 	.word	0x2000494c

08011130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	88db      	ldrh	r3, [r3, #6]
 801113e:	2b01      	cmp	r3, #1
 8011140:	d004      	beq.n	801114c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011142:	6839      	ldr	r1, [r7, #0]
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 f8e2 	bl	801130e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801114a:	e023      	b.n	8011194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011152:	b2db      	uxtb	r3, r3
 8011154:	2b02      	cmp	r3, #2
 8011156:	dc02      	bgt.n	801115e <USBD_GetConfig+0x2e>
 8011158:	2b00      	cmp	r3, #0
 801115a:	dc03      	bgt.n	8011164 <USBD_GetConfig+0x34>
 801115c:	e015      	b.n	801118a <USBD_GetConfig+0x5a>
 801115e:	2b03      	cmp	r3, #3
 8011160:	d00b      	beq.n	801117a <USBD_GetConfig+0x4a>
 8011162:	e012      	b.n	801118a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2200      	movs	r2, #0
 8011168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	3308      	adds	r3, #8
 801116e:	2201      	movs	r2, #1
 8011170:	4619      	mov	r1, r3
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f000 f93c 	bl	80113f0 <USBD_CtlSendData>
        break;
 8011178:	e00c      	b.n	8011194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	3304      	adds	r3, #4
 801117e:	2201      	movs	r2, #1
 8011180:	4619      	mov	r1, r3
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f000 f934 	bl	80113f0 <USBD_CtlSendData>
        break;
 8011188:	e004      	b.n	8011194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801118a:	6839      	ldr	r1, [r7, #0]
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 f8be 	bl	801130e <USBD_CtlError>
        break;
 8011192:	bf00      	nop
}
 8011194:	bf00      	nop
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111ac:	b2db      	uxtb	r3, r3
 80111ae:	3b01      	subs	r3, #1
 80111b0:	2b02      	cmp	r3, #2
 80111b2:	d81e      	bhi.n	80111f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	88db      	ldrh	r3, [r3, #6]
 80111b8:	2b02      	cmp	r3, #2
 80111ba:	d004      	beq.n	80111c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80111bc:	6839      	ldr	r1, [r7, #0]
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f000 f8a5 	bl	801130e <USBD_CtlError>
        break;
 80111c4:	e01a      	b.n	80111fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2201      	movs	r2, #1
 80111ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d005      	beq.n	80111e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	f043 0202 	orr.w	r2, r3, #2
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	330c      	adds	r3, #12
 80111e6:	2202      	movs	r2, #2
 80111e8:	4619      	mov	r1, r3
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 f900 	bl	80113f0 <USBD_CtlSendData>
      break;
 80111f0:	e004      	b.n	80111fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80111f2:	6839      	ldr	r1, [r7, #0]
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f000 f88a 	bl	801130e <USBD_CtlError>
      break;
 80111fa:	bf00      	nop
  }
}
 80111fc:	bf00      	nop
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	885b      	ldrh	r3, [r3, #2]
 8011212:	2b01      	cmp	r3, #1
 8011214:	d107      	bne.n	8011226 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2201      	movs	r2, #1
 801121a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f000 f940 	bl	80114a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011224:	e013      	b.n	801124e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	885b      	ldrh	r3, [r3, #2]
 801122a:	2b02      	cmp	r3, #2
 801122c:	d10b      	bne.n	8011246 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	889b      	ldrh	r3, [r3, #4]
 8011232:	0a1b      	lsrs	r3, r3, #8
 8011234:	b29b      	uxth	r3, r3
 8011236:	b2da      	uxtb	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 f930 	bl	80114a4 <USBD_CtlSendStatus>
}
 8011244:	e003      	b.n	801124e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 f860 	bl	801130e <USBD_CtlError>
}
 801124e:	bf00      	nop
 8011250:	3708      	adds	r7, #8
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}

08011256 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011256:	b580      	push	{r7, lr}
 8011258:	b082      	sub	sp, #8
 801125a:	af00      	add	r7, sp, #0
 801125c:	6078      	str	r0, [r7, #4]
 801125e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011266:	b2db      	uxtb	r3, r3
 8011268:	3b01      	subs	r3, #1
 801126a:	2b02      	cmp	r3, #2
 801126c:	d80b      	bhi.n	8011286 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	885b      	ldrh	r3, [r3, #2]
 8011272:	2b01      	cmp	r3, #1
 8011274:	d10c      	bne.n	8011290 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2200      	movs	r2, #0
 801127a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f000 f910 	bl	80114a4 <USBD_CtlSendStatus>
      }
      break;
 8011284:	e004      	b.n	8011290 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011286:	6839      	ldr	r1, [r7, #0]
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f000 f840 	bl	801130e <USBD_CtlError>
      break;
 801128e:	e000      	b.n	8011292 <USBD_ClrFeature+0x3c>
      break;
 8011290:	bf00      	nop
  }
}
 8011292:	bf00      	nop
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}

0801129a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801129a:	b580      	push	{r7, lr}
 801129c:	b084      	sub	sp, #16
 801129e:	af00      	add	r7, sp, #0
 80112a0:	6078      	str	r0, [r7, #4]
 80112a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	781a      	ldrb	r2, [r3, #0]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	3301      	adds	r3, #1
 80112b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	781a      	ldrb	r2, [r3, #0]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	3301      	adds	r3, #1
 80112c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	f7ff fa41 	bl	801074c <SWAPBYTE>
 80112ca:	4603      	mov	r3, r0
 80112cc:	461a      	mov	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	3301      	adds	r3, #1
 80112d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	3301      	adds	r3, #1
 80112dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80112de:	68f8      	ldr	r0, [r7, #12]
 80112e0:	f7ff fa34 	bl	801074c <SWAPBYTE>
 80112e4:	4603      	mov	r3, r0
 80112e6:	461a      	mov	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	3301      	adds	r3, #1
 80112f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	3301      	adds	r3, #1
 80112f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80112f8:	68f8      	ldr	r0, [r7, #12]
 80112fa:	f7ff fa27 	bl	801074c <SWAPBYTE>
 80112fe:	4603      	mov	r3, r0
 8011300:	461a      	mov	r2, r3
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	80da      	strh	r2, [r3, #6]
}
 8011306:	bf00      	nop
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b082      	sub	sp, #8
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
 8011316:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011318:	2180      	movs	r1, #128	; 0x80
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f003 fe16 	bl	8014f4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011320:	2100      	movs	r1, #0
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f003 fe12 	bl	8014f4c <USBD_LL_StallEP>
}
 8011328:	bf00      	nop
 801132a:	3708      	adds	r7, #8
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b086      	sub	sp, #24
 8011334:	af00      	add	r7, sp, #0
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	60b9      	str	r1, [r7, #8]
 801133a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801133c:	2300      	movs	r3, #0
 801133e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d036      	beq.n	80113b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801134a:	6938      	ldr	r0, [r7, #16]
 801134c:	f000 f836 	bl	80113bc <USBD_GetLen>
 8011350:	4603      	mov	r3, r0
 8011352:	3301      	adds	r3, #1
 8011354:	b29b      	uxth	r3, r3
 8011356:	005b      	lsls	r3, r3, #1
 8011358:	b29a      	uxth	r2, r3
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801135e:	7dfb      	ldrb	r3, [r7, #23]
 8011360:	68ba      	ldr	r2, [r7, #8]
 8011362:	4413      	add	r3, r2
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	7812      	ldrb	r2, [r2, #0]
 8011368:	701a      	strb	r2, [r3, #0]
  idx++;
 801136a:	7dfb      	ldrb	r3, [r7, #23]
 801136c:	3301      	adds	r3, #1
 801136e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011370:	7dfb      	ldrb	r3, [r7, #23]
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	4413      	add	r3, r2
 8011376:	2203      	movs	r2, #3
 8011378:	701a      	strb	r2, [r3, #0]
  idx++;
 801137a:	7dfb      	ldrb	r3, [r7, #23]
 801137c:	3301      	adds	r3, #1
 801137e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011380:	e013      	b.n	80113aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011382:	7dfb      	ldrb	r3, [r7, #23]
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	4413      	add	r3, r2
 8011388:	693a      	ldr	r2, [r7, #16]
 801138a:	7812      	ldrb	r2, [r2, #0]
 801138c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	3301      	adds	r3, #1
 8011392:	613b      	str	r3, [r7, #16]
    idx++;
 8011394:	7dfb      	ldrb	r3, [r7, #23]
 8011396:	3301      	adds	r3, #1
 8011398:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801139a:	7dfb      	ldrb	r3, [r7, #23]
 801139c:	68ba      	ldr	r2, [r7, #8]
 801139e:	4413      	add	r3, r2
 80113a0:	2200      	movs	r2, #0
 80113a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80113a4:	7dfb      	ldrb	r3, [r7, #23]
 80113a6:	3301      	adds	r3, #1
 80113a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d1e7      	bne.n	8011382 <USBD_GetString+0x52>
 80113b2:	e000      	b.n	80113b6 <USBD_GetString+0x86>
    return;
 80113b4:	bf00      	nop
  }
}
 80113b6:	3718      	adds	r7, #24
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80113c4:	2300      	movs	r3, #0
 80113c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80113cc:	e005      	b.n	80113da <USBD_GetLen+0x1e>
  {
    len++;
 80113ce:	7bfb      	ldrb	r3, [r7, #15]
 80113d0:	3301      	adds	r3, #1
 80113d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	3301      	adds	r3, #1
 80113d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1f5      	bne.n	80113ce <USBD_GetLen+0x12>
  }

  return len;
 80113e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3714      	adds	r7, #20
 80113e8:	46bd      	mov	sp, r7
 80113ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ee:	4770      	bx	lr

080113f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	60f8      	str	r0, [r7, #12]
 80113f8:	60b9      	str	r1, [r7, #8]
 80113fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2202      	movs	r2, #2
 8011400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	687a      	ldr	r2, [r7, #4]
 801140e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	2100      	movs	r1, #0
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	f003 fe21 	bl	801505e <USBD_LL_Transmit>

  return USBD_OK;
 801141c:	2300      	movs	r3, #0
}
 801141e:	4618      	mov	r0, r3
 8011420:	3710      	adds	r7, #16
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}

08011426 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011426:	b580      	push	{r7, lr}
 8011428:	b084      	sub	sp, #16
 801142a:	af00      	add	r7, sp, #0
 801142c:	60f8      	str	r0, [r7, #12]
 801142e:	60b9      	str	r1, [r7, #8]
 8011430:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	68ba      	ldr	r2, [r7, #8]
 8011436:	2100      	movs	r1, #0
 8011438:	68f8      	ldr	r0, [r7, #12]
 801143a:	f003 fe10 	bl	801505e <USBD_LL_Transmit>

  return USBD_OK;
 801143e:	2300      	movs	r3, #0
}
 8011440:	4618      	mov	r0, r3
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b084      	sub	sp, #16
 801144c:	af00      	add	r7, sp, #0
 801144e:	60f8      	str	r0, [r7, #12]
 8011450:	60b9      	str	r1, [r7, #8]
 8011452:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2203      	movs	r2, #3
 8011458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	68ba      	ldr	r2, [r7, #8]
 8011470:	2100      	movs	r1, #0
 8011472:	68f8      	ldr	r0, [r7, #12]
 8011474:	f003 fe14 	bl	80150a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011478:	2300      	movs	r3, #0
}
 801147a:	4618      	mov	r0, r3
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011482:	b580      	push	{r7, lr}
 8011484:	b084      	sub	sp, #16
 8011486:	af00      	add	r7, sp, #0
 8011488:	60f8      	str	r0, [r7, #12]
 801148a:	60b9      	str	r1, [r7, #8]
 801148c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	68ba      	ldr	r2, [r7, #8]
 8011492:	2100      	movs	r1, #0
 8011494:	68f8      	ldr	r0, [r7, #12]
 8011496:	f003 fe03 	bl	80150a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801149a:	2300      	movs	r3, #0
}
 801149c:	4618      	mov	r0, r3
 801149e:	3710      	adds	r7, #16
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}

080114a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2204      	movs	r2, #4
 80114b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80114b4:	2300      	movs	r3, #0
 80114b6:	2200      	movs	r2, #0
 80114b8:	2100      	movs	r1, #0
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f003 fdcf 	bl	801505e <USBD_LL_Transmit>

  return USBD_OK;
 80114c0:	2300      	movs	r3, #0
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3708      	adds	r7, #8
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b082      	sub	sp, #8
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2205      	movs	r2, #5
 80114d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114da:	2300      	movs	r3, #0
 80114dc:	2200      	movs	r2, #0
 80114de:	2100      	movs	r1, #0
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f003 fddd 	bl	80150a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80114e6:	2300      	movs	r3, #0
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <makeFreeRtosPriority>:
 80114f0:	b480      	push	{r7}
 80114f2:	b085      	sub	sp, #20
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	4603      	mov	r3, r0
 80114f8:	80fb      	strh	r3, [r7, #6]
 80114fa:	2300      	movs	r3, #0
 80114fc:	60fb      	str	r3, [r7, #12]
 80114fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011502:	2b84      	cmp	r3, #132	; 0x84
 8011504:	d005      	beq.n	8011512 <makeFreeRtosPriority+0x22>
 8011506:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	4413      	add	r3, r2
 801150e:	3303      	adds	r3, #3
 8011510:	60fb      	str	r3, [r7, #12]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	4618      	mov	r0, r3
 8011516:	3714      	adds	r7, #20
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr

08011520 <inHandlerMode>:
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	f3ef 8305 	mrs	r3, IPSR
 801152a:	607b      	str	r3, [r7, #4]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	bf14      	ite	ne
 8011532:	2301      	movne	r3, #1
 8011534:	2300      	moveq	r3, #0
 8011536:	b2db      	uxtb	r3, r3
 8011538:	4618      	mov	r0, r3
 801153a:	370c      	adds	r7, #12
 801153c:	46bd      	mov	sp, r7
 801153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011542:	4770      	bx	lr

08011544 <osKernelStart>:
 8011544:	b580      	push	{r7, lr}
 8011546:	af00      	add	r7, sp, #0
 8011548:	f001 f996 	bl	8012878 <vTaskStartScheduler>
 801154c:	2300      	movs	r3, #0
 801154e:	4618      	mov	r0, r3
 8011550:	bd80      	pop	{r7, pc}

08011552 <osThreadCreate>:
 8011552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011554:	b089      	sub	sp, #36	; 0x24
 8011556:	af04      	add	r7, sp, #16
 8011558:	6078      	str	r0, [r7, #4]
 801155a:	6039      	str	r1, [r7, #0]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	695b      	ldr	r3, [r3, #20]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d020      	beq.n	80115a6 <osThreadCreate+0x54>
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	699b      	ldr	r3, [r3, #24]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d01c      	beq.n	80115a6 <osThreadCreate+0x54>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	685c      	ldr	r4, [r3, #4]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681d      	ldr	r5, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	691e      	ldr	r6, [r3, #16]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801157e:	4618      	mov	r0, r3
 8011580:	f7ff ffb6 	bl	80114f0 <makeFreeRtosPriority>
 8011584:	4601      	mov	r1, r0
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	695b      	ldr	r3, [r3, #20]
 801158a:	687a      	ldr	r2, [r7, #4]
 801158c:	6992      	ldr	r2, [r2, #24]
 801158e:	9202      	str	r2, [sp, #8]
 8011590:	9301      	str	r3, [sp, #4]
 8011592:	9100      	str	r1, [sp, #0]
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	4632      	mov	r2, r6
 8011598:	4629      	mov	r1, r5
 801159a:	4620      	mov	r0, r4
 801159c:	f000 ff8e 	bl	80124bc <xTaskCreateStatic>
 80115a0:	4603      	mov	r3, r0
 80115a2:	60fb      	str	r3, [r7, #12]
 80115a4:	e01c      	b.n	80115e0 <osThreadCreate+0x8e>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	685c      	ldr	r4, [r3, #4]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681d      	ldr	r5, [r3, #0]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	691b      	ldr	r3, [r3, #16]
 80115b2:	b29e      	uxth	r6, r3
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7ff ff98 	bl	80114f0 <makeFreeRtosPriority>
 80115c0:	4602      	mov	r2, r0
 80115c2:	f107 030c 	add.w	r3, r7, #12
 80115c6:	9301      	str	r3, [sp, #4]
 80115c8:	9200      	str	r2, [sp, #0]
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	4632      	mov	r2, r6
 80115ce:	4629      	mov	r1, r5
 80115d0:	4620      	mov	r0, r4
 80115d2:	f000 ffd0 	bl	8012576 <xTaskCreate>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d001      	beq.n	80115e0 <osThreadCreate+0x8e>
 80115dc:	2300      	movs	r3, #0
 80115de:	e000      	b.n	80115e2 <osThreadCreate+0x90>
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	4618      	mov	r0, r3
 80115e4:	3714      	adds	r7, #20
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115ea <osDelay>:
 80115ea:	b580      	push	{r7, lr}
 80115ec:	b084      	sub	sp, #16
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	60fb      	str	r3, [r7, #12]
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d001      	beq.n	8011600 <osDelay+0x16>
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	e000      	b.n	8011602 <osDelay+0x18>
 8011600:	2301      	movs	r3, #1
 8011602:	4618      	mov	r0, r3
 8011604:	f001 f904 	bl	8012810 <vTaskDelay>
 8011608:	2300      	movs	r3, #0
 801160a:	4618      	mov	r0, r3
 801160c:	3710      	adds	r7, #16
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
	...

08011614 <osTimerCreate>:
 8011614:	b580      	push	{r7, lr}
 8011616:	b086      	sub	sp, #24
 8011618:	af02      	add	r7, sp, #8
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	460b      	mov	r3, r1
 801161e:	607a      	str	r2, [r7, #4]
 8011620:	72fb      	strb	r3, [r7, #11]
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d013      	beq.n	8011652 <osTimerCreate+0x3e>
 801162a:	7afb      	ldrb	r3, [r7, #11]
 801162c:	2b01      	cmp	r3, #1
 801162e:	d101      	bne.n	8011634 <osTimerCreate+0x20>
 8011630:	2101      	movs	r1, #1
 8011632:	e000      	b.n	8011636 <osTimerCreate+0x22>
 8011634:	2100      	movs	r1, #0
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	6852      	ldr	r2, [r2, #4]
 801163e:	9201      	str	r2, [sp, #4]
 8011640:	9300      	str	r3, [sp, #0]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	460a      	mov	r2, r1
 8011646:	2101      	movs	r1, #1
 8011648:	480b      	ldr	r0, [pc, #44]	; (8011678 <osTimerCreate+0x64>)
 801164a:	f002 f8de 	bl	801380a <xTimerCreateStatic>
 801164e:	4603      	mov	r3, r0
 8011650:	e00e      	b.n	8011670 <osTimerCreate+0x5c>
 8011652:	7afb      	ldrb	r3, [r7, #11]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d101      	bne.n	801165c <osTimerCreate+0x48>
 8011658:	2201      	movs	r2, #1
 801165a:	e000      	b.n	801165e <osTimerCreate+0x4a>
 801165c:	2200      	movs	r2, #0
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	9300      	str	r3, [sp, #0]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2101      	movs	r1, #1
 8011668:	4803      	ldr	r0, [pc, #12]	; (8011678 <osTimerCreate+0x64>)
 801166a:	f002 f8ad 	bl	80137c8 <xTimerCreate>
 801166e:	4603      	mov	r3, r0
 8011670:	4618      	mov	r0, r3
 8011672:	3710      	adds	r7, #16
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	08018a50 	.word	0x08018a50

0801167c <osTimerStart>:
 801167c:	b580      	push	{r7, lr}
 801167e:	b088      	sub	sp, #32
 8011680:	af02      	add	r7, sp, #8
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
 8011686:	2300      	movs	r3, #0
 8011688:	617b      	str	r3, [r7, #20]
 801168a:	2300      	movs	r3, #0
 801168c:	60fb      	str	r3, [r7, #12]
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	613b      	str	r3, [r7, #16]
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d101      	bne.n	801169c <osTimerStart+0x20>
 8011698:	2301      	movs	r3, #1
 801169a:	613b      	str	r3, [r7, #16]
 801169c:	f7ff ff40 	bl	8011520 <inHandlerMode>
 80116a0:	4603      	mov	r3, r0
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d01a      	beq.n	80116dc <osTimerStart+0x60>
 80116a6:	f107 030c 	add.w	r3, r7, #12
 80116aa:	2200      	movs	r2, #0
 80116ac:	9200      	str	r2, [sp, #0]
 80116ae:	693a      	ldr	r2, [r7, #16]
 80116b0:	2109      	movs	r1, #9
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	f002 f922 	bl	80138fc <xTimerGenericCommand>
 80116b8:	4603      	mov	r3, r0
 80116ba:	2b01      	cmp	r3, #1
 80116bc:	d002      	beq.n	80116c4 <osTimerStart+0x48>
 80116be:	23ff      	movs	r3, #255	; 0xff
 80116c0:	617b      	str	r3, [r7, #20]
 80116c2:	e018      	b.n	80116f6 <osTimerStart+0x7a>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d015      	beq.n	80116f6 <osTimerStart+0x7a>
 80116ca:	4b0d      	ldr	r3, [pc, #52]	; (8011700 <osTimerStart+0x84>)
 80116cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116d0:	601a      	str	r2, [r3, #0]
 80116d2:	f3bf 8f4f 	dsb	sy
 80116d6:	f3bf 8f6f 	isb	sy
 80116da:	e00c      	b.n	80116f6 <osTimerStart+0x7a>
 80116dc:	2300      	movs	r3, #0
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	2300      	movs	r3, #0
 80116e2:	693a      	ldr	r2, [r7, #16]
 80116e4:	2104      	movs	r1, #4
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f002 f908 	bl	80138fc <xTimerGenericCommand>
 80116ec:	4603      	mov	r3, r0
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d001      	beq.n	80116f6 <osTimerStart+0x7a>
 80116f2:	23ff      	movs	r3, #255	; 0xff
 80116f4:	617b      	str	r3, [r7, #20]
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	4618      	mov	r0, r3
 80116fa:	3718      	adds	r7, #24
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	e000ed04 	.word	0xe000ed04

08011704 <osSignalSet>:
 8011704:	b580      	push	{r7, lr}
 8011706:	b086      	sub	sp, #24
 8011708:	af02      	add	r7, sp, #8
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
 801170e:	2300      	movs	r3, #0
 8011710:	60fb      	str	r3, [r7, #12]
 8011712:	2300      	movs	r3, #0
 8011714:	60bb      	str	r3, [r7, #8]
 8011716:	f7ff ff03 	bl	8011520 <inHandlerMode>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	d01c      	beq.n	801175a <osSignalSet+0x56>
 8011720:	6839      	ldr	r1, [r7, #0]
 8011722:	f107 0208 	add.w	r2, r7, #8
 8011726:	f107 030c 	add.w	r3, r7, #12
 801172a:	9300      	str	r3, [sp, #0]
 801172c:	4613      	mov	r3, r2
 801172e:	2201      	movs	r2, #1
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f001 feb7 	bl	80134a4 <xTaskGenericNotifyFromISR>
 8011736:	4603      	mov	r3, r0
 8011738:	2b01      	cmp	r3, #1
 801173a:	d002      	beq.n	8011742 <osSignalSet+0x3e>
 801173c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011740:	e019      	b.n	8011776 <osSignalSet+0x72>
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d015      	beq.n	8011774 <osSignalSet+0x70>
 8011748:	4b0d      	ldr	r3, [pc, #52]	; (8011780 <osSignalSet+0x7c>)
 801174a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801174e:	601a      	str	r2, [r3, #0]
 8011750:	f3bf 8f4f 	dsb	sy
 8011754:	f3bf 8f6f 	isb	sy
 8011758:	e00c      	b.n	8011774 <osSignalSet+0x70>
 801175a:	6839      	ldr	r1, [r7, #0]
 801175c:	f107 0308 	add.w	r3, r7, #8
 8011760:	2201      	movs	r2, #1
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f001 fde0 	bl	8013328 <xTaskGenericNotify>
 8011768:	4603      	mov	r3, r0
 801176a:	2b01      	cmp	r3, #1
 801176c:	d002      	beq.n	8011774 <osSignalSet+0x70>
 801176e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011772:	e000      	b.n	8011776 <osSignalSet+0x72>
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	4618      	mov	r0, r3
 8011778:	3710      	adds	r7, #16
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	e000ed04 	.word	0xe000ed04

08011784 <osSignalWait>:
 8011784:	b590      	push	{r4, r7, lr}
 8011786:	b089      	sub	sp, #36	; 0x24
 8011788:	af00      	add	r7, sp, #0
 801178a:	60f8      	str	r0, [r7, #12]
 801178c:	60b9      	str	r1, [r7, #8]
 801178e:	607a      	str	r2, [r7, #4]
 8011790:	2300      	movs	r3, #0
 8011792:	617b      	str	r3, [r7, #20]
 8011794:	2300      	movs	r3, #0
 8011796:	61fb      	str	r3, [r7, #28]
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801179e:	d103      	bne.n	80117a8 <osSignalWait+0x24>
 80117a0:	f04f 33ff 	mov.w	r3, #4294967295
 80117a4:	61fb      	str	r3, [r7, #28]
 80117a6:	e009      	b.n	80117bc <osSignalWait+0x38>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d006      	beq.n	80117bc <osSignalWait+0x38>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	61fb      	str	r3, [r7, #28]
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d101      	bne.n	80117bc <osSignalWait+0x38>
 80117b8:	2301      	movs	r3, #1
 80117ba:	61fb      	str	r3, [r7, #28]
 80117bc:	f7ff feb0 	bl	8011520 <inHandlerMode>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d002      	beq.n	80117cc <osSignalWait+0x48>
 80117c6:	2382      	movs	r3, #130	; 0x82
 80117c8:	613b      	str	r3, [r7, #16]
 80117ca:	e01b      	b.n	8011804 <osSignalWait+0x80>
 80117cc:	68b9      	ldr	r1, [r7, #8]
 80117ce:	f107 0310 	add.w	r3, r7, #16
 80117d2:	1d1a      	adds	r2, r3, #4
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	2000      	movs	r0, #0
 80117d8:	f001 fd46 	bl	8013268 <xTaskNotifyWait>
 80117dc:	4603      	mov	r3, r0
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d008      	beq.n	80117f4 <osSignalWait+0x70>
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d102      	bne.n	80117ee <osSignalWait+0x6a>
 80117e8:	2300      	movs	r3, #0
 80117ea:	613b      	str	r3, [r7, #16]
 80117ec:	e00a      	b.n	8011804 <osSignalWait+0x80>
 80117ee:	2340      	movs	r3, #64	; 0x40
 80117f0:	613b      	str	r3, [r7, #16]
 80117f2:	e007      	b.n	8011804 <osSignalWait+0x80>
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	da02      	bge.n	8011800 <osSignalWait+0x7c>
 80117fa:	2386      	movs	r3, #134	; 0x86
 80117fc:	613b      	str	r3, [r7, #16]
 80117fe:	e001      	b.n	8011804 <osSignalWait+0x80>
 8011800:	2308      	movs	r3, #8
 8011802:	613b      	str	r3, [r7, #16]
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	461c      	mov	r4, r3
 8011808:	f107 0310 	add.w	r3, r7, #16
 801180c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	3724      	adds	r7, #36	; 0x24
 8011818:	46bd      	mov	sp, r7
 801181a:	bd90      	pop	{r4, r7, pc}

0801181c <osMessageCreate>:
 801181c:	b590      	push	{r4, r7, lr}
 801181e:	b085      	sub	sp, #20
 8011820:	af02      	add	r7, sp, #8
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	689b      	ldr	r3, [r3, #8]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d011      	beq.n	8011852 <osMessageCreate+0x36>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00d      	beq.n	8011852 <osMessageCreate+0x36>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6818      	ldr	r0, [r3, #0]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6859      	ldr	r1, [r3, #4]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	689a      	ldr	r2, [r3, #8]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	2400      	movs	r4, #0
 8011848:	9400      	str	r4, [sp, #0]
 801184a:	f000 f941 	bl	8011ad0 <xQueueGenericCreateStatic>
 801184e:	4603      	mov	r3, r0
 8011850:	e008      	b.n	8011864 <osMessageCreate+0x48>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6818      	ldr	r0, [r3, #0]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	4619      	mov	r1, r3
 801185e:	f000 f9af 	bl	8011bc0 <xQueueGenericCreate>
 8011862:	4603      	mov	r3, r0
 8011864:	4618      	mov	r0, r3
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	bd90      	pop	{r4, r7, pc}

0801186c <osMessageWaiting>:
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	f7ff fe54 	bl	8011520 <inHandlerMode>
 8011878:	4603      	mov	r3, r0
 801187a:	2b00      	cmp	r3, #0
 801187c:	d004      	beq.n	8011888 <osMessageWaiting+0x1c>
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f000 fc90 	bl	80121a4 <uxQueueMessagesWaitingFromISR>
 8011884:	4603      	mov	r3, r0
 8011886:	e003      	b.n	8011890 <osMessageWaiting+0x24>
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f000 fc6d 	bl	8012168 <uxQueueMessagesWaiting>
 801188e:	4603      	mov	r3, r0
 8011890:	4618      	mov	r0, r3
 8011892:	3708      	adds	r7, #8
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <vListInitialise>:
 8011898:	b480      	push	{r7}
 801189a:	b083      	sub	sp, #12
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f103 0208 	add.w	r2, r3, #8
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	605a      	str	r2, [r3, #4]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f04f 32ff 	mov.w	r2, #4294967295
 80118b0:	609a      	str	r2, [r3, #8]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f103 0208 	add.w	r2, r3, #8
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	60da      	str	r2, [r3, #12]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f103 0208 	add.w	r2, r3, #8
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	611a      	str	r2, [r3, #16]
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2200      	movs	r2, #0
 80118ca:	601a      	str	r2, [r3, #0]
 80118cc:	bf00      	nop
 80118ce:	370c      	adds	r7, #12
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <vListInitialiseItem>:
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	611a      	str	r2, [r3, #16]
 80118e6:	bf00      	nop
 80118e8:	370c      	adds	r7, #12
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr

080118f2 <vListInsertEnd>:
 80118f2:	b480      	push	{r7}
 80118f4:	b085      	sub	sp, #20
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
 80118fa:	6039      	str	r1, [r7, #0]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	60fb      	str	r3, [r7, #12]
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	68fa      	ldr	r2, [r7, #12]
 8011906:	605a      	str	r2, [r3, #4]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	689a      	ldr	r2, [r3, #8]
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	609a      	str	r2, [r3, #8]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	689b      	ldr	r3, [r3, #8]
 8011914:	683a      	ldr	r2, [r7, #0]
 8011916:	605a      	str	r2, [r3, #4]
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	683a      	ldr	r2, [r7, #0]
 801191c:	609a      	str	r2, [r3, #8]
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	687a      	ldr	r2, [r7, #4]
 8011922:	611a      	str	r2, [r3, #16]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	1c5a      	adds	r2, r3, #1
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	601a      	str	r2, [r3, #0]
 801192e:	bf00      	nop
 8011930:	3714      	adds	r7, #20
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr

0801193a <vListInsert>:
 801193a:	b480      	push	{r7}
 801193c:	b085      	sub	sp, #20
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	6039      	str	r1, [r7, #0]
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	60bb      	str	r3, [r7, #8]
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011950:	d103      	bne.n	801195a <vListInsert+0x20>
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	691b      	ldr	r3, [r3, #16]
 8011956:	60fb      	str	r3, [r7, #12]
 8011958:	e00c      	b.n	8011974 <vListInsert+0x3a>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	3308      	adds	r3, #8
 801195e:	60fb      	str	r3, [r7, #12]
 8011960:	e002      	b.n	8011968 <vListInsert+0x2e>
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	60fb      	str	r3, [r7, #12]
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	429a      	cmp	r2, r3
 8011972:	d2f6      	bcs.n	8011962 <vListInsert+0x28>
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	685a      	ldr	r2, [r3, #4]
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	605a      	str	r2, [r3, #4]
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	683a      	ldr	r2, [r7, #0]
 8011982:	609a      	str	r2, [r3, #8]
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	68fa      	ldr	r2, [r7, #12]
 8011988:	609a      	str	r2, [r3, #8]
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	683a      	ldr	r2, [r7, #0]
 801198e:	605a      	str	r2, [r3, #4]
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	611a      	str	r2, [r3, #16]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	1c5a      	adds	r2, r3, #1
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	601a      	str	r2, [r3, #0]
 80119a0:	bf00      	nop
 80119a2:	3714      	adds	r7, #20
 80119a4:	46bd      	mov	sp, r7
 80119a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119aa:	4770      	bx	lr

080119ac <uxListRemove>:
 80119ac:	b480      	push	{r7}
 80119ae:	b085      	sub	sp, #20
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	691b      	ldr	r3, [r3, #16]
 80119b8:	60fb      	str	r3, [r7, #12]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	6892      	ldr	r2, [r2, #8]
 80119c2:	609a      	str	r2, [r3, #8]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	689b      	ldr	r3, [r3, #8]
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	6852      	ldr	r2, [r2, #4]
 80119cc:	605a      	str	r2, [r3, #4]
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d103      	bne.n	80119e0 <uxListRemove+0x34>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	689a      	ldr	r2, [r3, #8]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	605a      	str	r2, [r3, #4]
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2200      	movs	r2, #0
 80119e4:	611a      	str	r2, [r3, #16]
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	1e5a      	subs	r2, r3, #1
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	601a      	str	r2, [r3, #0]
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4618      	mov	r0, r3
 80119f6:	3714      	adds	r7, #20
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr

08011a00 <xQueueGenericReset>:
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b084      	sub	sp, #16
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	6039      	str	r1, [r7, #0]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	60fb      	str	r3, [r7, #12]
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d10a      	bne.n	8011a2a <xQueueGenericReset+0x2a>
 8011a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a18:	f383 8811 	msr	BASEPRI, r3
 8011a1c:	f3bf 8f6f 	isb	sy
 8011a20:	f3bf 8f4f 	dsb	sy
 8011a24:	60bb      	str	r3, [r7, #8]
 8011a26:	bf00      	nop
 8011a28:	e7fe      	b.n	8011a28 <xQueueGenericReset+0x28>
 8011a2a:	f002 fb7b 	bl	8014124 <vPortEnterCritical>
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	681a      	ldr	r2, [r3, #0]
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a36:	68f9      	ldr	r1, [r7, #12]
 8011a38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011a3a:	fb01 f303 	mul.w	r3, r1, r3
 8011a3e:	441a      	add	r2, r3
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	609a      	str	r2, [r3, #8]
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2200      	movs	r2, #0
 8011a48:	639a      	str	r2, [r3, #56]	; 0x38
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681a      	ldr	r2, [r3, #0]
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	605a      	str	r2, [r3, #4]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a5a:	3b01      	subs	r3, #1
 8011a5c:	68f9      	ldr	r1, [r7, #12]
 8011a5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011a60:	fb01 f303 	mul.w	r3, r1, r3
 8011a64:	441a      	add	r2, r3
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	60da      	str	r2, [r3, #12]
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	22ff      	movs	r2, #255	; 0xff
 8011a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	22ff      	movs	r2, #255	; 0xff
 8011a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d114      	bne.n	8011aaa <xQueueGenericReset+0xaa>
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	691b      	ldr	r3, [r3, #16]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d01a      	beq.n	8011abe <xQueueGenericReset+0xbe>
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	3310      	adds	r3, #16
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f001 f987 	bl	8012da0 <xTaskRemoveFromEventList>
 8011a92:	4603      	mov	r3, r0
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d012      	beq.n	8011abe <xQueueGenericReset+0xbe>
 8011a98:	4b0c      	ldr	r3, [pc, #48]	; (8011acc <xQueueGenericReset+0xcc>)
 8011a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a9e:	601a      	str	r2, [r3, #0]
 8011aa0:	f3bf 8f4f 	dsb	sy
 8011aa4:	f3bf 8f6f 	isb	sy
 8011aa8:	e009      	b.n	8011abe <xQueueGenericReset+0xbe>
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	3310      	adds	r3, #16
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7ff fef2 	bl	8011898 <vListInitialise>
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	3324      	adds	r3, #36	; 0x24
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7ff feed 	bl	8011898 <vListInitialise>
 8011abe:	f002 fb61 	bl	8014184 <vPortExitCritical>
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3710      	adds	r7, #16
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	e000ed04 	.word	0xe000ed04

08011ad0 <xQueueGenericCreateStatic>:
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b08e      	sub	sp, #56	; 0x38
 8011ad4:	af02      	add	r7, sp, #8
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	607a      	str	r2, [r7, #4]
 8011adc:	603b      	str	r3, [r7, #0]
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10a      	bne.n	8011afa <xQueueGenericCreateStatic+0x2a>
 8011ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae8:	f383 8811 	msr	BASEPRI, r3
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f3bf 8f4f 	dsb	sy
 8011af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8011af6:	bf00      	nop
 8011af8:	e7fe      	b.n	8011af8 <xQueueGenericCreateStatic+0x28>
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d10a      	bne.n	8011b16 <xQueueGenericCreateStatic+0x46>
 8011b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b04:	f383 8811 	msr	BASEPRI, r3
 8011b08:	f3bf 8f6f 	isb	sy
 8011b0c:	f3bf 8f4f 	dsb	sy
 8011b10:	627b      	str	r3, [r7, #36]	; 0x24
 8011b12:	bf00      	nop
 8011b14:	e7fe      	b.n	8011b14 <xQueueGenericCreateStatic+0x44>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d002      	beq.n	8011b22 <xQueueGenericCreateStatic+0x52>
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d001      	beq.n	8011b26 <xQueueGenericCreateStatic+0x56>
 8011b22:	2301      	movs	r3, #1
 8011b24:	e000      	b.n	8011b28 <xQueueGenericCreateStatic+0x58>
 8011b26:	2300      	movs	r3, #0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d10a      	bne.n	8011b42 <xQueueGenericCreateStatic+0x72>
 8011b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b30:	f383 8811 	msr	BASEPRI, r3
 8011b34:	f3bf 8f6f 	isb	sy
 8011b38:	f3bf 8f4f 	dsb	sy
 8011b3c:	623b      	str	r3, [r7, #32]
 8011b3e:	bf00      	nop
 8011b40:	e7fe      	b.n	8011b40 <xQueueGenericCreateStatic+0x70>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d102      	bne.n	8011b4e <xQueueGenericCreateStatic+0x7e>
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d101      	bne.n	8011b52 <xQueueGenericCreateStatic+0x82>
 8011b4e:	2301      	movs	r3, #1
 8011b50:	e000      	b.n	8011b54 <xQueueGenericCreateStatic+0x84>
 8011b52:	2300      	movs	r3, #0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d10a      	bne.n	8011b6e <xQueueGenericCreateStatic+0x9e>
 8011b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b5c:	f383 8811 	msr	BASEPRI, r3
 8011b60:	f3bf 8f6f 	isb	sy
 8011b64:	f3bf 8f4f 	dsb	sy
 8011b68:	61fb      	str	r3, [r7, #28]
 8011b6a:	bf00      	nop
 8011b6c:	e7fe      	b.n	8011b6c <xQueueGenericCreateStatic+0x9c>
 8011b6e:	2348      	movs	r3, #72	; 0x48
 8011b70:	617b      	str	r3, [r7, #20]
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	2b48      	cmp	r3, #72	; 0x48
 8011b76:	d00a      	beq.n	8011b8e <xQueueGenericCreateStatic+0xbe>
 8011b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b7c:	f383 8811 	msr	BASEPRI, r3
 8011b80:	f3bf 8f6f 	isb	sy
 8011b84:	f3bf 8f4f 	dsb	sy
 8011b88:	61bb      	str	r3, [r7, #24]
 8011b8a:	bf00      	nop
 8011b8c:	e7fe      	b.n	8011b8c <xQueueGenericCreateStatic+0xbc>
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d00d      	beq.n	8011bb6 <xQueueGenericCreateStatic+0xe6>
 8011b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011ba2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	4613      	mov	r3, r2
 8011bac:	687a      	ldr	r2, [r7, #4]
 8011bae:	68b9      	ldr	r1, [r7, #8]
 8011bb0:	68f8      	ldr	r0, [r7, #12]
 8011bb2:	f000 f83f 	bl	8011c34 <prvInitialiseNewQueue>
 8011bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3730      	adds	r7, #48	; 0x30
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <xQueueGenericCreate>:
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b08a      	sub	sp, #40	; 0x28
 8011bc4:	af02      	add	r7, sp, #8
 8011bc6:	60f8      	str	r0, [r7, #12]
 8011bc8:	60b9      	str	r1, [r7, #8]
 8011bca:	4613      	mov	r3, r2
 8011bcc:	71fb      	strb	r3, [r7, #7]
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d10a      	bne.n	8011bea <xQueueGenericCreate+0x2a>
 8011bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd8:	f383 8811 	msr	BASEPRI, r3
 8011bdc:	f3bf 8f6f 	isb	sy
 8011be0:	f3bf 8f4f 	dsb	sy
 8011be4:	613b      	str	r3, [r7, #16]
 8011be6:	bf00      	nop
 8011be8:	e7fe      	b.n	8011be8 <xQueueGenericCreate+0x28>
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	fb02 f303 	mul.w	r3, r2, r3
 8011bf2:	61fb      	str	r3, [r7, #28]
 8011bf4:	69fb      	ldr	r3, [r7, #28]
 8011bf6:	3348      	adds	r3, #72	; 0x48
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f002 fbb5 	bl	8014368 <pvPortMalloc>
 8011bfe:	61b8      	str	r0, [r7, #24]
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d011      	beq.n	8011c2a <xQueueGenericCreate+0x6a>
 8011c06:	69bb      	ldr	r3, [r7, #24]
 8011c08:	617b      	str	r3, [r7, #20]
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	3348      	adds	r3, #72	; 0x48
 8011c0e:	617b      	str	r3, [r7, #20]
 8011c10:	69bb      	ldr	r3, [r7, #24]
 8011c12:	2200      	movs	r2, #0
 8011c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011c18:	79fa      	ldrb	r2, [r7, #7]
 8011c1a:	69bb      	ldr	r3, [r7, #24]
 8011c1c:	9300      	str	r3, [sp, #0]
 8011c1e:	4613      	mov	r3, r2
 8011c20:	697a      	ldr	r2, [r7, #20]
 8011c22:	68b9      	ldr	r1, [r7, #8]
 8011c24:	68f8      	ldr	r0, [r7, #12]
 8011c26:	f000 f805 	bl	8011c34 <prvInitialiseNewQueue>
 8011c2a:	69bb      	ldr	r3, [r7, #24]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3720      	adds	r7, #32
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <prvInitialiseNewQueue>:
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	60f8      	str	r0, [r7, #12]
 8011c3c:	60b9      	str	r1, [r7, #8]
 8011c3e:	607a      	str	r2, [r7, #4]
 8011c40:	70fb      	strb	r3, [r7, #3]
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d103      	bne.n	8011c50 <prvInitialiseNewQueue+0x1c>
 8011c48:	69bb      	ldr	r3, [r7, #24]
 8011c4a:	69ba      	ldr	r2, [r7, #24]
 8011c4c:	601a      	str	r2, [r3, #0]
 8011c4e:	e002      	b.n	8011c56 <prvInitialiseNewQueue+0x22>
 8011c50:	69bb      	ldr	r3, [r7, #24]
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	601a      	str	r2, [r3, #0]
 8011c56:	69bb      	ldr	r3, [r7, #24]
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8011c5c:	69bb      	ldr	r3, [r7, #24]
 8011c5e:	68ba      	ldr	r2, [r7, #8]
 8011c60:	641a      	str	r2, [r3, #64]	; 0x40
 8011c62:	2101      	movs	r1, #1
 8011c64:	69b8      	ldr	r0, [r7, #24]
 8011c66:	f7ff fecb 	bl	8011a00 <xQueueGenericReset>
 8011c6a:	bf00      	nop
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
	...

08011c74 <xQueueGenericSend>:
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b08e      	sub	sp, #56	; 0x38
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	607a      	str	r2, [r7, #4]
 8011c80:	603b      	str	r3, [r7, #0]
 8011c82:	2300      	movs	r3, #0
 8011c84:	637b      	str	r3, [r7, #52]	; 0x34
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	633b      	str	r3, [r7, #48]	; 0x30
 8011c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d10a      	bne.n	8011ca6 <xQueueGenericSend+0x32>
 8011c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c94:	f383 8811 	msr	BASEPRI, r3
 8011c98:	f3bf 8f6f 	isb	sy
 8011c9c:	f3bf 8f4f 	dsb	sy
 8011ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ca2:	bf00      	nop
 8011ca4:	e7fe      	b.n	8011ca4 <xQueueGenericSend+0x30>
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d103      	bne.n	8011cb4 <xQueueGenericSend+0x40>
 8011cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d101      	bne.n	8011cb8 <xQueueGenericSend+0x44>
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	e000      	b.n	8011cba <xQueueGenericSend+0x46>
 8011cb8:	2300      	movs	r3, #0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d10a      	bne.n	8011cd4 <xQueueGenericSend+0x60>
 8011cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc2:	f383 8811 	msr	BASEPRI, r3
 8011cc6:	f3bf 8f6f 	isb	sy
 8011cca:	f3bf 8f4f 	dsb	sy
 8011cce:	627b      	str	r3, [r7, #36]	; 0x24
 8011cd0:	bf00      	nop
 8011cd2:	e7fe      	b.n	8011cd2 <xQueueGenericSend+0x5e>
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	2b02      	cmp	r3, #2
 8011cd8:	d103      	bne.n	8011ce2 <xQueueGenericSend+0x6e>
 8011cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d101      	bne.n	8011ce6 <xQueueGenericSend+0x72>
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	e000      	b.n	8011ce8 <xQueueGenericSend+0x74>
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d10a      	bne.n	8011d02 <xQueueGenericSend+0x8e>
 8011cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf0:	f383 8811 	msr	BASEPRI, r3
 8011cf4:	f3bf 8f6f 	isb	sy
 8011cf8:	f3bf 8f4f 	dsb	sy
 8011cfc:	623b      	str	r3, [r7, #32]
 8011cfe:	bf00      	nop
 8011d00:	e7fe      	b.n	8011d00 <xQueueGenericSend+0x8c>
 8011d02:	f001 fa0d 	bl	8013120 <xTaskGetSchedulerState>
 8011d06:	4603      	mov	r3, r0
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d102      	bne.n	8011d12 <xQueueGenericSend+0x9e>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d101      	bne.n	8011d16 <xQueueGenericSend+0xa2>
 8011d12:	2301      	movs	r3, #1
 8011d14:	e000      	b.n	8011d18 <xQueueGenericSend+0xa4>
 8011d16:	2300      	movs	r3, #0
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d10a      	bne.n	8011d32 <xQueueGenericSend+0xbe>
 8011d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d20:	f383 8811 	msr	BASEPRI, r3
 8011d24:	f3bf 8f6f 	isb	sy
 8011d28:	f3bf 8f4f 	dsb	sy
 8011d2c:	61fb      	str	r3, [r7, #28]
 8011d2e:	bf00      	nop
 8011d30:	e7fe      	b.n	8011d30 <xQueueGenericSend+0xbc>
 8011d32:	f002 f9f7 	bl	8014124 <vPortEnterCritical>
 8011d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d302      	bcc.n	8011d48 <xQueueGenericSend+0xd4>
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	2b02      	cmp	r3, #2
 8011d46:	d129      	bne.n	8011d9c <xQueueGenericSend+0x128>
 8011d48:	683a      	ldr	r2, [r7, #0]
 8011d4a:	68b9      	ldr	r1, [r7, #8]
 8011d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d4e:	f000 fa47 	bl	80121e0 <prvCopyDataToQueue>
 8011d52:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d010      	beq.n	8011d7e <xQueueGenericSend+0x10a>
 8011d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5e:	3324      	adds	r3, #36	; 0x24
 8011d60:	4618      	mov	r0, r3
 8011d62:	f001 f81d 	bl	8012da0 <xTaskRemoveFromEventList>
 8011d66:	4603      	mov	r3, r0
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d013      	beq.n	8011d94 <xQueueGenericSend+0x120>
 8011d6c:	4b3f      	ldr	r3, [pc, #252]	; (8011e6c <xQueueGenericSend+0x1f8>)
 8011d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d72:	601a      	str	r2, [r3, #0]
 8011d74:	f3bf 8f4f 	dsb	sy
 8011d78:	f3bf 8f6f 	isb	sy
 8011d7c:	e00a      	b.n	8011d94 <xQueueGenericSend+0x120>
 8011d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d007      	beq.n	8011d94 <xQueueGenericSend+0x120>
 8011d84:	4b39      	ldr	r3, [pc, #228]	; (8011e6c <xQueueGenericSend+0x1f8>)
 8011d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d8a:	601a      	str	r2, [r3, #0]
 8011d8c:	f3bf 8f4f 	dsb	sy
 8011d90:	f3bf 8f6f 	isb	sy
 8011d94:	f002 f9f6 	bl	8014184 <vPortExitCritical>
 8011d98:	2301      	movs	r3, #1
 8011d9a:	e063      	b.n	8011e64 <xQueueGenericSend+0x1f0>
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d103      	bne.n	8011daa <xQueueGenericSend+0x136>
 8011da2:	f002 f9ef 	bl	8014184 <vPortExitCritical>
 8011da6:	2300      	movs	r3, #0
 8011da8:	e05c      	b.n	8011e64 <xQueueGenericSend+0x1f0>
 8011daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d106      	bne.n	8011dbe <xQueueGenericSend+0x14a>
 8011db0:	f107 0314 	add.w	r3, r7, #20
 8011db4:	4618      	mov	r0, r3
 8011db6:	f001 f855 	bl	8012e64 <vTaskInternalSetTimeOutState>
 8011dba:	2301      	movs	r3, #1
 8011dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8011dbe:	f002 f9e1 	bl	8014184 <vPortExitCritical>
 8011dc2:	f000 fdc9 	bl	8012958 <vTaskSuspendAll>
 8011dc6:	f002 f9ad 	bl	8014124 <vPortEnterCritical>
 8011dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011dd0:	b25b      	sxtb	r3, r3
 8011dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dd6:	d103      	bne.n	8011de0 <xQueueGenericSend+0x16c>
 8011dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011de6:	b25b      	sxtb	r3, r3
 8011de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dec:	d103      	bne.n	8011df6 <xQueueGenericSend+0x182>
 8011dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df0:	2200      	movs	r2, #0
 8011df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011df6:	f002 f9c5 	bl	8014184 <vPortExitCritical>
 8011dfa:	1d3a      	adds	r2, r7, #4
 8011dfc:	f107 0314 	add.w	r3, r7, #20
 8011e00:	4611      	mov	r1, r2
 8011e02:	4618      	mov	r0, r3
 8011e04:	f001 f844 	bl	8012e90 <xTaskCheckForTimeOut>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d124      	bne.n	8011e58 <xQueueGenericSend+0x1e4>
 8011e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e10:	f000 fade 	bl	80123d0 <prvIsQueueFull>
 8011e14:	4603      	mov	r3, r0
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d018      	beq.n	8011e4c <xQueueGenericSend+0x1d8>
 8011e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1c:	3310      	adds	r3, #16
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	4611      	mov	r1, r2
 8011e22:	4618      	mov	r0, r3
 8011e24:	f000 ff6c 	bl	8012d00 <vTaskPlaceOnEventList>
 8011e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e2a:	f000 fa69 	bl	8012300 <prvUnlockQueue>
 8011e2e:	f000 fda1 	bl	8012974 <xTaskResumeAll>
 8011e32:	4603      	mov	r3, r0
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	f47f af7c 	bne.w	8011d32 <xQueueGenericSend+0xbe>
 8011e3a:	4b0c      	ldr	r3, [pc, #48]	; (8011e6c <xQueueGenericSend+0x1f8>)
 8011e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e40:	601a      	str	r2, [r3, #0]
 8011e42:	f3bf 8f4f 	dsb	sy
 8011e46:	f3bf 8f6f 	isb	sy
 8011e4a:	e772      	b.n	8011d32 <xQueueGenericSend+0xbe>
 8011e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e4e:	f000 fa57 	bl	8012300 <prvUnlockQueue>
 8011e52:	f000 fd8f 	bl	8012974 <xTaskResumeAll>
 8011e56:	e76c      	b.n	8011d32 <xQueueGenericSend+0xbe>
 8011e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e5a:	f000 fa51 	bl	8012300 <prvUnlockQueue>
 8011e5e:	f000 fd89 	bl	8012974 <xTaskResumeAll>
 8011e62:	2300      	movs	r3, #0
 8011e64:	4618      	mov	r0, r3
 8011e66:	3738      	adds	r7, #56	; 0x38
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	e000ed04 	.word	0xe000ed04

08011e70 <xQueueGenericSendFromISR>:
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b090      	sub	sp, #64	; 0x40
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	607a      	str	r2, [r7, #4]
 8011e7c:	603b      	str	r3, [r7, #0]
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d10a      	bne.n	8011e9e <xQueueGenericSendFromISR+0x2e>
 8011e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8c:	f383 8811 	msr	BASEPRI, r3
 8011e90:	f3bf 8f6f 	isb	sy
 8011e94:	f3bf 8f4f 	dsb	sy
 8011e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e9a:	bf00      	nop
 8011e9c:	e7fe      	b.n	8011e9c <xQueueGenericSendFromISR+0x2c>
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d103      	bne.n	8011eac <xQueueGenericSendFromISR+0x3c>
 8011ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d101      	bne.n	8011eb0 <xQueueGenericSendFromISR+0x40>
 8011eac:	2301      	movs	r3, #1
 8011eae:	e000      	b.n	8011eb2 <xQueueGenericSendFromISR+0x42>
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d10a      	bne.n	8011ecc <xQueueGenericSendFromISR+0x5c>
 8011eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eba:	f383 8811 	msr	BASEPRI, r3
 8011ebe:	f3bf 8f6f 	isb	sy
 8011ec2:	f3bf 8f4f 	dsb	sy
 8011ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8011ec8:	bf00      	nop
 8011eca:	e7fe      	b.n	8011eca <xQueueGenericSendFromISR+0x5a>
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	2b02      	cmp	r3, #2
 8011ed0:	d103      	bne.n	8011eda <xQueueGenericSendFromISR+0x6a>
 8011ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d101      	bne.n	8011ede <xQueueGenericSendFromISR+0x6e>
 8011eda:	2301      	movs	r3, #1
 8011edc:	e000      	b.n	8011ee0 <xQueueGenericSendFromISR+0x70>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d10a      	bne.n	8011efa <xQueueGenericSendFromISR+0x8a>
 8011ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee8:	f383 8811 	msr	BASEPRI, r3
 8011eec:	f3bf 8f6f 	isb	sy
 8011ef0:	f3bf 8f4f 	dsb	sy
 8011ef4:	623b      	str	r3, [r7, #32]
 8011ef6:	bf00      	nop
 8011ef8:	e7fe      	b.n	8011ef8 <xQueueGenericSendFromISR+0x88>
 8011efa:	f002 f9f5 	bl	80142e8 <vPortValidateInterruptPriority>
 8011efe:	f3ef 8211 	mrs	r2, BASEPRI
 8011f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f06:	f383 8811 	msr	BASEPRI, r3
 8011f0a:	f3bf 8f6f 	isb	sy
 8011f0e:	f3bf 8f4f 	dsb	sy
 8011f12:	61fa      	str	r2, [r7, #28]
 8011f14:	61bb      	str	r3, [r7, #24]
 8011f16:	69fb      	ldr	r3, [r7, #28]
 8011f18:	637b      	str	r3, [r7, #52]	; 0x34
 8011f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d302      	bcc.n	8011f2c <xQueueGenericSendFromISR+0xbc>
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	2b02      	cmp	r3, #2
 8011f2a:	d12f      	bne.n	8011f8c <xQueueGenericSendFromISR+0x11c>
 8011f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f3c:	683a      	ldr	r2, [r7, #0]
 8011f3e:	68b9      	ldr	r1, [r7, #8]
 8011f40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011f42:	f000 f94d 	bl	80121e0 <prvCopyDataToQueue>
 8011f46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f4e:	d112      	bne.n	8011f76 <xQueueGenericSendFromISR+0x106>
 8011f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d016      	beq.n	8011f86 <xQueueGenericSendFromISR+0x116>
 8011f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5a:	3324      	adds	r3, #36	; 0x24
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f000 ff1f 	bl	8012da0 <xTaskRemoveFromEventList>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d00e      	beq.n	8011f86 <xQueueGenericSendFromISR+0x116>
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00b      	beq.n	8011f86 <xQueueGenericSendFromISR+0x116>
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2201      	movs	r2, #1
 8011f72:	601a      	str	r2, [r3, #0]
 8011f74:	e007      	b.n	8011f86 <xQueueGenericSendFromISR+0x116>
 8011f76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	b25a      	sxtb	r2, r3
 8011f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f86:	2301      	movs	r3, #1
 8011f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f8a:	e001      	b.n	8011f90 <xQueueGenericSendFromISR+0x120>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f92:	617b      	str	r3, [r7, #20]
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	f383 8811 	msr	BASEPRI, r3
 8011f9a:	bf00      	nop
 8011f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3740      	adds	r7, #64	; 0x40
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
	...

08011fa8 <xQueueReceive>:
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b08c      	sub	sp, #48	; 0x30
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	60b9      	str	r1, [r7, #8]
 8011fb2:	607a      	str	r2, [r7, #4]
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8011fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d10a      	bne.n	8011fd8 <xQueueReceive+0x30>
 8011fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc6:	f383 8811 	msr	BASEPRI, r3
 8011fca:	f3bf 8f6f 	isb	sy
 8011fce:	f3bf 8f4f 	dsb	sy
 8011fd2:	623b      	str	r3, [r7, #32]
 8011fd4:	bf00      	nop
 8011fd6:	e7fe      	b.n	8011fd6 <xQueueReceive+0x2e>
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d103      	bne.n	8011fe6 <xQueueReceive+0x3e>
 8011fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d101      	bne.n	8011fea <xQueueReceive+0x42>
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	e000      	b.n	8011fec <xQueueReceive+0x44>
 8011fea:	2300      	movs	r3, #0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d10a      	bne.n	8012006 <xQueueReceive+0x5e>
 8011ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff4:	f383 8811 	msr	BASEPRI, r3
 8011ff8:	f3bf 8f6f 	isb	sy
 8011ffc:	f3bf 8f4f 	dsb	sy
 8012000:	61fb      	str	r3, [r7, #28]
 8012002:	bf00      	nop
 8012004:	e7fe      	b.n	8012004 <xQueueReceive+0x5c>
 8012006:	f001 f88b 	bl	8013120 <xTaskGetSchedulerState>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	d102      	bne.n	8012016 <xQueueReceive+0x6e>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <xQueueReceive+0x72>
 8012016:	2301      	movs	r3, #1
 8012018:	e000      	b.n	801201c <xQueueReceive+0x74>
 801201a:	2300      	movs	r3, #0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d10a      	bne.n	8012036 <xQueueReceive+0x8e>
 8012020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012024:	f383 8811 	msr	BASEPRI, r3
 8012028:	f3bf 8f6f 	isb	sy
 801202c:	f3bf 8f4f 	dsb	sy
 8012030:	61bb      	str	r3, [r7, #24]
 8012032:	bf00      	nop
 8012034:	e7fe      	b.n	8012034 <xQueueReceive+0x8c>
 8012036:	f002 f875 	bl	8014124 <vPortEnterCritical>
 801203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801203e:	627b      	str	r3, [r7, #36]	; 0x24
 8012040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012042:	2b00      	cmp	r3, #0
 8012044:	d01f      	beq.n	8012086 <xQueueReceive+0xde>
 8012046:	68b9      	ldr	r1, [r7, #8]
 8012048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801204a:	f000 f933 	bl	80122b4 <prvCopyDataFromQueue>
 801204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012050:	1e5a      	subs	r2, r3, #1
 8012052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012054:	639a      	str	r2, [r3, #56]	; 0x38
 8012056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012058:	691b      	ldr	r3, [r3, #16]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d00f      	beq.n	801207e <xQueueReceive+0xd6>
 801205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012060:	3310      	adds	r3, #16
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fe9c 	bl	8012da0 <xTaskRemoveFromEventList>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d007      	beq.n	801207e <xQueueReceive+0xd6>
 801206e:	4b3d      	ldr	r3, [pc, #244]	; (8012164 <xQueueReceive+0x1bc>)
 8012070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012074:	601a      	str	r2, [r3, #0]
 8012076:	f3bf 8f4f 	dsb	sy
 801207a:	f3bf 8f6f 	isb	sy
 801207e:	f002 f881 	bl	8014184 <vPortExitCritical>
 8012082:	2301      	movs	r3, #1
 8012084:	e069      	b.n	801215a <xQueueReceive+0x1b2>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d103      	bne.n	8012094 <xQueueReceive+0xec>
 801208c:	f002 f87a 	bl	8014184 <vPortExitCritical>
 8012090:	2300      	movs	r3, #0
 8012092:	e062      	b.n	801215a <xQueueReceive+0x1b2>
 8012094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012096:	2b00      	cmp	r3, #0
 8012098:	d106      	bne.n	80120a8 <xQueueReceive+0x100>
 801209a:	f107 0310 	add.w	r3, r7, #16
 801209e:	4618      	mov	r0, r3
 80120a0:	f000 fee0 	bl	8012e64 <vTaskInternalSetTimeOutState>
 80120a4:	2301      	movs	r3, #1
 80120a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120a8:	f002 f86c 	bl	8014184 <vPortExitCritical>
 80120ac:	f000 fc54 	bl	8012958 <vTaskSuspendAll>
 80120b0:	f002 f838 	bl	8014124 <vPortEnterCritical>
 80120b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80120ba:	b25b      	sxtb	r3, r3
 80120bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120c0:	d103      	bne.n	80120ca <xQueueReceive+0x122>
 80120c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c4:	2200      	movs	r2, #0
 80120c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80120ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120d0:	b25b      	sxtb	r3, r3
 80120d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120d6:	d103      	bne.n	80120e0 <xQueueReceive+0x138>
 80120d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120da:	2200      	movs	r2, #0
 80120dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80120e0:	f002 f850 	bl	8014184 <vPortExitCritical>
 80120e4:	1d3a      	adds	r2, r7, #4
 80120e6:	f107 0310 	add.w	r3, r7, #16
 80120ea:	4611      	mov	r1, r2
 80120ec:	4618      	mov	r0, r3
 80120ee:	f000 fecf 	bl	8012e90 <xTaskCheckForTimeOut>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d123      	bne.n	8012140 <xQueueReceive+0x198>
 80120f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120fa:	f000 f953 	bl	80123a4 <prvIsQueueEmpty>
 80120fe:	4603      	mov	r3, r0
 8012100:	2b00      	cmp	r3, #0
 8012102:	d017      	beq.n	8012134 <xQueueReceive+0x18c>
 8012104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012106:	3324      	adds	r3, #36	; 0x24
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	4611      	mov	r1, r2
 801210c:	4618      	mov	r0, r3
 801210e:	f000 fdf7 	bl	8012d00 <vTaskPlaceOnEventList>
 8012112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012114:	f000 f8f4 	bl	8012300 <prvUnlockQueue>
 8012118:	f000 fc2c 	bl	8012974 <xTaskResumeAll>
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	d189      	bne.n	8012036 <xQueueReceive+0x8e>
 8012122:	4b10      	ldr	r3, [pc, #64]	; (8012164 <xQueueReceive+0x1bc>)
 8012124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012128:	601a      	str	r2, [r3, #0]
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	f3bf 8f6f 	isb	sy
 8012132:	e780      	b.n	8012036 <xQueueReceive+0x8e>
 8012134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012136:	f000 f8e3 	bl	8012300 <prvUnlockQueue>
 801213a:	f000 fc1b 	bl	8012974 <xTaskResumeAll>
 801213e:	e77a      	b.n	8012036 <xQueueReceive+0x8e>
 8012140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012142:	f000 f8dd 	bl	8012300 <prvUnlockQueue>
 8012146:	f000 fc15 	bl	8012974 <xTaskResumeAll>
 801214a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801214c:	f000 f92a 	bl	80123a4 <prvIsQueueEmpty>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	f43f af6f 	beq.w	8012036 <xQueueReceive+0x8e>
 8012158:	2300      	movs	r3, #0
 801215a:	4618      	mov	r0, r3
 801215c:	3730      	adds	r7, #48	; 0x30
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}
 8012162:	bf00      	nop
 8012164:	e000ed04 	.word	0xe000ed04

08012168 <uxQueueMessagesWaiting>:
 8012168:	b580      	push	{r7, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d10a      	bne.n	801218c <uxQueueMessagesWaiting+0x24>
 8012176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801217a:	f383 8811 	msr	BASEPRI, r3
 801217e:	f3bf 8f6f 	isb	sy
 8012182:	f3bf 8f4f 	dsb	sy
 8012186:	60bb      	str	r3, [r7, #8]
 8012188:	bf00      	nop
 801218a:	e7fe      	b.n	801218a <uxQueueMessagesWaiting+0x22>
 801218c:	f001 ffca 	bl	8014124 <vPortEnterCritical>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012194:	60fb      	str	r3, [r7, #12]
 8012196:	f001 fff5 	bl	8014184 <vPortExitCritical>
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	4618      	mov	r0, r3
 801219e:	3710      	adds	r7, #16
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <uxQueueMessagesWaitingFromISR>:
 80121a4:	b480      	push	{r7}
 80121a6:	b087      	sub	sp, #28
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	617b      	str	r3, [r7, #20]
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d10a      	bne.n	80121cc <uxQueueMessagesWaitingFromISR+0x28>
 80121b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ba:	f383 8811 	msr	BASEPRI, r3
 80121be:	f3bf 8f6f 	isb	sy
 80121c2:	f3bf 8f4f 	dsb	sy
 80121c6:	60fb      	str	r3, [r7, #12]
 80121c8:	bf00      	nop
 80121ca:	e7fe      	b.n	80121ca <uxQueueMessagesWaitingFromISR+0x26>
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121d0:	613b      	str	r3, [r7, #16]
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	4618      	mov	r0, r3
 80121d6:	371c      	adds	r7, #28
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr

080121e0 <prvCopyDataToQueue>:
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b086      	sub	sp, #24
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
 80121ec:	2300      	movs	r3, #0
 80121ee:	617b      	str	r3, [r7, #20]
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121f4:	613b      	str	r3, [r7, #16]
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d10d      	bne.n	801221a <prvCopyDataToQueue+0x3a>
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d14d      	bne.n	80122a2 <prvCopyDataToQueue+0xc2>
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	689b      	ldr	r3, [r3, #8]
 801220a:	4618      	mov	r0, r3
 801220c:	f000 ffa6 	bl	801315c <xTaskPriorityDisinherit>
 8012210:	6178      	str	r0, [r7, #20]
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2200      	movs	r2, #0
 8012216:	609a      	str	r2, [r3, #8]
 8012218:	e043      	b.n	80122a2 <prvCopyDataToQueue+0xc2>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d119      	bne.n	8012254 <prvCopyDataToQueue+0x74>
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	6858      	ldr	r0, [r3, #4]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012228:	461a      	mov	r2, r3
 801222a:	68b9      	ldr	r1, [r7, #8]
 801222c:	f004 f96d 	bl	801650a <memcpy>
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	685a      	ldr	r2, [r3, #4]
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012238:	441a      	add	r2, r3
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	605a      	str	r2, [r3, #4]
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	685a      	ldr	r2, [r3, #4]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	689b      	ldr	r3, [r3, #8]
 8012246:	429a      	cmp	r2, r3
 8012248:	d32b      	bcc.n	80122a2 <prvCopyDataToQueue+0xc2>
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	681a      	ldr	r2, [r3, #0]
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	605a      	str	r2, [r3, #4]
 8012252:	e026      	b.n	80122a2 <prvCopyDataToQueue+0xc2>
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	68d8      	ldr	r0, [r3, #12]
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801225c:	461a      	mov	r2, r3
 801225e:	68b9      	ldr	r1, [r7, #8]
 8012260:	f004 f953 	bl	801650a <memcpy>
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	68da      	ldr	r2, [r3, #12]
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801226c:	425b      	negs	r3, r3
 801226e:	441a      	add	r2, r3
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	60da      	str	r2, [r3, #12]
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	68da      	ldr	r2, [r3, #12]
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	429a      	cmp	r2, r3
 801227e:	d207      	bcs.n	8012290 <prvCopyDataToQueue+0xb0>
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	689a      	ldr	r2, [r3, #8]
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012288:	425b      	negs	r3, r3
 801228a:	441a      	add	r2, r3
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	60da      	str	r2, [r3, #12]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2b02      	cmp	r3, #2
 8012294:	d105      	bne.n	80122a2 <prvCopyDataToQueue+0xc2>
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d002      	beq.n	80122a2 <prvCopyDataToQueue+0xc2>
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	3b01      	subs	r3, #1
 80122a0:	613b      	str	r3, [r7, #16]
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	1c5a      	adds	r2, r3, #1
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	639a      	str	r2, [r3, #56]	; 0x38
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	4618      	mov	r0, r3
 80122ae:	3718      	adds	r7, #24
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <prvCopyDataFromQueue>:
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	6039      	str	r1, [r7, #0]
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d018      	beq.n	80122f8 <prvCopyDataFromQueue+0x44>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	68da      	ldr	r2, [r3, #12]
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ce:	441a      	add	r2, r3
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	60da      	str	r2, [r3, #12]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	68da      	ldr	r2, [r3, #12]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	689b      	ldr	r3, [r3, #8]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d303      	bcc.n	80122e8 <prvCopyDataFromQueue+0x34>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681a      	ldr	r2, [r3, #0]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	60da      	str	r2, [r3, #12]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	68d9      	ldr	r1, [r3, #12]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122f0:	461a      	mov	r2, r3
 80122f2:	6838      	ldr	r0, [r7, #0]
 80122f4:	f004 f909 	bl	801650a <memcpy>
 80122f8:	bf00      	nop
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <prvUnlockQueue>:
 8012300:	b580      	push	{r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	f001 ff0c 	bl	8014124 <vPortEnterCritical>
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012312:	73fb      	strb	r3, [r7, #15]
 8012314:	e011      	b.n	801233a <prvUnlockQueue+0x3a>
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801231a:	2b00      	cmp	r3, #0
 801231c:	d012      	beq.n	8012344 <prvUnlockQueue+0x44>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	3324      	adds	r3, #36	; 0x24
 8012322:	4618      	mov	r0, r3
 8012324:	f000 fd3c 	bl	8012da0 <xTaskRemoveFromEventList>
 8012328:	4603      	mov	r3, r0
 801232a:	2b00      	cmp	r3, #0
 801232c:	d001      	beq.n	8012332 <prvUnlockQueue+0x32>
 801232e:	f000 fe11 	bl	8012f54 <vTaskMissedYield>
 8012332:	7bfb      	ldrb	r3, [r7, #15]
 8012334:	3b01      	subs	r3, #1
 8012336:	b2db      	uxtb	r3, r3
 8012338:	73fb      	strb	r3, [r7, #15]
 801233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801233e:	2b00      	cmp	r3, #0
 8012340:	dce9      	bgt.n	8012316 <prvUnlockQueue+0x16>
 8012342:	e000      	b.n	8012346 <prvUnlockQueue+0x46>
 8012344:	bf00      	nop
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	22ff      	movs	r2, #255	; 0xff
 801234a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801234e:	f001 ff19 	bl	8014184 <vPortExitCritical>
 8012352:	f001 fee7 	bl	8014124 <vPortEnterCritical>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801235c:	73bb      	strb	r3, [r7, #14]
 801235e:	e011      	b.n	8012384 <prvUnlockQueue+0x84>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	691b      	ldr	r3, [r3, #16]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d012      	beq.n	801238e <prvUnlockQueue+0x8e>
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	3310      	adds	r3, #16
 801236c:	4618      	mov	r0, r3
 801236e:	f000 fd17 	bl	8012da0 <xTaskRemoveFromEventList>
 8012372:	4603      	mov	r3, r0
 8012374:	2b00      	cmp	r3, #0
 8012376:	d001      	beq.n	801237c <prvUnlockQueue+0x7c>
 8012378:	f000 fdec 	bl	8012f54 <vTaskMissedYield>
 801237c:	7bbb      	ldrb	r3, [r7, #14]
 801237e:	3b01      	subs	r3, #1
 8012380:	b2db      	uxtb	r3, r3
 8012382:	73bb      	strb	r3, [r7, #14]
 8012384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012388:	2b00      	cmp	r3, #0
 801238a:	dce9      	bgt.n	8012360 <prvUnlockQueue+0x60>
 801238c:	e000      	b.n	8012390 <prvUnlockQueue+0x90>
 801238e:	bf00      	nop
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	22ff      	movs	r2, #255	; 0xff
 8012394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012398:	f001 fef4 	bl	8014184 <vPortExitCritical>
 801239c:	bf00      	nop
 801239e:	3710      	adds	r7, #16
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <prvIsQueueEmpty>:
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	f001 feba 	bl	8014124 <vPortEnterCritical>
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d102      	bne.n	80123be <prvIsQueueEmpty+0x1a>
 80123b8:	2301      	movs	r3, #1
 80123ba:	60fb      	str	r3, [r7, #12]
 80123bc:	e001      	b.n	80123c2 <prvIsQueueEmpty+0x1e>
 80123be:	2300      	movs	r3, #0
 80123c0:	60fb      	str	r3, [r7, #12]
 80123c2:	f001 fedf 	bl	8014184 <vPortExitCritical>
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	4618      	mov	r0, r3
 80123ca:	3710      	adds	r7, #16
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <prvIsQueueFull>:
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	f001 fea4 	bl	8014124 <vPortEnterCritical>
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d102      	bne.n	80123ee <prvIsQueueFull+0x1e>
 80123e8:	2301      	movs	r3, #1
 80123ea:	60fb      	str	r3, [r7, #12]
 80123ec:	e001      	b.n	80123f2 <prvIsQueueFull+0x22>
 80123ee:	2300      	movs	r3, #0
 80123f0:	60fb      	str	r3, [r7, #12]
 80123f2:	f001 fec7 	bl	8014184 <vPortExitCritical>
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	4618      	mov	r0, r3
 80123fa:	3710      	adds	r7, #16
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <vQueueAddToRegistry>:
 8012400:	b480      	push	{r7}
 8012402:	b085      	sub	sp, #20
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
 801240a:	2300      	movs	r3, #0
 801240c:	60fb      	str	r3, [r7, #12]
 801240e:	e014      	b.n	801243a <vQueueAddToRegistry+0x3a>
 8012410:	4a0f      	ldr	r2, [pc, #60]	; (8012450 <vQueueAddToRegistry+0x50>)
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d10b      	bne.n	8012434 <vQueueAddToRegistry+0x34>
 801241c:	490c      	ldr	r1, [pc, #48]	; (8012450 <vQueueAddToRegistry+0x50>)
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	683a      	ldr	r2, [r7, #0]
 8012422:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8012426:	4a0a      	ldr	r2, [pc, #40]	; (8012450 <vQueueAddToRegistry+0x50>)
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	00db      	lsls	r3, r3, #3
 801242c:	4413      	add	r3, r2
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	605a      	str	r2, [r3, #4]
 8012432:	e006      	b.n	8012442 <vQueueAddToRegistry+0x42>
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	3301      	adds	r3, #1
 8012438:	60fb      	str	r3, [r7, #12]
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2b07      	cmp	r3, #7
 801243e:	d9e7      	bls.n	8012410 <vQueueAddToRegistry+0x10>
 8012440:	bf00      	nop
 8012442:	bf00      	nop
 8012444:	3714      	adds	r7, #20
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr
 801244e:	bf00      	nop
 8012450:	20004950 	.word	0x20004950

08012454 <vQueueWaitForMessageRestricted>:
 8012454:	b580      	push	{r7, lr}
 8012456:	b086      	sub	sp, #24
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	607a      	str	r2, [r7, #4]
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	617b      	str	r3, [r7, #20]
 8012464:	f001 fe5e 	bl	8014124 <vPortEnterCritical>
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801246e:	b25b      	sxtb	r3, r3
 8012470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012474:	d103      	bne.n	801247e <vQueueWaitForMessageRestricted+0x2a>
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	2200      	movs	r2, #0
 801247a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012484:	b25b      	sxtb	r3, r3
 8012486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801248a:	d103      	bne.n	8012494 <vQueueWaitForMessageRestricted+0x40>
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	2200      	movs	r2, #0
 8012490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012494:	f001 fe76 	bl	8014184 <vPortExitCritical>
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801249c:	2b00      	cmp	r3, #0
 801249e:	d106      	bne.n	80124ae <vQueueWaitForMessageRestricted+0x5a>
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	3324      	adds	r3, #36	; 0x24
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	68b9      	ldr	r1, [r7, #8]
 80124a8:	4618      	mov	r0, r3
 80124aa:	f000 fc4d 	bl	8012d48 <vTaskPlaceOnEventListRestricted>
 80124ae:	6978      	ldr	r0, [r7, #20]
 80124b0:	f7ff ff26 	bl	8012300 <prvUnlockQueue>
 80124b4:	bf00      	nop
 80124b6:	3718      	adds	r7, #24
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <xTaskCreateStatic>:
 80124bc:	b580      	push	{r7, lr}
 80124be:	b08e      	sub	sp, #56	; 0x38
 80124c0:	af04      	add	r7, sp, #16
 80124c2:	60f8      	str	r0, [r7, #12]
 80124c4:	60b9      	str	r1, [r7, #8]
 80124c6:	607a      	str	r2, [r7, #4]
 80124c8:	603b      	str	r3, [r7, #0]
 80124ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d10a      	bne.n	80124e6 <xTaskCreateStatic+0x2a>
 80124d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d4:	f383 8811 	msr	BASEPRI, r3
 80124d8:	f3bf 8f6f 	isb	sy
 80124dc:	f3bf 8f4f 	dsb	sy
 80124e0:	623b      	str	r3, [r7, #32]
 80124e2:	bf00      	nop
 80124e4:	e7fe      	b.n	80124e4 <xTaskCreateStatic+0x28>
 80124e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d10a      	bne.n	8012502 <xTaskCreateStatic+0x46>
 80124ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f0:	f383 8811 	msr	BASEPRI, r3
 80124f4:	f3bf 8f6f 	isb	sy
 80124f8:	f3bf 8f4f 	dsb	sy
 80124fc:	61fb      	str	r3, [r7, #28]
 80124fe:	bf00      	nop
 8012500:	e7fe      	b.n	8012500 <xTaskCreateStatic+0x44>
 8012502:	23b0      	movs	r3, #176	; 0xb0
 8012504:	613b      	str	r3, [r7, #16]
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	2bb0      	cmp	r3, #176	; 0xb0
 801250a:	d00a      	beq.n	8012522 <xTaskCreateStatic+0x66>
 801250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012510:	f383 8811 	msr	BASEPRI, r3
 8012514:	f3bf 8f6f 	isb	sy
 8012518:	f3bf 8f4f 	dsb	sy
 801251c:	61bb      	str	r3, [r7, #24]
 801251e:	bf00      	nop
 8012520:	e7fe      	b.n	8012520 <xTaskCreateStatic+0x64>
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012526:	2b00      	cmp	r3, #0
 8012528:	d01e      	beq.n	8012568 <xTaskCreateStatic+0xac>
 801252a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801252c:	2b00      	cmp	r3, #0
 801252e:	d01b      	beq.n	8012568 <xTaskCreateStatic+0xac>
 8012530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012532:	627b      	str	r3, [r7, #36]	; 0x24
 8012534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012538:	631a      	str	r2, [r3, #48]	; 0x30
 801253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801253c:	2202      	movs	r2, #2
 801253e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8012542:	2300      	movs	r3, #0
 8012544:	9303      	str	r3, [sp, #12]
 8012546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012548:	9302      	str	r3, [sp, #8]
 801254a:	f107 0314 	add.w	r3, r7, #20
 801254e:	9301      	str	r3, [sp, #4]
 8012550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012552:	9300      	str	r3, [sp, #0]
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	68b9      	ldr	r1, [r7, #8]
 801255a:	68f8      	ldr	r0, [r7, #12]
 801255c:	f000 f850 	bl	8012600 <prvInitialiseNewTask>
 8012560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012562:	f000 f8eb 	bl	801273c <prvAddNewTaskToReadyList>
 8012566:	e001      	b.n	801256c <xTaskCreateStatic+0xb0>
 8012568:	2300      	movs	r3, #0
 801256a:	617b      	str	r3, [r7, #20]
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	4618      	mov	r0, r3
 8012570:	3728      	adds	r7, #40	; 0x28
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <xTaskCreate>:
 8012576:	b580      	push	{r7, lr}
 8012578:	b08c      	sub	sp, #48	; 0x30
 801257a:	af04      	add	r7, sp, #16
 801257c:	60f8      	str	r0, [r7, #12]
 801257e:	60b9      	str	r1, [r7, #8]
 8012580:	603b      	str	r3, [r7, #0]
 8012582:	4613      	mov	r3, r2
 8012584:	80fb      	strh	r3, [r7, #6]
 8012586:	88fb      	ldrh	r3, [r7, #6]
 8012588:	009b      	lsls	r3, r3, #2
 801258a:	4618      	mov	r0, r3
 801258c:	f001 feec 	bl	8014368 <pvPortMalloc>
 8012590:	6178      	str	r0, [r7, #20]
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d00e      	beq.n	80125b6 <xTaskCreate+0x40>
 8012598:	20b0      	movs	r0, #176	; 0xb0
 801259a:	f001 fee5 	bl	8014368 <pvPortMalloc>
 801259e:	61f8      	str	r0, [r7, #28]
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d003      	beq.n	80125ae <xTaskCreate+0x38>
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	697a      	ldr	r2, [r7, #20]
 80125aa:	631a      	str	r2, [r3, #48]	; 0x30
 80125ac:	e005      	b.n	80125ba <xTaskCreate+0x44>
 80125ae:	6978      	ldr	r0, [r7, #20]
 80125b0:	f001 ffa6 	bl	8014500 <vPortFree>
 80125b4:	e001      	b.n	80125ba <xTaskCreate+0x44>
 80125b6:	2300      	movs	r3, #0
 80125b8:	61fb      	str	r3, [r7, #28]
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d017      	beq.n	80125f0 <xTaskCreate+0x7a>
 80125c0:	69fb      	ldr	r3, [r7, #28]
 80125c2:	2200      	movs	r2, #0
 80125c4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80125c8:	88fa      	ldrh	r2, [r7, #6]
 80125ca:	2300      	movs	r3, #0
 80125cc:	9303      	str	r3, [sp, #12]
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	9302      	str	r3, [sp, #8]
 80125d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d4:	9301      	str	r3, [sp, #4]
 80125d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	68b9      	ldr	r1, [r7, #8]
 80125de:	68f8      	ldr	r0, [r7, #12]
 80125e0:	f000 f80e 	bl	8012600 <prvInitialiseNewTask>
 80125e4:	69f8      	ldr	r0, [r7, #28]
 80125e6:	f000 f8a9 	bl	801273c <prvAddNewTaskToReadyList>
 80125ea:	2301      	movs	r3, #1
 80125ec:	61bb      	str	r3, [r7, #24]
 80125ee:	e002      	b.n	80125f6 <xTaskCreate+0x80>
 80125f0:	f04f 33ff 	mov.w	r3, #4294967295
 80125f4:	61bb      	str	r3, [r7, #24]
 80125f6:	69bb      	ldr	r3, [r7, #24]
 80125f8:	4618      	mov	r0, r3
 80125fa:	3720      	adds	r7, #32
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <prvInitialiseNewTask>:
 8012600:	b580      	push	{r7, lr}
 8012602:	b088      	sub	sp, #32
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
 801260c:	603b      	str	r3, [r7, #0]
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012618:	3b01      	subs	r3, #1
 801261a:	009b      	lsls	r3, r3, #2
 801261c:	4413      	add	r3, r2
 801261e:	61bb      	str	r3, [r7, #24]
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	f023 0307 	bic.w	r3, r3, #7
 8012626:	61bb      	str	r3, [r7, #24]
 8012628:	69bb      	ldr	r3, [r7, #24]
 801262a:	f003 0307 	and.w	r3, r3, #7
 801262e:	2b00      	cmp	r3, #0
 8012630:	d00a      	beq.n	8012648 <prvInitialiseNewTask+0x48>
 8012632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012636:	f383 8811 	msr	BASEPRI, r3
 801263a:	f3bf 8f6f 	isb	sy
 801263e:	f3bf 8f4f 	dsb	sy
 8012642:	617b      	str	r3, [r7, #20]
 8012644:	bf00      	nop
 8012646:	e7fe      	b.n	8012646 <prvInitialiseNewTask+0x46>
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d01f      	beq.n	801268e <prvInitialiseNewTask+0x8e>
 801264e:	2300      	movs	r3, #0
 8012650:	61fb      	str	r3, [r7, #28]
 8012652:	e012      	b.n	801267a <prvInitialiseNewTask+0x7a>
 8012654:	68ba      	ldr	r2, [r7, #8]
 8012656:	69fb      	ldr	r3, [r7, #28]
 8012658:	4413      	add	r3, r2
 801265a:	7819      	ldrb	r1, [r3, #0]
 801265c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	4413      	add	r3, r2
 8012662:	3334      	adds	r3, #52	; 0x34
 8012664:	460a      	mov	r2, r1
 8012666:	701a      	strb	r2, [r3, #0]
 8012668:	68ba      	ldr	r2, [r7, #8]
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	4413      	add	r3, r2
 801266e:	781b      	ldrb	r3, [r3, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d006      	beq.n	8012682 <prvInitialiseNewTask+0x82>
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	3301      	adds	r3, #1
 8012678:	61fb      	str	r3, [r7, #28]
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	2b1f      	cmp	r3, #31
 801267e:	d9e9      	bls.n	8012654 <prvInitialiseNewTask+0x54>
 8012680:	e000      	b.n	8012684 <prvInitialiseNewTask+0x84>
 8012682:	bf00      	nop
 8012684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012686:	2200      	movs	r2, #0
 8012688:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801268c:	e003      	b.n	8012696 <prvInitialiseNewTask+0x96>
 801268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012690:	2200      	movs	r2, #0
 8012692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8012696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012698:	2b06      	cmp	r3, #6
 801269a:	d901      	bls.n	80126a0 <prvInitialiseNewTask+0xa0>
 801269c:	2306      	movs	r3, #6
 801269e:	62bb      	str	r3, [r7, #40]	; 0x28
 80126a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80126a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126aa:	655a      	str	r2, [r3, #84]	; 0x54
 80126ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ae:	2200      	movs	r2, #0
 80126b0:	659a      	str	r2, [r3, #88]	; 0x58
 80126b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b4:	3304      	adds	r3, #4
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7ff f90e 	bl	80118d8 <vListInitialiseItem>
 80126bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126be:	3318      	adds	r3, #24
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7ff f909 	bl	80118d8 <vListInitialiseItem>
 80126c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126ca:	611a      	str	r2, [r3, #16]
 80126cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ce:	f1c3 0207 	rsb	r2, r3, #7
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	619a      	str	r2, [r3, #24]
 80126d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126da:	625a      	str	r2, [r3, #36]	; 0x24
 80126dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126de:	2200      	movs	r2, #0
 80126e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80126e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e6:	2200      	movs	r2, #0
 80126e8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80126ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ee:	335c      	adds	r3, #92	; 0x5c
 80126f0:	224c      	movs	r2, #76	; 0x4c
 80126f2:	2100      	movs	r1, #0
 80126f4:	4618      	mov	r0, r3
 80126f6:	f003 fe10 	bl	801631a <memset>
 80126fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fc:	4a0c      	ldr	r2, [pc, #48]	; (8012730 <prvInitialiseNewTask+0x130>)
 80126fe:	661a      	str	r2, [r3, #96]	; 0x60
 8012700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012702:	4a0c      	ldr	r2, [pc, #48]	; (8012734 <prvInitialiseNewTask+0x134>)
 8012704:	665a      	str	r2, [r3, #100]	; 0x64
 8012706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012708:	4a0b      	ldr	r2, [pc, #44]	; (8012738 <prvInitialiseNewTask+0x138>)
 801270a:	669a      	str	r2, [r3, #104]	; 0x68
 801270c:	683a      	ldr	r2, [r7, #0]
 801270e:	68f9      	ldr	r1, [r7, #12]
 8012710:	69b8      	ldr	r0, [r7, #24]
 8012712:	f001 fbdd 	bl	8013ed0 <pxPortInitialiseStack>
 8012716:	4602      	mov	r2, r0
 8012718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271a:	601a      	str	r2, [r3, #0]
 801271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801271e:	2b00      	cmp	r3, #0
 8012720:	d002      	beq.n	8012728 <prvInitialiseNewTask+0x128>
 8012722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012726:	601a      	str	r2, [r3, #0]
 8012728:	bf00      	nop
 801272a:	3720      	adds	r7, #32
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	2000a3a0 	.word	0x2000a3a0
 8012734:	2000a408 	.word	0x2000a408
 8012738:	2000a470 	.word	0x2000a470

0801273c <prvAddNewTaskToReadyList>:
 801273c:	b580      	push	{r7, lr}
 801273e:	b082      	sub	sp, #8
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	f001 fcee 	bl	8014124 <vPortEnterCritical>
 8012748:	4b2a      	ldr	r3, [pc, #168]	; (80127f4 <prvAddNewTaskToReadyList+0xb8>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	3301      	adds	r3, #1
 801274e:	4a29      	ldr	r2, [pc, #164]	; (80127f4 <prvAddNewTaskToReadyList+0xb8>)
 8012750:	6013      	str	r3, [r2, #0]
 8012752:	4b29      	ldr	r3, [pc, #164]	; (80127f8 <prvAddNewTaskToReadyList+0xbc>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d109      	bne.n	801276e <prvAddNewTaskToReadyList+0x32>
 801275a:	4a27      	ldr	r2, [pc, #156]	; (80127f8 <prvAddNewTaskToReadyList+0xbc>)
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6013      	str	r3, [r2, #0]
 8012760:	4b24      	ldr	r3, [pc, #144]	; (80127f4 <prvAddNewTaskToReadyList+0xb8>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	2b01      	cmp	r3, #1
 8012766:	d110      	bne.n	801278a <prvAddNewTaskToReadyList+0x4e>
 8012768:	f000 fc18 	bl	8012f9c <prvInitialiseTaskLists>
 801276c:	e00d      	b.n	801278a <prvAddNewTaskToReadyList+0x4e>
 801276e:	4b23      	ldr	r3, [pc, #140]	; (80127fc <prvAddNewTaskToReadyList+0xc0>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d109      	bne.n	801278a <prvAddNewTaskToReadyList+0x4e>
 8012776:	4b20      	ldr	r3, [pc, #128]	; (80127f8 <prvAddNewTaskToReadyList+0xbc>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012780:	429a      	cmp	r2, r3
 8012782:	d802      	bhi.n	801278a <prvAddNewTaskToReadyList+0x4e>
 8012784:	4a1c      	ldr	r2, [pc, #112]	; (80127f8 <prvAddNewTaskToReadyList+0xbc>)
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6013      	str	r3, [r2, #0]
 801278a:	4b1d      	ldr	r3, [pc, #116]	; (8012800 <prvAddNewTaskToReadyList+0xc4>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	3301      	adds	r3, #1
 8012790:	4a1b      	ldr	r2, [pc, #108]	; (8012800 <prvAddNewTaskToReadyList+0xc4>)
 8012792:	6013      	str	r3, [r2, #0]
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012798:	2201      	movs	r2, #1
 801279a:	409a      	lsls	r2, r3
 801279c:	4b19      	ldr	r3, [pc, #100]	; (8012804 <prvAddNewTaskToReadyList+0xc8>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4313      	orrs	r3, r2
 80127a2:	4a18      	ldr	r2, [pc, #96]	; (8012804 <prvAddNewTaskToReadyList+0xc8>)
 80127a4:	6013      	str	r3, [r2, #0]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127aa:	4613      	mov	r3, r2
 80127ac:	009b      	lsls	r3, r3, #2
 80127ae:	4413      	add	r3, r2
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	4a15      	ldr	r2, [pc, #84]	; (8012808 <prvAddNewTaskToReadyList+0xcc>)
 80127b4:	441a      	add	r2, r3
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	3304      	adds	r3, #4
 80127ba:	4619      	mov	r1, r3
 80127bc:	4610      	mov	r0, r2
 80127be:	f7ff f898 	bl	80118f2 <vListInsertEnd>
 80127c2:	f001 fcdf 	bl	8014184 <vPortExitCritical>
 80127c6:	4b0d      	ldr	r3, [pc, #52]	; (80127fc <prvAddNewTaskToReadyList+0xc0>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d00e      	beq.n	80127ec <prvAddNewTaskToReadyList+0xb0>
 80127ce:	4b0a      	ldr	r3, [pc, #40]	; (80127f8 <prvAddNewTaskToReadyList+0xbc>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127d8:	429a      	cmp	r2, r3
 80127da:	d207      	bcs.n	80127ec <prvAddNewTaskToReadyList+0xb0>
 80127dc:	4b0b      	ldr	r3, [pc, #44]	; (801280c <prvAddNewTaskToReadyList+0xd0>)
 80127de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127e2:	601a      	str	r2, [r3, #0]
 80127e4:	f3bf 8f4f 	dsb	sy
 80127e8:	f3bf 8f6f 	isb	sy
 80127ec:	bf00      	nop
 80127ee:	3708      	adds	r7, #8
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}
 80127f4:	20004a90 	.word	0x20004a90
 80127f8:	20004990 	.word	0x20004990
 80127fc:	20004a9c 	.word	0x20004a9c
 8012800:	20004aac 	.word	0x20004aac
 8012804:	20004a98 	.word	0x20004a98
 8012808:	20004994 	.word	0x20004994
 801280c:	e000ed04 	.word	0xe000ed04

08012810 <vTaskDelay>:
 8012810:	b580      	push	{r7, lr}
 8012812:	b084      	sub	sp, #16
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	2300      	movs	r3, #0
 801281a:	60fb      	str	r3, [r7, #12]
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d017      	beq.n	8012852 <vTaskDelay+0x42>
 8012822:	4b13      	ldr	r3, [pc, #76]	; (8012870 <vTaskDelay+0x60>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d00a      	beq.n	8012840 <vTaskDelay+0x30>
 801282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801282e:	f383 8811 	msr	BASEPRI, r3
 8012832:	f3bf 8f6f 	isb	sy
 8012836:	f3bf 8f4f 	dsb	sy
 801283a:	60bb      	str	r3, [r7, #8]
 801283c:	bf00      	nop
 801283e:	e7fe      	b.n	801283e <vTaskDelay+0x2e>
 8012840:	f000 f88a 	bl	8012958 <vTaskSuspendAll>
 8012844:	2100      	movs	r1, #0
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f000 ff10 	bl	801366c <prvAddCurrentTaskToDelayedList>
 801284c:	f000 f892 	bl	8012974 <xTaskResumeAll>
 8012850:	60f8      	str	r0, [r7, #12]
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d107      	bne.n	8012868 <vTaskDelay+0x58>
 8012858:	4b06      	ldr	r3, [pc, #24]	; (8012874 <vTaskDelay+0x64>)
 801285a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801285e:	601a      	str	r2, [r3, #0]
 8012860:	f3bf 8f4f 	dsb	sy
 8012864:	f3bf 8f6f 	isb	sy
 8012868:	bf00      	nop
 801286a:	3710      	adds	r7, #16
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}
 8012870:	20004ab8 	.word	0x20004ab8
 8012874:	e000ed04 	.word	0xe000ed04

08012878 <vTaskStartScheduler>:
 8012878:	b580      	push	{r7, lr}
 801287a:	b08a      	sub	sp, #40	; 0x28
 801287c:	af04      	add	r7, sp, #16
 801287e:	2300      	movs	r3, #0
 8012880:	60bb      	str	r3, [r7, #8]
 8012882:	2300      	movs	r3, #0
 8012884:	607b      	str	r3, [r7, #4]
 8012886:	463a      	mov	r2, r7
 8012888:	1d39      	adds	r1, r7, #4
 801288a:	f107 0308 	add.w	r3, r7, #8
 801288e:	4618      	mov	r0, r3
 8012890:	f7ee ffd2 	bl	8001838 <vApplicationGetIdleTaskMemory>
 8012894:	6839      	ldr	r1, [r7, #0]
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	68ba      	ldr	r2, [r7, #8]
 801289a:	9202      	str	r2, [sp, #8]
 801289c:	9301      	str	r3, [sp, #4]
 801289e:	2300      	movs	r3, #0
 80128a0:	9300      	str	r3, [sp, #0]
 80128a2:	2300      	movs	r3, #0
 80128a4:	460a      	mov	r2, r1
 80128a6:	4924      	ldr	r1, [pc, #144]	; (8012938 <vTaskStartScheduler+0xc0>)
 80128a8:	4824      	ldr	r0, [pc, #144]	; (801293c <vTaskStartScheduler+0xc4>)
 80128aa:	f7ff fe07 	bl	80124bc <xTaskCreateStatic>
 80128ae:	4603      	mov	r3, r0
 80128b0:	4a23      	ldr	r2, [pc, #140]	; (8012940 <vTaskStartScheduler+0xc8>)
 80128b2:	6013      	str	r3, [r2, #0]
 80128b4:	4b22      	ldr	r3, [pc, #136]	; (8012940 <vTaskStartScheduler+0xc8>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d002      	beq.n	80128c2 <vTaskStartScheduler+0x4a>
 80128bc:	2301      	movs	r3, #1
 80128be:	617b      	str	r3, [r7, #20]
 80128c0:	e001      	b.n	80128c6 <vTaskStartScheduler+0x4e>
 80128c2:	2300      	movs	r3, #0
 80128c4:	617b      	str	r3, [r7, #20]
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d102      	bne.n	80128d2 <vTaskStartScheduler+0x5a>
 80128cc:	f000 ff34 	bl	8013738 <xTimerCreateTimerTask>
 80128d0:	6178      	str	r0, [r7, #20]
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	2b01      	cmp	r3, #1
 80128d6:	d11b      	bne.n	8012910 <vTaskStartScheduler+0x98>
 80128d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128dc:	f383 8811 	msr	BASEPRI, r3
 80128e0:	f3bf 8f6f 	isb	sy
 80128e4:	f3bf 8f4f 	dsb	sy
 80128e8:	613b      	str	r3, [r7, #16]
 80128ea:	bf00      	nop
 80128ec:	4b15      	ldr	r3, [pc, #84]	; (8012944 <vTaskStartScheduler+0xcc>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	335c      	adds	r3, #92	; 0x5c
 80128f2:	4a15      	ldr	r2, [pc, #84]	; (8012948 <vTaskStartScheduler+0xd0>)
 80128f4:	6013      	str	r3, [r2, #0]
 80128f6:	4b15      	ldr	r3, [pc, #84]	; (801294c <vTaskStartScheduler+0xd4>)
 80128f8:	f04f 32ff 	mov.w	r2, #4294967295
 80128fc:	601a      	str	r2, [r3, #0]
 80128fe:	4b14      	ldr	r3, [pc, #80]	; (8012950 <vTaskStartScheduler+0xd8>)
 8012900:	2201      	movs	r2, #1
 8012902:	601a      	str	r2, [r3, #0]
 8012904:	4b13      	ldr	r3, [pc, #76]	; (8012954 <vTaskStartScheduler+0xdc>)
 8012906:	2200      	movs	r2, #0
 8012908:	601a      	str	r2, [r3, #0]
 801290a:	f001 fb69 	bl	8013fe0 <xPortStartScheduler>
 801290e:	e00e      	b.n	801292e <vTaskStartScheduler+0xb6>
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012916:	d10a      	bne.n	801292e <vTaskStartScheduler+0xb6>
 8012918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801291c:	f383 8811 	msr	BASEPRI, r3
 8012920:	f3bf 8f6f 	isb	sy
 8012924:	f3bf 8f4f 	dsb	sy
 8012928:	60fb      	str	r3, [r7, #12]
 801292a:	bf00      	nop
 801292c:	e7fe      	b.n	801292c <vTaskStartScheduler+0xb4>
 801292e:	bf00      	nop
 8012930:	3718      	adds	r7, #24
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	08018a54 	.word	0x08018a54
 801293c:	08012f6d 	.word	0x08012f6d
 8012940:	20004ab4 	.word	0x20004ab4
 8012944:	20004990 	.word	0x20004990
 8012948:	200013f4 	.word	0x200013f4
 801294c:	20004ab0 	.word	0x20004ab0
 8012950:	20004a9c 	.word	0x20004a9c
 8012954:	20004a94 	.word	0x20004a94

08012958 <vTaskSuspendAll>:
 8012958:	b480      	push	{r7}
 801295a:	af00      	add	r7, sp, #0
 801295c:	4b04      	ldr	r3, [pc, #16]	; (8012970 <vTaskSuspendAll+0x18>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	3301      	adds	r3, #1
 8012962:	4a03      	ldr	r2, [pc, #12]	; (8012970 <vTaskSuspendAll+0x18>)
 8012964:	6013      	str	r3, [r2, #0]
 8012966:	bf00      	nop
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	4770      	bx	lr
 8012970:	20004ab8 	.word	0x20004ab8

08012974 <xTaskResumeAll>:
 8012974:	b580      	push	{r7, lr}
 8012976:	b084      	sub	sp, #16
 8012978:	af00      	add	r7, sp, #0
 801297a:	2300      	movs	r3, #0
 801297c:	60fb      	str	r3, [r7, #12]
 801297e:	2300      	movs	r3, #0
 8012980:	60bb      	str	r3, [r7, #8]
 8012982:	4b41      	ldr	r3, [pc, #260]	; (8012a88 <xTaskResumeAll+0x114>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d10a      	bne.n	80129a0 <xTaskResumeAll+0x2c>
 801298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801298e:	f383 8811 	msr	BASEPRI, r3
 8012992:	f3bf 8f6f 	isb	sy
 8012996:	f3bf 8f4f 	dsb	sy
 801299a:	603b      	str	r3, [r7, #0]
 801299c:	bf00      	nop
 801299e:	e7fe      	b.n	801299e <xTaskResumeAll+0x2a>
 80129a0:	f001 fbc0 	bl	8014124 <vPortEnterCritical>
 80129a4:	4b38      	ldr	r3, [pc, #224]	; (8012a88 <xTaskResumeAll+0x114>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	3b01      	subs	r3, #1
 80129aa:	4a37      	ldr	r2, [pc, #220]	; (8012a88 <xTaskResumeAll+0x114>)
 80129ac:	6013      	str	r3, [r2, #0]
 80129ae:	4b36      	ldr	r3, [pc, #216]	; (8012a88 <xTaskResumeAll+0x114>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d161      	bne.n	8012a7a <xTaskResumeAll+0x106>
 80129b6:	4b35      	ldr	r3, [pc, #212]	; (8012a8c <xTaskResumeAll+0x118>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d05d      	beq.n	8012a7a <xTaskResumeAll+0x106>
 80129be:	e02e      	b.n	8012a1e <xTaskResumeAll+0xaa>
 80129c0:	4b33      	ldr	r3, [pc, #204]	; (8012a90 <xTaskResumeAll+0x11c>)
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	60fb      	str	r3, [r7, #12]
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	3318      	adds	r3, #24
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7fe ffed 	bl	80119ac <uxListRemove>
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	3304      	adds	r3, #4
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fe ffe8 	bl	80119ac <uxListRemove>
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129e0:	2201      	movs	r2, #1
 80129e2:	409a      	lsls	r2, r3
 80129e4:	4b2b      	ldr	r3, [pc, #172]	; (8012a94 <xTaskResumeAll+0x120>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	4313      	orrs	r3, r2
 80129ea:	4a2a      	ldr	r2, [pc, #168]	; (8012a94 <xTaskResumeAll+0x120>)
 80129ec:	6013      	str	r3, [r2, #0]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129f2:	4613      	mov	r3, r2
 80129f4:	009b      	lsls	r3, r3, #2
 80129f6:	4413      	add	r3, r2
 80129f8:	009b      	lsls	r3, r3, #2
 80129fa:	4a27      	ldr	r2, [pc, #156]	; (8012a98 <xTaskResumeAll+0x124>)
 80129fc:	441a      	add	r2, r3
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	3304      	adds	r3, #4
 8012a02:	4619      	mov	r1, r3
 8012a04:	4610      	mov	r0, r2
 8012a06:	f7fe ff74 	bl	80118f2 <vListInsertEnd>
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a0e:	4b23      	ldr	r3, [pc, #140]	; (8012a9c <xTaskResumeAll+0x128>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d302      	bcc.n	8012a1e <xTaskResumeAll+0xaa>
 8012a18:	4b21      	ldr	r3, [pc, #132]	; (8012aa0 <xTaskResumeAll+0x12c>)
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	601a      	str	r2, [r3, #0]
 8012a1e:	4b1c      	ldr	r3, [pc, #112]	; (8012a90 <xTaskResumeAll+0x11c>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d1cc      	bne.n	80129c0 <xTaskResumeAll+0x4c>
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d001      	beq.n	8012a30 <xTaskResumeAll+0xbc>
 8012a2c:	f000 fb58 	bl	80130e0 <prvResetNextTaskUnblockTime>
 8012a30:	4b1c      	ldr	r3, [pc, #112]	; (8012aa4 <xTaskResumeAll+0x130>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	607b      	str	r3, [r7, #4]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d010      	beq.n	8012a5e <xTaskResumeAll+0xea>
 8012a3c:	f000 f846 	bl	8012acc <xTaskIncrementTick>
 8012a40:	4603      	mov	r3, r0
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d002      	beq.n	8012a4c <xTaskResumeAll+0xd8>
 8012a46:	4b16      	ldr	r3, [pc, #88]	; (8012aa0 <xTaskResumeAll+0x12c>)
 8012a48:	2201      	movs	r2, #1
 8012a4a:	601a      	str	r2, [r3, #0]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	3b01      	subs	r3, #1
 8012a50:	607b      	str	r3, [r7, #4]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d1f1      	bne.n	8012a3c <xTaskResumeAll+0xc8>
 8012a58:	4b12      	ldr	r3, [pc, #72]	; (8012aa4 <xTaskResumeAll+0x130>)
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	601a      	str	r2, [r3, #0]
 8012a5e:	4b10      	ldr	r3, [pc, #64]	; (8012aa0 <xTaskResumeAll+0x12c>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d009      	beq.n	8012a7a <xTaskResumeAll+0x106>
 8012a66:	2301      	movs	r3, #1
 8012a68:	60bb      	str	r3, [r7, #8]
 8012a6a:	4b0f      	ldr	r3, [pc, #60]	; (8012aa8 <xTaskResumeAll+0x134>)
 8012a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a70:	601a      	str	r2, [r3, #0]
 8012a72:	f3bf 8f4f 	dsb	sy
 8012a76:	f3bf 8f6f 	isb	sy
 8012a7a:	f001 fb83 	bl	8014184 <vPortExitCritical>
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	4618      	mov	r0, r3
 8012a82:	3710      	adds	r7, #16
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	20004ab8 	.word	0x20004ab8
 8012a8c:	20004a90 	.word	0x20004a90
 8012a90:	20004a50 	.word	0x20004a50
 8012a94:	20004a98 	.word	0x20004a98
 8012a98:	20004994 	.word	0x20004994
 8012a9c:	20004990 	.word	0x20004990
 8012aa0:	20004aa4 	.word	0x20004aa4
 8012aa4:	20004aa0 	.word	0x20004aa0
 8012aa8:	e000ed04 	.word	0xe000ed04

08012aac <xTaskGetTickCount>:
 8012aac:	b480      	push	{r7}
 8012aae:	b083      	sub	sp, #12
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	4b05      	ldr	r3, [pc, #20]	; (8012ac8 <xTaskGetTickCount+0x1c>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	607b      	str	r3, [r7, #4]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	4618      	mov	r0, r3
 8012abc:	370c      	adds	r7, #12
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr
 8012ac6:	bf00      	nop
 8012ac8:	20004a94 	.word	0x20004a94

08012acc <xTaskIncrementTick>:
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b086      	sub	sp, #24
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	617b      	str	r3, [r7, #20]
 8012ad6:	4b4e      	ldr	r3, [pc, #312]	; (8012c10 <xTaskIncrementTick+0x144>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f040 808e 	bne.w	8012bfc <xTaskIncrementTick+0x130>
 8012ae0:	4b4c      	ldr	r3, [pc, #304]	; (8012c14 <xTaskIncrementTick+0x148>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	613b      	str	r3, [r7, #16]
 8012ae8:	4a4a      	ldr	r2, [pc, #296]	; (8012c14 <xTaskIncrementTick+0x148>)
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	6013      	str	r3, [r2, #0]
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d120      	bne.n	8012b36 <xTaskIncrementTick+0x6a>
 8012af4:	4b48      	ldr	r3, [pc, #288]	; (8012c18 <xTaskIncrementTick+0x14c>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d00a      	beq.n	8012b14 <xTaskIncrementTick+0x48>
 8012afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b02:	f383 8811 	msr	BASEPRI, r3
 8012b06:	f3bf 8f6f 	isb	sy
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	603b      	str	r3, [r7, #0]
 8012b10:	bf00      	nop
 8012b12:	e7fe      	b.n	8012b12 <xTaskIncrementTick+0x46>
 8012b14:	4b40      	ldr	r3, [pc, #256]	; (8012c18 <xTaskIncrementTick+0x14c>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	60fb      	str	r3, [r7, #12]
 8012b1a:	4b40      	ldr	r3, [pc, #256]	; (8012c1c <xTaskIncrementTick+0x150>)
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4a3e      	ldr	r2, [pc, #248]	; (8012c18 <xTaskIncrementTick+0x14c>)
 8012b20:	6013      	str	r3, [r2, #0]
 8012b22:	4a3e      	ldr	r2, [pc, #248]	; (8012c1c <xTaskIncrementTick+0x150>)
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	6013      	str	r3, [r2, #0]
 8012b28:	4b3d      	ldr	r3, [pc, #244]	; (8012c20 <xTaskIncrementTick+0x154>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	3301      	adds	r3, #1
 8012b2e:	4a3c      	ldr	r2, [pc, #240]	; (8012c20 <xTaskIncrementTick+0x154>)
 8012b30:	6013      	str	r3, [r2, #0]
 8012b32:	f000 fad5 	bl	80130e0 <prvResetNextTaskUnblockTime>
 8012b36:	4b3b      	ldr	r3, [pc, #236]	; (8012c24 <xTaskIncrementTick+0x158>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	693a      	ldr	r2, [r7, #16]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d348      	bcc.n	8012bd2 <xTaskIncrementTick+0x106>
 8012b40:	4b35      	ldr	r3, [pc, #212]	; (8012c18 <xTaskIncrementTick+0x14c>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d104      	bne.n	8012b54 <xTaskIncrementTick+0x88>
 8012b4a:	4b36      	ldr	r3, [pc, #216]	; (8012c24 <xTaskIncrementTick+0x158>)
 8012b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b50:	601a      	str	r2, [r3, #0]
 8012b52:	e03e      	b.n	8012bd2 <xTaskIncrementTick+0x106>
 8012b54:	4b30      	ldr	r3, [pc, #192]	; (8012c18 <xTaskIncrementTick+0x14c>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	68db      	ldr	r3, [r3, #12]
 8012b5a:	68db      	ldr	r3, [r3, #12]
 8012b5c:	60bb      	str	r3, [r7, #8]
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	685b      	ldr	r3, [r3, #4]
 8012b62:	607b      	str	r3, [r7, #4]
 8012b64:	693a      	ldr	r2, [r7, #16]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d203      	bcs.n	8012b74 <xTaskIncrementTick+0xa8>
 8012b6c:	4a2d      	ldr	r2, [pc, #180]	; (8012c24 <xTaskIncrementTick+0x158>)
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6013      	str	r3, [r2, #0]
 8012b72:	e02e      	b.n	8012bd2 <xTaskIncrementTick+0x106>
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	3304      	adds	r3, #4
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7fe ff17 	bl	80119ac <uxListRemove>
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d004      	beq.n	8012b90 <xTaskIncrementTick+0xc4>
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	3318      	adds	r3, #24
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7fe ff0e 	bl	80119ac <uxListRemove>
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b94:	2201      	movs	r2, #1
 8012b96:	409a      	lsls	r2, r3
 8012b98:	4b23      	ldr	r3, [pc, #140]	; (8012c28 <xTaskIncrementTick+0x15c>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	4313      	orrs	r3, r2
 8012b9e:	4a22      	ldr	r2, [pc, #136]	; (8012c28 <xTaskIncrementTick+0x15c>)
 8012ba0:	6013      	str	r3, [r2, #0]
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ba6:	4613      	mov	r3, r2
 8012ba8:	009b      	lsls	r3, r3, #2
 8012baa:	4413      	add	r3, r2
 8012bac:	009b      	lsls	r3, r3, #2
 8012bae:	4a1f      	ldr	r2, [pc, #124]	; (8012c2c <xTaskIncrementTick+0x160>)
 8012bb0:	441a      	add	r2, r3
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	3304      	adds	r3, #4
 8012bb6:	4619      	mov	r1, r3
 8012bb8:	4610      	mov	r0, r2
 8012bba:	f7fe fe9a 	bl	80118f2 <vListInsertEnd>
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bc2:	4b1b      	ldr	r3, [pc, #108]	; (8012c30 <xTaskIncrementTick+0x164>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d3b9      	bcc.n	8012b40 <xTaskIncrementTick+0x74>
 8012bcc:	2301      	movs	r3, #1
 8012bce:	617b      	str	r3, [r7, #20]
 8012bd0:	e7b6      	b.n	8012b40 <xTaskIncrementTick+0x74>
 8012bd2:	4b17      	ldr	r3, [pc, #92]	; (8012c30 <xTaskIncrementTick+0x164>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd8:	4914      	ldr	r1, [pc, #80]	; (8012c2c <xTaskIncrementTick+0x160>)
 8012bda:	4613      	mov	r3, r2
 8012bdc:	009b      	lsls	r3, r3, #2
 8012bde:	4413      	add	r3, r2
 8012be0:	009b      	lsls	r3, r3, #2
 8012be2:	440b      	add	r3, r1
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d901      	bls.n	8012bee <xTaskIncrementTick+0x122>
 8012bea:	2301      	movs	r3, #1
 8012bec:	617b      	str	r3, [r7, #20]
 8012bee:	4b11      	ldr	r3, [pc, #68]	; (8012c34 <xTaskIncrementTick+0x168>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d007      	beq.n	8012c06 <xTaskIncrementTick+0x13a>
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	617b      	str	r3, [r7, #20]
 8012bfa:	e004      	b.n	8012c06 <xTaskIncrementTick+0x13a>
 8012bfc:	4b0e      	ldr	r3, [pc, #56]	; (8012c38 <xTaskIncrementTick+0x16c>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	3301      	adds	r3, #1
 8012c02:	4a0d      	ldr	r2, [pc, #52]	; (8012c38 <xTaskIncrementTick+0x16c>)
 8012c04:	6013      	str	r3, [r2, #0]
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3718      	adds	r7, #24
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}
 8012c10:	20004ab8 	.word	0x20004ab8
 8012c14:	20004a94 	.word	0x20004a94
 8012c18:	20004a48 	.word	0x20004a48
 8012c1c:	20004a4c 	.word	0x20004a4c
 8012c20:	20004aa8 	.word	0x20004aa8
 8012c24:	20004ab0 	.word	0x20004ab0
 8012c28:	20004a98 	.word	0x20004a98
 8012c2c:	20004994 	.word	0x20004994
 8012c30:	20004990 	.word	0x20004990
 8012c34:	20004aa4 	.word	0x20004aa4
 8012c38:	20004aa0 	.word	0x20004aa0

08012c3c <vTaskSwitchContext>:
 8012c3c:	b480      	push	{r7}
 8012c3e:	b087      	sub	sp, #28
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	4b29      	ldr	r3, [pc, #164]	; (8012ce8 <vTaskSwitchContext+0xac>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d003      	beq.n	8012c52 <vTaskSwitchContext+0x16>
 8012c4a:	4b28      	ldr	r3, [pc, #160]	; (8012cec <vTaskSwitchContext+0xb0>)
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	601a      	str	r2, [r3, #0]
 8012c50:	e044      	b.n	8012cdc <vTaskSwitchContext+0xa0>
 8012c52:	4b26      	ldr	r3, [pc, #152]	; (8012cec <vTaskSwitchContext+0xb0>)
 8012c54:	2200      	movs	r2, #0
 8012c56:	601a      	str	r2, [r3, #0]
 8012c58:	4b25      	ldr	r3, [pc, #148]	; (8012cf0 <vTaskSwitchContext+0xb4>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	60fb      	str	r3, [r7, #12]
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	fab3 f383 	clz	r3, r3
 8012c64:	72fb      	strb	r3, [r7, #11]
 8012c66:	7afb      	ldrb	r3, [r7, #11]
 8012c68:	f1c3 031f 	rsb	r3, r3, #31
 8012c6c:	617b      	str	r3, [r7, #20]
 8012c6e:	4921      	ldr	r1, [pc, #132]	; (8012cf4 <vTaskSwitchContext+0xb8>)
 8012c70:	697a      	ldr	r2, [r7, #20]
 8012c72:	4613      	mov	r3, r2
 8012c74:	009b      	lsls	r3, r3, #2
 8012c76:	4413      	add	r3, r2
 8012c78:	009b      	lsls	r3, r3, #2
 8012c7a:	440b      	add	r3, r1
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d10a      	bne.n	8012c98 <vTaskSwitchContext+0x5c>
 8012c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c86:	f383 8811 	msr	BASEPRI, r3
 8012c8a:	f3bf 8f6f 	isb	sy
 8012c8e:	f3bf 8f4f 	dsb	sy
 8012c92:	607b      	str	r3, [r7, #4]
 8012c94:	bf00      	nop
 8012c96:	e7fe      	b.n	8012c96 <vTaskSwitchContext+0x5a>
 8012c98:	697a      	ldr	r2, [r7, #20]
 8012c9a:	4613      	mov	r3, r2
 8012c9c:	009b      	lsls	r3, r3, #2
 8012c9e:	4413      	add	r3, r2
 8012ca0:	009b      	lsls	r3, r3, #2
 8012ca2:	4a14      	ldr	r2, [pc, #80]	; (8012cf4 <vTaskSwitchContext+0xb8>)
 8012ca4:	4413      	add	r3, r2
 8012ca6:	613b      	str	r3, [r7, #16]
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	685b      	ldr	r3, [r3, #4]
 8012cac:	685a      	ldr	r2, [r3, #4]
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	605a      	str	r2, [r3, #4]
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	685a      	ldr	r2, [r3, #4]
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	3308      	adds	r3, #8
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d104      	bne.n	8012cc8 <vTaskSwitchContext+0x8c>
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	685a      	ldr	r2, [r3, #4]
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	605a      	str	r2, [r3, #4]
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	68db      	ldr	r3, [r3, #12]
 8012cce:	4a0a      	ldr	r2, [pc, #40]	; (8012cf8 <vTaskSwitchContext+0xbc>)
 8012cd0:	6013      	str	r3, [r2, #0]
 8012cd2:	4b09      	ldr	r3, [pc, #36]	; (8012cf8 <vTaskSwitchContext+0xbc>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	335c      	adds	r3, #92	; 0x5c
 8012cd8:	4a08      	ldr	r2, [pc, #32]	; (8012cfc <vTaskSwitchContext+0xc0>)
 8012cda:	6013      	str	r3, [r2, #0]
 8012cdc:	bf00      	nop
 8012cde:	371c      	adds	r7, #28
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce6:	4770      	bx	lr
 8012ce8:	20004ab8 	.word	0x20004ab8
 8012cec:	20004aa4 	.word	0x20004aa4
 8012cf0:	20004a98 	.word	0x20004a98
 8012cf4:	20004994 	.word	0x20004994
 8012cf8:	20004990 	.word	0x20004990
 8012cfc:	200013f4 	.word	0x200013f4

08012d00 <vTaskPlaceOnEventList>:
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b084      	sub	sp, #16
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d10a      	bne.n	8012d26 <vTaskPlaceOnEventList+0x26>
 8012d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d14:	f383 8811 	msr	BASEPRI, r3
 8012d18:	f3bf 8f6f 	isb	sy
 8012d1c:	f3bf 8f4f 	dsb	sy
 8012d20:	60fb      	str	r3, [r7, #12]
 8012d22:	bf00      	nop
 8012d24:	e7fe      	b.n	8012d24 <vTaskPlaceOnEventList+0x24>
 8012d26:	4b07      	ldr	r3, [pc, #28]	; (8012d44 <vTaskPlaceOnEventList+0x44>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	3318      	adds	r3, #24
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f7fe fe03 	bl	801193a <vListInsert>
 8012d34:	2101      	movs	r1, #1
 8012d36:	6838      	ldr	r0, [r7, #0]
 8012d38:	f000 fc98 	bl	801366c <prvAddCurrentTaskToDelayedList>
 8012d3c:	bf00      	nop
 8012d3e:	3710      	adds	r7, #16
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	20004990 	.word	0x20004990

08012d48 <vTaskPlaceOnEventListRestricted>:
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b086      	sub	sp, #24
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	60b9      	str	r1, [r7, #8]
 8012d52:	607a      	str	r2, [r7, #4]
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d10a      	bne.n	8012d70 <vTaskPlaceOnEventListRestricted+0x28>
 8012d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d5e:	f383 8811 	msr	BASEPRI, r3
 8012d62:	f3bf 8f6f 	isb	sy
 8012d66:	f3bf 8f4f 	dsb	sy
 8012d6a:	617b      	str	r3, [r7, #20]
 8012d6c:	bf00      	nop
 8012d6e:	e7fe      	b.n	8012d6e <vTaskPlaceOnEventListRestricted+0x26>
 8012d70:	4b0a      	ldr	r3, [pc, #40]	; (8012d9c <vTaskPlaceOnEventListRestricted+0x54>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	3318      	adds	r3, #24
 8012d76:	4619      	mov	r1, r3
 8012d78:	68f8      	ldr	r0, [r7, #12]
 8012d7a:	f7fe fdba 	bl	80118f2 <vListInsertEnd>
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d002      	beq.n	8012d8a <vTaskPlaceOnEventListRestricted+0x42>
 8012d84:	f04f 33ff 	mov.w	r3, #4294967295
 8012d88:	60bb      	str	r3, [r7, #8]
 8012d8a:	6879      	ldr	r1, [r7, #4]
 8012d8c:	68b8      	ldr	r0, [r7, #8]
 8012d8e:	f000 fc6d 	bl	801366c <prvAddCurrentTaskToDelayedList>
 8012d92:	bf00      	nop
 8012d94:	3718      	adds	r7, #24
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	20004990 	.word	0x20004990

08012da0 <xTaskRemoveFromEventList>:
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b086      	sub	sp, #24
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	68db      	ldr	r3, [r3, #12]
 8012dae:	613b      	str	r3, [r7, #16]
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d10a      	bne.n	8012dcc <xTaskRemoveFromEventList+0x2c>
 8012db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dba:	f383 8811 	msr	BASEPRI, r3
 8012dbe:	f3bf 8f6f 	isb	sy
 8012dc2:	f3bf 8f4f 	dsb	sy
 8012dc6:	60fb      	str	r3, [r7, #12]
 8012dc8:	bf00      	nop
 8012dca:	e7fe      	b.n	8012dca <xTaskRemoveFromEventList+0x2a>
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	3318      	adds	r3, #24
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fe fdeb 	bl	80119ac <uxListRemove>
 8012dd6:	4b1d      	ldr	r3, [pc, #116]	; (8012e4c <xTaskRemoveFromEventList+0xac>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d11c      	bne.n	8012e18 <xTaskRemoveFromEventList+0x78>
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	3304      	adds	r3, #4
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7fe fde2 	bl	80119ac <uxListRemove>
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dec:	2201      	movs	r2, #1
 8012dee:	409a      	lsls	r2, r3
 8012df0:	4b17      	ldr	r3, [pc, #92]	; (8012e50 <xTaskRemoveFromEventList+0xb0>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	4313      	orrs	r3, r2
 8012df6:	4a16      	ldr	r2, [pc, #88]	; (8012e50 <xTaskRemoveFromEventList+0xb0>)
 8012df8:	6013      	str	r3, [r2, #0]
 8012dfa:	693b      	ldr	r3, [r7, #16]
 8012dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dfe:	4613      	mov	r3, r2
 8012e00:	009b      	lsls	r3, r3, #2
 8012e02:	4413      	add	r3, r2
 8012e04:	009b      	lsls	r3, r3, #2
 8012e06:	4a13      	ldr	r2, [pc, #76]	; (8012e54 <xTaskRemoveFromEventList+0xb4>)
 8012e08:	441a      	add	r2, r3
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	3304      	adds	r3, #4
 8012e0e:	4619      	mov	r1, r3
 8012e10:	4610      	mov	r0, r2
 8012e12:	f7fe fd6e 	bl	80118f2 <vListInsertEnd>
 8012e16:	e005      	b.n	8012e24 <xTaskRemoveFromEventList+0x84>
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	3318      	adds	r3, #24
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	480e      	ldr	r0, [pc, #56]	; (8012e58 <xTaskRemoveFromEventList+0xb8>)
 8012e20:	f7fe fd67 	bl	80118f2 <vListInsertEnd>
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e28:	4b0c      	ldr	r3, [pc, #48]	; (8012e5c <xTaskRemoveFromEventList+0xbc>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d905      	bls.n	8012e3e <xTaskRemoveFromEventList+0x9e>
 8012e32:	2301      	movs	r3, #1
 8012e34:	617b      	str	r3, [r7, #20]
 8012e36:	4b0a      	ldr	r3, [pc, #40]	; (8012e60 <xTaskRemoveFromEventList+0xc0>)
 8012e38:	2201      	movs	r2, #1
 8012e3a:	601a      	str	r2, [r3, #0]
 8012e3c:	e001      	b.n	8012e42 <xTaskRemoveFromEventList+0xa2>
 8012e3e:	2300      	movs	r3, #0
 8012e40:	617b      	str	r3, [r7, #20]
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	4618      	mov	r0, r3
 8012e46:	3718      	adds	r7, #24
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	20004ab8 	.word	0x20004ab8
 8012e50:	20004a98 	.word	0x20004a98
 8012e54:	20004994 	.word	0x20004994
 8012e58:	20004a50 	.word	0x20004a50
 8012e5c:	20004990 	.word	0x20004990
 8012e60:	20004aa4 	.word	0x20004aa4

08012e64 <vTaskInternalSetTimeOutState>:
 8012e64:	b480      	push	{r7}
 8012e66:	b083      	sub	sp, #12
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	4b06      	ldr	r3, [pc, #24]	; (8012e88 <vTaskInternalSetTimeOutState+0x24>)
 8012e6e:	681a      	ldr	r2, [r3, #0]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	601a      	str	r2, [r3, #0]
 8012e74:	4b05      	ldr	r3, [pc, #20]	; (8012e8c <vTaskInternalSetTimeOutState+0x28>)
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	605a      	str	r2, [r3, #4]
 8012e7c:	bf00      	nop
 8012e7e:	370c      	adds	r7, #12
 8012e80:	46bd      	mov	sp, r7
 8012e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e86:	4770      	bx	lr
 8012e88:	20004aa8 	.word	0x20004aa8
 8012e8c:	20004a94 	.word	0x20004a94

08012e90 <xTaskCheckForTimeOut>:
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b088      	sub	sp, #32
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d10a      	bne.n	8012eb6 <xTaskCheckForTimeOut+0x26>
 8012ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea4:	f383 8811 	msr	BASEPRI, r3
 8012ea8:	f3bf 8f6f 	isb	sy
 8012eac:	f3bf 8f4f 	dsb	sy
 8012eb0:	613b      	str	r3, [r7, #16]
 8012eb2:	bf00      	nop
 8012eb4:	e7fe      	b.n	8012eb4 <xTaskCheckForTimeOut+0x24>
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d10a      	bne.n	8012ed2 <xTaskCheckForTimeOut+0x42>
 8012ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec0:	f383 8811 	msr	BASEPRI, r3
 8012ec4:	f3bf 8f6f 	isb	sy
 8012ec8:	f3bf 8f4f 	dsb	sy
 8012ecc:	60fb      	str	r3, [r7, #12]
 8012ece:	bf00      	nop
 8012ed0:	e7fe      	b.n	8012ed0 <xTaskCheckForTimeOut+0x40>
 8012ed2:	f001 f927 	bl	8014124 <vPortEnterCritical>
 8012ed6:	4b1d      	ldr	r3, [pc, #116]	; (8012f4c <xTaskCheckForTimeOut+0xbc>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	61bb      	str	r3, [r7, #24]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	69ba      	ldr	r2, [r7, #24]
 8012ee2:	1ad3      	subs	r3, r2, r3
 8012ee4:	617b      	str	r3, [r7, #20]
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eee:	d102      	bne.n	8012ef6 <xTaskCheckForTimeOut+0x66>
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	61fb      	str	r3, [r7, #28]
 8012ef4:	e023      	b.n	8012f3e <xTaskCheckForTimeOut+0xae>
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681a      	ldr	r2, [r3, #0]
 8012efa:	4b15      	ldr	r3, [pc, #84]	; (8012f50 <xTaskCheckForTimeOut+0xc0>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d007      	beq.n	8012f12 <xTaskCheckForTimeOut+0x82>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	685b      	ldr	r3, [r3, #4]
 8012f06:	69ba      	ldr	r2, [r7, #24]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d302      	bcc.n	8012f12 <xTaskCheckForTimeOut+0x82>
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	61fb      	str	r3, [r7, #28]
 8012f10:	e015      	b.n	8012f3e <xTaskCheckForTimeOut+0xae>
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	697a      	ldr	r2, [r7, #20]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d20b      	bcs.n	8012f34 <xTaskCheckForTimeOut+0xa4>
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	1ad2      	subs	r2, r2, r3
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	601a      	str	r2, [r3, #0]
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7ff ff9b 	bl	8012e64 <vTaskInternalSetTimeOutState>
 8012f2e:	2300      	movs	r3, #0
 8012f30:	61fb      	str	r3, [r7, #28]
 8012f32:	e004      	b.n	8012f3e <xTaskCheckForTimeOut+0xae>
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	2200      	movs	r2, #0
 8012f38:	601a      	str	r2, [r3, #0]
 8012f3a:	2301      	movs	r3, #1
 8012f3c:	61fb      	str	r3, [r7, #28]
 8012f3e:	f001 f921 	bl	8014184 <vPortExitCritical>
 8012f42:	69fb      	ldr	r3, [r7, #28]
 8012f44:	4618      	mov	r0, r3
 8012f46:	3720      	adds	r7, #32
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	20004a94 	.word	0x20004a94
 8012f50:	20004aa8 	.word	0x20004aa8

08012f54 <vTaskMissedYield>:
 8012f54:	b480      	push	{r7}
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	4b03      	ldr	r3, [pc, #12]	; (8012f68 <vTaskMissedYield+0x14>)
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	601a      	str	r2, [r3, #0]
 8012f5e:	bf00      	nop
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr
 8012f68:	20004aa4 	.word	0x20004aa4

08012f6c <prvIdleTask>:
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	f000 f852 	bl	801301c <prvCheckTasksWaitingTermination>
 8012f78:	4b06      	ldr	r3, [pc, #24]	; (8012f94 <prvIdleTask+0x28>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d9f9      	bls.n	8012f74 <prvIdleTask+0x8>
 8012f80:	4b05      	ldr	r3, [pc, #20]	; (8012f98 <prvIdleTask+0x2c>)
 8012f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f86:	601a      	str	r2, [r3, #0]
 8012f88:	f3bf 8f4f 	dsb	sy
 8012f8c:	f3bf 8f6f 	isb	sy
 8012f90:	e7f0      	b.n	8012f74 <prvIdleTask+0x8>
 8012f92:	bf00      	nop
 8012f94:	20004994 	.word	0x20004994
 8012f98:	e000ed04 	.word	0xe000ed04

08012f9c <prvInitialiseTaskLists>:
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	607b      	str	r3, [r7, #4]
 8012fa6:	e00c      	b.n	8012fc2 <prvInitialiseTaskLists+0x26>
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	4613      	mov	r3, r2
 8012fac:	009b      	lsls	r3, r3, #2
 8012fae:	4413      	add	r3, r2
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	4a12      	ldr	r2, [pc, #72]	; (8012ffc <prvInitialiseTaskLists+0x60>)
 8012fb4:	4413      	add	r3, r2
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7fe fc6e 	bl	8011898 <vListInitialise>
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	3301      	adds	r3, #1
 8012fc0:	607b      	str	r3, [r7, #4]
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2b06      	cmp	r3, #6
 8012fc6:	d9ef      	bls.n	8012fa8 <prvInitialiseTaskLists+0xc>
 8012fc8:	480d      	ldr	r0, [pc, #52]	; (8013000 <prvInitialiseTaskLists+0x64>)
 8012fca:	f7fe fc65 	bl	8011898 <vListInitialise>
 8012fce:	480d      	ldr	r0, [pc, #52]	; (8013004 <prvInitialiseTaskLists+0x68>)
 8012fd0:	f7fe fc62 	bl	8011898 <vListInitialise>
 8012fd4:	480c      	ldr	r0, [pc, #48]	; (8013008 <prvInitialiseTaskLists+0x6c>)
 8012fd6:	f7fe fc5f 	bl	8011898 <vListInitialise>
 8012fda:	480c      	ldr	r0, [pc, #48]	; (801300c <prvInitialiseTaskLists+0x70>)
 8012fdc:	f7fe fc5c 	bl	8011898 <vListInitialise>
 8012fe0:	480b      	ldr	r0, [pc, #44]	; (8013010 <prvInitialiseTaskLists+0x74>)
 8012fe2:	f7fe fc59 	bl	8011898 <vListInitialise>
 8012fe6:	4b0b      	ldr	r3, [pc, #44]	; (8013014 <prvInitialiseTaskLists+0x78>)
 8012fe8:	4a05      	ldr	r2, [pc, #20]	; (8013000 <prvInitialiseTaskLists+0x64>)
 8012fea:	601a      	str	r2, [r3, #0]
 8012fec:	4b0a      	ldr	r3, [pc, #40]	; (8013018 <prvInitialiseTaskLists+0x7c>)
 8012fee:	4a05      	ldr	r2, [pc, #20]	; (8013004 <prvInitialiseTaskLists+0x68>)
 8012ff0:	601a      	str	r2, [r3, #0]
 8012ff2:	bf00      	nop
 8012ff4:	3708      	adds	r7, #8
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	20004994 	.word	0x20004994
 8013000:	20004a20 	.word	0x20004a20
 8013004:	20004a34 	.word	0x20004a34
 8013008:	20004a50 	.word	0x20004a50
 801300c:	20004a64 	.word	0x20004a64
 8013010:	20004a7c 	.word	0x20004a7c
 8013014:	20004a48 	.word	0x20004a48
 8013018:	20004a4c 	.word	0x20004a4c

0801301c <prvCheckTasksWaitingTermination>:
 801301c:	b580      	push	{r7, lr}
 801301e:	b082      	sub	sp, #8
 8013020:	af00      	add	r7, sp, #0
 8013022:	e019      	b.n	8013058 <prvCheckTasksWaitingTermination+0x3c>
 8013024:	f001 f87e 	bl	8014124 <vPortEnterCritical>
 8013028:	4b10      	ldr	r3, [pc, #64]	; (801306c <prvCheckTasksWaitingTermination+0x50>)
 801302a:	68db      	ldr	r3, [r3, #12]
 801302c:	68db      	ldr	r3, [r3, #12]
 801302e:	607b      	str	r3, [r7, #4]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	3304      	adds	r3, #4
 8013034:	4618      	mov	r0, r3
 8013036:	f7fe fcb9 	bl	80119ac <uxListRemove>
 801303a:	4b0d      	ldr	r3, [pc, #52]	; (8013070 <prvCheckTasksWaitingTermination+0x54>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	3b01      	subs	r3, #1
 8013040:	4a0b      	ldr	r2, [pc, #44]	; (8013070 <prvCheckTasksWaitingTermination+0x54>)
 8013042:	6013      	str	r3, [r2, #0]
 8013044:	4b0b      	ldr	r3, [pc, #44]	; (8013074 <prvCheckTasksWaitingTermination+0x58>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	3b01      	subs	r3, #1
 801304a:	4a0a      	ldr	r2, [pc, #40]	; (8013074 <prvCheckTasksWaitingTermination+0x58>)
 801304c:	6013      	str	r3, [r2, #0]
 801304e:	f001 f899 	bl	8014184 <vPortExitCritical>
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f000 f810 	bl	8013078 <prvDeleteTCB>
 8013058:	4b06      	ldr	r3, [pc, #24]	; (8013074 <prvCheckTasksWaitingTermination+0x58>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d1e1      	bne.n	8013024 <prvCheckTasksWaitingTermination+0x8>
 8013060:	bf00      	nop
 8013062:	bf00      	nop
 8013064:	3708      	adds	r7, #8
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	20004a64 	.word	0x20004a64
 8013070:	20004a90 	.word	0x20004a90
 8013074:	20004a78 	.word	0x20004a78

08013078 <prvDeleteTCB>:
 8013078:	b580      	push	{r7, lr}
 801307a:	b084      	sub	sp, #16
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	335c      	adds	r3, #92	; 0x5c
 8013084:	4618      	mov	r0, r3
 8013086:	f003 f987 	bl	8016398 <_reclaim_reent>
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8013090:	2b00      	cmp	r3, #0
 8013092:	d108      	bne.n	80130a6 <prvDeleteTCB+0x2e>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013098:	4618      	mov	r0, r3
 801309a:	f001 fa31 	bl	8014500 <vPortFree>
 801309e:	6878      	ldr	r0, [r7, #4]
 80130a0:	f001 fa2e 	bl	8014500 <vPortFree>
 80130a4:	e018      	b.n	80130d8 <prvDeleteTCB+0x60>
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d103      	bne.n	80130b8 <prvDeleteTCB+0x40>
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f001 fa25 	bl	8014500 <vPortFree>
 80130b6:	e00f      	b.n	80130d8 <prvDeleteTCB+0x60>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80130be:	2b02      	cmp	r3, #2
 80130c0:	d00a      	beq.n	80130d8 <prvDeleteTCB+0x60>
 80130c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c6:	f383 8811 	msr	BASEPRI, r3
 80130ca:	f3bf 8f6f 	isb	sy
 80130ce:	f3bf 8f4f 	dsb	sy
 80130d2:	60fb      	str	r3, [r7, #12]
 80130d4:	bf00      	nop
 80130d6:	e7fe      	b.n	80130d6 <prvDeleteTCB+0x5e>
 80130d8:	bf00      	nop
 80130da:	3710      	adds	r7, #16
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}

080130e0 <prvResetNextTaskUnblockTime>:
 80130e0:	b480      	push	{r7}
 80130e2:	b083      	sub	sp, #12
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	4b0c      	ldr	r3, [pc, #48]	; (8013118 <prvResetNextTaskUnblockTime+0x38>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d104      	bne.n	80130fa <prvResetNextTaskUnblockTime+0x1a>
 80130f0:	4b0a      	ldr	r3, [pc, #40]	; (801311c <prvResetNextTaskUnblockTime+0x3c>)
 80130f2:	f04f 32ff 	mov.w	r2, #4294967295
 80130f6:	601a      	str	r2, [r3, #0]
 80130f8:	e008      	b.n	801310c <prvResetNextTaskUnblockTime+0x2c>
 80130fa:	4b07      	ldr	r3, [pc, #28]	; (8013118 <prvResetNextTaskUnblockTime+0x38>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	68db      	ldr	r3, [r3, #12]
 8013100:	68db      	ldr	r3, [r3, #12]
 8013102:	607b      	str	r3, [r7, #4]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	4a04      	ldr	r2, [pc, #16]	; (801311c <prvResetNextTaskUnblockTime+0x3c>)
 801310a:	6013      	str	r3, [r2, #0]
 801310c:	bf00      	nop
 801310e:	370c      	adds	r7, #12
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr
 8013118:	20004a48 	.word	0x20004a48
 801311c:	20004ab0 	.word	0x20004ab0

08013120 <xTaskGetSchedulerState>:
 8013120:	b480      	push	{r7}
 8013122:	b083      	sub	sp, #12
 8013124:	af00      	add	r7, sp, #0
 8013126:	4b0b      	ldr	r3, [pc, #44]	; (8013154 <xTaskGetSchedulerState+0x34>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d102      	bne.n	8013134 <xTaskGetSchedulerState+0x14>
 801312e:	2301      	movs	r3, #1
 8013130:	607b      	str	r3, [r7, #4]
 8013132:	e008      	b.n	8013146 <xTaskGetSchedulerState+0x26>
 8013134:	4b08      	ldr	r3, [pc, #32]	; (8013158 <xTaskGetSchedulerState+0x38>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d102      	bne.n	8013142 <xTaskGetSchedulerState+0x22>
 801313c:	2302      	movs	r3, #2
 801313e:	607b      	str	r3, [r7, #4]
 8013140:	e001      	b.n	8013146 <xTaskGetSchedulerState+0x26>
 8013142:	2300      	movs	r3, #0
 8013144:	607b      	str	r3, [r7, #4]
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4618      	mov	r0, r3
 801314a:	370c      	adds	r7, #12
 801314c:	46bd      	mov	sp, r7
 801314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013152:	4770      	bx	lr
 8013154:	20004a9c 	.word	0x20004a9c
 8013158:	20004ab8 	.word	0x20004ab8

0801315c <xTaskPriorityDisinherit>:
 801315c:	b580      	push	{r7, lr}
 801315e:	b086      	sub	sp, #24
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	613b      	str	r3, [r7, #16]
 8013168:	2300      	movs	r3, #0
 801316a:	617b      	str	r3, [r7, #20]
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d06e      	beq.n	8013250 <xTaskPriorityDisinherit+0xf4>
 8013172:	4b3a      	ldr	r3, [pc, #232]	; (801325c <xTaskPriorityDisinherit+0x100>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	693a      	ldr	r2, [r7, #16]
 8013178:	429a      	cmp	r2, r3
 801317a:	d00a      	beq.n	8013192 <xTaskPriorityDisinherit+0x36>
 801317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013180:	f383 8811 	msr	BASEPRI, r3
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	60fb      	str	r3, [r7, #12]
 801318e:	bf00      	nop
 8013190:	e7fe      	b.n	8013190 <xTaskPriorityDisinherit+0x34>
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013196:	2b00      	cmp	r3, #0
 8013198:	d10a      	bne.n	80131b0 <xTaskPriorityDisinherit+0x54>
 801319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319e:	f383 8811 	msr	BASEPRI, r3
 80131a2:	f3bf 8f6f 	isb	sy
 80131a6:	f3bf 8f4f 	dsb	sy
 80131aa:	60bb      	str	r3, [r7, #8]
 80131ac:	bf00      	nop
 80131ae:	e7fe      	b.n	80131ae <xTaskPriorityDisinherit+0x52>
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131b4:	1e5a      	subs	r2, r3, #1
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	659a      	str	r2, [r3, #88]	; 0x58
 80131ba:	693b      	ldr	r3, [r7, #16]
 80131bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d044      	beq.n	8013250 <xTaskPriorityDisinherit+0xf4>
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d140      	bne.n	8013250 <xTaskPriorityDisinherit+0xf4>
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	3304      	adds	r3, #4
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7fe fbea 	bl	80119ac <uxListRemove>
 80131d8:	4603      	mov	r3, r0
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d115      	bne.n	801320a <xTaskPriorityDisinherit+0xae>
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131e2:	491f      	ldr	r1, [pc, #124]	; (8013260 <xTaskPriorityDisinherit+0x104>)
 80131e4:	4613      	mov	r3, r2
 80131e6:	009b      	lsls	r3, r3, #2
 80131e8:	4413      	add	r3, r2
 80131ea:	009b      	lsls	r3, r3, #2
 80131ec:	440b      	add	r3, r1
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d10a      	bne.n	801320a <xTaskPriorityDisinherit+0xae>
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131f8:	2201      	movs	r2, #1
 80131fa:	fa02 f303 	lsl.w	r3, r2, r3
 80131fe:	43da      	mvns	r2, r3
 8013200:	4b18      	ldr	r3, [pc, #96]	; (8013264 <xTaskPriorityDisinherit+0x108>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4013      	ands	r3, r2
 8013206:	4a17      	ldr	r2, [pc, #92]	; (8013264 <xTaskPriorityDisinherit+0x108>)
 8013208:	6013      	str	r3, [r2, #0]
 801320a:	693b      	ldr	r3, [r7, #16]
 801320c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	62da      	str	r2, [r3, #44]	; 0x2c
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013216:	f1c3 0207 	rsb	r2, r3, #7
 801321a:	693b      	ldr	r3, [r7, #16]
 801321c:	619a      	str	r2, [r3, #24]
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013222:	2201      	movs	r2, #1
 8013224:	409a      	lsls	r2, r3
 8013226:	4b0f      	ldr	r3, [pc, #60]	; (8013264 <xTaskPriorityDisinherit+0x108>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	4313      	orrs	r3, r2
 801322c:	4a0d      	ldr	r2, [pc, #52]	; (8013264 <xTaskPriorityDisinherit+0x108>)
 801322e:	6013      	str	r3, [r2, #0]
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013234:	4613      	mov	r3, r2
 8013236:	009b      	lsls	r3, r3, #2
 8013238:	4413      	add	r3, r2
 801323a:	009b      	lsls	r3, r3, #2
 801323c:	4a08      	ldr	r2, [pc, #32]	; (8013260 <xTaskPriorityDisinherit+0x104>)
 801323e:	441a      	add	r2, r3
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	3304      	adds	r3, #4
 8013244:	4619      	mov	r1, r3
 8013246:	4610      	mov	r0, r2
 8013248:	f7fe fb53 	bl	80118f2 <vListInsertEnd>
 801324c:	2301      	movs	r3, #1
 801324e:	617b      	str	r3, [r7, #20]
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	4618      	mov	r0, r3
 8013254:	3718      	adds	r7, #24
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	20004990 	.word	0x20004990
 8013260:	20004994 	.word	0x20004994
 8013264:	20004a98 	.word	0x20004a98

08013268 <xTaskNotifyWait>:
 8013268:	b580      	push	{r7, lr}
 801326a:	b086      	sub	sp, #24
 801326c:	af00      	add	r7, sp, #0
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	607a      	str	r2, [r7, #4]
 8013274:	603b      	str	r3, [r7, #0]
 8013276:	f000 ff55 	bl	8014124 <vPortEnterCritical>
 801327a:	4b29      	ldr	r3, [pc, #164]	; (8013320 <xTaskNotifyWait+0xb8>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8013282:	b2db      	uxtb	r3, r3
 8013284:	2b02      	cmp	r3, #2
 8013286:	d01c      	beq.n	80132c2 <xTaskNotifyWait+0x5a>
 8013288:	4b25      	ldr	r3, [pc, #148]	; (8013320 <xTaskNotifyWait+0xb8>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8013290:	68fa      	ldr	r2, [r7, #12]
 8013292:	43d2      	mvns	r2, r2
 8013294:	400a      	ands	r2, r1
 8013296:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 801329a:	4b21      	ldr	r3, [pc, #132]	; (8013320 <xTaskNotifyWait+0xb8>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	2201      	movs	r2, #1
 80132a0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d00b      	beq.n	80132c2 <xTaskNotifyWait+0x5a>
 80132aa:	2101      	movs	r1, #1
 80132ac:	6838      	ldr	r0, [r7, #0]
 80132ae:	f000 f9dd 	bl	801366c <prvAddCurrentTaskToDelayedList>
 80132b2:	4b1c      	ldr	r3, [pc, #112]	; (8013324 <xTaskNotifyWait+0xbc>)
 80132b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132b8:	601a      	str	r2, [r3, #0]
 80132ba:	f3bf 8f4f 	dsb	sy
 80132be:	f3bf 8f6f 	isb	sy
 80132c2:	f000 ff5f 	bl	8014184 <vPortExitCritical>
 80132c6:	f000 ff2d 	bl	8014124 <vPortEnterCritical>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d005      	beq.n	80132dc <xTaskNotifyWait+0x74>
 80132d0:	4b13      	ldr	r3, [pc, #76]	; (8013320 <xTaskNotifyWait+0xb8>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	601a      	str	r2, [r3, #0]
 80132dc:	4b10      	ldr	r3, [pc, #64]	; (8013320 <xTaskNotifyWait+0xb8>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	2b02      	cmp	r3, #2
 80132e8:	d002      	beq.n	80132f0 <xTaskNotifyWait+0x88>
 80132ea:	2300      	movs	r3, #0
 80132ec:	617b      	str	r3, [r7, #20]
 80132ee:	e00a      	b.n	8013306 <xTaskNotifyWait+0x9e>
 80132f0:	4b0b      	ldr	r3, [pc, #44]	; (8013320 <xTaskNotifyWait+0xb8>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80132f8:	68ba      	ldr	r2, [r7, #8]
 80132fa:	43d2      	mvns	r2, r2
 80132fc:	400a      	ands	r2, r1
 80132fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8013302:	2301      	movs	r3, #1
 8013304:	617b      	str	r3, [r7, #20]
 8013306:	4b06      	ldr	r3, [pc, #24]	; (8013320 <xTaskNotifyWait+0xb8>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	2200      	movs	r2, #0
 801330c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8013310:	f000 ff38 	bl	8014184 <vPortExitCritical>
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	4618      	mov	r0, r3
 8013318:	3718      	adds	r7, #24
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}
 801331e:	bf00      	nop
 8013320:	20004990 	.word	0x20004990
 8013324:	e000ed04 	.word	0xe000ed04

08013328 <xTaskGenericNotify>:
 8013328:	b580      	push	{r7, lr}
 801332a:	b08a      	sub	sp, #40	; 0x28
 801332c:	af00      	add	r7, sp, #0
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	603b      	str	r3, [r7, #0]
 8013334:	4613      	mov	r3, r2
 8013336:	71fb      	strb	r3, [r7, #7]
 8013338:	2301      	movs	r3, #1
 801333a:	627b      	str	r3, [r7, #36]	; 0x24
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d10a      	bne.n	8013358 <xTaskGenericNotify+0x30>
 8013342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013346:	f383 8811 	msr	BASEPRI, r3
 801334a:	f3bf 8f6f 	isb	sy
 801334e:	f3bf 8f4f 	dsb	sy
 8013352:	61bb      	str	r3, [r7, #24]
 8013354:	bf00      	nop
 8013356:	e7fe      	b.n	8013356 <xTaskGenericNotify+0x2e>
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	623b      	str	r3, [r7, #32]
 801335c:	f000 fee2 	bl	8014124 <vPortEnterCritical>
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d004      	beq.n	8013370 <xTaskGenericNotify+0x48>
 8013366:	6a3b      	ldr	r3, [r7, #32]
 8013368:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	601a      	str	r2, [r3, #0]
 8013370:	6a3b      	ldr	r3, [r7, #32]
 8013372:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8013376:	77fb      	strb	r3, [r7, #31]
 8013378:	6a3b      	ldr	r3, [r7, #32]
 801337a:	2202      	movs	r2, #2
 801337c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8013380:	79fb      	ldrb	r3, [r7, #7]
 8013382:	2b04      	cmp	r3, #4
 8013384:	d82d      	bhi.n	80133e2 <xTaskGenericNotify+0xba>
 8013386:	a201      	add	r2, pc, #4	; (adr r2, 801338c <xTaskGenericNotify+0x64>)
 8013388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801338c:	08013405 	.word	0x08013405
 8013390:	080133a1 	.word	0x080133a1
 8013394:	080133b3 	.word	0x080133b3
 8013398:	080133c3 	.word	0x080133c3
 801339c:	080133cd 	.word	0x080133cd
 80133a0:	6a3b      	ldr	r3, [r7, #32]
 80133a2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	431a      	orrs	r2, r3
 80133aa:	6a3b      	ldr	r3, [r7, #32]
 80133ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80133b0:	e02b      	b.n	801340a <xTaskGenericNotify+0xe2>
 80133b2:	6a3b      	ldr	r3, [r7, #32]
 80133b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80133b8:	1c5a      	adds	r2, r3, #1
 80133ba:	6a3b      	ldr	r3, [r7, #32]
 80133bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80133c0:	e023      	b.n	801340a <xTaskGenericNotify+0xe2>
 80133c2:	6a3b      	ldr	r3, [r7, #32]
 80133c4:	68ba      	ldr	r2, [r7, #8]
 80133c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80133ca:	e01e      	b.n	801340a <xTaskGenericNotify+0xe2>
 80133cc:	7ffb      	ldrb	r3, [r7, #31]
 80133ce:	2b02      	cmp	r3, #2
 80133d0:	d004      	beq.n	80133dc <xTaskGenericNotify+0xb4>
 80133d2:	6a3b      	ldr	r3, [r7, #32]
 80133d4:	68ba      	ldr	r2, [r7, #8]
 80133d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80133da:	e016      	b.n	801340a <xTaskGenericNotify+0xe2>
 80133dc:	2300      	movs	r3, #0
 80133de:	627b      	str	r3, [r7, #36]	; 0x24
 80133e0:	e013      	b.n	801340a <xTaskGenericNotify+0xe2>
 80133e2:	6a3b      	ldr	r3, [r7, #32]
 80133e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80133e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ec:	d00c      	beq.n	8013408 <xTaskGenericNotify+0xe0>
 80133ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f2:	f383 8811 	msr	BASEPRI, r3
 80133f6:	f3bf 8f6f 	isb	sy
 80133fa:	f3bf 8f4f 	dsb	sy
 80133fe:	617b      	str	r3, [r7, #20]
 8013400:	bf00      	nop
 8013402:	e7fe      	b.n	8013402 <xTaskGenericNotify+0xda>
 8013404:	bf00      	nop
 8013406:	e000      	b.n	801340a <xTaskGenericNotify+0xe2>
 8013408:	bf00      	nop
 801340a:	7ffb      	ldrb	r3, [r7, #31]
 801340c:	2b01      	cmp	r3, #1
 801340e:	d139      	bne.n	8013484 <xTaskGenericNotify+0x15c>
 8013410:	6a3b      	ldr	r3, [r7, #32]
 8013412:	3304      	adds	r3, #4
 8013414:	4618      	mov	r0, r3
 8013416:	f7fe fac9 	bl	80119ac <uxListRemove>
 801341a:	6a3b      	ldr	r3, [r7, #32]
 801341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801341e:	2201      	movs	r2, #1
 8013420:	409a      	lsls	r2, r3
 8013422:	4b1c      	ldr	r3, [pc, #112]	; (8013494 <xTaskGenericNotify+0x16c>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	4313      	orrs	r3, r2
 8013428:	4a1a      	ldr	r2, [pc, #104]	; (8013494 <xTaskGenericNotify+0x16c>)
 801342a:	6013      	str	r3, [r2, #0]
 801342c:	6a3b      	ldr	r3, [r7, #32]
 801342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013430:	4613      	mov	r3, r2
 8013432:	009b      	lsls	r3, r3, #2
 8013434:	4413      	add	r3, r2
 8013436:	009b      	lsls	r3, r3, #2
 8013438:	4a17      	ldr	r2, [pc, #92]	; (8013498 <xTaskGenericNotify+0x170>)
 801343a:	441a      	add	r2, r3
 801343c:	6a3b      	ldr	r3, [r7, #32]
 801343e:	3304      	adds	r3, #4
 8013440:	4619      	mov	r1, r3
 8013442:	4610      	mov	r0, r2
 8013444:	f7fe fa55 	bl	80118f2 <vListInsertEnd>
 8013448:	6a3b      	ldr	r3, [r7, #32]
 801344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801344c:	2b00      	cmp	r3, #0
 801344e:	d00a      	beq.n	8013466 <xTaskGenericNotify+0x13e>
 8013450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013454:	f383 8811 	msr	BASEPRI, r3
 8013458:	f3bf 8f6f 	isb	sy
 801345c:	f3bf 8f4f 	dsb	sy
 8013460:	613b      	str	r3, [r7, #16]
 8013462:	bf00      	nop
 8013464:	e7fe      	b.n	8013464 <xTaskGenericNotify+0x13c>
 8013466:	6a3b      	ldr	r3, [r7, #32]
 8013468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801346a:	4b0c      	ldr	r3, [pc, #48]	; (801349c <xTaskGenericNotify+0x174>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013470:	429a      	cmp	r2, r3
 8013472:	d907      	bls.n	8013484 <xTaskGenericNotify+0x15c>
 8013474:	4b0a      	ldr	r3, [pc, #40]	; (80134a0 <xTaskGenericNotify+0x178>)
 8013476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801347a:	601a      	str	r2, [r3, #0]
 801347c:	f3bf 8f4f 	dsb	sy
 8013480:	f3bf 8f6f 	isb	sy
 8013484:	f000 fe7e 	bl	8014184 <vPortExitCritical>
 8013488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348a:	4618      	mov	r0, r3
 801348c:	3728      	adds	r7, #40	; 0x28
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}
 8013492:	bf00      	nop
 8013494:	20004a98 	.word	0x20004a98
 8013498:	20004994 	.word	0x20004994
 801349c:	20004990 	.word	0x20004990
 80134a0:	e000ed04 	.word	0xe000ed04

080134a4 <xTaskGenericNotifyFromISR>:
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b08e      	sub	sp, #56	; 0x38
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	60f8      	str	r0, [r7, #12]
 80134ac:	60b9      	str	r1, [r7, #8]
 80134ae:	603b      	str	r3, [r7, #0]
 80134b0:	4613      	mov	r3, r2
 80134b2:	71fb      	strb	r3, [r7, #7]
 80134b4:	2301      	movs	r3, #1
 80134b6:	637b      	str	r3, [r7, #52]	; 0x34
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d10a      	bne.n	80134d4 <xTaskGenericNotifyFromISR+0x30>
 80134be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c2:	f383 8811 	msr	BASEPRI, r3
 80134c6:	f3bf 8f6f 	isb	sy
 80134ca:	f3bf 8f4f 	dsb	sy
 80134ce:	627b      	str	r3, [r7, #36]	; 0x24
 80134d0:	bf00      	nop
 80134d2:	e7fe      	b.n	80134d2 <xTaskGenericNotifyFromISR+0x2e>
 80134d4:	f000 ff08 	bl	80142e8 <vPortValidateInterruptPriority>
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	633b      	str	r3, [r7, #48]	; 0x30
 80134dc:	f3ef 8211 	mrs	r2, BASEPRI
 80134e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134e4:	f383 8811 	msr	BASEPRI, r3
 80134e8:	f3bf 8f6f 	isb	sy
 80134ec:	f3bf 8f4f 	dsb	sy
 80134f0:	623a      	str	r2, [r7, #32]
 80134f2:	61fb      	str	r3, [r7, #28]
 80134f4:	6a3b      	ldr	r3, [r7, #32]
 80134f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d004      	beq.n	8013508 <xTaskGenericNotifyFromISR+0x64>
 80134fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013500:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	601a      	str	r2, [r3, #0]
 8013508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801350a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 801350e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013514:	2202      	movs	r2, #2
 8013516:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 801351a:	79fb      	ldrb	r3, [r7, #7]
 801351c:	2b04      	cmp	r3, #4
 801351e:	d82f      	bhi.n	8013580 <xTaskGenericNotifyFromISR+0xdc>
 8013520:	a201      	add	r2, pc, #4	; (adr r2, 8013528 <xTaskGenericNotifyFromISR+0x84>)
 8013522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013526:	bf00      	nop
 8013528:	080135a3 	.word	0x080135a3
 801352c:	0801353d 	.word	0x0801353d
 8013530:	0801354f 	.word	0x0801354f
 8013534:	0801355f 	.word	0x0801355f
 8013538:	08013569 	.word	0x08013569
 801353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	431a      	orrs	r2, r3
 8013546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013548:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 801354c:	e02c      	b.n	80135a8 <xTaskGenericNotifyFromISR+0x104>
 801354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013550:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013554:	1c5a      	adds	r2, r3, #1
 8013556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013558:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 801355c:	e024      	b.n	80135a8 <xTaskGenericNotifyFromISR+0x104>
 801355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013560:	68ba      	ldr	r2, [r7, #8]
 8013562:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8013566:	e01f      	b.n	80135a8 <xTaskGenericNotifyFromISR+0x104>
 8013568:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801356c:	2b02      	cmp	r3, #2
 801356e:	d004      	beq.n	801357a <xTaskGenericNotifyFromISR+0xd6>
 8013570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013572:	68ba      	ldr	r2, [r7, #8]
 8013574:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8013578:	e016      	b.n	80135a8 <xTaskGenericNotifyFromISR+0x104>
 801357a:	2300      	movs	r3, #0
 801357c:	637b      	str	r3, [r7, #52]	; 0x34
 801357e:	e013      	b.n	80135a8 <xTaskGenericNotifyFromISR+0x104>
 8013580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013582:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801358a:	d00c      	beq.n	80135a6 <xTaskGenericNotifyFromISR+0x102>
 801358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013590:	f383 8811 	msr	BASEPRI, r3
 8013594:	f3bf 8f6f 	isb	sy
 8013598:	f3bf 8f4f 	dsb	sy
 801359c:	61bb      	str	r3, [r7, #24]
 801359e:	bf00      	nop
 80135a0:	e7fe      	b.n	80135a0 <xTaskGenericNotifyFromISR+0xfc>
 80135a2:	bf00      	nop
 80135a4:	e000      	b.n	80135a8 <xTaskGenericNotifyFromISR+0x104>
 80135a6:	bf00      	nop
 80135a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80135ac:	2b01      	cmp	r3, #1
 80135ae:	d145      	bne.n	801363c <xTaskGenericNotifyFromISR+0x198>
 80135b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d00a      	beq.n	80135ce <xTaskGenericNotifyFromISR+0x12a>
 80135b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135bc:	f383 8811 	msr	BASEPRI, r3
 80135c0:	f3bf 8f6f 	isb	sy
 80135c4:	f3bf 8f4f 	dsb	sy
 80135c8:	617b      	str	r3, [r7, #20]
 80135ca:	bf00      	nop
 80135cc:	e7fe      	b.n	80135cc <xTaskGenericNotifyFromISR+0x128>
 80135ce:	4b21      	ldr	r3, [pc, #132]	; (8013654 <xTaskGenericNotifyFromISR+0x1b0>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d11c      	bne.n	8013610 <xTaskGenericNotifyFromISR+0x16c>
 80135d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d8:	3304      	adds	r3, #4
 80135da:	4618      	mov	r0, r3
 80135dc:	f7fe f9e6 	bl	80119ac <uxListRemove>
 80135e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135e4:	2201      	movs	r2, #1
 80135e6:	409a      	lsls	r2, r3
 80135e8:	4b1b      	ldr	r3, [pc, #108]	; (8013658 <xTaskGenericNotifyFromISR+0x1b4>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	4313      	orrs	r3, r2
 80135ee:	4a1a      	ldr	r2, [pc, #104]	; (8013658 <xTaskGenericNotifyFromISR+0x1b4>)
 80135f0:	6013      	str	r3, [r2, #0]
 80135f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135f6:	4613      	mov	r3, r2
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	4413      	add	r3, r2
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	4a17      	ldr	r2, [pc, #92]	; (801365c <xTaskGenericNotifyFromISR+0x1b8>)
 8013600:	441a      	add	r2, r3
 8013602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013604:	3304      	adds	r3, #4
 8013606:	4619      	mov	r1, r3
 8013608:	4610      	mov	r0, r2
 801360a:	f7fe f972 	bl	80118f2 <vListInsertEnd>
 801360e:	e005      	b.n	801361c <xTaskGenericNotifyFromISR+0x178>
 8013610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013612:	3318      	adds	r3, #24
 8013614:	4619      	mov	r1, r3
 8013616:	4812      	ldr	r0, [pc, #72]	; (8013660 <xTaskGenericNotifyFromISR+0x1bc>)
 8013618:	f7fe f96b 	bl	80118f2 <vListInsertEnd>
 801361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013620:	4b10      	ldr	r3, [pc, #64]	; (8013664 <xTaskGenericNotifyFromISR+0x1c0>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013626:	429a      	cmp	r2, r3
 8013628:	d908      	bls.n	801363c <xTaskGenericNotifyFromISR+0x198>
 801362a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801362c:	2b00      	cmp	r3, #0
 801362e:	d002      	beq.n	8013636 <xTaskGenericNotifyFromISR+0x192>
 8013630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013632:	2201      	movs	r2, #1
 8013634:	601a      	str	r2, [r3, #0]
 8013636:	4b0c      	ldr	r3, [pc, #48]	; (8013668 <xTaskGenericNotifyFromISR+0x1c4>)
 8013638:	2201      	movs	r2, #1
 801363a:	601a      	str	r2, [r3, #0]
 801363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801363e:	613b      	str	r3, [r7, #16]
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	f383 8811 	msr	BASEPRI, r3
 8013646:	bf00      	nop
 8013648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801364a:	4618      	mov	r0, r3
 801364c:	3738      	adds	r7, #56	; 0x38
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	20004ab8 	.word	0x20004ab8
 8013658:	20004a98 	.word	0x20004a98
 801365c:	20004994 	.word	0x20004994
 8013660:	20004a50 	.word	0x20004a50
 8013664:	20004990 	.word	0x20004990
 8013668:	20004aa4 	.word	0x20004aa4

0801366c <prvAddCurrentTaskToDelayedList>:
 801366c:	b580      	push	{r7, lr}
 801366e:	b084      	sub	sp, #16
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	6039      	str	r1, [r7, #0]
 8013676:	4b29      	ldr	r3, [pc, #164]	; (801371c <prvAddCurrentTaskToDelayedList+0xb0>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	60fb      	str	r3, [r7, #12]
 801367c:	4b28      	ldr	r3, [pc, #160]	; (8013720 <prvAddCurrentTaskToDelayedList+0xb4>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	3304      	adds	r3, #4
 8013682:	4618      	mov	r0, r3
 8013684:	f7fe f992 	bl	80119ac <uxListRemove>
 8013688:	4603      	mov	r3, r0
 801368a:	2b00      	cmp	r3, #0
 801368c:	d10b      	bne.n	80136a6 <prvAddCurrentTaskToDelayedList+0x3a>
 801368e:	4b24      	ldr	r3, [pc, #144]	; (8013720 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013694:	2201      	movs	r2, #1
 8013696:	fa02 f303 	lsl.w	r3, r2, r3
 801369a:	43da      	mvns	r2, r3
 801369c:	4b21      	ldr	r3, [pc, #132]	; (8013724 <prvAddCurrentTaskToDelayedList+0xb8>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	4013      	ands	r3, r2
 80136a2:	4a20      	ldr	r2, [pc, #128]	; (8013724 <prvAddCurrentTaskToDelayedList+0xb8>)
 80136a4:	6013      	str	r3, [r2, #0]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136ac:	d10a      	bne.n	80136c4 <prvAddCurrentTaskToDelayedList+0x58>
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d007      	beq.n	80136c4 <prvAddCurrentTaskToDelayedList+0x58>
 80136b4:	4b1a      	ldr	r3, [pc, #104]	; (8013720 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	3304      	adds	r3, #4
 80136ba:	4619      	mov	r1, r3
 80136bc:	481a      	ldr	r0, [pc, #104]	; (8013728 <prvAddCurrentTaskToDelayedList+0xbc>)
 80136be:	f7fe f918 	bl	80118f2 <vListInsertEnd>
 80136c2:	e026      	b.n	8013712 <prvAddCurrentTaskToDelayedList+0xa6>
 80136c4:	68fa      	ldr	r2, [r7, #12]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	4413      	add	r3, r2
 80136ca:	60bb      	str	r3, [r7, #8]
 80136cc:	4b14      	ldr	r3, [pc, #80]	; (8013720 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	68ba      	ldr	r2, [r7, #8]
 80136d2:	605a      	str	r2, [r3, #4]
 80136d4:	68ba      	ldr	r2, [r7, #8]
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d209      	bcs.n	80136f0 <prvAddCurrentTaskToDelayedList+0x84>
 80136dc:	4b13      	ldr	r3, [pc, #76]	; (801372c <prvAddCurrentTaskToDelayedList+0xc0>)
 80136de:	681a      	ldr	r2, [r3, #0]
 80136e0:	4b0f      	ldr	r3, [pc, #60]	; (8013720 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	3304      	adds	r3, #4
 80136e6:	4619      	mov	r1, r3
 80136e8:	4610      	mov	r0, r2
 80136ea:	f7fe f926 	bl	801193a <vListInsert>
 80136ee:	e010      	b.n	8013712 <prvAddCurrentTaskToDelayedList+0xa6>
 80136f0:	4b0f      	ldr	r3, [pc, #60]	; (8013730 <prvAddCurrentTaskToDelayedList+0xc4>)
 80136f2:	681a      	ldr	r2, [r3, #0]
 80136f4:	4b0a      	ldr	r3, [pc, #40]	; (8013720 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	3304      	adds	r3, #4
 80136fa:	4619      	mov	r1, r3
 80136fc:	4610      	mov	r0, r2
 80136fe:	f7fe f91c 	bl	801193a <vListInsert>
 8013702:	4b0c      	ldr	r3, [pc, #48]	; (8013734 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	68ba      	ldr	r2, [r7, #8]
 8013708:	429a      	cmp	r2, r3
 801370a:	d202      	bcs.n	8013712 <prvAddCurrentTaskToDelayedList+0xa6>
 801370c:	4a09      	ldr	r2, [pc, #36]	; (8013734 <prvAddCurrentTaskToDelayedList+0xc8>)
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	6013      	str	r3, [r2, #0]
 8013712:	bf00      	nop
 8013714:	3710      	adds	r7, #16
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	20004a94 	.word	0x20004a94
 8013720:	20004990 	.word	0x20004990
 8013724:	20004a98 	.word	0x20004a98
 8013728:	20004a7c 	.word	0x20004a7c
 801372c:	20004a4c 	.word	0x20004a4c
 8013730:	20004a48 	.word	0x20004a48
 8013734:	20004ab0 	.word	0x20004ab0

08013738 <xTimerCreateTimerTask>:
 8013738:	b580      	push	{r7, lr}
 801373a:	b08a      	sub	sp, #40	; 0x28
 801373c:	af04      	add	r7, sp, #16
 801373e:	2300      	movs	r3, #0
 8013740:	617b      	str	r3, [r7, #20]
 8013742:	f000 fb85 	bl	8013e50 <prvCheckForValidListAndQueue>
 8013746:	4b1c      	ldr	r3, [pc, #112]	; (80137b8 <xTimerCreateTimerTask+0x80>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d021      	beq.n	8013792 <xTimerCreateTimerTask+0x5a>
 801374e:	2300      	movs	r3, #0
 8013750:	60fb      	str	r3, [r7, #12]
 8013752:	2300      	movs	r3, #0
 8013754:	60bb      	str	r3, [r7, #8]
 8013756:	1d3a      	adds	r2, r7, #4
 8013758:	f107 0108 	add.w	r1, r7, #8
 801375c:	f107 030c 	add.w	r3, r7, #12
 8013760:	4618      	mov	r0, r3
 8013762:	f7ee f883 	bl	800186c <vApplicationGetTimerTaskMemory>
 8013766:	6879      	ldr	r1, [r7, #4]
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	68fa      	ldr	r2, [r7, #12]
 801376c:	9202      	str	r2, [sp, #8]
 801376e:	9301      	str	r3, [sp, #4]
 8013770:	2305      	movs	r3, #5
 8013772:	9300      	str	r3, [sp, #0]
 8013774:	2300      	movs	r3, #0
 8013776:	460a      	mov	r2, r1
 8013778:	4910      	ldr	r1, [pc, #64]	; (80137bc <xTimerCreateTimerTask+0x84>)
 801377a:	4811      	ldr	r0, [pc, #68]	; (80137c0 <xTimerCreateTimerTask+0x88>)
 801377c:	f7fe fe9e 	bl	80124bc <xTaskCreateStatic>
 8013780:	4603      	mov	r3, r0
 8013782:	4a10      	ldr	r2, [pc, #64]	; (80137c4 <xTimerCreateTimerTask+0x8c>)
 8013784:	6013      	str	r3, [r2, #0]
 8013786:	4b0f      	ldr	r3, [pc, #60]	; (80137c4 <xTimerCreateTimerTask+0x8c>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d001      	beq.n	8013792 <xTimerCreateTimerTask+0x5a>
 801378e:	2301      	movs	r3, #1
 8013790:	617b      	str	r3, [r7, #20]
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d10a      	bne.n	80137ae <xTimerCreateTimerTask+0x76>
 8013798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801379c:	f383 8811 	msr	BASEPRI, r3
 80137a0:	f3bf 8f6f 	isb	sy
 80137a4:	f3bf 8f4f 	dsb	sy
 80137a8:	613b      	str	r3, [r7, #16]
 80137aa:	bf00      	nop
 80137ac:	e7fe      	b.n	80137ac <xTimerCreateTimerTask+0x74>
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	4618      	mov	r0, r3
 80137b2:	3718      	adds	r7, #24
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	20004aec 	.word	0x20004aec
 80137bc:	08018a5c 	.word	0x08018a5c
 80137c0:	08013a31 	.word	0x08013a31
 80137c4:	20004af0 	.word	0x20004af0

080137c8 <xTimerCreate>:
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b088      	sub	sp, #32
 80137cc:	af02      	add	r7, sp, #8
 80137ce:	60f8      	str	r0, [r7, #12]
 80137d0:	60b9      	str	r1, [r7, #8]
 80137d2:	607a      	str	r2, [r7, #4]
 80137d4:	603b      	str	r3, [r7, #0]
 80137d6:	2028      	movs	r0, #40	; 0x28
 80137d8:	f000 fdc6 	bl	8014368 <pvPortMalloc>
 80137dc:	6178      	str	r0, [r7, #20]
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d00d      	beq.n	8013800 <xTimerCreate+0x38>
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	2200      	movs	r2, #0
 80137e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	9301      	str	r3, [sp, #4]
 80137f0:	6a3b      	ldr	r3, [r7, #32]
 80137f2:	9300      	str	r3, [sp, #0]
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	687a      	ldr	r2, [r7, #4]
 80137f8:	68b9      	ldr	r1, [r7, #8]
 80137fa:	68f8      	ldr	r0, [r7, #12]
 80137fc:	f000 f843 	bl	8013886 <prvInitialiseNewTimer>
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	4618      	mov	r0, r3
 8013804:	3718      	adds	r7, #24
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}

0801380a <xTimerCreateStatic>:
 801380a:	b580      	push	{r7, lr}
 801380c:	b08a      	sub	sp, #40	; 0x28
 801380e:	af02      	add	r7, sp, #8
 8013810:	60f8      	str	r0, [r7, #12]
 8013812:	60b9      	str	r1, [r7, #8]
 8013814:	607a      	str	r2, [r7, #4]
 8013816:	603b      	str	r3, [r7, #0]
 8013818:	2328      	movs	r3, #40	; 0x28
 801381a:	613b      	str	r3, [r7, #16]
 801381c:	693b      	ldr	r3, [r7, #16]
 801381e:	2b28      	cmp	r3, #40	; 0x28
 8013820:	d00a      	beq.n	8013838 <xTimerCreateStatic+0x2e>
 8013822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013826:	f383 8811 	msr	BASEPRI, r3
 801382a:	f3bf 8f6f 	isb	sy
 801382e:	f3bf 8f4f 	dsb	sy
 8013832:	61bb      	str	r3, [r7, #24]
 8013834:	bf00      	nop
 8013836:	e7fe      	b.n	8013836 <xTimerCreateStatic+0x2c>
 8013838:	693b      	ldr	r3, [r7, #16]
 801383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383c:	2b00      	cmp	r3, #0
 801383e:	d10a      	bne.n	8013856 <xTimerCreateStatic+0x4c>
 8013840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013844:	f383 8811 	msr	BASEPRI, r3
 8013848:	f3bf 8f6f 	isb	sy
 801384c:	f3bf 8f4f 	dsb	sy
 8013850:	617b      	str	r3, [r7, #20]
 8013852:	bf00      	nop
 8013854:	e7fe      	b.n	8013854 <xTimerCreateStatic+0x4a>
 8013856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013858:	61fb      	str	r3, [r7, #28]
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d00d      	beq.n	801387c <xTimerCreateStatic+0x72>
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	2202      	movs	r2, #2
 8013864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8013868:	69fb      	ldr	r3, [r7, #28]
 801386a:	9301      	str	r3, [sp, #4]
 801386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801386e:	9300      	str	r3, [sp, #0]
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	68b9      	ldr	r1, [r7, #8]
 8013876:	68f8      	ldr	r0, [r7, #12]
 8013878:	f000 f805 	bl	8013886 <prvInitialiseNewTimer>
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	4618      	mov	r0, r3
 8013880:	3720      	adds	r7, #32
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}

08013886 <prvInitialiseNewTimer>:
 8013886:	b580      	push	{r7, lr}
 8013888:	b086      	sub	sp, #24
 801388a:	af00      	add	r7, sp, #0
 801388c:	60f8      	str	r0, [r7, #12]
 801388e:	60b9      	str	r1, [r7, #8]
 8013890:	607a      	str	r2, [r7, #4]
 8013892:	603b      	str	r3, [r7, #0]
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d10a      	bne.n	80138b0 <prvInitialiseNewTimer+0x2a>
 801389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801389e:	f383 8811 	msr	BASEPRI, r3
 80138a2:	f3bf 8f6f 	isb	sy
 80138a6:	f3bf 8f4f 	dsb	sy
 80138aa:	617b      	str	r3, [r7, #20]
 80138ac:	bf00      	nop
 80138ae:	e7fe      	b.n	80138ae <prvInitialiseNewTimer+0x28>
 80138b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d01e      	beq.n	80138f4 <prvInitialiseNewTimer+0x6e>
 80138b6:	f000 facb 	bl	8013e50 <prvCheckForValidListAndQueue>
 80138ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138bc:	68fa      	ldr	r2, [r7, #12]
 80138be:	601a      	str	r2, [r3, #0]
 80138c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c2:	68ba      	ldr	r2, [r7, #8]
 80138c4:	619a      	str	r2, [r3, #24]
 80138c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c8:	683a      	ldr	r2, [r7, #0]
 80138ca:	61da      	str	r2, [r3, #28]
 80138cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ce:	6a3a      	ldr	r2, [r7, #32]
 80138d0:	621a      	str	r2, [r3, #32]
 80138d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d4:	3304      	adds	r3, #4
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7fd fffe 	bl	80118d8 <vListInitialiseItem>
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d008      	beq.n	80138f4 <prvInitialiseNewTimer+0x6e>
 80138e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80138e8:	f043 0304 	orr.w	r3, r3, #4
 80138ec:	b2da      	uxtb	r2, r3
 80138ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80138f4:	bf00      	nop
 80138f6:	3718      	adds	r7, #24
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}

080138fc <xTimerGenericCommand>:
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b08a      	sub	sp, #40	; 0x28
 8013900:	af00      	add	r7, sp, #0
 8013902:	60f8      	str	r0, [r7, #12]
 8013904:	60b9      	str	r1, [r7, #8]
 8013906:	607a      	str	r2, [r7, #4]
 8013908:	603b      	str	r3, [r7, #0]
 801390a:	2300      	movs	r3, #0
 801390c:	627b      	str	r3, [r7, #36]	; 0x24
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d10a      	bne.n	801392a <xTimerGenericCommand+0x2e>
 8013914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013918:	f383 8811 	msr	BASEPRI, r3
 801391c:	f3bf 8f6f 	isb	sy
 8013920:	f3bf 8f4f 	dsb	sy
 8013924:	623b      	str	r3, [r7, #32]
 8013926:	bf00      	nop
 8013928:	e7fe      	b.n	8013928 <xTimerGenericCommand+0x2c>
 801392a:	4b1a      	ldr	r3, [pc, #104]	; (8013994 <xTimerGenericCommand+0x98>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d02a      	beq.n	8013988 <xTimerGenericCommand+0x8c>
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	617b      	str	r3, [r7, #20]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	61bb      	str	r3, [r7, #24]
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	61fb      	str	r3, [r7, #28]
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	2b05      	cmp	r3, #5
 8013942:	dc18      	bgt.n	8013976 <xTimerGenericCommand+0x7a>
 8013944:	f7ff fbec 	bl	8013120 <xTaskGetSchedulerState>
 8013948:	4603      	mov	r3, r0
 801394a:	2b02      	cmp	r3, #2
 801394c:	d109      	bne.n	8013962 <xTimerGenericCommand+0x66>
 801394e:	4b11      	ldr	r3, [pc, #68]	; (8013994 <xTimerGenericCommand+0x98>)
 8013950:	6818      	ldr	r0, [r3, #0]
 8013952:	f107 0114 	add.w	r1, r7, #20
 8013956:	2300      	movs	r3, #0
 8013958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801395a:	f7fe f98b 	bl	8011c74 <xQueueGenericSend>
 801395e:	6278      	str	r0, [r7, #36]	; 0x24
 8013960:	e012      	b.n	8013988 <xTimerGenericCommand+0x8c>
 8013962:	4b0c      	ldr	r3, [pc, #48]	; (8013994 <xTimerGenericCommand+0x98>)
 8013964:	6818      	ldr	r0, [r3, #0]
 8013966:	f107 0114 	add.w	r1, r7, #20
 801396a:	2300      	movs	r3, #0
 801396c:	2200      	movs	r2, #0
 801396e:	f7fe f981 	bl	8011c74 <xQueueGenericSend>
 8013972:	6278      	str	r0, [r7, #36]	; 0x24
 8013974:	e008      	b.n	8013988 <xTimerGenericCommand+0x8c>
 8013976:	4b07      	ldr	r3, [pc, #28]	; (8013994 <xTimerGenericCommand+0x98>)
 8013978:	6818      	ldr	r0, [r3, #0]
 801397a:	f107 0114 	add.w	r1, r7, #20
 801397e:	2300      	movs	r3, #0
 8013980:	683a      	ldr	r2, [r7, #0]
 8013982:	f7fe fa75 	bl	8011e70 <xQueueGenericSendFromISR>
 8013986:	6278      	str	r0, [r7, #36]	; 0x24
 8013988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398a:	4618      	mov	r0, r3
 801398c:	3728      	adds	r7, #40	; 0x28
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}
 8013992:	bf00      	nop
 8013994:	20004aec 	.word	0x20004aec

08013998 <prvProcessExpiredTimer>:
 8013998:	b580      	push	{r7, lr}
 801399a:	b088      	sub	sp, #32
 801399c:	af02      	add	r7, sp, #8
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6039      	str	r1, [r7, #0]
 80139a2:	4b22      	ldr	r3, [pc, #136]	; (8013a2c <prvProcessExpiredTimer+0x94>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	68db      	ldr	r3, [r3, #12]
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	617b      	str	r3, [r7, #20]
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	3304      	adds	r3, #4
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7fd fffb 	bl	80119ac <uxListRemove>
 80139b6:	697b      	ldr	r3, [r7, #20]
 80139b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80139bc:	f003 0304 	and.w	r3, r3, #4
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d022      	beq.n	8013a0a <prvProcessExpiredTimer+0x72>
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	699a      	ldr	r2, [r3, #24]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	18d1      	adds	r1, r2, r3
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	683a      	ldr	r2, [r7, #0]
 80139d0:	6978      	ldr	r0, [r7, #20]
 80139d2:	f000 f8d1 	bl	8013b78 <prvInsertTimerInActiveList>
 80139d6:	4603      	mov	r3, r0
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d01f      	beq.n	8013a1c <prvProcessExpiredTimer+0x84>
 80139dc:	2300      	movs	r3, #0
 80139de:	9300      	str	r3, [sp, #0]
 80139e0:	2300      	movs	r3, #0
 80139e2:	687a      	ldr	r2, [r7, #4]
 80139e4:	2100      	movs	r1, #0
 80139e6:	6978      	ldr	r0, [r7, #20]
 80139e8:	f7ff ff88 	bl	80138fc <xTimerGenericCommand>
 80139ec:	6138      	str	r0, [r7, #16]
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d113      	bne.n	8013a1c <prvProcessExpiredTimer+0x84>
 80139f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f8:	f383 8811 	msr	BASEPRI, r3
 80139fc:	f3bf 8f6f 	isb	sy
 8013a00:	f3bf 8f4f 	dsb	sy
 8013a04:	60fb      	str	r3, [r7, #12]
 8013a06:	bf00      	nop
 8013a08:	e7fe      	b.n	8013a08 <prvProcessExpiredTimer+0x70>
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013a10:	f023 0301 	bic.w	r3, r3, #1
 8013a14:	b2da      	uxtb	r2, r3
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	6a1b      	ldr	r3, [r3, #32]
 8013a20:	6978      	ldr	r0, [r7, #20]
 8013a22:	4798      	blx	r3
 8013a24:	bf00      	nop
 8013a26:	3718      	adds	r7, #24
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	20004ae4 	.word	0x20004ae4

08013a30 <prvTimerTask>:
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b084      	sub	sp, #16
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
 8013a38:	f107 0308 	add.w	r3, r7, #8
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f000 f857 	bl	8013af0 <prvGetNextExpireTime>
 8013a42:	60f8      	str	r0, [r7, #12]
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	4619      	mov	r1, r3
 8013a48:	68f8      	ldr	r0, [r7, #12]
 8013a4a:	f000 f803 	bl	8013a54 <prvProcessTimerOrBlockTask>
 8013a4e:	f000 f8d5 	bl	8013bfc <prvProcessReceivedCommands>
 8013a52:	e7f1      	b.n	8013a38 <prvTimerTask+0x8>

08013a54 <prvProcessTimerOrBlockTask>:
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b084      	sub	sp, #16
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	6039      	str	r1, [r7, #0]
 8013a5e:	f7fe ff7b 	bl	8012958 <vTaskSuspendAll>
 8013a62:	f107 0308 	add.w	r3, r7, #8
 8013a66:	4618      	mov	r0, r3
 8013a68:	f000 f866 	bl	8013b38 <prvSampleTimeNow>
 8013a6c:	60f8      	str	r0, [r7, #12]
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d130      	bne.n	8013ad6 <prvProcessTimerOrBlockTask+0x82>
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d10a      	bne.n	8013a90 <prvProcessTimerOrBlockTask+0x3c>
 8013a7a:	687a      	ldr	r2, [r7, #4]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	429a      	cmp	r2, r3
 8013a80:	d806      	bhi.n	8013a90 <prvProcessTimerOrBlockTask+0x3c>
 8013a82:	f7fe ff77 	bl	8012974 <xTaskResumeAll>
 8013a86:	68f9      	ldr	r1, [r7, #12]
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f7ff ff85 	bl	8013998 <prvProcessExpiredTimer>
 8013a8e:	e024      	b.n	8013ada <prvProcessTimerOrBlockTask+0x86>
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d008      	beq.n	8013aa8 <prvProcessTimerOrBlockTask+0x54>
 8013a96:	4b13      	ldr	r3, [pc, #76]	; (8013ae4 <prvProcessTimerOrBlockTask+0x90>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d101      	bne.n	8013aa4 <prvProcessTimerOrBlockTask+0x50>
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	e000      	b.n	8013aa6 <prvProcessTimerOrBlockTask+0x52>
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	603b      	str	r3, [r7, #0]
 8013aa8:	4b0f      	ldr	r3, [pc, #60]	; (8013ae8 <prvProcessTimerOrBlockTask+0x94>)
 8013aaa:	6818      	ldr	r0, [r3, #0]
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	1ad3      	subs	r3, r2, r3
 8013ab2:	683a      	ldr	r2, [r7, #0]
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	f7fe fccd 	bl	8012454 <vQueueWaitForMessageRestricted>
 8013aba:	f7fe ff5b 	bl	8012974 <xTaskResumeAll>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d10a      	bne.n	8013ada <prvProcessTimerOrBlockTask+0x86>
 8013ac4:	4b09      	ldr	r3, [pc, #36]	; (8013aec <prvProcessTimerOrBlockTask+0x98>)
 8013ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aca:	601a      	str	r2, [r3, #0]
 8013acc:	f3bf 8f4f 	dsb	sy
 8013ad0:	f3bf 8f6f 	isb	sy
 8013ad4:	e001      	b.n	8013ada <prvProcessTimerOrBlockTask+0x86>
 8013ad6:	f7fe ff4d 	bl	8012974 <xTaskResumeAll>
 8013ada:	bf00      	nop
 8013adc:	3710      	adds	r7, #16
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}
 8013ae2:	bf00      	nop
 8013ae4:	20004ae8 	.word	0x20004ae8
 8013ae8:	20004aec 	.word	0x20004aec
 8013aec:	e000ed04 	.word	0xe000ed04

08013af0 <prvGetNextExpireTime>:
 8013af0:	b480      	push	{r7}
 8013af2:	b085      	sub	sp, #20
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	4b0e      	ldr	r3, [pc, #56]	; (8013b34 <prvGetNextExpireTime+0x44>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d101      	bne.n	8013b06 <prvGetNextExpireTime+0x16>
 8013b02:	2201      	movs	r2, #1
 8013b04:	e000      	b.n	8013b08 <prvGetNextExpireTime+0x18>
 8013b06:	2200      	movs	r2, #0
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	601a      	str	r2, [r3, #0]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d105      	bne.n	8013b20 <prvGetNextExpireTime+0x30>
 8013b14:	4b07      	ldr	r3, [pc, #28]	; (8013b34 <prvGetNextExpireTime+0x44>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	68db      	ldr	r3, [r3, #12]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	60fb      	str	r3, [r7, #12]
 8013b1e:	e001      	b.n	8013b24 <prvGetNextExpireTime+0x34>
 8013b20:	2300      	movs	r3, #0
 8013b22:	60fb      	str	r3, [r7, #12]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	4618      	mov	r0, r3
 8013b28:	3714      	adds	r7, #20
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b30:	4770      	bx	lr
 8013b32:	bf00      	nop
 8013b34:	20004ae4 	.word	0x20004ae4

08013b38 <prvSampleTimeNow>:
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b084      	sub	sp, #16
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	f7fe ffb4 	bl	8012aac <xTaskGetTickCount>
 8013b44:	60f8      	str	r0, [r7, #12]
 8013b46:	4b0b      	ldr	r3, [pc, #44]	; (8013b74 <prvSampleTimeNow+0x3c>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	68fa      	ldr	r2, [r7, #12]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d205      	bcs.n	8013b5c <prvSampleTimeNow+0x24>
 8013b50:	f000 f91a 	bl	8013d88 <prvSwitchTimerLists>
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2201      	movs	r2, #1
 8013b58:	601a      	str	r2, [r3, #0]
 8013b5a:	e002      	b.n	8013b62 <prvSampleTimeNow+0x2a>
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	601a      	str	r2, [r3, #0]
 8013b62:	4a04      	ldr	r2, [pc, #16]	; (8013b74 <prvSampleTimeNow+0x3c>)
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	6013      	str	r3, [r2, #0]
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3710      	adds	r7, #16
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}
 8013b72:	bf00      	nop
 8013b74:	20004af4 	.word	0x20004af4

08013b78 <prvInsertTimerInActiveList>:
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b086      	sub	sp, #24
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	60f8      	str	r0, [r7, #12]
 8013b80:	60b9      	str	r1, [r7, #8]
 8013b82:	607a      	str	r2, [r7, #4]
 8013b84:	603b      	str	r3, [r7, #0]
 8013b86:	2300      	movs	r3, #0
 8013b88:	617b      	str	r3, [r7, #20]
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	68ba      	ldr	r2, [r7, #8]
 8013b8e:	605a      	str	r2, [r3, #4]
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	68fa      	ldr	r2, [r7, #12]
 8013b94:	611a      	str	r2, [r3, #16]
 8013b96:	68ba      	ldr	r2, [r7, #8]
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	d812      	bhi.n	8013bc4 <prvInsertTimerInActiveList+0x4c>
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	1ad2      	subs	r2, r2, r3
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	699b      	ldr	r3, [r3, #24]
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d302      	bcc.n	8013bb2 <prvInsertTimerInActiveList+0x3a>
 8013bac:	2301      	movs	r3, #1
 8013bae:	617b      	str	r3, [r7, #20]
 8013bb0:	e01b      	b.n	8013bea <prvInsertTimerInActiveList+0x72>
 8013bb2:	4b10      	ldr	r3, [pc, #64]	; (8013bf4 <prvInsertTimerInActiveList+0x7c>)
 8013bb4:	681a      	ldr	r2, [r3, #0]
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	3304      	adds	r3, #4
 8013bba:	4619      	mov	r1, r3
 8013bbc:	4610      	mov	r0, r2
 8013bbe:	f7fd febc 	bl	801193a <vListInsert>
 8013bc2:	e012      	b.n	8013bea <prvInsertTimerInActiveList+0x72>
 8013bc4:	687a      	ldr	r2, [r7, #4]
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d206      	bcs.n	8013bda <prvInsertTimerInActiveList+0x62>
 8013bcc:	68ba      	ldr	r2, [r7, #8]
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	d302      	bcc.n	8013bda <prvInsertTimerInActiveList+0x62>
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	617b      	str	r3, [r7, #20]
 8013bd8:	e007      	b.n	8013bea <prvInsertTimerInActiveList+0x72>
 8013bda:	4b07      	ldr	r3, [pc, #28]	; (8013bf8 <prvInsertTimerInActiveList+0x80>)
 8013bdc:	681a      	ldr	r2, [r3, #0]
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	3304      	adds	r3, #4
 8013be2:	4619      	mov	r1, r3
 8013be4:	4610      	mov	r0, r2
 8013be6:	f7fd fea8 	bl	801193a <vListInsert>
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	4618      	mov	r0, r3
 8013bee:	3718      	adds	r7, #24
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	20004ae8 	.word	0x20004ae8
 8013bf8:	20004ae4 	.word	0x20004ae4

08013bfc <prvProcessReceivedCommands>:
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b08c      	sub	sp, #48	; 0x30
 8013c00:	af02      	add	r7, sp, #8
 8013c02:	e0ae      	b.n	8013d62 <prvProcessReceivedCommands+0x166>
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	f2c0 80ab 	blt.w	8013d62 <prvProcessReceivedCommands+0x166>
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8013c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c12:	695b      	ldr	r3, [r3, #20]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d004      	beq.n	8013c22 <prvProcessReceivedCommands+0x26>
 8013c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1a:	3304      	adds	r3, #4
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7fd fec5 	bl	80119ac <uxListRemove>
 8013c22:	1d3b      	adds	r3, r7, #4
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7ff ff87 	bl	8013b38 <prvSampleTimeNow>
 8013c2a:	6238      	str	r0, [r7, #32]
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	2b09      	cmp	r3, #9
 8013c30:	f200 8096 	bhi.w	8013d60 <prvProcessReceivedCommands+0x164>
 8013c34:	a201      	add	r2, pc, #4	; (adr r2, 8013c3c <prvProcessReceivedCommands+0x40>)
 8013c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c3a:	bf00      	nop
 8013c3c:	08013c65 	.word	0x08013c65
 8013c40:	08013c65 	.word	0x08013c65
 8013c44:	08013c65 	.word	0x08013c65
 8013c48:	08013cd9 	.word	0x08013cd9
 8013c4c:	08013ced 	.word	0x08013ced
 8013c50:	08013d37 	.word	0x08013d37
 8013c54:	08013c65 	.word	0x08013c65
 8013c58:	08013c65 	.word	0x08013c65
 8013c5c:	08013cd9 	.word	0x08013cd9
 8013c60:	08013ced 	.word	0x08013ced
 8013c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013c6a:	f043 0301 	orr.w	r3, r3, #1
 8013c6e:	b2da      	uxtb	r2, r3
 8013c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8013c76:	68fa      	ldr	r2, [r7, #12]
 8013c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c7a:	699b      	ldr	r3, [r3, #24]
 8013c7c:	18d1      	adds	r1, r2, r3
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	6a3a      	ldr	r2, [r7, #32]
 8013c82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c84:	f7ff ff78 	bl	8013b78 <prvInsertTimerInActiveList>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d069      	beq.n	8013d62 <prvProcessReceivedCommands+0x166>
 8013c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c90:	6a1b      	ldr	r3, [r3, #32]
 8013c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c94:	4798      	blx	r3
 8013c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013c9c:	f003 0304 	and.w	r3, r3, #4
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d05e      	beq.n	8013d62 <prvProcessReceivedCommands+0x166>
 8013ca4:	68fa      	ldr	r2, [r7, #12]
 8013ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca8:	699b      	ldr	r3, [r3, #24]
 8013caa:	441a      	add	r2, r3
 8013cac:	2300      	movs	r3, #0
 8013cae:	9300      	str	r3, [sp, #0]
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	2100      	movs	r1, #0
 8013cb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cb6:	f7ff fe21 	bl	80138fc <xTimerGenericCommand>
 8013cba:	61f8      	str	r0, [r7, #28]
 8013cbc:	69fb      	ldr	r3, [r7, #28]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d14f      	bne.n	8013d62 <prvProcessReceivedCommands+0x166>
 8013cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc6:	f383 8811 	msr	BASEPRI, r3
 8013cca:	f3bf 8f6f 	isb	sy
 8013cce:	f3bf 8f4f 	dsb	sy
 8013cd2:	61bb      	str	r3, [r7, #24]
 8013cd4:	bf00      	nop
 8013cd6:	e7fe      	b.n	8013cd6 <prvProcessReceivedCommands+0xda>
 8013cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013cde:	f023 0301 	bic.w	r3, r3, #1
 8013ce2:	b2da      	uxtb	r2, r3
 8013ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8013cea:	e03a      	b.n	8013d62 <prvProcessReceivedCommands+0x166>
 8013cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013cf2:	f043 0301 	orr.w	r3, r3, #1
 8013cf6:	b2da      	uxtb	r2, r3
 8013cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8013cfe:	68fa      	ldr	r2, [r7, #12]
 8013d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d02:	619a      	str	r2, [r3, #24]
 8013d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d06:	699b      	ldr	r3, [r3, #24]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d10a      	bne.n	8013d22 <prvProcessReceivedCommands+0x126>
 8013d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d10:	f383 8811 	msr	BASEPRI, r3
 8013d14:	f3bf 8f6f 	isb	sy
 8013d18:	f3bf 8f4f 	dsb	sy
 8013d1c:	617b      	str	r3, [r7, #20]
 8013d1e:	bf00      	nop
 8013d20:	e7fe      	b.n	8013d20 <prvProcessReceivedCommands+0x124>
 8013d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d24:	699a      	ldr	r2, [r3, #24]
 8013d26:	6a3b      	ldr	r3, [r7, #32]
 8013d28:	18d1      	adds	r1, r2, r3
 8013d2a:	6a3b      	ldr	r3, [r7, #32]
 8013d2c:	6a3a      	ldr	r2, [r7, #32]
 8013d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d30:	f7ff ff22 	bl	8013b78 <prvInsertTimerInActiveList>
 8013d34:	e015      	b.n	8013d62 <prvProcessReceivedCommands+0x166>
 8013d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013d3c:	f003 0302 	and.w	r3, r3, #2
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d103      	bne.n	8013d4c <prvProcessReceivedCommands+0x150>
 8013d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d46:	f000 fbdb 	bl	8014500 <vPortFree>
 8013d4a:	e00a      	b.n	8013d62 <prvProcessReceivedCommands+0x166>
 8013d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013d52:	f023 0301 	bic.w	r3, r3, #1
 8013d56:	b2da      	uxtb	r2, r3
 8013d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8013d5e:	e000      	b.n	8013d62 <prvProcessReceivedCommands+0x166>
 8013d60:	bf00      	nop
 8013d62:	4b08      	ldr	r3, [pc, #32]	; (8013d84 <prvProcessReceivedCommands+0x188>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	f107 0108 	add.w	r1, r7, #8
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7fe f91b 	bl	8011fa8 <xQueueReceive>
 8013d72:	4603      	mov	r3, r0
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	f47f af45 	bne.w	8013c04 <prvProcessReceivedCommands+0x8>
 8013d7a:	bf00      	nop
 8013d7c:	bf00      	nop
 8013d7e:	3728      	adds	r7, #40	; 0x28
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	20004aec 	.word	0x20004aec

08013d88 <prvSwitchTimerLists>:
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b088      	sub	sp, #32
 8013d8c:	af02      	add	r7, sp, #8
 8013d8e:	e048      	b.n	8013e22 <prvSwitchTimerLists+0x9a>
 8013d90:	4b2d      	ldr	r3, [pc, #180]	; (8013e48 <prvSwitchTimerLists+0xc0>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	68db      	ldr	r3, [r3, #12]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	613b      	str	r3, [r7, #16]
 8013d9a:	4b2b      	ldr	r3, [pc, #172]	; (8013e48 <prvSwitchTimerLists+0xc0>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	60fb      	str	r3, [r7, #12]
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	3304      	adds	r3, #4
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7fd fdff 	bl	80119ac <uxListRemove>
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	6a1b      	ldr	r3, [r3, #32]
 8013db2:	68f8      	ldr	r0, [r7, #12]
 8013db4:	4798      	blx	r3
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013dbc:	f003 0304 	and.w	r3, r3, #4
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d02e      	beq.n	8013e22 <prvSwitchTimerLists+0x9a>
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	699b      	ldr	r3, [r3, #24]
 8013dc8:	693a      	ldr	r2, [r7, #16]
 8013dca:	4413      	add	r3, r2
 8013dcc:	60bb      	str	r3, [r7, #8]
 8013dce:	68ba      	ldr	r2, [r7, #8]
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d90e      	bls.n	8013df4 <prvSwitchTimerLists+0x6c>
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	68ba      	ldr	r2, [r7, #8]
 8013dda:	605a      	str	r2, [r3, #4]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	68fa      	ldr	r2, [r7, #12]
 8013de0:	611a      	str	r2, [r3, #16]
 8013de2:	4b19      	ldr	r3, [pc, #100]	; (8013e48 <prvSwitchTimerLists+0xc0>)
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	3304      	adds	r3, #4
 8013dea:	4619      	mov	r1, r3
 8013dec:	4610      	mov	r0, r2
 8013dee:	f7fd fda4 	bl	801193a <vListInsert>
 8013df2:	e016      	b.n	8013e22 <prvSwitchTimerLists+0x9a>
 8013df4:	2300      	movs	r3, #0
 8013df6:	9300      	str	r3, [sp, #0]
 8013df8:	2300      	movs	r3, #0
 8013dfa:	693a      	ldr	r2, [r7, #16]
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	68f8      	ldr	r0, [r7, #12]
 8013e00:	f7ff fd7c 	bl	80138fc <xTimerGenericCommand>
 8013e04:	6078      	str	r0, [r7, #4]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d10a      	bne.n	8013e22 <prvSwitchTimerLists+0x9a>
 8013e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e10:	f383 8811 	msr	BASEPRI, r3
 8013e14:	f3bf 8f6f 	isb	sy
 8013e18:	f3bf 8f4f 	dsb	sy
 8013e1c:	603b      	str	r3, [r7, #0]
 8013e1e:	bf00      	nop
 8013e20:	e7fe      	b.n	8013e20 <prvSwitchTimerLists+0x98>
 8013e22:	4b09      	ldr	r3, [pc, #36]	; (8013e48 <prvSwitchTimerLists+0xc0>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d1b1      	bne.n	8013d90 <prvSwitchTimerLists+0x8>
 8013e2c:	4b06      	ldr	r3, [pc, #24]	; (8013e48 <prvSwitchTimerLists+0xc0>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	617b      	str	r3, [r7, #20]
 8013e32:	4b06      	ldr	r3, [pc, #24]	; (8013e4c <prvSwitchTimerLists+0xc4>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	4a04      	ldr	r2, [pc, #16]	; (8013e48 <prvSwitchTimerLists+0xc0>)
 8013e38:	6013      	str	r3, [r2, #0]
 8013e3a:	4a04      	ldr	r2, [pc, #16]	; (8013e4c <prvSwitchTimerLists+0xc4>)
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	6013      	str	r3, [r2, #0]
 8013e40:	bf00      	nop
 8013e42:	3718      	adds	r7, #24
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	20004ae4 	.word	0x20004ae4
 8013e4c:	20004ae8 	.word	0x20004ae8

08013e50 <prvCheckForValidListAndQueue>:
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af02      	add	r7, sp, #8
 8013e56:	f000 f965 	bl	8014124 <vPortEnterCritical>
 8013e5a:	4b15      	ldr	r3, [pc, #84]	; (8013eb0 <prvCheckForValidListAndQueue+0x60>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d120      	bne.n	8013ea4 <prvCheckForValidListAndQueue+0x54>
 8013e62:	4814      	ldr	r0, [pc, #80]	; (8013eb4 <prvCheckForValidListAndQueue+0x64>)
 8013e64:	f7fd fd18 	bl	8011898 <vListInitialise>
 8013e68:	4813      	ldr	r0, [pc, #76]	; (8013eb8 <prvCheckForValidListAndQueue+0x68>)
 8013e6a:	f7fd fd15 	bl	8011898 <vListInitialise>
 8013e6e:	4b13      	ldr	r3, [pc, #76]	; (8013ebc <prvCheckForValidListAndQueue+0x6c>)
 8013e70:	4a10      	ldr	r2, [pc, #64]	; (8013eb4 <prvCheckForValidListAndQueue+0x64>)
 8013e72:	601a      	str	r2, [r3, #0]
 8013e74:	4b12      	ldr	r3, [pc, #72]	; (8013ec0 <prvCheckForValidListAndQueue+0x70>)
 8013e76:	4a10      	ldr	r2, [pc, #64]	; (8013eb8 <prvCheckForValidListAndQueue+0x68>)
 8013e78:	601a      	str	r2, [r3, #0]
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	9300      	str	r3, [sp, #0]
 8013e7e:	4b11      	ldr	r3, [pc, #68]	; (8013ec4 <prvCheckForValidListAndQueue+0x74>)
 8013e80:	4a11      	ldr	r2, [pc, #68]	; (8013ec8 <prvCheckForValidListAndQueue+0x78>)
 8013e82:	210c      	movs	r1, #12
 8013e84:	2003      	movs	r0, #3
 8013e86:	f7fd fe23 	bl	8011ad0 <xQueueGenericCreateStatic>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	4a08      	ldr	r2, [pc, #32]	; (8013eb0 <prvCheckForValidListAndQueue+0x60>)
 8013e8e:	6013      	str	r3, [r2, #0]
 8013e90:	4b07      	ldr	r3, [pc, #28]	; (8013eb0 <prvCheckForValidListAndQueue+0x60>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d005      	beq.n	8013ea4 <prvCheckForValidListAndQueue+0x54>
 8013e98:	4b05      	ldr	r3, [pc, #20]	; (8013eb0 <prvCheckForValidListAndQueue+0x60>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	490b      	ldr	r1, [pc, #44]	; (8013ecc <prvCheckForValidListAndQueue+0x7c>)
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fe faae 	bl	8012400 <vQueueAddToRegistry>
 8013ea4:	f000 f96e 	bl	8014184 <vPortExitCritical>
 8013ea8:	bf00      	nop
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	20004aec 	.word	0x20004aec
 8013eb4:	20004abc 	.word	0x20004abc
 8013eb8:	20004ad0 	.word	0x20004ad0
 8013ebc:	20004ae4 	.word	0x20004ae4
 8013ec0:	20004ae8 	.word	0x20004ae8
 8013ec4:	20004b1c 	.word	0x20004b1c
 8013ec8:	20004af8 	.word	0x20004af8
 8013ecc:	08018a64 	.word	0x08018a64

08013ed0 <pxPortInitialiseStack>:
 8013ed0:	b480      	push	{r7}
 8013ed2:	b085      	sub	sp, #20
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	60f8      	str	r0, [r7, #12]
 8013ed8:	60b9      	str	r1, [r7, #8]
 8013eda:	607a      	str	r2, [r7, #4]
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	3b04      	subs	r3, #4
 8013ee0:	60fb      	str	r3, [r7, #12]
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013ee8:	601a      	str	r2, [r3, #0]
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	3b04      	subs	r3, #4
 8013eee:	60fb      	str	r3, [r7, #12]
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	f023 0201 	bic.w	r2, r3, #1
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	601a      	str	r2, [r3, #0]
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	3b04      	subs	r3, #4
 8013efe:	60fb      	str	r3, [r7, #12]
 8013f00:	4a0c      	ldr	r2, [pc, #48]	; (8013f34 <pxPortInitialiseStack+0x64>)
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	601a      	str	r2, [r3, #0]
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	3b14      	subs	r3, #20
 8013f0a:	60fb      	str	r3, [r7, #12]
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	601a      	str	r2, [r3, #0]
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	3b04      	subs	r3, #4
 8013f16:	60fb      	str	r3, [r7, #12]
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f06f 0202 	mvn.w	r2, #2
 8013f1e:	601a      	str	r2, [r3, #0]
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	3b20      	subs	r3, #32
 8013f24:	60fb      	str	r3, [r7, #12]
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3714      	adds	r7, #20
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f32:	4770      	bx	lr
 8013f34:	08013f39 	.word	0x08013f39

08013f38 <prvTaskExitError>:
 8013f38:	b480      	push	{r7}
 8013f3a:	b085      	sub	sp, #20
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	2300      	movs	r3, #0
 8013f40:	607b      	str	r3, [r7, #4]
 8013f42:	4b12      	ldr	r3, [pc, #72]	; (8013f8c <prvTaskExitError+0x54>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f4a:	d00a      	beq.n	8013f62 <prvTaskExitError+0x2a>
 8013f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f50:	f383 8811 	msr	BASEPRI, r3
 8013f54:	f3bf 8f6f 	isb	sy
 8013f58:	f3bf 8f4f 	dsb	sy
 8013f5c:	60fb      	str	r3, [r7, #12]
 8013f5e:	bf00      	nop
 8013f60:	e7fe      	b.n	8013f60 <prvTaskExitError+0x28>
 8013f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f66:	f383 8811 	msr	BASEPRI, r3
 8013f6a:	f3bf 8f6f 	isb	sy
 8013f6e:	f3bf 8f4f 	dsb	sy
 8013f72:	60bb      	str	r3, [r7, #8]
 8013f74:	bf00      	nop
 8013f76:	bf00      	nop
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d0fc      	beq.n	8013f78 <prvTaskExitError+0x40>
 8013f7e:	bf00      	nop
 8013f80:	bf00      	nop
 8013f82:	3714      	adds	r7, #20
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr
 8013f8c:	20001334 	.word	0x20001334

08013f90 <SVC_Handler>:
 8013f90:	4b07      	ldr	r3, [pc, #28]	; (8013fb0 <pxCurrentTCBConst2>)
 8013f92:	6819      	ldr	r1, [r3, #0]
 8013f94:	6808      	ldr	r0, [r1, #0]
 8013f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9a:	f380 8809 	msr	PSP, r0
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f04f 0000 	mov.w	r0, #0
 8013fa6:	f380 8811 	msr	BASEPRI, r0
 8013faa:	4770      	bx	lr
 8013fac:	f3af 8000 	nop.w

08013fb0 <pxCurrentTCBConst2>:
 8013fb0:	20004990 	.word	0x20004990
 8013fb4:	bf00      	nop
 8013fb6:	bf00      	nop

08013fb8 <prvPortStartFirstTask>:
 8013fb8:	4808      	ldr	r0, [pc, #32]	; (8013fdc <prvPortStartFirstTask+0x24>)
 8013fba:	6800      	ldr	r0, [r0, #0]
 8013fbc:	6800      	ldr	r0, [r0, #0]
 8013fbe:	f380 8808 	msr	MSP, r0
 8013fc2:	f04f 0000 	mov.w	r0, #0
 8013fc6:	f380 8814 	msr	CONTROL, r0
 8013fca:	b662      	cpsie	i
 8013fcc:	b661      	cpsie	f
 8013fce:	f3bf 8f4f 	dsb	sy
 8013fd2:	f3bf 8f6f 	isb	sy
 8013fd6:	df00      	svc	0
 8013fd8:	bf00      	nop
 8013fda:	bf00      	nop
 8013fdc:	e000ed08 	.word	0xe000ed08

08013fe0 <xPortStartScheduler>:
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	4b46      	ldr	r3, [pc, #280]	; (8014100 <xPortStartScheduler+0x120>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	4a46      	ldr	r2, [pc, #280]	; (8014104 <xPortStartScheduler+0x124>)
 8013fec:	4293      	cmp	r3, r2
 8013fee:	d10a      	bne.n	8014006 <xPortStartScheduler+0x26>
 8013ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff4:	f383 8811 	msr	BASEPRI, r3
 8013ff8:	f3bf 8f6f 	isb	sy
 8013ffc:	f3bf 8f4f 	dsb	sy
 8014000:	613b      	str	r3, [r7, #16]
 8014002:	bf00      	nop
 8014004:	e7fe      	b.n	8014004 <xPortStartScheduler+0x24>
 8014006:	4b3e      	ldr	r3, [pc, #248]	; (8014100 <xPortStartScheduler+0x120>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4a3f      	ldr	r2, [pc, #252]	; (8014108 <xPortStartScheduler+0x128>)
 801400c:	4293      	cmp	r3, r2
 801400e:	d10a      	bne.n	8014026 <xPortStartScheduler+0x46>
 8014010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014014:	f383 8811 	msr	BASEPRI, r3
 8014018:	f3bf 8f6f 	isb	sy
 801401c:	f3bf 8f4f 	dsb	sy
 8014020:	60fb      	str	r3, [r7, #12]
 8014022:	bf00      	nop
 8014024:	e7fe      	b.n	8014024 <xPortStartScheduler+0x44>
 8014026:	4b39      	ldr	r3, [pc, #228]	; (801410c <xPortStartScheduler+0x12c>)
 8014028:	617b      	str	r3, [r7, #20]
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	781b      	ldrb	r3, [r3, #0]
 801402e:	b2db      	uxtb	r3, r3
 8014030:	607b      	str	r3, [r7, #4]
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	22ff      	movs	r2, #255	; 0xff
 8014036:	701a      	strb	r2, [r3, #0]
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	b2db      	uxtb	r3, r3
 801403e:	70fb      	strb	r3, [r7, #3]
 8014040:	78fb      	ldrb	r3, [r7, #3]
 8014042:	b2db      	uxtb	r3, r3
 8014044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014048:	b2da      	uxtb	r2, r3
 801404a:	4b31      	ldr	r3, [pc, #196]	; (8014110 <xPortStartScheduler+0x130>)
 801404c:	701a      	strb	r2, [r3, #0]
 801404e:	4b31      	ldr	r3, [pc, #196]	; (8014114 <xPortStartScheduler+0x134>)
 8014050:	2207      	movs	r2, #7
 8014052:	601a      	str	r2, [r3, #0]
 8014054:	e009      	b.n	801406a <xPortStartScheduler+0x8a>
 8014056:	4b2f      	ldr	r3, [pc, #188]	; (8014114 <xPortStartScheduler+0x134>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	3b01      	subs	r3, #1
 801405c:	4a2d      	ldr	r2, [pc, #180]	; (8014114 <xPortStartScheduler+0x134>)
 801405e:	6013      	str	r3, [r2, #0]
 8014060:	78fb      	ldrb	r3, [r7, #3]
 8014062:	b2db      	uxtb	r3, r3
 8014064:	005b      	lsls	r3, r3, #1
 8014066:	b2db      	uxtb	r3, r3
 8014068:	70fb      	strb	r3, [r7, #3]
 801406a:	78fb      	ldrb	r3, [r7, #3]
 801406c:	b2db      	uxtb	r3, r3
 801406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014072:	2b80      	cmp	r3, #128	; 0x80
 8014074:	d0ef      	beq.n	8014056 <xPortStartScheduler+0x76>
 8014076:	4b27      	ldr	r3, [pc, #156]	; (8014114 <xPortStartScheduler+0x134>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f1c3 0307 	rsb	r3, r3, #7
 801407e:	2b04      	cmp	r3, #4
 8014080:	d00a      	beq.n	8014098 <xPortStartScheduler+0xb8>
 8014082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014086:	f383 8811 	msr	BASEPRI, r3
 801408a:	f3bf 8f6f 	isb	sy
 801408e:	f3bf 8f4f 	dsb	sy
 8014092:	60bb      	str	r3, [r7, #8]
 8014094:	bf00      	nop
 8014096:	e7fe      	b.n	8014096 <xPortStartScheduler+0xb6>
 8014098:	4b1e      	ldr	r3, [pc, #120]	; (8014114 <xPortStartScheduler+0x134>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	021b      	lsls	r3, r3, #8
 801409e:	4a1d      	ldr	r2, [pc, #116]	; (8014114 <xPortStartScheduler+0x134>)
 80140a0:	6013      	str	r3, [r2, #0]
 80140a2:	4b1c      	ldr	r3, [pc, #112]	; (8014114 <xPortStartScheduler+0x134>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80140aa:	4a1a      	ldr	r2, [pc, #104]	; (8014114 <xPortStartScheduler+0x134>)
 80140ac:	6013      	str	r3, [r2, #0]
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	b2da      	uxtb	r2, r3
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	701a      	strb	r2, [r3, #0]
 80140b6:	4b18      	ldr	r3, [pc, #96]	; (8014118 <xPortStartScheduler+0x138>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	4a17      	ldr	r2, [pc, #92]	; (8014118 <xPortStartScheduler+0x138>)
 80140bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80140c0:	6013      	str	r3, [r2, #0]
 80140c2:	4b15      	ldr	r3, [pc, #84]	; (8014118 <xPortStartScheduler+0x138>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4a14      	ldr	r2, [pc, #80]	; (8014118 <xPortStartScheduler+0x138>)
 80140c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80140cc:	6013      	str	r3, [r2, #0]
 80140ce:	f000 f8dd 	bl	801428c <vPortSetupTimerInterrupt>
 80140d2:	4b12      	ldr	r3, [pc, #72]	; (801411c <xPortStartScheduler+0x13c>)
 80140d4:	2200      	movs	r2, #0
 80140d6:	601a      	str	r2, [r3, #0]
 80140d8:	f000 f8fc 	bl	80142d4 <vPortEnableVFP>
 80140dc:	4b10      	ldr	r3, [pc, #64]	; (8014120 <xPortStartScheduler+0x140>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	4a0f      	ldr	r2, [pc, #60]	; (8014120 <xPortStartScheduler+0x140>)
 80140e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80140e6:	6013      	str	r3, [r2, #0]
 80140e8:	f7ff ff66 	bl	8013fb8 <prvPortStartFirstTask>
 80140ec:	f7fe fda6 	bl	8012c3c <vTaskSwitchContext>
 80140f0:	f7ff ff22 	bl	8013f38 <prvTaskExitError>
 80140f4:	2300      	movs	r3, #0
 80140f6:	4618      	mov	r0, r3
 80140f8:	3718      	adds	r7, #24
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	e000ed00 	.word	0xe000ed00
 8014104:	410fc271 	.word	0x410fc271
 8014108:	410fc270 	.word	0x410fc270
 801410c:	e000e400 	.word	0xe000e400
 8014110:	20004b64 	.word	0x20004b64
 8014114:	20004b68 	.word	0x20004b68
 8014118:	e000ed20 	.word	0xe000ed20
 801411c:	20001334 	.word	0x20001334
 8014120:	e000ef34 	.word	0xe000ef34

08014124 <vPortEnterCritical>:
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
 801412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801412e:	f383 8811 	msr	BASEPRI, r3
 8014132:	f3bf 8f6f 	isb	sy
 8014136:	f3bf 8f4f 	dsb	sy
 801413a:	607b      	str	r3, [r7, #4]
 801413c:	bf00      	nop
 801413e:	4b0f      	ldr	r3, [pc, #60]	; (801417c <vPortEnterCritical+0x58>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	3301      	adds	r3, #1
 8014144:	4a0d      	ldr	r2, [pc, #52]	; (801417c <vPortEnterCritical+0x58>)
 8014146:	6013      	str	r3, [r2, #0]
 8014148:	4b0c      	ldr	r3, [pc, #48]	; (801417c <vPortEnterCritical+0x58>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2b01      	cmp	r3, #1
 801414e:	d10f      	bne.n	8014170 <vPortEnterCritical+0x4c>
 8014150:	4b0b      	ldr	r3, [pc, #44]	; (8014180 <vPortEnterCritical+0x5c>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	b2db      	uxtb	r3, r3
 8014156:	2b00      	cmp	r3, #0
 8014158:	d00a      	beq.n	8014170 <vPortEnterCritical+0x4c>
 801415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801415e:	f383 8811 	msr	BASEPRI, r3
 8014162:	f3bf 8f6f 	isb	sy
 8014166:	f3bf 8f4f 	dsb	sy
 801416a:	603b      	str	r3, [r7, #0]
 801416c:	bf00      	nop
 801416e:	e7fe      	b.n	801416e <vPortEnterCritical+0x4a>
 8014170:	bf00      	nop
 8014172:	370c      	adds	r7, #12
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr
 801417c:	20001334 	.word	0x20001334
 8014180:	e000ed04 	.word	0xe000ed04

08014184 <vPortExitCritical>:
 8014184:	b480      	push	{r7}
 8014186:	b083      	sub	sp, #12
 8014188:	af00      	add	r7, sp, #0
 801418a:	4b12      	ldr	r3, [pc, #72]	; (80141d4 <vPortExitCritical+0x50>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d10a      	bne.n	80141a8 <vPortExitCritical+0x24>
 8014192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014196:	f383 8811 	msr	BASEPRI, r3
 801419a:	f3bf 8f6f 	isb	sy
 801419e:	f3bf 8f4f 	dsb	sy
 80141a2:	607b      	str	r3, [r7, #4]
 80141a4:	bf00      	nop
 80141a6:	e7fe      	b.n	80141a6 <vPortExitCritical+0x22>
 80141a8:	4b0a      	ldr	r3, [pc, #40]	; (80141d4 <vPortExitCritical+0x50>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	3b01      	subs	r3, #1
 80141ae:	4a09      	ldr	r2, [pc, #36]	; (80141d4 <vPortExitCritical+0x50>)
 80141b0:	6013      	str	r3, [r2, #0]
 80141b2:	4b08      	ldr	r3, [pc, #32]	; (80141d4 <vPortExitCritical+0x50>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d105      	bne.n	80141c6 <vPortExitCritical+0x42>
 80141ba:	2300      	movs	r3, #0
 80141bc:	603b      	str	r3, [r7, #0]
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	f383 8811 	msr	BASEPRI, r3
 80141c4:	bf00      	nop
 80141c6:	bf00      	nop
 80141c8:	370c      	adds	r7, #12
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr
 80141d2:	bf00      	nop
 80141d4:	20001334 	.word	0x20001334
	...

080141e0 <PendSV_Handler>:
 80141e0:	f3ef 8009 	mrs	r0, PSP
 80141e4:	f3bf 8f6f 	isb	sy
 80141e8:	4b15      	ldr	r3, [pc, #84]	; (8014240 <pxCurrentTCBConst>)
 80141ea:	681a      	ldr	r2, [r3, #0]
 80141ec:	f01e 0f10 	tst.w	lr, #16
 80141f0:	bf08      	it	eq
 80141f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80141f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141fa:	6010      	str	r0, [r2, #0]
 80141fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014204:	f380 8811 	msr	BASEPRI, r0
 8014208:	f3bf 8f4f 	dsb	sy
 801420c:	f3bf 8f6f 	isb	sy
 8014210:	f7fe fd14 	bl	8012c3c <vTaskSwitchContext>
 8014214:	f04f 0000 	mov.w	r0, #0
 8014218:	f380 8811 	msr	BASEPRI, r0
 801421c:	bc09      	pop	{r0, r3}
 801421e:	6819      	ldr	r1, [r3, #0]
 8014220:	6808      	ldr	r0, [r1, #0]
 8014222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014226:	f01e 0f10 	tst.w	lr, #16
 801422a:	bf08      	it	eq
 801422c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014230:	f380 8809 	msr	PSP, r0
 8014234:	f3bf 8f6f 	isb	sy
 8014238:	4770      	bx	lr
 801423a:	bf00      	nop
 801423c:	f3af 8000 	nop.w

08014240 <pxCurrentTCBConst>:
 8014240:	20004990 	.word	0x20004990
 8014244:	bf00      	nop
 8014246:	bf00      	nop

08014248 <SysTick_Handler>:
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014252:	f383 8811 	msr	BASEPRI, r3
 8014256:	f3bf 8f6f 	isb	sy
 801425a:	f3bf 8f4f 	dsb	sy
 801425e:	607b      	str	r3, [r7, #4]
 8014260:	bf00      	nop
 8014262:	f7fe fc33 	bl	8012acc <xTaskIncrementTick>
 8014266:	4603      	mov	r3, r0
 8014268:	2b00      	cmp	r3, #0
 801426a:	d003      	beq.n	8014274 <SysTick_Handler+0x2c>
 801426c:	4b06      	ldr	r3, [pc, #24]	; (8014288 <SysTick_Handler+0x40>)
 801426e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014272:	601a      	str	r2, [r3, #0]
 8014274:	2300      	movs	r3, #0
 8014276:	603b      	str	r3, [r7, #0]
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	f383 8811 	msr	BASEPRI, r3
 801427e:	bf00      	nop
 8014280:	bf00      	nop
 8014282:	3708      	adds	r7, #8
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	e000ed04 	.word	0xe000ed04

0801428c <vPortSetupTimerInterrupt>:
 801428c:	b480      	push	{r7}
 801428e:	af00      	add	r7, sp, #0
 8014290:	4b0b      	ldr	r3, [pc, #44]	; (80142c0 <vPortSetupTimerInterrupt+0x34>)
 8014292:	2200      	movs	r2, #0
 8014294:	601a      	str	r2, [r3, #0]
 8014296:	4b0b      	ldr	r3, [pc, #44]	; (80142c4 <vPortSetupTimerInterrupt+0x38>)
 8014298:	2200      	movs	r2, #0
 801429a:	601a      	str	r2, [r3, #0]
 801429c:	4b0a      	ldr	r3, [pc, #40]	; (80142c8 <vPortSetupTimerInterrupt+0x3c>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	4a0a      	ldr	r2, [pc, #40]	; (80142cc <vPortSetupTimerInterrupt+0x40>)
 80142a2:	fba2 2303 	umull	r2, r3, r2, r3
 80142a6:	099b      	lsrs	r3, r3, #6
 80142a8:	4a09      	ldr	r2, [pc, #36]	; (80142d0 <vPortSetupTimerInterrupt+0x44>)
 80142aa:	3b01      	subs	r3, #1
 80142ac:	6013      	str	r3, [r2, #0]
 80142ae:	4b04      	ldr	r3, [pc, #16]	; (80142c0 <vPortSetupTimerInterrupt+0x34>)
 80142b0:	2207      	movs	r2, #7
 80142b2:	601a      	str	r2, [r3, #0]
 80142b4:	bf00      	nop
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr
 80142be:	bf00      	nop
 80142c0:	e000e010 	.word	0xe000e010
 80142c4:	e000e018 	.word	0xe000e018
 80142c8:	20000010 	.word	0x20000010
 80142cc:	10624dd3 	.word	0x10624dd3
 80142d0:	e000e014 	.word	0xe000e014

080142d4 <vPortEnableVFP>:
 80142d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80142e4 <vPortEnableVFP+0x10>
 80142d8:	6801      	ldr	r1, [r0, #0]
 80142da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80142de:	6001      	str	r1, [r0, #0]
 80142e0:	4770      	bx	lr
 80142e2:	bf00      	nop
 80142e4:	e000ed88 	.word	0xe000ed88

080142e8 <vPortValidateInterruptPriority>:
 80142e8:	b480      	push	{r7}
 80142ea:	b085      	sub	sp, #20
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	f3ef 8305 	mrs	r3, IPSR
 80142f2:	60fb      	str	r3, [r7, #12]
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	2b0f      	cmp	r3, #15
 80142f8:	d914      	bls.n	8014324 <vPortValidateInterruptPriority+0x3c>
 80142fa:	4a17      	ldr	r2, [pc, #92]	; (8014358 <vPortValidateInterruptPriority+0x70>)
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	4413      	add	r3, r2
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	72fb      	strb	r3, [r7, #11]
 8014304:	4b15      	ldr	r3, [pc, #84]	; (801435c <vPortValidateInterruptPriority+0x74>)
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	7afa      	ldrb	r2, [r7, #11]
 801430a:	429a      	cmp	r2, r3
 801430c:	d20a      	bcs.n	8014324 <vPortValidateInterruptPriority+0x3c>
 801430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	607b      	str	r3, [r7, #4]
 8014320:	bf00      	nop
 8014322:	e7fe      	b.n	8014322 <vPortValidateInterruptPriority+0x3a>
 8014324:	4b0e      	ldr	r3, [pc, #56]	; (8014360 <vPortValidateInterruptPriority+0x78>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801432c:	4b0d      	ldr	r3, [pc, #52]	; (8014364 <vPortValidateInterruptPriority+0x7c>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	429a      	cmp	r2, r3
 8014332:	d90a      	bls.n	801434a <vPortValidateInterruptPriority+0x62>
 8014334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014338:	f383 8811 	msr	BASEPRI, r3
 801433c:	f3bf 8f6f 	isb	sy
 8014340:	f3bf 8f4f 	dsb	sy
 8014344:	603b      	str	r3, [r7, #0]
 8014346:	bf00      	nop
 8014348:	e7fe      	b.n	8014348 <vPortValidateInterruptPriority+0x60>
 801434a:	bf00      	nop
 801434c:	3714      	adds	r7, #20
 801434e:	46bd      	mov	sp, r7
 8014350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop
 8014358:	e000e3f0 	.word	0xe000e3f0
 801435c:	20004b64 	.word	0x20004b64
 8014360:	e000ed0c 	.word	0xe000ed0c
 8014364:	20004b68 	.word	0x20004b68

08014368 <pvPortMalloc>:
 8014368:	b580      	push	{r7, lr}
 801436a:	b08a      	sub	sp, #40	; 0x28
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
 8014370:	2300      	movs	r3, #0
 8014372:	61fb      	str	r3, [r7, #28]
 8014374:	f7fe faf0 	bl	8012958 <vTaskSuspendAll>
 8014378:	4b5b      	ldr	r3, [pc, #364]	; (80144e8 <pvPortMalloc+0x180>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d101      	bne.n	8014384 <pvPortMalloc+0x1c>
 8014380:	f000 f920 	bl	80145c4 <prvHeapInit>
 8014384:	4b59      	ldr	r3, [pc, #356]	; (80144ec <pvPortMalloc+0x184>)
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	4013      	ands	r3, r2
 801438c:	2b00      	cmp	r3, #0
 801438e:	f040 8093 	bne.w	80144b8 <pvPortMalloc+0x150>
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d01d      	beq.n	80143d4 <pvPortMalloc+0x6c>
 8014398:	2208      	movs	r2, #8
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	4413      	add	r3, r2
 801439e:	607b      	str	r3, [r7, #4]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f003 0307 	and.w	r3, r3, #7
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d014      	beq.n	80143d4 <pvPortMalloc+0x6c>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f023 0307 	bic.w	r3, r3, #7
 80143b0:	3308      	adds	r3, #8
 80143b2:	607b      	str	r3, [r7, #4]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f003 0307 	and.w	r3, r3, #7
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00a      	beq.n	80143d4 <pvPortMalloc+0x6c>
 80143be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c2:	f383 8811 	msr	BASEPRI, r3
 80143c6:	f3bf 8f6f 	isb	sy
 80143ca:	f3bf 8f4f 	dsb	sy
 80143ce:	617b      	str	r3, [r7, #20]
 80143d0:	bf00      	nop
 80143d2:	e7fe      	b.n	80143d2 <pvPortMalloc+0x6a>
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d06e      	beq.n	80144b8 <pvPortMalloc+0x150>
 80143da:	4b45      	ldr	r3, [pc, #276]	; (80144f0 <pvPortMalloc+0x188>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d869      	bhi.n	80144b8 <pvPortMalloc+0x150>
 80143e4:	4b43      	ldr	r3, [pc, #268]	; (80144f4 <pvPortMalloc+0x18c>)
 80143e6:	623b      	str	r3, [r7, #32]
 80143e8:	4b42      	ldr	r3, [pc, #264]	; (80144f4 <pvPortMalloc+0x18c>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	627b      	str	r3, [r7, #36]	; 0x24
 80143ee:	e004      	b.n	80143fa <pvPortMalloc+0x92>
 80143f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f2:	623b      	str	r3, [r7, #32]
 80143f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	627b      	str	r3, [r7, #36]	; 0x24
 80143fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	429a      	cmp	r2, r3
 8014402:	d903      	bls.n	801440c <pvPortMalloc+0xa4>
 8014404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d1f1      	bne.n	80143f0 <pvPortMalloc+0x88>
 801440c:	4b36      	ldr	r3, [pc, #216]	; (80144e8 <pvPortMalloc+0x180>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014412:	429a      	cmp	r2, r3
 8014414:	d050      	beq.n	80144b8 <pvPortMalloc+0x150>
 8014416:	6a3b      	ldr	r3, [r7, #32]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2208      	movs	r2, #8
 801441c:	4413      	add	r3, r2
 801441e:	61fb      	str	r3, [r7, #28]
 8014420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	6a3b      	ldr	r3, [r7, #32]
 8014426:	601a      	str	r2, [r3, #0]
 8014428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442a:	685a      	ldr	r2, [r3, #4]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	1ad2      	subs	r2, r2, r3
 8014430:	2308      	movs	r3, #8
 8014432:	005b      	lsls	r3, r3, #1
 8014434:	429a      	cmp	r2, r3
 8014436:	d91f      	bls.n	8014478 <pvPortMalloc+0x110>
 8014438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	4413      	add	r3, r2
 801443e:	61bb      	str	r3, [r7, #24]
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	f003 0307 	and.w	r3, r3, #7
 8014446:	2b00      	cmp	r3, #0
 8014448:	d00a      	beq.n	8014460 <pvPortMalloc+0xf8>
 801444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801444e:	f383 8811 	msr	BASEPRI, r3
 8014452:	f3bf 8f6f 	isb	sy
 8014456:	f3bf 8f4f 	dsb	sy
 801445a:	613b      	str	r3, [r7, #16]
 801445c:	bf00      	nop
 801445e:	e7fe      	b.n	801445e <pvPortMalloc+0xf6>
 8014460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014462:	685a      	ldr	r2, [r3, #4]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	1ad2      	subs	r2, r2, r3
 8014468:	69bb      	ldr	r3, [r7, #24]
 801446a:	605a      	str	r2, [r3, #4]
 801446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	605a      	str	r2, [r3, #4]
 8014472:	69b8      	ldr	r0, [r7, #24]
 8014474:	f000 f908 	bl	8014688 <prvInsertBlockIntoFreeList>
 8014478:	4b1d      	ldr	r3, [pc, #116]	; (80144f0 <pvPortMalloc+0x188>)
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447e:	685b      	ldr	r3, [r3, #4]
 8014480:	1ad3      	subs	r3, r2, r3
 8014482:	4a1b      	ldr	r2, [pc, #108]	; (80144f0 <pvPortMalloc+0x188>)
 8014484:	6013      	str	r3, [r2, #0]
 8014486:	4b1a      	ldr	r3, [pc, #104]	; (80144f0 <pvPortMalloc+0x188>)
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	4b1b      	ldr	r3, [pc, #108]	; (80144f8 <pvPortMalloc+0x190>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	429a      	cmp	r2, r3
 8014490:	d203      	bcs.n	801449a <pvPortMalloc+0x132>
 8014492:	4b17      	ldr	r3, [pc, #92]	; (80144f0 <pvPortMalloc+0x188>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	4a18      	ldr	r2, [pc, #96]	; (80144f8 <pvPortMalloc+0x190>)
 8014498:	6013      	str	r3, [r2, #0]
 801449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449c:	685a      	ldr	r2, [r3, #4]
 801449e:	4b13      	ldr	r3, [pc, #76]	; (80144ec <pvPortMalloc+0x184>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	431a      	orrs	r2, r3
 80144a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a6:	605a      	str	r2, [r3, #4]
 80144a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144aa:	2200      	movs	r2, #0
 80144ac:	601a      	str	r2, [r3, #0]
 80144ae:	4b13      	ldr	r3, [pc, #76]	; (80144fc <pvPortMalloc+0x194>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	3301      	adds	r3, #1
 80144b4:	4a11      	ldr	r2, [pc, #68]	; (80144fc <pvPortMalloc+0x194>)
 80144b6:	6013      	str	r3, [r2, #0]
 80144b8:	f7fe fa5c 	bl	8012974 <xTaskResumeAll>
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	f003 0307 	and.w	r3, r3, #7
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d00a      	beq.n	80144dc <pvPortMalloc+0x174>
 80144c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ca:	f383 8811 	msr	BASEPRI, r3
 80144ce:	f3bf 8f6f 	isb	sy
 80144d2:	f3bf 8f4f 	dsb	sy
 80144d6:	60fb      	str	r3, [r7, #12]
 80144d8:	bf00      	nop
 80144da:	e7fe      	b.n	80144da <pvPortMalloc+0x172>
 80144dc:	69fb      	ldr	r3, [r7, #28]
 80144de:	4618      	mov	r0, r3
 80144e0:	3728      	adds	r7, #40	; 0x28
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	20008774 	.word	0x20008774
 80144ec:	20008788 	.word	0x20008788
 80144f0:	20008778 	.word	0x20008778
 80144f4:	2000876c 	.word	0x2000876c
 80144f8:	2000877c 	.word	0x2000877c
 80144fc:	20008780 	.word	0x20008780

08014500 <vPortFree>:
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	617b      	str	r3, [r7, #20]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d04d      	beq.n	80145ae <vPortFree+0xae>
 8014512:	2308      	movs	r3, #8
 8014514:	425b      	negs	r3, r3
 8014516:	697a      	ldr	r2, [r7, #20]
 8014518:	4413      	add	r3, r2
 801451a:	617b      	str	r3, [r7, #20]
 801451c:	697b      	ldr	r3, [r7, #20]
 801451e:	613b      	str	r3, [r7, #16]
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	685a      	ldr	r2, [r3, #4]
 8014524:	4b24      	ldr	r3, [pc, #144]	; (80145b8 <vPortFree+0xb8>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	4013      	ands	r3, r2
 801452a:	2b00      	cmp	r3, #0
 801452c:	d10a      	bne.n	8014544 <vPortFree+0x44>
 801452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014532:	f383 8811 	msr	BASEPRI, r3
 8014536:	f3bf 8f6f 	isb	sy
 801453a:	f3bf 8f4f 	dsb	sy
 801453e:	60fb      	str	r3, [r7, #12]
 8014540:	bf00      	nop
 8014542:	e7fe      	b.n	8014542 <vPortFree+0x42>
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d00a      	beq.n	8014562 <vPortFree+0x62>
 801454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014550:	f383 8811 	msr	BASEPRI, r3
 8014554:	f3bf 8f6f 	isb	sy
 8014558:	f3bf 8f4f 	dsb	sy
 801455c:	60bb      	str	r3, [r7, #8]
 801455e:	bf00      	nop
 8014560:	e7fe      	b.n	8014560 <vPortFree+0x60>
 8014562:	693b      	ldr	r3, [r7, #16]
 8014564:	685a      	ldr	r2, [r3, #4]
 8014566:	4b14      	ldr	r3, [pc, #80]	; (80145b8 <vPortFree+0xb8>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4013      	ands	r3, r2
 801456c:	2b00      	cmp	r3, #0
 801456e:	d01e      	beq.n	80145ae <vPortFree+0xae>
 8014570:	693b      	ldr	r3, [r7, #16]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d11a      	bne.n	80145ae <vPortFree+0xae>
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	685a      	ldr	r2, [r3, #4]
 801457c:	4b0e      	ldr	r3, [pc, #56]	; (80145b8 <vPortFree+0xb8>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	43db      	mvns	r3, r3
 8014582:	401a      	ands	r2, r3
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	605a      	str	r2, [r3, #4]
 8014588:	f7fe f9e6 	bl	8012958 <vTaskSuspendAll>
 801458c:	693b      	ldr	r3, [r7, #16]
 801458e:	685a      	ldr	r2, [r3, #4]
 8014590:	4b0a      	ldr	r3, [pc, #40]	; (80145bc <vPortFree+0xbc>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	4413      	add	r3, r2
 8014596:	4a09      	ldr	r2, [pc, #36]	; (80145bc <vPortFree+0xbc>)
 8014598:	6013      	str	r3, [r2, #0]
 801459a:	6938      	ldr	r0, [r7, #16]
 801459c:	f000 f874 	bl	8014688 <prvInsertBlockIntoFreeList>
 80145a0:	4b07      	ldr	r3, [pc, #28]	; (80145c0 <vPortFree+0xc0>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	3301      	adds	r3, #1
 80145a6:	4a06      	ldr	r2, [pc, #24]	; (80145c0 <vPortFree+0xc0>)
 80145a8:	6013      	str	r3, [r2, #0]
 80145aa:	f7fe f9e3 	bl	8012974 <xTaskResumeAll>
 80145ae:	bf00      	nop
 80145b0:	3718      	adds	r7, #24
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	20008788 	.word	0x20008788
 80145bc:	20008778 	.word	0x20008778
 80145c0:	20008784 	.word	0x20008784

080145c4 <prvHeapInit>:
 80145c4:	b480      	push	{r7}
 80145c6:	b085      	sub	sp, #20
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80145ce:	60bb      	str	r3, [r7, #8]
 80145d0:	4b27      	ldr	r3, [pc, #156]	; (8014670 <prvHeapInit+0xac>)
 80145d2:	60fb      	str	r3, [r7, #12]
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	f003 0307 	and.w	r3, r3, #7
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d00c      	beq.n	80145f8 <prvHeapInit+0x34>
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	3307      	adds	r3, #7
 80145e2:	60fb      	str	r3, [r7, #12]
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f023 0307 	bic.w	r3, r3, #7
 80145ea:	60fb      	str	r3, [r7, #12]
 80145ec:	68ba      	ldr	r2, [r7, #8]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	1ad3      	subs	r3, r2, r3
 80145f2:	4a1f      	ldr	r2, [pc, #124]	; (8014670 <prvHeapInit+0xac>)
 80145f4:	4413      	add	r3, r2
 80145f6:	60bb      	str	r3, [r7, #8]
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	607b      	str	r3, [r7, #4]
 80145fc:	4a1d      	ldr	r2, [pc, #116]	; (8014674 <prvHeapInit+0xb0>)
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6013      	str	r3, [r2, #0]
 8014602:	4b1c      	ldr	r3, [pc, #112]	; (8014674 <prvHeapInit+0xb0>)
 8014604:	2200      	movs	r2, #0
 8014606:	605a      	str	r2, [r3, #4]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	68ba      	ldr	r2, [r7, #8]
 801460c:	4413      	add	r3, r2
 801460e:	60fb      	str	r3, [r7, #12]
 8014610:	2208      	movs	r2, #8
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	1a9b      	subs	r3, r3, r2
 8014616:	60fb      	str	r3, [r7, #12]
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f023 0307 	bic.w	r3, r3, #7
 801461e:	60fb      	str	r3, [r7, #12]
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	4a15      	ldr	r2, [pc, #84]	; (8014678 <prvHeapInit+0xb4>)
 8014624:	6013      	str	r3, [r2, #0]
 8014626:	4b14      	ldr	r3, [pc, #80]	; (8014678 <prvHeapInit+0xb4>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2200      	movs	r2, #0
 801462c:	605a      	str	r2, [r3, #4]
 801462e:	4b12      	ldr	r3, [pc, #72]	; (8014678 <prvHeapInit+0xb4>)
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	2200      	movs	r2, #0
 8014634:	601a      	str	r2, [r3, #0]
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	603b      	str	r3, [r7, #0]
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	68fa      	ldr	r2, [r7, #12]
 801463e:	1ad2      	subs	r2, r2, r3
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	605a      	str	r2, [r3, #4]
 8014644:	4b0c      	ldr	r3, [pc, #48]	; (8014678 <prvHeapInit+0xb4>)
 8014646:	681a      	ldr	r2, [r3, #0]
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	601a      	str	r2, [r3, #0]
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	4a0a      	ldr	r2, [pc, #40]	; (801467c <prvHeapInit+0xb8>)
 8014652:	6013      	str	r3, [r2, #0]
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	4a09      	ldr	r2, [pc, #36]	; (8014680 <prvHeapInit+0xbc>)
 801465a:	6013      	str	r3, [r2, #0]
 801465c:	4b09      	ldr	r3, [pc, #36]	; (8014684 <prvHeapInit+0xc0>)
 801465e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014662:	601a      	str	r2, [r3, #0]
 8014664:	bf00      	nop
 8014666:	3714      	adds	r7, #20
 8014668:	46bd      	mov	sp, r7
 801466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466e:	4770      	bx	lr
 8014670:	20004b6c 	.word	0x20004b6c
 8014674:	2000876c 	.word	0x2000876c
 8014678:	20008774 	.word	0x20008774
 801467c:	2000877c 	.word	0x2000877c
 8014680:	20008778 	.word	0x20008778
 8014684:	20008788 	.word	0x20008788

08014688 <prvInsertBlockIntoFreeList>:
 8014688:	b480      	push	{r7}
 801468a:	b085      	sub	sp, #20
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	4b28      	ldr	r3, [pc, #160]	; (8014734 <prvInsertBlockIntoFreeList+0xac>)
 8014692:	60fb      	str	r3, [r7, #12]
 8014694:	e002      	b.n	801469c <prvInsertBlockIntoFreeList+0x14>
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	60fb      	str	r3, [r7, #12]
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	687a      	ldr	r2, [r7, #4]
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d8f7      	bhi.n	8014696 <prvInsertBlockIntoFreeList+0xe>
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	60bb      	str	r3, [r7, #8]
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	68ba      	ldr	r2, [r7, #8]
 80146b0:	4413      	add	r3, r2
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d108      	bne.n	80146ca <prvInsertBlockIntoFreeList+0x42>
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	685a      	ldr	r2, [r3, #4]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	441a      	add	r2, r3
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	605a      	str	r2, [r3, #4]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	607b      	str	r3, [r7, #4]
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	60bb      	str	r3, [r7, #8]
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	68ba      	ldr	r2, [r7, #8]
 80146d4:	441a      	add	r2, r3
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d118      	bne.n	8014710 <prvInsertBlockIntoFreeList+0x88>
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	681a      	ldr	r2, [r3, #0]
 80146e2:	4b15      	ldr	r3, [pc, #84]	; (8014738 <prvInsertBlockIntoFreeList+0xb0>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d00d      	beq.n	8014706 <prvInsertBlockIntoFreeList+0x7e>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	685a      	ldr	r2, [r3, #4]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	441a      	add	r2, r3
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	605a      	str	r2, [r3, #4]
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	601a      	str	r2, [r3, #0]
 8014704:	e008      	b.n	8014718 <prvInsertBlockIntoFreeList+0x90>
 8014706:	4b0c      	ldr	r3, [pc, #48]	; (8014738 <prvInsertBlockIntoFreeList+0xb0>)
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	601a      	str	r2, [r3, #0]
 801470e:	e003      	b.n	8014718 <prvInsertBlockIntoFreeList+0x90>
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	681a      	ldr	r2, [r3, #0]
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	601a      	str	r2, [r3, #0]
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	429a      	cmp	r2, r3
 801471e:	d002      	beq.n	8014726 <prvInsertBlockIntoFreeList+0x9e>
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	601a      	str	r2, [r3, #0]
 8014726:	bf00      	nop
 8014728:	3714      	adds	r7, #20
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop
 8014734:	2000876c 	.word	0x2000876c
 8014738:	20008774 	.word	0x20008774

0801473c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014740:	2200      	movs	r2, #0
 8014742:	4912      	ldr	r1, [pc, #72]	; (801478c <MX_USB_DEVICE_Init+0x50>)
 8014744:	4812      	ldr	r0, [pc, #72]	; (8014790 <MX_USB_DEVICE_Init+0x54>)
 8014746:	f7fb fbe1 	bl	800ff0c <USBD_Init>
 801474a:	4603      	mov	r3, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d001      	beq.n	8014754 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014750:	f7ed fdcc 	bl	80022ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014754:	490f      	ldr	r1, [pc, #60]	; (8014794 <MX_USB_DEVICE_Init+0x58>)
 8014756:	480e      	ldr	r0, [pc, #56]	; (8014790 <MX_USB_DEVICE_Init+0x54>)
 8014758:	f7fb fc08 	bl	800ff6c <USBD_RegisterClass>
 801475c:	4603      	mov	r3, r0
 801475e:	2b00      	cmp	r3, #0
 8014760:	d001      	beq.n	8014766 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014762:	f7ed fdc3 	bl	80022ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014766:	490c      	ldr	r1, [pc, #48]	; (8014798 <MX_USB_DEVICE_Init+0x5c>)
 8014768:	4809      	ldr	r0, [pc, #36]	; (8014790 <MX_USB_DEVICE_Init+0x54>)
 801476a:	f7fb faf9 	bl	800fd60 <USBD_CDC_RegisterInterface>
 801476e:	4603      	mov	r3, r0
 8014770:	2b00      	cmp	r3, #0
 8014772:	d001      	beq.n	8014778 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014774:	f7ed fdba 	bl	80022ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014778:	4805      	ldr	r0, [pc, #20]	; (8014790 <MX_USB_DEVICE_Init+0x54>)
 801477a:	f7fb fc2d 	bl	800ffd8 <USBD_Start>
 801477e:	4603      	mov	r3, r0
 8014780:	2b00      	cmp	r3, #0
 8014782:	d001      	beq.n	8014788 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014784:	f7ed fdb2 	bl	80022ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014788:	bf00      	nop
 801478a:	bd80      	pop	{r7, pc}
 801478c:	2000134c 	.word	0x2000134c
 8014790:	2000878c 	.word	0x2000878c
 8014794:	200012b4 	.word	0x200012b4
 8014798:	20001338 	.word	0x20001338

0801479c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80147a0:	2200      	movs	r2, #0
 80147a2:	4905      	ldr	r1, [pc, #20]	; (80147b8 <CDC_Init_FS+0x1c>)
 80147a4:	4805      	ldr	r0, [pc, #20]	; (80147bc <CDC_Init_FS+0x20>)
 80147a6:	f7fb faf5 	bl	800fd94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80147aa:	4905      	ldr	r1, [pc, #20]	; (80147c0 <CDC_Init_FS+0x24>)
 80147ac:	4803      	ldr	r0, [pc, #12]	; (80147bc <CDC_Init_FS+0x20>)
 80147ae:	f7fb fb13 	bl	800fdd8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80147b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	20009274 	.word	0x20009274
 80147bc:	2000878c 	.word	0x2000878c
 80147c0:	20008a74 	.word	0x20008a74

080147c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80147c4:	b480      	push	{r7}
 80147c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80147c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr

080147d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80147d4:	b480      	push	{r7}
 80147d6:	b083      	sub	sp, #12
 80147d8:	af00      	add	r7, sp, #0
 80147da:	4603      	mov	r3, r0
 80147dc:	6039      	str	r1, [r7, #0]
 80147de:	71fb      	strb	r3, [r7, #7]
 80147e0:	4613      	mov	r3, r2
 80147e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80147e4:	79fb      	ldrb	r3, [r7, #7]
 80147e6:	2b23      	cmp	r3, #35	; 0x23
 80147e8:	d84a      	bhi.n	8014880 <CDC_Control_FS+0xac>
 80147ea:	a201      	add	r2, pc, #4	; (adr r2, 80147f0 <CDC_Control_FS+0x1c>)
 80147ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147f0:	08014881 	.word	0x08014881
 80147f4:	08014881 	.word	0x08014881
 80147f8:	08014881 	.word	0x08014881
 80147fc:	08014881 	.word	0x08014881
 8014800:	08014881 	.word	0x08014881
 8014804:	08014881 	.word	0x08014881
 8014808:	08014881 	.word	0x08014881
 801480c:	08014881 	.word	0x08014881
 8014810:	08014881 	.word	0x08014881
 8014814:	08014881 	.word	0x08014881
 8014818:	08014881 	.word	0x08014881
 801481c:	08014881 	.word	0x08014881
 8014820:	08014881 	.word	0x08014881
 8014824:	08014881 	.word	0x08014881
 8014828:	08014881 	.word	0x08014881
 801482c:	08014881 	.word	0x08014881
 8014830:	08014881 	.word	0x08014881
 8014834:	08014881 	.word	0x08014881
 8014838:	08014881 	.word	0x08014881
 801483c:	08014881 	.word	0x08014881
 8014840:	08014881 	.word	0x08014881
 8014844:	08014881 	.word	0x08014881
 8014848:	08014881 	.word	0x08014881
 801484c:	08014881 	.word	0x08014881
 8014850:	08014881 	.word	0x08014881
 8014854:	08014881 	.word	0x08014881
 8014858:	08014881 	.word	0x08014881
 801485c:	08014881 	.word	0x08014881
 8014860:	08014881 	.word	0x08014881
 8014864:	08014881 	.word	0x08014881
 8014868:	08014881 	.word	0x08014881
 801486c:	08014881 	.word	0x08014881
 8014870:	08014881 	.word	0x08014881
 8014874:	08014881 	.word	0x08014881
 8014878:	08014881 	.word	0x08014881
 801487c:	08014881 	.word	0x08014881
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014880:	bf00      	nop
  }

  return (USBD_OK);
 8014882:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014884:	4618      	mov	r0, r3
 8014886:	370c      	adds	r7, #12
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr

08014890 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801489a:	6879      	ldr	r1, [r7, #4]
 801489c:	480a      	ldr	r0, [pc, #40]	; (80148c8 <CDC_Receive_FS+0x38>)
 801489e:	f7fb fa9b 	bl	800fdd8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80148a2:	4809      	ldr	r0, [pc, #36]	; (80148c8 <CDC_Receive_FS+0x38>)
 80148a4:	f7fb fafc 	bl	800fea0 <USBD_CDC_ReceivePacket>

  USB_Rx_Buf = &Buf[0];
 80148a8:	4a08      	ldr	r2, [pc, #32]	; (80148cc <CDC_Receive_FS+0x3c>)
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6013      	str	r3, [r2, #0]
  USB_Rx_Len = *Len;
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	4a07      	ldr	r2, [pc, #28]	; (80148d0 <CDC_Receive_FS+0x40>)
 80148b4:	6013      	str	r3, [r2, #0]
  USB_RxFlag = true;
 80148b6:	4b07      	ldr	r3, [pc, #28]	; (80148d4 <CDC_Receive_FS+0x44>)
 80148b8:	2201      	movs	r2, #1
 80148ba:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 80148bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	2000878c 	.word	0x2000878c
 80148cc:	20008a6c 	.word	0x20008a6c
 80148d0:	20008a70 	.word	0x20008a70
 80148d4:	20008a68 	.word	0x20008a68

080148d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b084      	sub	sp, #16
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	460b      	mov	r3, r1
 80148e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80148e4:	2300      	movs	r3, #0
 80148e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80148e8:	4b0d      	ldr	r3, [pc, #52]	; (8014920 <CDC_Transmit_FS+0x48>)
 80148ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80148ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d001      	beq.n	80148fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80148fa:	2301      	movs	r3, #1
 80148fc:	e00b      	b.n	8014916 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80148fe:	887b      	ldrh	r3, [r7, #2]
 8014900:	461a      	mov	r2, r3
 8014902:	6879      	ldr	r1, [r7, #4]
 8014904:	4806      	ldr	r0, [pc, #24]	; (8014920 <CDC_Transmit_FS+0x48>)
 8014906:	f7fb fa45 	bl	800fd94 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801490a:	4805      	ldr	r0, [pc, #20]	; (8014920 <CDC_Transmit_FS+0x48>)
 801490c:	f7fb fa82 	bl	800fe14 <USBD_CDC_TransmitPacket>
 8014910:	4603      	mov	r3, r0
 8014912:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014914:	7bfb      	ldrb	r3, [r7, #15]
}
 8014916:	4618      	mov	r0, r3
 8014918:	3710      	adds	r7, #16
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
 801491e:	bf00      	nop
 8014920:	2000878c 	.word	0x2000878c

08014924 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014924:	b480      	push	{r7}
 8014926:	b087      	sub	sp, #28
 8014928:	af00      	add	r7, sp, #0
 801492a:	60f8      	str	r0, [r7, #12]
 801492c:	60b9      	str	r1, [r7, #8]
 801492e:	4613      	mov	r3, r2
 8014930:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014932:	2300      	movs	r3, #0
 8014934:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014936:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801493a:	4618      	mov	r0, r3
 801493c:	371c      	adds	r7, #28
 801493e:	46bd      	mov	sp, r7
 8014940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014944:	4770      	bx	lr
	...

08014948 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014948:	b480      	push	{r7}
 801494a:	b083      	sub	sp, #12
 801494c:	af00      	add	r7, sp, #0
 801494e:	4603      	mov	r3, r0
 8014950:	6039      	str	r1, [r7, #0]
 8014952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	2212      	movs	r2, #18
 8014958:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801495a:	4b03      	ldr	r3, [pc, #12]	; (8014968 <USBD_FS_DeviceDescriptor+0x20>)
}
 801495c:	4618      	mov	r0, r3
 801495e:	370c      	adds	r7, #12
 8014960:	46bd      	mov	sp, r7
 8014962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014966:	4770      	bx	lr
 8014968:	20001368 	.word	0x20001368

0801496c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	4603      	mov	r3, r0
 8014974:	6039      	str	r1, [r7, #0]
 8014976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014978:	683b      	ldr	r3, [r7, #0]
 801497a:	2204      	movs	r2, #4
 801497c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801497e:	4b03      	ldr	r3, [pc, #12]	; (801498c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014980:	4618      	mov	r0, r3
 8014982:	370c      	adds	r7, #12
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr
 801498c:	2000137c 	.word	0x2000137c

08014990 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	af00      	add	r7, sp, #0
 8014996:	4603      	mov	r3, r0
 8014998:	6039      	str	r1, [r7, #0]
 801499a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801499c:	79fb      	ldrb	r3, [r7, #7]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d105      	bne.n	80149ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80149a2:	683a      	ldr	r2, [r7, #0]
 80149a4:	4907      	ldr	r1, [pc, #28]	; (80149c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80149a6:	4808      	ldr	r0, [pc, #32]	; (80149c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80149a8:	f7fc fcc2 	bl	8011330 <USBD_GetString>
 80149ac:	e004      	b.n	80149b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80149ae:	683a      	ldr	r2, [r7, #0]
 80149b0:	4904      	ldr	r1, [pc, #16]	; (80149c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80149b2:	4805      	ldr	r0, [pc, #20]	; (80149c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80149b4:	f7fc fcbc 	bl	8011330 <USBD_GetString>
  }
  return USBD_StrDesc;
 80149b8:	4b02      	ldr	r3, [pc, #8]	; (80149c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3708      	adds	r7, #8
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}
 80149c2:	bf00      	nop
 80149c4:	20009a74 	.word	0x20009a74
 80149c8:	08018a6c 	.word	0x08018a6c

080149cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b082      	sub	sp, #8
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	4603      	mov	r3, r0
 80149d4:	6039      	str	r1, [r7, #0]
 80149d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80149d8:	683a      	ldr	r2, [r7, #0]
 80149da:	4904      	ldr	r1, [pc, #16]	; (80149ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80149dc:	4804      	ldr	r0, [pc, #16]	; (80149f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80149de:	f7fc fca7 	bl	8011330 <USBD_GetString>
  return USBD_StrDesc;
 80149e2:	4b02      	ldr	r3, [pc, #8]	; (80149ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3708      	adds	r7, #8
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	20009a74 	.word	0x20009a74
 80149f0:	08018a84 	.word	0x08018a84

080149f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	4603      	mov	r3, r0
 80149fc:	6039      	str	r1, [r7, #0]
 80149fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	221a      	movs	r2, #26
 8014a04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014a06:	f000 f843 	bl	8014a90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014a0a:	4b02      	ldr	r3, [pc, #8]	; (8014a14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	3708      	adds	r7, #8
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}
 8014a14:	20001380 	.word	0x20001380

08014a18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b082      	sub	sp, #8
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	4603      	mov	r3, r0
 8014a20:	6039      	str	r1, [r7, #0]
 8014a22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014a24:	79fb      	ldrb	r3, [r7, #7]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d105      	bne.n	8014a36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014a2a:	683a      	ldr	r2, [r7, #0]
 8014a2c:	4907      	ldr	r1, [pc, #28]	; (8014a4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8014a2e:	4808      	ldr	r0, [pc, #32]	; (8014a50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014a30:	f7fc fc7e 	bl	8011330 <USBD_GetString>
 8014a34:	e004      	b.n	8014a40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014a36:	683a      	ldr	r2, [r7, #0]
 8014a38:	4904      	ldr	r1, [pc, #16]	; (8014a4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8014a3a:	4805      	ldr	r0, [pc, #20]	; (8014a50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014a3c:	f7fc fc78 	bl	8011330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a40:	4b02      	ldr	r3, [pc, #8]	; (8014a4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3708      	adds	r7, #8
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	20009a74 	.word	0x20009a74
 8014a50:	08018a98 	.word	0x08018a98

08014a54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	6039      	str	r1, [r7, #0]
 8014a5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014a60:	79fb      	ldrb	r3, [r7, #7]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d105      	bne.n	8014a72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014a66:	683a      	ldr	r2, [r7, #0]
 8014a68:	4907      	ldr	r1, [pc, #28]	; (8014a88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014a6a:	4808      	ldr	r0, [pc, #32]	; (8014a8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014a6c:	f7fc fc60 	bl	8011330 <USBD_GetString>
 8014a70:	e004      	b.n	8014a7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014a72:	683a      	ldr	r2, [r7, #0]
 8014a74:	4904      	ldr	r1, [pc, #16]	; (8014a88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014a76:	4805      	ldr	r0, [pc, #20]	; (8014a8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014a78:	f7fc fc5a 	bl	8011330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a7c:	4b02      	ldr	r3, [pc, #8]	; (8014a88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3708      	adds	r7, #8
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	bf00      	nop
 8014a88:	20009a74 	.word	0x20009a74
 8014a8c:	08018aa4 	.word	0x08018aa4

08014a90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b084      	sub	sp, #16
 8014a94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014a96:	4b0f      	ldr	r3, [pc, #60]	; (8014ad4 <Get_SerialNum+0x44>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014a9c:	4b0e      	ldr	r3, [pc, #56]	; (8014ad8 <Get_SerialNum+0x48>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014aa2:	4b0e      	ldr	r3, [pc, #56]	; (8014adc <Get_SerialNum+0x4c>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014aa8:	68fa      	ldr	r2, [r7, #12]
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	4413      	add	r3, r2
 8014aae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d009      	beq.n	8014aca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014ab6:	2208      	movs	r2, #8
 8014ab8:	4909      	ldr	r1, [pc, #36]	; (8014ae0 <Get_SerialNum+0x50>)
 8014aba:	68f8      	ldr	r0, [r7, #12]
 8014abc:	f000 f814 	bl	8014ae8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014ac0:	2204      	movs	r2, #4
 8014ac2:	4908      	ldr	r1, [pc, #32]	; (8014ae4 <Get_SerialNum+0x54>)
 8014ac4:	68b8      	ldr	r0, [r7, #8]
 8014ac6:	f000 f80f 	bl	8014ae8 <IntToUnicode>
  }
}
 8014aca:	bf00      	nop
 8014acc:	3710      	adds	r7, #16
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	1fff7a10 	.word	0x1fff7a10
 8014ad8:	1fff7a14 	.word	0x1fff7a14
 8014adc:	1fff7a18 	.word	0x1fff7a18
 8014ae0:	20001382 	.word	0x20001382
 8014ae4:	20001392 	.word	0x20001392

08014ae8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b087      	sub	sp, #28
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	60f8      	str	r0, [r7, #12]
 8014af0:	60b9      	str	r1, [r7, #8]
 8014af2:	4613      	mov	r3, r2
 8014af4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014af6:	2300      	movs	r3, #0
 8014af8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014afa:	2300      	movs	r3, #0
 8014afc:	75fb      	strb	r3, [r7, #23]
 8014afe:	e027      	b.n	8014b50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	0f1b      	lsrs	r3, r3, #28
 8014b04:	2b09      	cmp	r3, #9
 8014b06:	d80b      	bhi.n	8014b20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	0f1b      	lsrs	r3, r3, #28
 8014b0c:	b2da      	uxtb	r2, r3
 8014b0e:	7dfb      	ldrb	r3, [r7, #23]
 8014b10:	005b      	lsls	r3, r3, #1
 8014b12:	4619      	mov	r1, r3
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	440b      	add	r3, r1
 8014b18:	3230      	adds	r2, #48	; 0x30
 8014b1a:	b2d2      	uxtb	r2, r2
 8014b1c:	701a      	strb	r2, [r3, #0]
 8014b1e:	e00a      	b.n	8014b36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	0f1b      	lsrs	r3, r3, #28
 8014b24:	b2da      	uxtb	r2, r3
 8014b26:	7dfb      	ldrb	r3, [r7, #23]
 8014b28:	005b      	lsls	r3, r3, #1
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	440b      	add	r3, r1
 8014b30:	3237      	adds	r2, #55	; 0x37
 8014b32:	b2d2      	uxtb	r2, r2
 8014b34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	011b      	lsls	r3, r3, #4
 8014b3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014b3c:	7dfb      	ldrb	r3, [r7, #23]
 8014b3e:	005b      	lsls	r3, r3, #1
 8014b40:	3301      	adds	r3, #1
 8014b42:	68ba      	ldr	r2, [r7, #8]
 8014b44:	4413      	add	r3, r2
 8014b46:	2200      	movs	r2, #0
 8014b48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014b4a:	7dfb      	ldrb	r3, [r7, #23]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	75fb      	strb	r3, [r7, #23]
 8014b50:	7dfa      	ldrb	r2, [r7, #23]
 8014b52:	79fb      	ldrb	r3, [r7, #7]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d3d3      	bcc.n	8014b00 <IntToUnicode+0x18>
  }
}
 8014b58:	bf00      	nop
 8014b5a:	bf00      	nop
 8014b5c:	371c      	adds	r7, #28
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b64:	4770      	bx	lr
	...

08014b68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b08a      	sub	sp, #40	; 0x28
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b70:	f107 0314 	add.w	r3, r7, #20
 8014b74:	2200      	movs	r2, #0
 8014b76:	601a      	str	r2, [r3, #0]
 8014b78:	605a      	str	r2, [r3, #4]
 8014b7a:	609a      	str	r2, [r3, #8]
 8014b7c:	60da      	str	r2, [r3, #12]
 8014b7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014b88:	d13a      	bne.n	8014c00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	613b      	str	r3, [r7, #16]
 8014b8e:	4b1e      	ldr	r3, [pc, #120]	; (8014c08 <HAL_PCD_MspInit+0xa0>)
 8014b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b92:	4a1d      	ldr	r2, [pc, #116]	; (8014c08 <HAL_PCD_MspInit+0xa0>)
 8014b94:	f043 0301 	orr.w	r3, r3, #1
 8014b98:	6313      	str	r3, [r2, #48]	; 0x30
 8014b9a:	4b1b      	ldr	r3, [pc, #108]	; (8014c08 <HAL_PCD_MspInit+0xa0>)
 8014b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b9e:	f003 0301 	and.w	r3, r3, #1
 8014ba2:	613b      	str	r3, [r7, #16]
 8014ba4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014ba6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014bac:	2302      	movs	r3, #2
 8014bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014bb4:	2303      	movs	r3, #3
 8014bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014bb8:	230a      	movs	r3, #10
 8014bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014bbc:	f107 0314 	add.w	r3, r7, #20
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	4812      	ldr	r0, [pc, #72]	; (8014c0c <HAL_PCD_MspInit+0xa4>)
 8014bc4:	f7f1 ff4e 	bl	8006a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014bc8:	4b0f      	ldr	r3, [pc, #60]	; (8014c08 <HAL_PCD_MspInit+0xa0>)
 8014bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bcc:	4a0e      	ldr	r2, [pc, #56]	; (8014c08 <HAL_PCD_MspInit+0xa0>)
 8014bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bd2:	6353      	str	r3, [r2, #52]	; 0x34
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	60fb      	str	r3, [r7, #12]
 8014bd8:	4b0b      	ldr	r3, [pc, #44]	; (8014c08 <HAL_PCD_MspInit+0xa0>)
 8014bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bdc:	4a0a      	ldr	r2, [pc, #40]	; (8014c08 <HAL_PCD_MspInit+0xa0>)
 8014bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014be2:	6453      	str	r3, [r2, #68]	; 0x44
 8014be4:	4b08      	ldr	r3, [pc, #32]	; (8014c08 <HAL_PCD_MspInit+0xa0>)
 8014be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014bec:	60fb      	str	r3, [r7, #12]
 8014bee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	2105      	movs	r1, #5
 8014bf4:	2043      	movs	r0, #67	; 0x43
 8014bf6:	f7f1 f975 	bl	8005ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014bfa:	2043      	movs	r0, #67	; 0x43
 8014bfc:	f7f1 f99e 	bl	8005f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014c00:	bf00      	nop
 8014c02:	3728      	adds	r7, #40	; 0x28
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}
 8014c08:	40023800 	.word	0x40023800
 8014c0c:	40020000 	.word	0x40020000

08014c10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8014c24:	4619      	mov	r1, r3
 8014c26:	4610      	mov	r0, r2
 8014c28:	f7fb fa23 	bl	8010072 <USBD_LL_SetupStage>
}
 8014c2c:	bf00      	nop
 8014c2e:	3708      	adds	r7, #8
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}

08014c34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b082      	sub	sp, #8
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014c46:	78fa      	ldrb	r2, [r7, #3]
 8014c48:	6879      	ldr	r1, [r7, #4]
 8014c4a:	4613      	mov	r3, r2
 8014c4c:	00db      	lsls	r3, r3, #3
 8014c4e:	4413      	add	r3, r2
 8014c50:	009b      	lsls	r3, r3, #2
 8014c52:	440b      	add	r3, r1
 8014c54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	78fb      	ldrb	r3, [r7, #3]
 8014c5c:	4619      	mov	r1, r3
 8014c5e:	f7fb fa5d 	bl	801011c <USBD_LL_DataOutStage>
}
 8014c62:	bf00      	nop
 8014c64:	3708      	adds	r7, #8
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}

08014c6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c6a:	b580      	push	{r7, lr}
 8014c6c:	b082      	sub	sp, #8
 8014c6e:	af00      	add	r7, sp, #0
 8014c70:	6078      	str	r0, [r7, #4]
 8014c72:	460b      	mov	r3, r1
 8014c74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014c7c:	78fa      	ldrb	r2, [r7, #3]
 8014c7e:	6879      	ldr	r1, [r7, #4]
 8014c80:	4613      	mov	r3, r2
 8014c82:	00db      	lsls	r3, r3, #3
 8014c84:	4413      	add	r3, r2
 8014c86:	009b      	lsls	r3, r3, #2
 8014c88:	440b      	add	r3, r1
 8014c8a:	334c      	adds	r3, #76	; 0x4c
 8014c8c:	681a      	ldr	r2, [r3, #0]
 8014c8e:	78fb      	ldrb	r3, [r7, #3]
 8014c90:	4619      	mov	r1, r3
 8014c92:	f7fb faf6 	bl	8010282 <USBD_LL_DataInStage>
}
 8014c96:	bf00      	nop
 8014c98:	3708      	adds	r7, #8
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}

08014c9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c9e:	b580      	push	{r7, lr}
 8014ca0:	b082      	sub	sp, #8
 8014ca2:	af00      	add	r7, sp, #0
 8014ca4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7fb fc2a 	bl	8010506 <USBD_LL_SOF>
}
 8014cb2:	bf00      	nop
 8014cb4:	3708      	adds	r7, #8
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}

08014cba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cba:	b580      	push	{r7, lr}
 8014cbc:	b084      	sub	sp, #16
 8014cbe:	af00      	add	r7, sp, #0
 8014cc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014cc2:	2301      	movs	r3, #1
 8014cc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	68db      	ldr	r3, [r3, #12]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d102      	bne.n	8014cd4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	73fb      	strb	r3, [r7, #15]
 8014cd2:	e008      	b.n	8014ce6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	68db      	ldr	r3, [r3, #12]
 8014cd8:	2b02      	cmp	r3, #2
 8014cda:	d102      	bne.n	8014ce2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014cdc:	2301      	movs	r3, #1
 8014cde:	73fb      	strb	r3, [r7, #15]
 8014ce0:	e001      	b.n	8014ce6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014ce2:	f7ed fb03 	bl	80022ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014cec:	7bfa      	ldrb	r2, [r7, #15]
 8014cee:	4611      	mov	r1, r2
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f7fb fbca 	bl	801048a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7fb fb72 	bl	80103e6 <USBD_LL_Reset>
}
 8014d02:	bf00      	nop
 8014d04:	3710      	adds	r7, #16
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
	...

08014d0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b082      	sub	sp, #8
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7fb fbc5 	bl	80104aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	6812      	ldr	r2, [r2, #0]
 8014d2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014d32:	f043 0301 	orr.w	r3, r3, #1
 8014d36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6a1b      	ldr	r3, [r3, #32]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d005      	beq.n	8014d4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014d40:	4b04      	ldr	r3, [pc, #16]	; (8014d54 <HAL_PCD_SuspendCallback+0x48>)
 8014d42:	691b      	ldr	r3, [r3, #16]
 8014d44:	4a03      	ldr	r2, [pc, #12]	; (8014d54 <HAL_PCD_SuspendCallback+0x48>)
 8014d46:	f043 0306 	orr.w	r3, r3, #6
 8014d4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014d4c:	bf00      	nop
 8014d4e:	3708      	adds	r7, #8
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}
 8014d54:	e000ed00 	.word	0xe000ed00

08014d58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b082      	sub	sp, #8
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7fb fbb5 	bl	80104d6 <USBD_LL_Resume>
}
 8014d6c:	bf00      	nop
 8014d6e:	3708      	adds	r7, #8
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014d86:	78fa      	ldrb	r2, [r7, #3]
 8014d88:	4611      	mov	r1, r2
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fb fc0d 	bl	80105aa <USBD_LL_IsoOUTIncomplete>
}
 8014d90:	bf00      	nop
 8014d92:	3708      	adds	r7, #8
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}

08014d98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b082      	sub	sp, #8
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	460b      	mov	r3, r1
 8014da2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014daa:	78fa      	ldrb	r2, [r7, #3]
 8014dac:	4611      	mov	r1, r2
 8014dae:	4618      	mov	r0, r3
 8014db0:	f7fb fbc9 	bl	8010546 <USBD_LL_IsoINIncomplete>
}
 8014db4:	bf00      	nop
 8014db6:	3708      	adds	r7, #8
 8014db8:	46bd      	mov	sp, r7
 8014dba:	bd80      	pop	{r7, pc}

08014dbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b082      	sub	sp, #8
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7fb fc1f 	bl	801060e <USBD_LL_DevConnected>
}
 8014dd0:	bf00      	nop
 8014dd2:	3708      	adds	r7, #8
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7fb fc1c 	bl	8010624 <USBD_LL_DevDisconnected>
}
 8014dec:	bf00      	nop
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b082      	sub	sp, #8
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	781b      	ldrb	r3, [r3, #0]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d13c      	bne.n	8014e7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014e04:	4a20      	ldr	r2, [pc, #128]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	4a1e      	ldr	r2, [pc, #120]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014e14:	4b1c      	ldr	r3, [pc, #112]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014e1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8014e1c:	4b1a      	ldr	r3, [pc, #104]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e1e:	2204      	movs	r2, #4
 8014e20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014e22:	4b19      	ldr	r3, [pc, #100]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e24:	2202      	movs	r2, #2
 8014e26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014e28:	4b17      	ldr	r3, [pc, #92]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014e2e:	4b16      	ldr	r3, [pc, #88]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e30:	2202      	movs	r2, #2
 8014e32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014e34:	4b14      	ldr	r3, [pc, #80]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e36:	2200      	movs	r2, #0
 8014e38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014e3a:	4b13      	ldr	r3, [pc, #76]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014e40:	4b11      	ldr	r3, [pc, #68]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e42:	2200      	movs	r2, #0
 8014e44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014e46:	4b10      	ldr	r3, [pc, #64]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e48:	2200      	movs	r2, #0
 8014e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014e4c:	4b0e      	ldr	r3, [pc, #56]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e4e:	2200      	movs	r2, #0
 8014e50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014e52:	480d      	ldr	r0, [pc, #52]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e54:	f7f2 f932 	bl	80070bc <HAL_PCD_Init>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d001      	beq.n	8014e62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014e5e:	f7ed fa45 	bl	80022ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014e62:	2180      	movs	r1, #128	; 0x80
 8014e64:	4808      	ldr	r0, [pc, #32]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e66:	f7f3 fb9c 	bl	80085a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014e6a:	2240      	movs	r2, #64	; 0x40
 8014e6c:	2100      	movs	r1, #0
 8014e6e:	4806      	ldr	r0, [pc, #24]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e70:	f7f3 fb50 	bl	8008514 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014e74:	2280      	movs	r2, #128	; 0x80
 8014e76:	2101      	movs	r1, #1
 8014e78:	4803      	ldr	r0, [pc, #12]	; (8014e88 <USBD_LL_Init+0x94>)
 8014e7a:	f7f3 fb4b 	bl	8008514 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014e7e:	2300      	movs	r3, #0
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	3708      	adds	r7, #8
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	20009c74 	.word	0x20009c74

08014e8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b084      	sub	sp, #16
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e94:	2300      	movs	r3, #0
 8014e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7f2 fa3a 	bl	800731c <HAL_PCD_Start>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014eac:	7bfb      	ldrb	r3, [r7, #15]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f000 f942 	bl	8015138 <USBD_Get_USB_Status>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014eb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3710      	adds	r7, #16
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}

08014ec2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014ec2:	b580      	push	{r7, lr}
 8014ec4:	b084      	sub	sp, #16
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	6078      	str	r0, [r7, #4]
 8014eca:	4608      	mov	r0, r1
 8014ecc:	4611      	mov	r1, r2
 8014ece:	461a      	mov	r2, r3
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	70fb      	strb	r3, [r7, #3]
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	70bb      	strb	r3, [r7, #2]
 8014ed8:	4613      	mov	r3, r2
 8014eda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014edc:	2300      	movs	r3, #0
 8014ede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014eea:	78bb      	ldrb	r3, [r7, #2]
 8014eec:	883a      	ldrh	r2, [r7, #0]
 8014eee:	78f9      	ldrb	r1, [r7, #3]
 8014ef0:	f7f2 ff0b 	bl	8007d0a <HAL_PCD_EP_Open>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ef8:	7bfb      	ldrb	r3, [r7, #15]
 8014efa:	4618      	mov	r0, r3
 8014efc:	f000 f91c 	bl	8015138 <USBD_Get_USB_Status>
 8014f00:	4603      	mov	r3, r0
 8014f02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3710      	adds	r7, #16
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}

08014f0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f0e:	b580      	push	{r7, lr}
 8014f10:	b084      	sub	sp, #16
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	6078      	str	r0, [r7, #4]
 8014f16:	460b      	mov	r3, r1
 8014f18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014f28:	78fa      	ldrb	r2, [r7, #3]
 8014f2a:	4611      	mov	r1, r2
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f7f2 ff54 	bl	8007dda <HAL_PCD_EP_Close>
 8014f32:	4603      	mov	r3, r0
 8014f34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f36:	7bfb      	ldrb	r3, [r7, #15]
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f000 f8fd 	bl	8015138 <USBD_Get_USB_Status>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f42:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3710      	adds	r7, #16
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b084      	sub	sp, #16
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	460b      	mov	r3, r1
 8014f56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014f66:	78fa      	ldrb	r2, [r7, #3]
 8014f68:	4611      	mov	r1, r2
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f7f3 f82c 	bl	8007fc8 <HAL_PCD_EP_SetStall>
 8014f70:	4603      	mov	r3, r0
 8014f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f74:	7bfb      	ldrb	r3, [r7, #15]
 8014f76:	4618      	mov	r0, r3
 8014f78:	f000 f8de 	bl	8015138 <USBD_Get_USB_Status>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	3710      	adds	r7, #16
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}

08014f8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f8a:	b580      	push	{r7, lr}
 8014f8c:	b084      	sub	sp, #16
 8014f8e:	af00      	add	r7, sp, #0
 8014f90:	6078      	str	r0, [r7, #4]
 8014f92:	460b      	mov	r3, r1
 8014f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f96:	2300      	movs	r3, #0
 8014f98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014fa4:	78fa      	ldrb	r2, [r7, #3]
 8014fa6:	4611      	mov	r1, r2
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f7f3 f871 	bl	8008090 <HAL_PCD_EP_ClrStall>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014fb2:	7bfb      	ldrb	r3, [r7, #15]
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f000 f8bf 	bl	8015138 <USBD_Get_USB_Status>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3710      	adds	r7, #16
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014fc8:	b480      	push	{r7}
 8014fca:	b085      	sub	sp, #20
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014fda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	da0b      	bge.n	8014ffc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014fe4:	78fb      	ldrb	r3, [r7, #3]
 8014fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014fea:	68f9      	ldr	r1, [r7, #12]
 8014fec:	4613      	mov	r3, r2
 8014fee:	00db      	lsls	r3, r3, #3
 8014ff0:	4413      	add	r3, r2
 8014ff2:	009b      	lsls	r3, r3, #2
 8014ff4:	440b      	add	r3, r1
 8014ff6:	333e      	adds	r3, #62	; 0x3e
 8014ff8:	781b      	ldrb	r3, [r3, #0]
 8014ffa:	e00b      	b.n	8015014 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014ffc:	78fb      	ldrb	r3, [r7, #3]
 8014ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015002:	68f9      	ldr	r1, [r7, #12]
 8015004:	4613      	mov	r3, r2
 8015006:	00db      	lsls	r3, r3, #3
 8015008:	4413      	add	r3, r2
 801500a:	009b      	lsls	r3, r3, #2
 801500c:	440b      	add	r3, r1
 801500e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015012:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015014:	4618      	mov	r0, r3
 8015016:	3714      	adds	r7, #20
 8015018:	46bd      	mov	sp, r7
 801501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501e:	4770      	bx	lr

08015020 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
 8015028:	460b      	mov	r3, r1
 801502a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801502c:	2300      	movs	r3, #0
 801502e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015030:	2300      	movs	r3, #0
 8015032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801503a:	78fa      	ldrb	r2, [r7, #3]
 801503c:	4611      	mov	r1, r2
 801503e:	4618      	mov	r0, r3
 8015040:	f7f2 fe3e 	bl	8007cc0 <HAL_PCD_SetAddress>
 8015044:	4603      	mov	r3, r0
 8015046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015048:	7bfb      	ldrb	r3, [r7, #15]
 801504a:	4618      	mov	r0, r3
 801504c:	f000 f874 	bl	8015138 <USBD_Get_USB_Status>
 8015050:	4603      	mov	r3, r0
 8015052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015054:	7bbb      	ldrb	r3, [r7, #14]
}
 8015056:	4618      	mov	r0, r3
 8015058:	3710      	adds	r7, #16
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}

0801505e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801505e:	b580      	push	{r7, lr}
 8015060:	b086      	sub	sp, #24
 8015062:	af00      	add	r7, sp, #0
 8015064:	60f8      	str	r0, [r7, #12]
 8015066:	607a      	str	r2, [r7, #4]
 8015068:	603b      	str	r3, [r7, #0]
 801506a:	460b      	mov	r3, r1
 801506c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801506e:	2300      	movs	r3, #0
 8015070:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015072:	2300      	movs	r3, #0
 8015074:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801507c:	7af9      	ldrb	r1, [r7, #11]
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	687a      	ldr	r2, [r7, #4]
 8015082:	f7f2 ff57 	bl	8007f34 <HAL_PCD_EP_Transmit>
 8015086:	4603      	mov	r3, r0
 8015088:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801508a:	7dfb      	ldrb	r3, [r7, #23]
 801508c:	4618      	mov	r0, r3
 801508e:	f000 f853 	bl	8015138 <USBD_Get_USB_Status>
 8015092:	4603      	mov	r3, r0
 8015094:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015096:	7dbb      	ldrb	r3, [r7, #22]
}
 8015098:	4618      	mov	r0, r3
 801509a:	3718      	adds	r7, #24
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}

080150a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b086      	sub	sp, #24
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	60f8      	str	r0, [r7, #12]
 80150a8:	607a      	str	r2, [r7, #4]
 80150aa:	603b      	str	r3, [r7, #0]
 80150ac:	460b      	mov	r3, r1
 80150ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150b0:	2300      	movs	r3, #0
 80150b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150b4:	2300      	movs	r3, #0
 80150b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80150be:	7af9      	ldrb	r1, [r7, #11]
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	687a      	ldr	r2, [r7, #4]
 80150c4:	f7f2 fed3 	bl	8007e6e <HAL_PCD_EP_Receive>
 80150c8:	4603      	mov	r3, r0
 80150ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150cc:	7dfb      	ldrb	r3, [r7, #23]
 80150ce:	4618      	mov	r0, r3
 80150d0:	f000 f832 	bl	8015138 <USBD_Get_USB_Status>
 80150d4:	4603      	mov	r3, r0
 80150d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80150d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80150da:	4618      	mov	r0, r3
 80150dc:	3718      	adds	r7, #24
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}

080150e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150e2:	b580      	push	{r7, lr}
 80150e4:	b082      	sub	sp, #8
 80150e6:	af00      	add	r7, sp, #0
 80150e8:	6078      	str	r0, [r7, #4]
 80150ea:	460b      	mov	r3, r1
 80150ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80150f4:	78fa      	ldrb	r2, [r7, #3]
 80150f6:	4611      	mov	r1, r2
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7f2 ff03 	bl	8007f04 <HAL_PCD_EP_GetRxCount>
 80150fe:	4603      	mov	r3, r0
}
 8015100:	4618      	mov	r0, r3
 8015102:	3708      	adds	r7, #8
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015108:	b480      	push	{r7}
 801510a:	b083      	sub	sp, #12
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015110:	4b03      	ldr	r3, [pc, #12]	; (8015120 <USBD_static_malloc+0x18>)
}
 8015112:	4618      	mov	r0, r3
 8015114:	370c      	adds	r7, #12
 8015116:	46bd      	mov	sp, r7
 8015118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511c:	4770      	bx	lr
 801511e:	bf00      	nop
 8015120:	2000a180 	.word	0x2000a180

08015124 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015124:	b480      	push	{r7}
 8015126:	b083      	sub	sp, #12
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]

}
 801512c:	bf00      	nop
 801512e:	370c      	adds	r7, #12
 8015130:	46bd      	mov	sp, r7
 8015132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015136:	4770      	bx	lr

08015138 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015138:	b480      	push	{r7}
 801513a:	b085      	sub	sp, #20
 801513c:	af00      	add	r7, sp, #0
 801513e:	4603      	mov	r3, r0
 8015140:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015142:	2300      	movs	r3, #0
 8015144:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015146:	79fb      	ldrb	r3, [r7, #7]
 8015148:	2b03      	cmp	r3, #3
 801514a:	d817      	bhi.n	801517c <USBD_Get_USB_Status+0x44>
 801514c:	a201      	add	r2, pc, #4	; (adr r2, 8015154 <USBD_Get_USB_Status+0x1c>)
 801514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015152:	bf00      	nop
 8015154:	08015165 	.word	0x08015165
 8015158:	0801516b 	.word	0x0801516b
 801515c:	08015171 	.word	0x08015171
 8015160:	08015177 	.word	0x08015177
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015164:	2300      	movs	r3, #0
 8015166:	73fb      	strb	r3, [r7, #15]
    break;
 8015168:	e00b      	b.n	8015182 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801516a:	2303      	movs	r3, #3
 801516c:	73fb      	strb	r3, [r7, #15]
    break;
 801516e:	e008      	b.n	8015182 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015170:	2301      	movs	r3, #1
 8015172:	73fb      	strb	r3, [r7, #15]
    break;
 8015174:	e005      	b.n	8015182 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015176:	2303      	movs	r3, #3
 8015178:	73fb      	strb	r3, [r7, #15]
    break;
 801517a:	e002      	b.n	8015182 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801517c:	2303      	movs	r3, #3
 801517e:	73fb      	strb	r3, [r7, #15]
    break;
 8015180:	bf00      	nop
  }
  return usb_status;
 8015182:	7bfb      	ldrb	r3, [r7, #15]
}
 8015184:	4618      	mov	r0, r3
 8015186:	3714      	adds	r7, #20
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr

08015190 <arm_fir_init_f32>:
 8015190:	b570      	push	{r4, r5, r6, lr}
 8015192:	9c04      	ldr	r4, [sp, #16]
 8015194:	6082      	str	r2, [r0, #8]
 8015196:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 801519a:	3c01      	subs	r4, #1
 801519c:	4605      	mov	r5, r0
 801519e:	440c      	add	r4, r1
 80151a0:	8001      	strh	r1, [r0, #0]
 80151a2:	461e      	mov	r6, r3
 80151a4:	00a2      	lsls	r2, r4, #2
 80151a6:	4618      	mov	r0, r3
 80151a8:	2100      	movs	r1, #0
 80151aa:	f001 f8b6 	bl	801631a <memset>
 80151ae:	606e      	str	r6, [r5, #4]
 80151b0:	bd70      	pop	{r4, r5, r6, pc}
 80151b2:	bf00      	nop

080151b4 <arm_fir_f32>:
 80151b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151b8:	ed2d 8b10 	vpush	{d8-d15}
 80151bc:	b089      	sub	sp, #36	; 0x24
 80151be:	4605      	mov	r5, r0
 80151c0:	9003      	str	r0, [sp, #12]
 80151c2:	8800      	ldrh	r0, [r0, #0]
 80151c4:	9304      	str	r3, [sp, #16]
 80151c6:	461e      	mov	r6, r3
 80151c8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80151cc:	9001      	str	r0, [sp, #4]
 80151ce:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80151d2:	3b01      	subs	r3, #1
 80151d4:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 80151d8:	08f3      	lsrs	r3, r6, #3
 80151da:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80151de:	9400      	str	r4, [sp, #0]
 80151e0:	9302      	str	r3, [sp, #8]
 80151e2:	f000 81ef 	beq.w	80155c4 <arm_fir_f32+0x410>
 80151e6:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 80151ea:	469e      	mov	lr, r3
 80151ec:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80151f0:	1f1e      	subs	r6, r3, #4
 80151f2:	4625      	mov	r5, r4
 80151f4:	9605      	str	r6, [sp, #20]
 80151f6:	4604      	mov	r4, r0
 80151f8:	eb08 0003 	add.w	r0, r8, r3
 80151fc:	f004 0a07 	and.w	sl, r4, #7
 8015200:	4613      	mov	r3, r2
 8015202:	f10c 0420 	add.w	r4, ip, #32
 8015206:	f8cd c018 	str.w	ip, [sp, #24]
 801520a:	4684      	mov	ip, r0
 801520c:	4648      	mov	r0, r9
 801520e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8015212:	9107      	str	r1, [sp, #28]
 8015214:	f105 0720 	add.w	r7, r5, #32
 8015218:	f101 0620 	add.w	r6, r1, #32
 801521c:	f102 0520 	add.w	r5, r2, #32
 8015220:	4652      	mov	r2, sl
 8015222:	469a      	mov	sl, r3
 8015224:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8015228:	f847 3c20 	str.w	r3, [r7, #-32]
 801522c:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8015230:	f847 3c1c 	str.w	r3, [r7, #-28]
 8015234:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8015238:	f847 3c18 	str.w	r3, [r7, #-24]
 801523c:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8015240:	f847 3c14 	str.w	r3, [r7, #-20]
 8015244:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8015248:	f847 3c10 	str.w	r3, [r7, #-16]
 801524c:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8015250:	f847 3c0c 	str.w	r3, [r7, #-12]
 8015254:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8015258:	f847 3c08 	str.w	r3, [r7, #-8]
 801525c:	eddf 3af1 	vldr	s7, [pc, #964]	; 8015624 <arm_fir_f32+0x470>
 8015260:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015264:	f847 3c04 	str.w	r3, [r7, #-4]
 8015268:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 801526c:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8015270:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8015274:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8015278:	ed14 1a04 	vldr	s2, [r4, #-16]
 801527c:	ed54 0a03 	vldr	s1, [r4, #-12]
 8015280:	ed14 0a02 	vldr	s0, [r4, #-8]
 8015284:	1f21      	subs	r1, r4, #4
 8015286:	eef0 8a63 	vmov.f32	s17, s7
 801528a:	eef0 9a63 	vmov.f32	s19, s7
 801528e:	eef0 aa63 	vmov.f32	s21, s7
 8015292:	eef0 ba63 	vmov.f32	s23, s7
 8015296:	eeb0 ca63 	vmov.f32	s24, s7
 801529a:	eef0 ca63 	vmov.f32	s25, s7
 801529e:	eeb0 da63 	vmov.f32	s26, s7
 80152a2:	2800      	cmp	r0, #0
 80152a4:	f000 81e8 	beq.w	8015678 <arm_fir_f32+0x4c4>
 80152a8:	f108 0120 	add.w	r1, r8, #32
 80152ac:	f104 031c 	add.w	r3, r4, #28
 80152b0:	4683      	mov	fp, r0
 80152b2:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 80152b6:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 80152ba:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 80152be:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 80152c2:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 80152c6:	ed11 6a04 	vldr	s12, [r1, #-16]
 80152ca:	ed51 6a03 	vldr	s13, [r1, #-12]
 80152ce:	ed11 7a02 	vldr	s14, [r1, #-8]
 80152d2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80152d6:	ee24 fa03 	vmul.f32	s30, s8, s6
 80152da:	ee64 ea22 	vmul.f32	s29, s8, s5
 80152de:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 80152e2:	ee24 ea02 	vmul.f32	s28, s8, s4
 80152e6:	ee64 da21 	vmul.f32	s27, s8, s3
 80152ea:	ee24 ba01 	vmul.f32	s22, s8, s2
 80152ee:	ee24 aa20 	vmul.f32	s20, s8, s1
 80152f2:	ee24 9a00 	vmul.f32	s18, s8, s0
 80152f6:	ee24 4a08 	vmul.f32	s8, s8, s16
 80152fa:	ee3f da0d 	vadd.f32	s26, s30, s26
 80152fe:	ee74 3a23 	vadd.f32	s7, s8, s7
 8015302:	ee24 faa2 	vmul.f32	s30, s9, s5
 8015306:	ee7e caac 	vadd.f32	s25, s29, s25
 801530a:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 801530e:	ee64 ea82 	vmul.f32	s29, s9, s4
 8015312:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8015316:	ee7d baab 	vadd.f32	s23, s27, s23
 801531a:	ee24 eaa1 	vmul.f32	s28, s9, s3
 801531e:	ee64 da81 	vmul.f32	s27, s9, s2
 8015322:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8015326:	ee7a 9a29 	vadd.f32	s19, s20, s19
 801532a:	ee24 baa0 	vmul.f32	s22, s9, s1
 801532e:	ee24 aa80 	vmul.f32	s20, s9, s0
 8015332:	ee79 8a28 	vadd.f32	s17, s18, s17
 8015336:	ee28 9a24 	vmul.f32	s18, s16, s9
 801533a:	ee64 4a83 	vmul.f32	s9, s9, s6
 801533e:	ee25 4a02 	vmul.f32	s8, s10, s4
 8015342:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8015346:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 801534a:	ee7e caac 	vadd.f32	s25, s29, s25
 801534e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8015352:	ee65 ea21 	vmul.f32	s29, s10, s3
 8015356:	ee25 ea01 	vmul.f32	s28, s10, s2
 801535a:	ee7d baab 	vadd.f32	s23, s27, s23
 801535e:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8015362:	ee65 da20 	vmul.f32	s27, s10, s1
 8015366:	ee25 ba00 	vmul.f32	s22, s10, s0
 801536a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 801536e:	ee79 8a28 	vadd.f32	s17, s18, s17
 8015372:	ee28 aa05 	vmul.f32	s20, s16, s10
 8015376:	ee23 9a05 	vmul.f32	s18, s6, s10
 801537a:	ee3d da0f 	vadd.f32	s26, s26, s30
 801537e:	ee25 5a22 	vmul.f32	s10, s10, s5
 8015382:	ee65 3aa1 	vmul.f32	s7, s11, s3
 8015386:	ee35 5a24 	vadd.f32	s10, s10, s9
 801538a:	ed53 1a04 	vldr	s3, [r3, #-16]
 801538e:	ee7e caac 	vadd.f32	s25, s29, s25
 8015392:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8015396:	ee65 ea81 	vmul.f32	s29, s11, s2
 801539a:	ee25 eaa0 	vmul.f32	s28, s11, s1
 801539e:	ee7d baab 	vadd.f32	s23, s27, s23
 80153a2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80153a6:	ee65 da80 	vmul.f32	s27, s11, s0
 80153aa:	ee28 ba25 	vmul.f32	s22, s16, s11
 80153ae:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80153b2:	ee79 8a28 	vadd.f32	s17, s18, s17
 80153b6:	ee23 aa25 	vmul.f32	s20, s6, s11
 80153ba:	ee22 9aa5 	vmul.f32	s18, s5, s11
 80153be:	ee3d da04 	vadd.f32	s26, s26, s8
 80153c2:	ee65 5a82 	vmul.f32	s11, s11, s4
 80153c6:	ee66 4a01 	vmul.f32	s9, s12, s2
 80153ca:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80153ce:	ed13 1a03 	vldr	s2, [r3, #-12]
 80153d2:	ee75 5a85 	vadd.f32	s11, s11, s10
 80153d6:	ee3d da23 	vadd.f32	s26, s26, s7
 80153da:	ee22 5a06 	vmul.f32	s10, s4, s12
 80153de:	ee7e caac 	vadd.f32	s25, s29, s25
 80153e2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80153e6:	ee66 ea20 	vmul.f32	s29, s12, s1
 80153ea:	ee26 ea00 	vmul.f32	s28, s12, s0
 80153ee:	ee7d baab 	vadd.f32	s23, s27, s23
 80153f2:	ee7b aa2a 	vadd.f32	s21, s22, s21
 80153f6:	ee68 da06 	vmul.f32	s27, s16, s12
 80153fa:	ee23 ba06 	vmul.f32	s22, s6, s12
 80153fe:	ee22 aa86 	vmul.f32	s20, s5, s12
 8015402:	ee79 8a28 	vadd.f32	s17, s18, s17
 8015406:	ee26 6a21 	vmul.f32	s12, s12, s3
 801540a:	ee26 9aa0 	vmul.f32	s18, s13, s1
 801540e:	ee36 6a25 	vadd.f32	s12, s12, s11
 8015412:	ed53 0a02 	vldr	s1, [r3, #-8]
 8015416:	ee61 5aa6 	vmul.f32	s11, s3, s13
 801541a:	ee3d da24 	vadd.f32	s26, s26, s9
 801541e:	ee7e caac 	vadd.f32	s25, s29, s25
 8015422:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8015426:	ee66 ea80 	vmul.f32	s29, s13, s0
 801542a:	ee28 ea26 	vmul.f32	s28, s16, s13
 801542e:	ee7d baab 	vadd.f32	s23, s27, s23
 8015432:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8015436:	ee63 da26 	vmul.f32	s27, s6, s13
 801543a:	ee22 baa6 	vmul.f32	s22, s5, s13
 801543e:	ee3a aa29 	vadd.f32	s20, s20, s19
 8015442:	ee75 8a28 	vadd.f32	s17, s10, s17
 8015446:	ee62 9a26 	vmul.f32	s19, s4, s13
 801544a:	ee66 6a81 	vmul.f32	s13, s13, s2
 801544e:	ee27 5a00 	vmul.f32	s10, s14, s0
 8015452:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8015456:	ee75 8aa8 	vadd.f32	s17, s11, s17
 801545a:	ee7e caac 	vadd.f32	s25, s29, s25
 801545e:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8015462:	ee68 ea07 	vmul.f32	s29, s16, s14
 8015466:	ee23 ea07 	vmul.f32	s28, s6, s14
 801546a:	ee7d baab 	vadd.f32	s23, s27, s23
 801546e:	ee22 ba07 	vmul.f32	s22, s4, s14
 8015472:	ee62 da87 	vmul.f32	s27, s5, s14
 8015476:	ee39 aa8a 	vadd.f32	s20, s19, s20
 801547a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801547e:	ee61 9a87 	vmul.f32	s19, s3, s14
 8015482:	ee67 3a20 	vmul.f32	s7, s14, s1
 8015486:	ed13 0a01 	vldr	s0, [r3, #-4]
 801548a:	ee3d da09 	vadd.f32	s26, s26, s18
 801548e:	ee21 6a07 	vmul.f32	s12, s2, s14
 8015492:	ee3d da05 	vadd.f32	s26, s26, s10
 8015496:	ee28 8a27 	vmul.f32	s16, s16, s15
 801549a:	ee63 5a27 	vmul.f32	s11, s6, s15
 801549e:	ee22 5aa7 	vmul.f32	s10, s5, s15
 80154a2:	ee62 4a27 	vmul.f32	s9, s4, s15
 80154a6:	ee3b ba2a 	vadd.f32	s22, s22, s21
 80154aa:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80154ae:	ee61 aaa7 	vmul.f32	s21, s3, s15
 80154b2:	ee61 9a27 	vmul.f32	s19, s2, s15
 80154b6:	ee36 7a28 	vadd.f32	s14, s12, s17
 80154ba:	ee7e caac 	vadd.f32	s25, s29, s25
 80154be:	ee60 8aa7 	vmul.f32	s17, s1, s15
 80154c2:	ee3e ca0c 	vadd.f32	s24, s28, s24
 80154c6:	ee7d baab 	vadd.f32	s23, s27, s23
 80154ca:	ee73 3aa6 	vadd.f32	s7, s7, s13
 80154ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 80154d2:	f1bb 0b01 	subs.w	fp, fp, #1
 80154d6:	f101 0120 	add.w	r1, r1, #32
 80154da:	ee38 da0d 	vadd.f32	s26, s16, s26
 80154de:	ee75 caac 	vadd.f32	s25, s11, s25
 80154e2:	ee35 ca0c 	vadd.f32	s24, s10, s24
 80154e6:	ee74 baab 	vadd.f32	s23, s9, s23
 80154ea:	ee7a aa8b 	vadd.f32	s21, s21, s22
 80154ee:	ee79 9a8a 	vadd.f32	s19, s19, s20
 80154f2:	ee78 8a87 	vadd.f32	s17, s17, s14
 80154f6:	ee77 3aa3 	vadd.f32	s7, s15, s7
 80154fa:	f103 0320 	add.w	r3, r3, #32
 80154fe:	f47f aed8 	bne.w	80152b2 <arm_fir_f32+0xfe>
 8015502:	eb09 0104 	add.w	r1, r9, r4
 8015506:	46e3      	mov	fp, ip
 8015508:	b3a2      	cbz	r2, 8015574 <arm_fir_f32+0x3c0>
 801550a:	4613      	mov	r3, r2
 801550c:	ecbb 6a01 	vldmia	fp!, {s12}
 8015510:	ecf1 7a01 	vldmia	r1!, {s15}
 8015514:	ee26 3a03 	vmul.f32	s6, s12, s6
 8015518:	ee26 4a22 	vmul.f32	s8, s12, s5
 801551c:	ee66 4a02 	vmul.f32	s9, s12, s4
 8015520:	ee26 5a21 	vmul.f32	s10, s12, s3
 8015524:	ee66 5a01 	vmul.f32	s11, s12, s2
 8015528:	ee66 6a20 	vmul.f32	s13, s12, s1
 801552c:	ee26 7a00 	vmul.f32	s14, s12, s0
 8015530:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015534:	3b01      	subs	r3, #1
 8015536:	ee3d da03 	vadd.f32	s26, s26, s6
 801553a:	ee7c ca84 	vadd.f32	s25, s25, s8
 801553e:	eeb0 3a62 	vmov.f32	s6, s5
 8015542:	ee3c ca24 	vadd.f32	s24, s24, s9
 8015546:	eef0 2a42 	vmov.f32	s5, s4
 801554a:	ee7b ba85 	vadd.f32	s23, s23, s10
 801554e:	eeb0 2a61 	vmov.f32	s4, s3
 8015552:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8015556:	eef0 1a41 	vmov.f32	s3, s2
 801555a:	ee79 9aa6 	vadd.f32	s19, s19, s13
 801555e:	eeb0 1a60 	vmov.f32	s2, s1
 8015562:	ee78 8a87 	vadd.f32	s17, s17, s14
 8015566:	eef0 0a40 	vmov.f32	s1, s0
 801556a:	ee73 3a86 	vadd.f32	s7, s7, s12
 801556e:	eeb0 0a67 	vmov.f32	s0, s15
 8015572:	d1cb      	bne.n	801550c <arm_fir_f32+0x358>
 8015574:	f1be 0e01 	subs.w	lr, lr, #1
 8015578:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 801557c:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8015580:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8015584:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8015588:	ed45 aa04 	vstr	s21, [r5, #-16]
 801558c:	ed45 9a03 	vstr	s19, [r5, #-12]
 8015590:	ed45 8a02 	vstr	s17, [r5, #-8]
 8015594:	ed45 3a01 	vstr	s7, [r5, #-4]
 8015598:	f107 0720 	add.w	r7, r7, #32
 801559c:	f106 0620 	add.w	r6, r6, #32
 80155a0:	f104 0420 	add.w	r4, r4, #32
 80155a4:	f105 0520 	add.w	r5, r5, #32
 80155a8:	f47f ae3c 	bne.w	8015224 <arm_fir_f32+0x70>
 80155ac:	9b02      	ldr	r3, [sp, #8]
 80155ae:	9800      	ldr	r0, [sp, #0]
 80155b0:	f8dd c018 	ldr.w	ip, [sp, #24]
 80155b4:	9907      	ldr	r1, [sp, #28]
 80155b6:	015b      	lsls	r3, r3, #5
 80155b8:	4652      	mov	r2, sl
 80155ba:	4418      	add	r0, r3
 80155bc:	9000      	str	r0, [sp, #0]
 80155be:	4419      	add	r1, r3
 80155c0:	449c      	add	ip, r3
 80155c2:	441a      	add	r2, r3
 80155c4:	9b04      	ldr	r3, [sp, #16]
 80155c6:	f013 0e07 	ands.w	lr, r3, #7
 80155ca:	d01f      	beq.n	801560c <arm_fir_f32+0x458>
 80155cc:	9f00      	ldr	r7, [sp, #0]
 80155ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80155d2:	4676      	mov	r6, lr
 80155d4:	4665      	mov	r5, ip
 80155d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80155da:	eddf 6a12 	vldr	s13, [pc, #72]	; 8015624 <arm_fir_f32+0x470>
 80155de:	f847 3b04 	str.w	r3, [r7], #4
 80155e2:	4644      	mov	r4, r8
 80155e4:	464b      	mov	r3, r9
 80155e6:	4628      	mov	r0, r5
 80155e8:	ecb0 7a01 	vldmia	r0!, {s14}
 80155ec:	ecf4 7a01 	vldmia	r4!, {s15}
 80155f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80155f4:	3b01      	subs	r3, #1
 80155f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80155fa:	d1f5      	bne.n	80155e8 <arm_fir_f32+0x434>
 80155fc:	3e01      	subs	r6, #1
 80155fe:	ece2 6a01 	vstmia	r2!, {s13}
 8015602:	f105 0504 	add.w	r5, r5, #4
 8015606:	d1e6      	bne.n	80155d6 <arm_fir_f32+0x422>
 8015608:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 801560c:	9b01      	ldr	r3, [sp, #4]
 801560e:	1e59      	subs	r1, r3, #1
 8015610:	9b03      	ldr	r3, [sp, #12]
 8015612:	088e      	lsrs	r6, r1, #2
 8015614:	685c      	ldr	r4, [r3, #4]
 8015616:	d020      	beq.n	801565a <arm_fir_f32+0x4a6>
 8015618:	f104 0210 	add.w	r2, r4, #16
 801561c:	f10c 0310 	add.w	r3, ip, #16
 8015620:	4630      	mov	r0, r6
 8015622:	e001      	b.n	8015628 <arm_fir_f32+0x474>
 8015624:	00000000 	.word	0x00000000
 8015628:	f853 5c10 	ldr.w	r5, [r3, #-16]
 801562c:	f842 5c10 	str.w	r5, [r2, #-16]
 8015630:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8015634:	f842 5c0c 	str.w	r5, [r2, #-12]
 8015638:	f853 5c08 	ldr.w	r5, [r3, #-8]
 801563c:	f842 5c08 	str.w	r5, [r2, #-8]
 8015640:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8015644:	f842 5c04 	str.w	r5, [r2, #-4]
 8015648:	3801      	subs	r0, #1
 801564a:	f103 0310 	add.w	r3, r3, #16
 801564e:	f102 0210 	add.w	r2, r2, #16
 8015652:	d1e9      	bne.n	8015628 <arm_fir_f32+0x474>
 8015654:	0133      	lsls	r3, r6, #4
 8015656:	441c      	add	r4, r3
 8015658:	449c      	add	ip, r3
 801565a:	f011 0303 	ands.w	r3, r1, #3
 801565e:	d006      	beq.n	801566e <arm_fir_f32+0x4ba>
 8015660:	4622      	mov	r2, r4
 8015662:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015666:	f842 1b04 	str.w	r1, [r2], #4
 801566a:	3b01      	subs	r3, #1
 801566c:	d1f9      	bne.n	8015662 <arm_fir_f32+0x4ae>
 801566e:	b009      	add	sp, #36	; 0x24
 8015670:	ecbd 8b10 	vpop	{d8-d15}
 8015674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015678:	46c3      	mov	fp, r8
 801567a:	e745      	b.n	8015508 <arm_fir_f32+0x354>

0801567c <round>:
 801567c:	ec53 2b10 	vmov	r2, r3, d0
 8015680:	b570      	push	{r4, r5, r6, lr}
 8015682:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8015686:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801568a:	2813      	cmp	r0, #19
 801568c:	ee10 5a10 	vmov	r5, s0
 8015690:	4619      	mov	r1, r3
 8015692:	dc18      	bgt.n	80156c6 <round+0x4a>
 8015694:	2800      	cmp	r0, #0
 8015696:	da09      	bge.n	80156ac <round+0x30>
 8015698:	3001      	adds	r0, #1
 801569a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801569e:	d103      	bne.n	80156a8 <round+0x2c>
 80156a0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80156a4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80156a8:	2300      	movs	r3, #0
 80156aa:	e02a      	b.n	8015702 <round+0x86>
 80156ac:	4c16      	ldr	r4, [pc, #88]	; (8015708 <round+0x8c>)
 80156ae:	4104      	asrs	r4, r0
 80156b0:	ea03 0604 	and.w	r6, r3, r4
 80156b4:	4316      	orrs	r6, r2
 80156b6:	d011      	beq.n	80156dc <round+0x60>
 80156b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80156bc:	4103      	asrs	r3, r0
 80156be:	440b      	add	r3, r1
 80156c0:	ea23 0104 	bic.w	r1, r3, r4
 80156c4:	e7f0      	b.n	80156a8 <round+0x2c>
 80156c6:	2833      	cmp	r0, #51	; 0x33
 80156c8:	dd0b      	ble.n	80156e2 <round+0x66>
 80156ca:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80156ce:	d105      	bne.n	80156dc <round+0x60>
 80156d0:	ee10 0a10 	vmov	r0, s0
 80156d4:	f7ea fdda 	bl	800028c <__adddf3>
 80156d8:	4602      	mov	r2, r0
 80156da:	460b      	mov	r3, r1
 80156dc:	ec43 2b10 	vmov	d0, r2, r3
 80156e0:	bd70      	pop	{r4, r5, r6, pc}
 80156e2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80156e6:	f04f 34ff 	mov.w	r4, #4294967295
 80156ea:	40f4      	lsrs	r4, r6
 80156ec:	4214      	tst	r4, r2
 80156ee:	d0f5      	beq.n	80156dc <round+0x60>
 80156f0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 80156f4:	2301      	movs	r3, #1
 80156f6:	4083      	lsls	r3, r0
 80156f8:	195b      	adds	r3, r3, r5
 80156fa:	bf28      	it	cs
 80156fc:	3101      	addcs	r1, #1
 80156fe:	ea23 0304 	bic.w	r3, r3, r4
 8015702:	461a      	mov	r2, r3
 8015704:	460b      	mov	r3, r1
 8015706:	e7e9      	b.n	80156dc <round+0x60>
 8015708:	000fffff 	.word	0x000fffff

0801570c <_strtoul_l.constprop.0>:
 801570c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015710:	4f36      	ldr	r7, [pc, #216]	; (80157ec <_strtoul_l.constprop.0+0xe0>)
 8015712:	4686      	mov	lr, r0
 8015714:	460d      	mov	r5, r1
 8015716:	4628      	mov	r0, r5
 8015718:	f815 4b01 	ldrb.w	r4, [r5], #1
 801571c:	5d3e      	ldrb	r6, [r7, r4]
 801571e:	f016 0608 	ands.w	r6, r6, #8
 8015722:	d1f8      	bne.n	8015716 <_strtoul_l.constprop.0+0xa>
 8015724:	2c2d      	cmp	r4, #45	; 0x2d
 8015726:	d130      	bne.n	801578a <_strtoul_l.constprop.0+0x7e>
 8015728:	782c      	ldrb	r4, [r5, #0]
 801572a:	2601      	movs	r6, #1
 801572c:	1c85      	adds	r5, r0, #2
 801572e:	2b00      	cmp	r3, #0
 8015730:	d057      	beq.n	80157e2 <_strtoul_l.constprop.0+0xd6>
 8015732:	2b10      	cmp	r3, #16
 8015734:	d109      	bne.n	801574a <_strtoul_l.constprop.0+0x3e>
 8015736:	2c30      	cmp	r4, #48	; 0x30
 8015738:	d107      	bne.n	801574a <_strtoul_l.constprop.0+0x3e>
 801573a:	7828      	ldrb	r0, [r5, #0]
 801573c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015740:	2858      	cmp	r0, #88	; 0x58
 8015742:	d149      	bne.n	80157d8 <_strtoul_l.constprop.0+0xcc>
 8015744:	786c      	ldrb	r4, [r5, #1]
 8015746:	2310      	movs	r3, #16
 8015748:	3502      	adds	r5, #2
 801574a:	f04f 38ff 	mov.w	r8, #4294967295
 801574e:	2700      	movs	r7, #0
 8015750:	fbb8 f8f3 	udiv	r8, r8, r3
 8015754:	fb03 f908 	mul.w	r9, r3, r8
 8015758:	ea6f 0909 	mvn.w	r9, r9
 801575c:	4638      	mov	r0, r7
 801575e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015762:	f1bc 0f09 	cmp.w	ip, #9
 8015766:	d815      	bhi.n	8015794 <_strtoul_l.constprop.0+0x88>
 8015768:	4664      	mov	r4, ip
 801576a:	42a3      	cmp	r3, r4
 801576c:	dd23      	ble.n	80157b6 <_strtoul_l.constprop.0+0xaa>
 801576e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8015772:	d007      	beq.n	8015784 <_strtoul_l.constprop.0+0x78>
 8015774:	4580      	cmp	r8, r0
 8015776:	d31b      	bcc.n	80157b0 <_strtoul_l.constprop.0+0xa4>
 8015778:	d101      	bne.n	801577e <_strtoul_l.constprop.0+0x72>
 801577a:	45a1      	cmp	r9, r4
 801577c:	db18      	blt.n	80157b0 <_strtoul_l.constprop.0+0xa4>
 801577e:	fb00 4003 	mla	r0, r0, r3, r4
 8015782:	2701      	movs	r7, #1
 8015784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015788:	e7e9      	b.n	801575e <_strtoul_l.constprop.0+0x52>
 801578a:	2c2b      	cmp	r4, #43	; 0x2b
 801578c:	bf04      	itt	eq
 801578e:	782c      	ldrbeq	r4, [r5, #0]
 8015790:	1c85      	addeq	r5, r0, #2
 8015792:	e7cc      	b.n	801572e <_strtoul_l.constprop.0+0x22>
 8015794:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015798:	f1bc 0f19 	cmp.w	ip, #25
 801579c:	d801      	bhi.n	80157a2 <_strtoul_l.constprop.0+0x96>
 801579e:	3c37      	subs	r4, #55	; 0x37
 80157a0:	e7e3      	b.n	801576a <_strtoul_l.constprop.0+0x5e>
 80157a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80157a6:	f1bc 0f19 	cmp.w	ip, #25
 80157aa:	d804      	bhi.n	80157b6 <_strtoul_l.constprop.0+0xaa>
 80157ac:	3c57      	subs	r4, #87	; 0x57
 80157ae:	e7dc      	b.n	801576a <_strtoul_l.constprop.0+0x5e>
 80157b0:	f04f 37ff 	mov.w	r7, #4294967295
 80157b4:	e7e6      	b.n	8015784 <_strtoul_l.constprop.0+0x78>
 80157b6:	1c7b      	adds	r3, r7, #1
 80157b8:	d106      	bne.n	80157c8 <_strtoul_l.constprop.0+0xbc>
 80157ba:	2322      	movs	r3, #34	; 0x22
 80157bc:	f8ce 3000 	str.w	r3, [lr]
 80157c0:	4638      	mov	r0, r7
 80157c2:	b932      	cbnz	r2, 80157d2 <_strtoul_l.constprop.0+0xc6>
 80157c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157c8:	b106      	cbz	r6, 80157cc <_strtoul_l.constprop.0+0xc0>
 80157ca:	4240      	negs	r0, r0
 80157cc:	2a00      	cmp	r2, #0
 80157ce:	d0f9      	beq.n	80157c4 <_strtoul_l.constprop.0+0xb8>
 80157d0:	b107      	cbz	r7, 80157d4 <_strtoul_l.constprop.0+0xc8>
 80157d2:	1e69      	subs	r1, r5, #1
 80157d4:	6011      	str	r1, [r2, #0]
 80157d6:	e7f5      	b.n	80157c4 <_strtoul_l.constprop.0+0xb8>
 80157d8:	2430      	movs	r4, #48	; 0x30
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d1b5      	bne.n	801574a <_strtoul_l.constprop.0+0x3e>
 80157de:	2308      	movs	r3, #8
 80157e0:	e7b3      	b.n	801574a <_strtoul_l.constprop.0+0x3e>
 80157e2:	2c30      	cmp	r4, #48	; 0x30
 80157e4:	d0a9      	beq.n	801573a <_strtoul_l.constprop.0+0x2e>
 80157e6:	230a      	movs	r3, #10
 80157e8:	e7af      	b.n	801574a <_strtoul_l.constprop.0+0x3e>
 80157ea:	bf00      	nop
 80157ec:	08018ad5 	.word	0x08018ad5

080157f0 <strtoul>:
 80157f0:	4613      	mov	r3, r2
 80157f2:	460a      	mov	r2, r1
 80157f4:	4601      	mov	r1, r0
 80157f6:	4802      	ldr	r0, [pc, #8]	; (8015800 <strtoul+0x10>)
 80157f8:	6800      	ldr	r0, [r0, #0]
 80157fa:	f7ff bf87 	b.w	801570c <_strtoul_l.constprop.0>
 80157fe:	bf00      	nop
 8015800:	200013f4 	.word	0x200013f4

08015804 <__cvt>:
 8015804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015808:	ec55 4b10 	vmov	r4, r5, d0
 801580c:	2d00      	cmp	r5, #0
 801580e:	460e      	mov	r6, r1
 8015810:	4619      	mov	r1, r3
 8015812:	462b      	mov	r3, r5
 8015814:	bfbb      	ittet	lt
 8015816:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801581a:	461d      	movlt	r5, r3
 801581c:	2300      	movge	r3, #0
 801581e:	232d      	movlt	r3, #45	; 0x2d
 8015820:	700b      	strb	r3, [r1, #0]
 8015822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015824:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015828:	4691      	mov	r9, r2
 801582a:	f023 0820 	bic.w	r8, r3, #32
 801582e:	bfbc      	itt	lt
 8015830:	4622      	movlt	r2, r4
 8015832:	4614      	movlt	r4, r2
 8015834:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015838:	d005      	beq.n	8015846 <__cvt+0x42>
 801583a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801583e:	d100      	bne.n	8015842 <__cvt+0x3e>
 8015840:	3601      	adds	r6, #1
 8015842:	2102      	movs	r1, #2
 8015844:	e000      	b.n	8015848 <__cvt+0x44>
 8015846:	2103      	movs	r1, #3
 8015848:	ab03      	add	r3, sp, #12
 801584a:	9301      	str	r3, [sp, #4]
 801584c:	ab02      	add	r3, sp, #8
 801584e:	9300      	str	r3, [sp, #0]
 8015850:	ec45 4b10 	vmov	d0, r4, r5
 8015854:	4653      	mov	r3, sl
 8015856:	4632      	mov	r2, r6
 8015858:	f000 feee 	bl	8016638 <_dtoa_r>
 801585c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015860:	4607      	mov	r7, r0
 8015862:	d102      	bne.n	801586a <__cvt+0x66>
 8015864:	f019 0f01 	tst.w	r9, #1
 8015868:	d022      	beq.n	80158b0 <__cvt+0xac>
 801586a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801586e:	eb07 0906 	add.w	r9, r7, r6
 8015872:	d110      	bne.n	8015896 <__cvt+0x92>
 8015874:	783b      	ldrb	r3, [r7, #0]
 8015876:	2b30      	cmp	r3, #48	; 0x30
 8015878:	d10a      	bne.n	8015890 <__cvt+0x8c>
 801587a:	2200      	movs	r2, #0
 801587c:	2300      	movs	r3, #0
 801587e:	4620      	mov	r0, r4
 8015880:	4629      	mov	r1, r5
 8015882:	f7eb f921 	bl	8000ac8 <__aeabi_dcmpeq>
 8015886:	b918      	cbnz	r0, 8015890 <__cvt+0x8c>
 8015888:	f1c6 0601 	rsb	r6, r6, #1
 801588c:	f8ca 6000 	str.w	r6, [sl]
 8015890:	f8da 3000 	ldr.w	r3, [sl]
 8015894:	4499      	add	r9, r3
 8015896:	2200      	movs	r2, #0
 8015898:	2300      	movs	r3, #0
 801589a:	4620      	mov	r0, r4
 801589c:	4629      	mov	r1, r5
 801589e:	f7eb f913 	bl	8000ac8 <__aeabi_dcmpeq>
 80158a2:	b108      	cbz	r0, 80158a8 <__cvt+0xa4>
 80158a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80158a8:	2230      	movs	r2, #48	; 0x30
 80158aa:	9b03      	ldr	r3, [sp, #12]
 80158ac:	454b      	cmp	r3, r9
 80158ae:	d307      	bcc.n	80158c0 <__cvt+0xbc>
 80158b0:	9b03      	ldr	r3, [sp, #12]
 80158b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80158b4:	1bdb      	subs	r3, r3, r7
 80158b6:	4638      	mov	r0, r7
 80158b8:	6013      	str	r3, [r2, #0]
 80158ba:	b004      	add	sp, #16
 80158bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158c0:	1c59      	adds	r1, r3, #1
 80158c2:	9103      	str	r1, [sp, #12]
 80158c4:	701a      	strb	r2, [r3, #0]
 80158c6:	e7f0      	b.n	80158aa <__cvt+0xa6>

080158c8 <__exponent>:
 80158c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158ca:	4603      	mov	r3, r0
 80158cc:	2900      	cmp	r1, #0
 80158ce:	bfb8      	it	lt
 80158d0:	4249      	neglt	r1, r1
 80158d2:	f803 2b02 	strb.w	r2, [r3], #2
 80158d6:	bfb4      	ite	lt
 80158d8:	222d      	movlt	r2, #45	; 0x2d
 80158da:	222b      	movge	r2, #43	; 0x2b
 80158dc:	2909      	cmp	r1, #9
 80158de:	7042      	strb	r2, [r0, #1]
 80158e0:	dd2a      	ble.n	8015938 <__exponent+0x70>
 80158e2:	f10d 0207 	add.w	r2, sp, #7
 80158e6:	4617      	mov	r7, r2
 80158e8:	260a      	movs	r6, #10
 80158ea:	4694      	mov	ip, r2
 80158ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80158f0:	fb06 1415 	mls	r4, r6, r5, r1
 80158f4:	3430      	adds	r4, #48	; 0x30
 80158f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80158fa:	460c      	mov	r4, r1
 80158fc:	2c63      	cmp	r4, #99	; 0x63
 80158fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8015902:	4629      	mov	r1, r5
 8015904:	dcf1      	bgt.n	80158ea <__exponent+0x22>
 8015906:	3130      	adds	r1, #48	; 0x30
 8015908:	f1ac 0402 	sub.w	r4, ip, #2
 801590c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015910:	1c41      	adds	r1, r0, #1
 8015912:	4622      	mov	r2, r4
 8015914:	42ba      	cmp	r2, r7
 8015916:	d30a      	bcc.n	801592e <__exponent+0x66>
 8015918:	f10d 0209 	add.w	r2, sp, #9
 801591c:	eba2 020c 	sub.w	r2, r2, ip
 8015920:	42bc      	cmp	r4, r7
 8015922:	bf88      	it	hi
 8015924:	2200      	movhi	r2, #0
 8015926:	4413      	add	r3, r2
 8015928:	1a18      	subs	r0, r3, r0
 801592a:	b003      	add	sp, #12
 801592c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801592e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8015932:	f801 5f01 	strb.w	r5, [r1, #1]!
 8015936:	e7ed      	b.n	8015914 <__exponent+0x4c>
 8015938:	2330      	movs	r3, #48	; 0x30
 801593a:	3130      	adds	r1, #48	; 0x30
 801593c:	7083      	strb	r3, [r0, #2]
 801593e:	70c1      	strb	r1, [r0, #3]
 8015940:	1d03      	adds	r3, r0, #4
 8015942:	e7f1      	b.n	8015928 <__exponent+0x60>

08015944 <_printf_float>:
 8015944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015948:	ed2d 8b02 	vpush	{d8}
 801594c:	b08d      	sub	sp, #52	; 0x34
 801594e:	460c      	mov	r4, r1
 8015950:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015954:	4616      	mov	r6, r2
 8015956:	461f      	mov	r7, r3
 8015958:	4605      	mov	r5, r0
 801595a:	f000 fd09 	bl	8016370 <_localeconv_r>
 801595e:	f8d0 a000 	ldr.w	sl, [r0]
 8015962:	4650      	mov	r0, sl
 8015964:	f7ea fc84 	bl	8000270 <strlen>
 8015968:	2300      	movs	r3, #0
 801596a:	930a      	str	r3, [sp, #40]	; 0x28
 801596c:	6823      	ldr	r3, [r4, #0]
 801596e:	9305      	str	r3, [sp, #20]
 8015970:	f8d8 3000 	ldr.w	r3, [r8]
 8015974:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015978:	3307      	adds	r3, #7
 801597a:	f023 0307 	bic.w	r3, r3, #7
 801597e:	f103 0208 	add.w	r2, r3, #8
 8015982:	f8c8 2000 	str.w	r2, [r8]
 8015986:	e9d3 8900 	ldrd	r8, r9, [r3]
 801598a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801598e:	9307      	str	r3, [sp, #28]
 8015990:	f8cd 8018 	str.w	r8, [sp, #24]
 8015994:	ee08 0a10 	vmov	s16, r0
 8015998:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801599c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159a0:	4b9e      	ldr	r3, [pc, #632]	; (8015c1c <_printf_float+0x2d8>)
 80159a2:	f04f 32ff 	mov.w	r2, #4294967295
 80159a6:	f7eb f8c1 	bl	8000b2c <__aeabi_dcmpun>
 80159aa:	bb88      	cbnz	r0, 8015a10 <_printf_float+0xcc>
 80159ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159b0:	4b9a      	ldr	r3, [pc, #616]	; (8015c1c <_printf_float+0x2d8>)
 80159b2:	f04f 32ff 	mov.w	r2, #4294967295
 80159b6:	f7eb f89b 	bl	8000af0 <__aeabi_dcmple>
 80159ba:	bb48      	cbnz	r0, 8015a10 <_printf_float+0xcc>
 80159bc:	2200      	movs	r2, #0
 80159be:	2300      	movs	r3, #0
 80159c0:	4640      	mov	r0, r8
 80159c2:	4649      	mov	r1, r9
 80159c4:	f7eb f88a 	bl	8000adc <__aeabi_dcmplt>
 80159c8:	b110      	cbz	r0, 80159d0 <_printf_float+0x8c>
 80159ca:	232d      	movs	r3, #45	; 0x2d
 80159cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159d0:	4a93      	ldr	r2, [pc, #588]	; (8015c20 <_printf_float+0x2dc>)
 80159d2:	4b94      	ldr	r3, [pc, #592]	; (8015c24 <_printf_float+0x2e0>)
 80159d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80159d8:	bf94      	ite	ls
 80159da:	4690      	movls	r8, r2
 80159dc:	4698      	movhi	r8, r3
 80159de:	2303      	movs	r3, #3
 80159e0:	6123      	str	r3, [r4, #16]
 80159e2:	9b05      	ldr	r3, [sp, #20]
 80159e4:	f023 0304 	bic.w	r3, r3, #4
 80159e8:	6023      	str	r3, [r4, #0]
 80159ea:	f04f 0900 	mov.w	r9, #0
 80159ee:	9700      	str	r7, [sp, #0]
 80159f0:	4633      	mov	r3, r6
 80159f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80159f4:	4621      	mov	r1, r4
 80159f6:	4628      	mov	r0, r5
 80159f8:	f000 f9da 	bl	8015db0 <_printf_common>
 80159fc:	3001      	adds	r0, #1
 80159fe:	f040 8090 	bne.w	8015b22 <_printf_float+0x1de>
 8015a02:	f04f 30ff 	mov.w	r0, #4294967295
 8015a06:	b00d      	add	sp, #52	; 0x34
 8015a08:	ecbd 8b02 	vpop	{d8}
 8015a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a10:	4642      	mov	r2, r8
 8015a12:	464b      	mov	r3, r9
 8015a14:	4640      	mov	r0, r8
 8015a16:	4649      	mov	r1, r9
 8015a18:	f7eb f888 	bl	8000b2c <__aeabi_dcmpun>
 8015a1c:	b140      	cbz	r0, 8015a30 <_printf_float+0xec>
 8015a1e:	464b      	mov	r3, r9
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	bfbc      	itt	lt
 8015a24:	232d      	movlt	r3, #45	; 0x2d
 8015a26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015a2a:	4a7f      	ldr	r2, [pc, #508]	; (8015c28 <_printf_float+0x2e4>)
 8015a2c:	4b7f      	ldr	r3, [pc, #508]	; (8015c2c <_printf_float+0x2e8>)
 8015a2e:	e7d1      	b.n	80159d4 <_printf_float+0x90>
 8015a30:	6863      	ldr	r3, [r4, #4]
 8015a32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015a36:	9206      	str	r2, [sp, #24]
 8015a38:	1c5a      	adds	r2, r3, #1
 8015a3a:	d13f      	bne.n	8015abc <_printf_float+0x178>
 8015a3c:	2306      	movs	r3, #6
 8015a3e:	6063      	str	r3, [r4, #4]
 8015a40:	9b05      	ldr	r3, [sp, #20]
 8015a42:	6861      	ldr	r1, [r4, #4]
 8015a44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015a48:	2300      	movs	r3, #0
 8015a4a:	9303      	str	r3, [sp, #12]
 8015a4c:	ab0a      	add	r3, sp, #40	; 0x28
 8015a4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015a52:	ab09      	add	r3, sp, #36	; 0x24
 8015a54:	ec49 8b10 	vmov	d0, r8, r9
 8015a58:	9300      	str	r3, [sp, #0]
 8015a5a:	6022      	str	r2, [r4, #0]
 8015a5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015a60:	4628      	mov	r0, r5
 8015a62:	f7ff fecf 	bl	8015804 <__cvt>
 8015a66:	9b06      	ldr	r3, [sp, #24]
 8015a68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a6a:	2b47      	cmp	r3, #71	; 0x47
 8015a6c:	4680      	mov	r8, r0
 8015a6e:	d108      	bne.n	8015a82 <_printf_float+0x13e>
 8015a70:	1cc8      	adds	r0, r1, #3
 8015a72:	db02      	blt.n	8015a7a <_printf_float+0x136>
 8015a74:	6863      	ldr	r3, [r4, #4]
 8015a76:	4299      	cmp	r1, r3
 8015a78:	dd41      	ble.n	8015afe <_printf_float+0x1ba>
 8015a7a:	f1ab 0302 	sub.w	r3, fp, #2
 8015a7e:	fa5f fb83 	uxtb.w	fp, r3
 8015a82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015a86:	d820      	bhi.n	8015aca <_printf_float+0x186>
 8015a88:	3901      	subs	r1, #1
 8015a8a:	465a      	mov	r2, fp
 8015a8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015a90:	9109      	str	r1, [sp, #36]	; 0x24
 8015a92:	f7ff ff19 	bl	80158c8 <__exponent>
 8015a96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a98:	1813      	adds	r3, r2, r0
 8015a9a:	2a01      	cmp	r2, #1
 8015a9c:	4681      	mov	r9, r0
 8015a9e:	6123      	str	r3, [r4, #16]
 8015aa0:	dc02      	bgt.n	8015aa8 <_printf_float+0x164>
 8015aa2:	6822      	ldr	r2, [r4, #0]
 8015aa4:	07d2      	lsls	r2, r2, #31
 8015aa6:	d501      	bpl.n	8015aac <_printf_float+0x168>
 8015aa8:	3301      	adds	r3, #1
 8015aaa:	6123      	str	r3, [r4, #16]
 8015aac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d09c      	beq.n	80159ee <_printf_float+0xaa>
 8015ab4:	232d      	movs	r3, #45	; 0x2d
 8015ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015aba:	e798      	b.n	80159ee <_printf_float+0xaa>
 8015abc:	9a06      	ldr	r2, [sp, #24]
 8015abe:	2a47      	cmp	r2, #71	; 0x47
 8015ac0:	d1be      	bne.n	8015a40 <_printf_float+0xfc>
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d1bc      	bne.n	8015a40 <_printf_float+0xfc>
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	e7b9      	b.n	8015a3e <_printf_float+0xfa>
 8015aca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015ace:	d118      	bne.n	8015b02 <_printf_float+0x1be>
 8015ad0:	2900      	cmp	r1, #0
 8015ad2:	6863      	ldr	r3, [r4, #4]
 8015ad4:	dd0b      	ble.n	8015aee <_printf_float+0x1aa>
 8015ad6:	6121      	str	r1, [r4, #16]
 8015ad8:	b913      	cbnz	r3, 8015ae0 <_printf_float+0x19c>
 8015ada:	6822      	ldr	r2, [r4, #0]
 8015adc:	07d0      	lsls	r0, r2, #31
 8015ade:	d502      	bpl.n	8015ae6 <_printf_float+0x1a2>
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	440b      	add	r3, r1
 8015ae4:	6123      	str	r3, [r4, #16]
 8015ae6:	65a1      	str	r1, [r4, #88]	; 0x58
 8015ae8:	f04f 0900 	mov.w	r9, #0
 8015aec:	e7de      	b.n	8015aac <_printf_float+0x168>
 8015aee:	b913      	cbnz	r3, 8015af6 <_printf_float+0x1b2>
 8015af0:	6822      	ldr	r2, [r4, #0]
 8015af2:	07d2      	lsls	r2, r2, #31
 8015af4:	d501      	bpl.n	8015afa <_printf_float+0x1b6>
 8015af6:	3302      	adds	r3, #2
 8015af8:	e7f4      	b.n	8015ae4 <_printf_float+0x1a0>
 8015afa:	2301      	movs	r3, #1
 8015afc:	e7f2      	b.n	8015ae4 <_printf_float+0x1a0>
 8015afe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b04:	4299      	cmp	r1, r3
 8015b06:	db05      	blt.n	8015b14 <_printf_float+0x1d0>
 8015b08:	6823      	ldr	r3, [r4, #0]
 8015b0a:	6121      	str	r1, [r4, #16]
 8015b0c:	07d8      	lsls	r0, r3, #31
 8015b0e:	d5ea      	bpl.n	8015ae6 <_printf_float+0x1a2>
 8015b10:	1c4b      	adds	r3, r1, #1
 8015b12:	e7e7      	b.n	8015ae4 <_printf_float+0x1a0>
 8015b14:	2900      	cmp	r1, #0
 8015b16:	bfd4      	ite	le
 8015b18:	f1c1 0202 	rsble	r2, r1, #2
 8015b1c:	2201      	movgt	r2, #1
 8015b1e:	4413      	add	r3, r2
 8015b20:	e7e0      	b.n	8015ae4 <_printf_float+0x1a0>
 8015b22:	6823      	ldr	r3, [r4, #0]
 8015b24:	055a      	lsls	r2, r3, #21
 8015b26:	d407      	bmi.n	8015b38 <_printf_float+0x1f4>
 8015b28:	6923      	ldr	r3, [r4, #16]
 8015b2a:	4642      	mov	r2, r8
 8015b2c:	4631      	mov	r1, r6
 8015b2e:	4628      	mov	r0, r5
 8015b30:	47b8      	blx	r7
 8015b32:	3001      	adds	r0, #1
 8015b34:	d12c      	bne.n	8015b90 <_printf_float+0x24c>
 8015b36:	e764      	b.n	8015a02 <_printf_float+0xbe>
 8015b38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015b3c:	f240 80e0 	bls.w	8015d00 <_printf_float+0x3bc>
 8015b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b44:	2200      	movs	r2, #0
 8015b46:	2300      	movs	r3, #0
 8015b48:	f7ea ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	d034      	beq.n	8015bba <_printf_float+0x276>
 8015b50:	4a37      	ldr	r2, [pc, #220]	; (8015c30 <_printf_float+0x2ec>)
 8015b52:	2301      	movs	r3, #1
 8015b54:	4631      	mov	r1, r6
 8015b56:	4628      	mov	r0, r5
 8015b58:	47b8      	blx	r7
 8015b5a:	3001      	adds	r0, #1
 8015b5c:	f43f af51 	beq.w	8015a02 <_printf_float+0xbe>
 8015b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b64:	429a      	cmp	r2, r3
 8015b66:	db02      	blt.n	8015b6e <_printf_float+0x22a>
 8015b68:	6823      	ldr	r3, [r4, #0]
 8015b6a:	07d8      	lsls	r0, r3, #31
 8015b6c:	d510      	bpl.n	8015b90 <_printf_float+0x24c>
 8015b6e:	ee18 3a10 	vmov	r3, s16
 8015b72:	4652      	mov	r2, sl
 8015b74:	4631      	mov	r1, r6
 8015b76:	4628      	mov	r0, r5
 8015b78:	47b8      	blx	r7
 8015b7a:	3001      	adds	r0, #1
 8015b7c:	f43f af41 	beq.w	8015a02 <_printf_float+0xbe>
 8015b80:	f04f 0800 	mov.w	r8, #0
 8015b84:	f104 091a 	add.w	r9, r4, #26
 8015b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b8a:	3b01      	subs	r3, #1
 8015b8c:	4543      	cmp	r3, r8
 8015b8e:	dc09      	bgt.n	8015ba4 <_printf_float+0x260>
 8015b90:	6823      	ldr	r3, [r4, #0]
 8015b92:	079b      	lsls	r3, r3, #30
 8015b94:	f100 8107 	bmi.w	8015da6 <_printf_float+0x462>
 8015b98:	68e0      	ldr	r0, [r4, #12]
 8015b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b9c:	4298      	cmp	r0, r3
 8015b9e:	bfb8      	it	lt
 8015ba0:	4618      	movlt	r0, r3
 8015ba2:	e730      	b.n	8015a06 <_printf_float+0xc2>
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	464a      	mov	r2, r9
 8015ba8:	4631      	mov	r1, r6
 8015baa:	4628      	mov	r0, r5
 8015bac:	47b8      	blx	r7
 8015bae:	3001      	adds	r0, #1
 8015bb0:	f43f af27 	beq.w	8015a02 <_printf_float+0xbe>
 8015bb4:	f108 0801 	add.w	r8, r8, #1
 8015bb8:	e7e6      	b.n	8015b88 <_printf_float+0x244>
 8015bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	dc39      	bgt.n	8015c34 <_printf_float+0x2f0>
 8015bc0:	4a1b      	ldr	r2, [pc, #108]	; (8015c30 <_printf_float+0x2ec>)
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	4631      	mov	r1, r6
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	47b8      	blx	r7
 8015bca:	3001      	adds	r0, #1
 8015bcc:	f43f af19 	beq.w	8015a02 <_printf_float+0xbe>
 8015bd0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015bd4:	4313      	orrs	r3, r2
 8015bd6:	d102      	bne.n	8015bde <_printf_float+0x29a>
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	07d9      	lsls	r1, r3, #31
 8015bdc:	d5d8      	bpl.n	8015b90 <_printf_float+0x24c>
 8015bde:	ee18 3a10 	vmov	r3, s16
 8015be2:	4652      	mov	r2, sl
 8015be4:	4631      	mov	r1, r6
 8015be6:	4628      	mov	r0, r5
 8015be8:	47b8      	blx	r7
 8015bea:	3001      	adds	r0, #1
 8015bec:	f43f af09 	beq.w	8015a02 <_printf_float+0xbe>
 8015bf0:	f04f 0900 	mov.w	r9, #0
 8015bf4:	f104 0a1a 	add.w	sl, r4, #26
 8015bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bfa:	425b      	negs	r3, r3
 8015bfc:	454b      	cmp	r3, r9
 8015bfe:	dc01      	bgt.n	8015c04 <_printf_float+0x2c0>
 8015c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c02:	e792      	b.n	8015b2a <_printf_float+0x1e6>
 8015c04:	2301      	movs	r3, #1
 8015c06:	4652      	mov	r2, sl
 8015c08:	4631      	mov	r1, r6
 8015c0a:	4628      	mov	r0, r5
 8015c0c:	47b8      	blx	r7
 8015c0e:	3001      	adds	r0, #1
 8015c10:	f43f aef7 	beq.w	8015a02 <_printf_float+0xbe>
 8015c14:	f109 0901 	add.w	r9, r9, #1
 8015c18:	e7ee      	b.n	8015bf8 <_printf_float+0x2b4>
 8015c1a:	bf00      	nop
 8015c1c:	7fefffff 	.word	0x7fefffff
 8015c20:	08018bd5 	.word	0x08018bd5
 8015c24:	08018bd9 	.word	0x08018bd9
 8015c28:	08018bdd 	.word	0x08018bdd
 8015c2c:	08018be1 	.word	0x08018be1
 8015c30:	08018be5 	.word	0x08018be5
 8015c34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	bfa8      	it	ge
 8015c3c:	461a      	movge	r2, r3
 8015c3e:	2a00      	cmp	r2, #0
 8015c40:	4691      	mov	r9, r2
 8015c42:	dc37      	bgt.n	8015cb4 <_printf_float+0x370>
 8015c44:	f04f 0b00 	mov.w	fp, #0
 8015c48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c4c:	f104 021a 	add.w	r2, r4, #26
 8015c50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c52:	9305      	str	r3, [sp, #20]
 8015c54:	eba3 0309 	sub.w	r3, r3, r9
 8015c58:	455b      	cmp	r3, fp
 8015c5a:	dc33      	bgt.n	8015cc4 <_printf_float+0x380>
 8015c5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c60:	429a      	cmp	r2, r3
 8015c62:	db3b      	blt.n	8015cdc <_printf_float+0x398>
 8015c64:	6823      	ldr	r3, [r4, #0]
 8015c66:	07da      	lsls	r2, r3, #31
 8015c68:	d438      	bmi.n	8015cdc <_printf_float+0x398>
 8015c6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015c6e:	eba2 0903 	sub.w	r9, r2, r3
 8015c72:	9b05      	ldr	r3, [sp, #20]
 8015c74:	1ad2      	subs	r2, r2, r3
 8015c76:	4591      	cmp	r9, r2
 8015c78:	bfa8      	it	ge
 8015c7a:	4691      	movge	r9, r2
 8015c7c:	f1b9 0f00 	cmp.w	r9, #0
 8015c80:	dc35      	bgt.n	8015cee <_printf_float+0x3aa>
 8015c82:	f04f 0800 	mov.w	r8, #0
 8015c86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c8a:	f104 0a1a 	add.w	sl, r4, #26
 8015c8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c92:	1a9b      	subs	r3, r3, r2
 8015c94:	eba3 0309 	sub.w	r3, r3, r9
 8015c98:	4543      	cmp	r3, r8
 8015c9a:	f77f af79 	ble.w	8015b90 <_printf_float+0x24c>
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	4652      	mov	r2, sl
 8015ca2:	4631      	mov	r1, r6
 8015ca4:	4628      	mov	r0, r5
 8015ca6:	47b8      	blx	r7
 8015ca8:	3001      	adds	r0, #1
 8015caa:	f43f aeaa 	beq.w	8015a02 <_printf_float+0xbe>
 8015cae:	f108 0801 	add.w	r8, r8, #1
 8015cb2:	e7ec      	b.n	8015c8e <_printf_float+0x34a>
 8015cb4:	4613      	mov	r3, r2
 8015cb6:	4631      	mov	r1, r6
 8015cb8:	4642      	mov	r2, r8
 8015cba:	4628      	mov	r0, r5
 8015cbc:	47b8      	blx	r7
 8015cbe:	3001      	adds	r0, #1
 8015cc0:	d1c0      	bne.n	8015c44 <_printf_float+0x300>
 8015cc2:	e69e      	b.n	8015a02 <_printf_float+0xbe>
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	4631      	mov	r1, r6
 8015cc8:	4628      	mov	r0, r5
 8015cca:	9205      	str	r2, [sp, #20]
 8015ccc:	47b8      	blx	r7
 8015cce:	3001      	adds	r0, #1
 8015cd0:	f43f ae97 	beq.w	8015a02 <_printf_float+0xbe>
 8015cd4:	9a05      	ldr	r2, [sp, #20]
 8015cd6:	f10b 0b01 	add.w	fp, fp, #1
 8015cda:	e7b9      	b.n	8015c50 <_printf_float+0x30c>
 8015cdc:	ee18 3a10 	vmov	r3, s16
 8015ce0:	4652      	mov	r2, sl
 8015ce2:	4631      	mov	r1, r6
 8015ce4:	4628      	mov	r0, r5
 8015ce6:	47b8      	blx	r7
 8015ce8:	3001      	adds	r0, #1
 8015cea:	d1be      	bne.n	8015c6a <_printf_float+0x326>
 8015cec:	e689      	b.n	8015a02 <_printf_float+0xbe>
 8015cee:	9a05      	ldr	r2, [sp, #20]
 8015cf0:	464b      	mov	r3, r9
 8015cf2:	4442      	add	r2, r8
 8015cf4:	4631      	mov	r1, r6
 8015cf6:	4628      	mov	r0, r5
 8015cf8:	47b8      	blx	r7
 8015cfa:	3001      	adds	r0, #1
 8015cfc:	d1c1      	bne.n	8015c82 <_printf_float+0x33e>
 8015cfe:	e680      	b.n	8015a02 <_printf_float+0xbe>
 8015d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d02:	2a01      	cmp	r2, #1
 8015d04:	dc01      	bgt.n	8015d0a <_printf_float+0x3c6>
 8015d06:	07db      	lsls	r3, r3, #31
 8015d08:	d53a      	bpl.n	8015d80 <_printf_float+0x43c>
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	4642      	mov	r2, r8
 8015d0e:	4631      	mov	r1, r6
 8015d10:	4628      	mov	r0, r5
 8015d12:	47b8      	blx	r7
 8015d14:	3001      	adds	r0, #1
 8015d16:	f43f ae74 	beq.w	8015a02 <_printf_float+0xbe>
 8015d1a:	ee18 3a10 	vmov	r3, s16
 8015d1e:	4652      	mov	r2, sl
 8015d20:	4631      	mov	r1, r6
 8015d22:	4628      	mov	r0, r5
 8015d24:	47b8      	blx	r7
 8015d26:	3001      	adds	r0, #1
 8015d28:	f43f ae6b 	beq.w	8015a02 <_printf_float+0xbe>
 8015d2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d30:	2200      	movs	r2, #0
 8015d32:	2300      	movs	r3, #0
 8015d34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015d38:	f7ea fec6 	bl	8000ac8 <__aeabi_dcmpeq>
 8015d3c:	b9d8      	cbnz	r0, 8015d76 <_printf_float+0x432>
 8015d3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015d42:	f108 0201 	add.w	r2, r8, #1
 8015d46:	4631      	mov	r1, r6
 8015d48:	4628      	mov	r0, r5
 8015d4a:	47b8      	blx	r7
 8015d4c:	3001      	adds	r0, #1
 8015d4e:	d10e      	bne.n	8015d6e <_printf_float+0x42a>
 8015d50:	e657      	b.n	8015a02 <_printf_float+0xbe>
 8015d52:	2301      	movs	r3, #1
 8015d54:	4652      	mov	r2, sl
 8015d56:	4631      	mov	r1, r6
 8015d58:	4628      	mov	r0, r5
 8015d5a:	47b8      	blx	r7
 8015d5c:	3001      	adds	r0, #1
 8015d5e:	f43f ae50 	beq.w	8015a02 <_printf_float+0xbe>
 8015d62:	f108 0801 	add.w	r8, r8, #1
 8015d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d68:	3b01      	subs	r3, #1
 8015d6a:	4543      	cmp	r3, r8
 8015d6c:	dcf1      	bgt.n	8015d52 <_printf_float+0x40e>
 8015d6e:	464b      	mov	r3, r9
 8015d70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015d74:	e6da      	b.n	8015b2c <_printf_float+0x1e8>
 8015d76:	f04f 0800 	mov.w	r8, #0
 8015d7a:	f104 0a1a 	add.w	sl, r4, #26
 8015d7e:	e7f2      	b.n	8015d66 <_printf_float+0x422>
 8015d80:	2301      	movs	r3, #1
 8015d82:	4642      	mov	r2, r8
 8015d84:	e7df      	b.n	8015d46 <_printf_float+0x402>
 8015d86:	2301      	movs	r3, #1
 8015d88:	464a      	mov	r2, r9
 8015d8a:	4631      	mov	r1, r6
 8015d8c:	4628      	mov	r0, r5
 8015d8e:	47b8      	blx	r7
 8015d90:	3001      	adds	r0, #1
 8015d92:	f43f ae36 	beq.w	8015a02 <_printf_float+0xbe>
 8015d96:	f108 0801 	add.w	r8, r8, #1
 8015d9a:	68e3      	ldr	r3, [r4, #12]
 8015d9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d9e:	1a5b      	subs	r3, r3, r1
 8015da0:	4543      	cmp	r3, r8
 8015da2:	dcf0      	bgt.n	8015d86 <_printf_float+0x442>
 8015da4:	e6f8      	b.n	8015b98 <_printf_float+0x254>
 8015da6:	f04f 0800 	mov.w	r8, #0
 8015daa:	f104 0919 	add.w	r9, r4, #25
 8015dae:	e7f4      	b.n	8015d9a <_printf_float+0x456>

08015db0 <_printf_common>:
 8015db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015db4:	4616      	mov	r6, r2
 8015db6:	4699      	mov	r9, r3
 8015db8:	688a      	ldr	r2, [r1, #8]
 8015dba:	690b      	ldr	r3, [r1, #16]
 8015dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	bfb8      	it	lt
 8015dc4:	4613      	movlt	r3, r2
 8015dc6:	6033      	str	r3, [r6, #0]
 8015dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015dcc:	4607      	mov	r7, r0
 8015dce:	460c      	mov	r4, r1
 8015dd0:	b10a      	cbz	r2, 8015dd6 <_printf_common+0x26>
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	6033      	str	r3, [r6, #0]
 8015dd6:	6823      	ldr	r3, [r4, #0]
 8015dd8:	0699      	lsls	r1, r3, #26
 8015dda:	bf42      	ittt	mi
 8015ddc:	6833      	ldrmi	r3, [r6, #0]
 8015dde:	3302      	addmi	r3, #2
 8015de0:	6033      	strmi	r3, [r6, #0]
 8015de2:	6825      	ldr	r5, [r4, #0]
 8015de4:	f015 0506 	ands.w	r5, r5, #6
 8015de8:	d106      	bne.n	8015df8 <_printf_common+0x48>
 8015dea:	f104 0a19 	add.w	sl, r4, #25
 8015dee:	68e3      	ldr	r3, [r4, #12]
 8015df0:	6832      	ldr	r2, [r6, #0]
 8015df2:	1a9b      	subs	r3, r3, r2
 8015df4:	42ab      	cmp	r3, r5
 8015df6:	dc26      	bgt.n	8015e46 <_printf_common+0x96>
 8015df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015dfc:	1e13      	subs	r3, r2, #0
 8015dfe:	6822      	ldr	r2, [r4, #0]
 8015e00:	bf18      	it	ne
 8015e02:	2301      	movne	r3, #1
 8015e04:	0692      	lsls	r2, r2, #26
 8015e06:	d42b      	bmi.n	8015e60 <_printf_common+0xb0>
 8015e08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e0c:	4649      	mov	r1, r9
 8015e0e:	4638      	mov	r0, r7
 8015e10:	47c0      	blx	r8
 8015e12:	3001      	adds	r0, #1
 8015e14:	d01e      	beq.n	8015e54 <_printf_common+0xa4>
 8015e16:	6823      	ldr	r3, [r4, #0]
 8015e18:	6922      	ldr	r2, [r4, #16]
 8015e1a:	f003 0306 	and.w	r3, r3, #6
 8015e1e:	2b04      	cmp	r3, #4
 8015e20:	bf02      	ittt	eq
 8015e22:	68e5      	ldreq	r5, [r4, #12]
 8015e24:	6833      	ldreq	r3, [r6, #0]
 8015e26:	1aed      	subeq	r5, r5, r3
 8015e28:	68a3      	ldr	r3, [r4, #8]
 8015e2a:	bf0c      	ite	eq
 8015e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e30:	2500      	movne	r5, #0
 8015e32:	4293      	cmp	r3, r2
 8015e34:	bfc4      	itt	gt
 8015e36:	1a9b      	subgt	r3, r3, r2
 8015e38:	18ed      	addgt	r5, r5, r3
 8015e3a:	2600      	movs	r6, #0
 8015e3c:	341a      	adds	r4, #26
 8015e3e:	42b5      	cmp	r5, r6
 8015e40:	d11a      	bne.n	8015e78 <_printf_common+0xc8>
 8015e42:	2000      	movs	r0, #0
 8015e44:	e008      	b.n	8015e58 <_printf_common+0xa8>
 8015e46:	2301      	movs	r3, #1
 8015e48:	4652      	mov	r2, sl
 8015e4a:	4649      	mov	r1, r9
 8015e4c:	4638      	mov	r0, r7
 8015e4e:	47c0      	blx	r8
 8015e50:	3001      	adds	r0, #1
 8015e52:	d103      	bne.n	8015e5c <_printf_common+0xac>
 8015e54:	f04f 30ff 	mov.w	r0, #4294967295
 8015e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e5c:	3501      	adds	r5, #1
 8015e5e:	e7c6      	b.n	8015dee <_printf_common+0x3e>
 8015e60:	18e1      	adds	r1, r4, r3
 8015e62:	1c5a      	adds	r2, r3, #1
 8015e64:	2030      	movs	r0, #48	; 0x30
 8015e66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e6a:	4422      	add	r2, r4
 8015e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015e74:	3302      	adds	r3, #2
 8015e76:	e7c7      	b.n	8015e08 <_printf_common+0x58>
 8015e78:	2301      	movs	r3, #1
 8015e7a:	4622      	mov	r2, r4
 8015e7c:	4649      	mov	r1, r9
 8015e7e:	4638      	mov	r0, r7
 8015e80:	47c0      	blx	r8
 8015e82:	3001      	adds	r0, #1
 8015e84:	d0e6      	beq.n	8015e54 <_printf_common+0xa4>
 8015e86:	3601      	adds	r6, #1
 8015e88:	e7d9      	b.n	8015e3e <_printf_common+0x8e>
	...

08015e8c <_printf_i>:
 8015e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e90:	7e0f      	ldrb	r7, [r1, #24]
 8015e92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015e94:	2f78      	cmp	r7, #120	; 0x78
 8015e96:	4691      	mov	r9, r2
 8015e98:	4680      	mov	r8, r0
 8015e9a:	460c      	mov	r4, r1
 8015e9c:	469a      	mov	sl, r3
 8015e9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015ea2:	d807      	bhi.n	8015eb4 <_printf_i+0x28>
 8015ea4:	2f62      	cmp	r7, #98	; 0x62
 8015ea6:	d80a      	bhi.n	8015ebe <_printf_i+0x32>
 8015ea8:	2f00      	cmp	r7, #0
 8015eaa:	f000 80d4 	beq.w	8016056 <_printf_i+0x1ca>
 8015eae:	2f58      	cmp	r7, #88	; 0x58
 8015eb0:	f000 80c0 	beq.w	8016034 <_printf_i+0x1a8>
 8015eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015eb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015ebc:	e03a      	b.n	8015f34 <_printf_i+0xa8>
 8015ebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015ec2:	2b15      	cmp	r3, #21
 8015ec4:	d8f6      	bhi.n	8015eb4 <_printf_i+0x28>
 8015ec6:	a101      	add	r1, pc, #4	; (adr r1, 8015ecc <_printf_i+0x40>)
 8015ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015ecc:	08015f25 	.word	0x08015f25
 8015ed0:	08015f39 	.word	0x08015f39
 8015ed4:	08015eb5 	.word	0x08015eb5
 8015ed8:	08015eb5 	.word	0x08015eb5
 8015edc:	08015eb5 	.word	0x08015eb5
 8015ee0:	08015eb5 	.word	0x08015eb5
 8015ee4:	08015f39 	.word	0x08015f39
 8015ee8:	08015eb5 	.word	0x08015eb5
 8015eec:	08015eb5 	.word	0x08015eb5
 8015ef0:	08015eb5 	.word	0x08015eb5
 8015ef4:	08015eb5 	.word	0x08015eb5
 8015ef8:	0801603d 	.word	0x0801603d
 8015efc:	08015f65 	.word	0x08015f65
 8015f00:	08015ff7 	.word	0x08015ff7
 8015f04:	08015eb5 	.word	0x08015eb5
 8015f08:	08015eb5 	.word	0x08015eb5
 8015f0c:	0801605f 	.word	0x0801605f
 8015f10:	08015eb5 	.word	0x08015eb5
 8015f14:	08015f65 	.word	0x08015f65
 8015f18:	08015eb5 	.word	0x08015eb5
 8015f1c:	08015eb5 	.word	0x08015eb5
 8015f20:	08015fff 	.word	0x08015fff
 8015f24:	682b      	ldr	r3, [r5, #0]
 8015f26:	1d1a      	adds	r2, r3, #4
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	602a      	str	r2, [r5, #0]
 8015f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f34:	2301      	movs	r3, #1
 8015f36:	e09f      	b.n	8016078 <_printf_i+0x1ec>
 8015f38:	6820      	ldr	r0, [r4, #0]
 8015f3a:	682b      	ldr	r3, [r5, #0]
 8015f3c:	0607      	lsls	r7, r0, #24
 8015f3e:	f103 0104 	add.w	r1, r3, #4
 8015f42:	6029      	str	r1, [r5, #0]
 8015f44:	d501      	bpl.n	8015f4a <_printf_i+0xbe>
 8015f46:	681e      	ldr	r6, [r3, #0]
 8015f48:	e003      	b.n	8015f52 <_printf_i+0xc6>
 8015f4a:	0646      	lsls	r6, r0, #25
 8015f4c:	d5fb      	bpl.n	8015f46 <_printf_i+0xba>
 8015f4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015f52:	2e00      	cmp	r6, #0
 8015f54:	da03      	bge.n	8015f5e <_printf_i+0xd2>
 8015f56:	232d      	movs	r3, #45	; 0x2d
 8015f58:	4276      	negs	r6, r6
 8015f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f5e:	485a      	ldr	r0, [pc, #360]	; (80160c8 <_printf_i+0x23c>)
 8015f60:	230a      	movs	r3, #10
 8015f62:	e012      	b.n	8015f8a <_printf_i+0xfe>
 8015f64:	682b      	ldr	r3, [r5, #0]
 8015f66:	6820      	ldr	r0, [r4, #0]
 8015f68:	1d19      	adds	r1, r3, #4
 8015f6a:	6029      	str	r1, [r5, #0]
 8015f6c:	0605      	lsls	r5, r0, #24
 8015f6e:	d501      	bpl.n	8015f74 <_printf_i+0xe8>
 8015f70:	681e      	ldr	r6, [r3, #0]
 8015f72:	e002      	b.n	8015f7a <_printf_i+0xee>
 8015f74:	0641      	lsls	r1, r0, #25
 8015f76:	d5fb      	bpl.n	8015f70 <_printf_i+0xe4>
 8015f78:	881e      	ldrh	r6, [r3, #0]
 8015f7a:	4853      	ldr	r0, [pc, #332]	; (80160c8 <_printf_i+0x23c>)
 8015f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8015f7e:	bf0c      	ite	eq
 8015f80:	2308      	moveq	r3, #8
 8015f82:	230a      	movne	r3, #10
 8015f84:	2100      	movs	r1, #0
 8015f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015f8a:	6865      	ldr	r5, [r4, #4]
 8015f8c:	60a5      	str	r5, [r4, #8]
 8015f8e:	2d00      	cmp	r5, #0
 8015f90:	bfa2      	ittt	ge
 8015f92:	6821      	ldrge	r1, [r4, #0]
 8015f94:	f021 0104 	bicge.w	r1, r1, #4
 8015f98:	6021      	strge	r1, [r4, #0]
 8015f9a:	b90e      	cbnz	r6, 8015fa0 <_printf_i+0x114>
 8015f9c:	2d00      	cmp	r5, #0
 8015f9e:	d04b      	beq.n	8016038 <_printf_i+0x1ac>
 8015fa0:	4615      	mov	r5, r2
 8015fa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8015fa6:	fb03 6711 	mls	r7, r3, r1, r6
 8015faa:	5dc7      	ldrb	r7, [r0, r7]
 8015fac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015fb0:	4637      	mov	r7, r6
 8015fb2:	42bb      	cmp	r3, r7
 8015fb4:	460e      	mov	r6, r1
 8015fb6:	d9f4      	bls.n	8015fa2 <_printf_i+0x116>
 8015fb8:	2b08      	cmp	r3, #8
 8015fba:	d10b      	bne.n	8015fd4 <_printf_i+0x148>
 8015fbc:	6823      	ldr	r3, [r4, #0]
 8015fbe:	07de      	lsls	r6, r3, #31
 8015fc0:	d508      	bpl.n	8015fd4 <_printf_i+0x148>
 8015fc2:	6923      	ldr	r3, [r4, #16]
 8015fc4:	6861      	ldr	r1, [r4, #4]
 8015fc6:	4299      	cmp	r1, r3
 8015fc8:	bfde      	ittt	le
 8015fca:	2330      	movle	r3, #48	; 0x30
 8015fcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015fd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015fd4:	1b52      	subs	r2, r2, r5
 8015fd6:	6122      	str	r2, [r4, #16]
 8015fd8:	f8cd a000 	str.w	sl, [sp]
 8015fdc:	464b      	mov	r3, r9
 8015fde:	aa03      	add	r2, sp, #12
 8015fe0:	4621      	mov	r1, r4
 8015fe2:	4640      	mov	r0, r8
 8015fe4:	f7ff fee4 	bl	8015db0 <_printf_common>
 8015fe8:	3001      	adds	r0, #1
 8015fea:	d14a      	bne.n	8016082 <_printf_i+0x1f6>
 8015fec:	f04f 30ff 	mov.w	r0, #4294967295
 8015ff0:	b004      	add	sp, #16
 8015ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ff6:	6823      	ldr	r3, [r4, #0]
 8015ff8:	f043 0320 	orr.w	r3, r3, #32
 8015ffc:	6023      	str	r3, [r4, #0]
 8015ffe:	4833      	ldr	r0, [pc, #204]	; (80160cc <_printf_i+0x240>)
 8016000:	2778      	movs	r7, #120	; 0x78
 8016002:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016006:	6823      	ldr	r3, [r4, #0]
 8016008:	6829      	ldr	r1, [r5, #0]
 801600a:	061f      	lsls	r7, r3, #24
 801600c:	f851 6b04 	ldr.w	r6, [r1], #4
 8016010:	d402      	bmi.n	8016018 <_printf_i+0x18c>
 8016012:	065f      	lsls	r7, r3, #25
 8016014:	bf48      	it	mi
 8016016:	b2b6      	uxthmi	r6, r6
 8016018:	07df      	lsls	r7, r3, #31
 801601a:	bf48      	it	mi
 801601c:	f043 0320 	orrmi.w	r3, r3, #32
 8016020:	6029      	str	r1, [r5, #0]
 8016022:	bf48      	it	mi
 8016024:	6023      	strmi	r3, [r4, #0]
 8016026:	b91e      	cbnz	r6, 8016030 <_printf_i+0x1a4>
 8016028:	6823      	ldr	r3, [r4, #0]
 801602a:	f023 0320 	bic.w	r3, r3, #32
 801602e:	6023      	str	r3, [r4, #0]
 8016030:	2310      	movs	r3, #16
 8016032:	e7a7      	b.n	8015f84 <_printf_i+0xf8>
 8016034:	4824      	ldr	r0, [pc, #144]	; (80160c8 <_printf_i+0x23c>)
 8016036:	e7e4      	b.n	8016002 <_printf_i+0x176>
 8016038:	4615      	mov	r5, r2
 801603a:	e7bd      	b.n	8015fb8 <_printf_i+0x12c>
 801603c:	682b      	ldr	r3, [r5, #0]
 801603e:	6826      	ldr	r6, [r4, #0]
 8016040:	6961      	ldr	r1, [r4, #20]
 8016042:	1d18      	adds	r0, r3, #4
 8016044:	6028      	str	r0, [r5, #0]
 8016046:	0635      	lsls	r5, r6, #24
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	d501      	bpl.n	8016050 <_printf_i+0x1c4>
 801604c:	6019      	str	r1, [r3, #0]
 801604e:	e002      	b.n	8016056 <_printf_i+0x1ca>
 8016050:	0670      	lsls	r0, r6, #25
 8016052:	d5fb      	bpl.n	801604c <_printf_i+0x1c0>
 8016054:	8019      	strh	r1, [r3, #0]
 8016056:	2300      	movs	r3, #0
 8016058:	6123      	str	r3, [r4, #16]
 801605a:	4615      	mov	r5, r2
 801605c:	e7bc      	b.n	8015fd8 <_printf_i+0x14c>
 801605e:	682b      	ldr	r3, [r5, #0]
 8016060:	1d1a      	adds	r2, r3, #4
 8016062:	602a      	str	r2, [r5, #0]
 8016064:	681d      	ldr	r5, [r3, #0]
 8016066:	6862      	ldr	r2, [r4, #4]
 8016068:	2100      	movs	r1, #0
 801606a:	4628      	mov	r0, r5
 801606c:	f7ea f8b0 	bl	80001d0 <memchr>
 8016070:	b108      	cbz	r0, 8016076 <_printf_i+0x1ea>
 8016072:	1b40      	subs	r0, r0, r5
 8016074:	6060      	str	r0, [r4, #4]
 8016076:	6863      	ldr	r3, [r4, #4]
 8016078:	6123      	str	r3, [r4, #16]
 801607a:	2300      	movs	r3, #0
 801607c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016080:	e7aa      	b.n	8015fd8 <_printf_i+0x14c>
 8016082:	6923      	ldr	r3, [r4, #16]
 8016084:	462a      	mov	r2, r5
 8016086:	4649      	mov	r1, r9
 8016088:	4640      	mov	r0, r8
 801608a:	47d0      	blx	sl
 801608c:	3001      	adds	r0, #1
 801608e:	d0ad      	beq.n	8015fec <_printf_i+0x160>
 8016090:	6823      	ldr	r3, [r4, #0]
 8016092:	079b      	lsls	r3, r3, #30
 8016094:	d413      	bmi.n	80160be <_printf_i+0x232>
 8016096:	68e0      	ldr	r0, [r4, #12]
 8016098:	9b03      	ldr	r3, [sp, #12]
 801609a:	4298      	cmp	r0, r3
 801609c:	bfb8      	it	lt
 801609e:	4618      	movlt	r0, r3
 80160a0:	e7a6      	b.n	8015ff0 <_printf_i+0x164>
 80160a2:	2301      	movs	r3, #1
 80160a4:	4632      	mov	r2, r6
 80160a6:	4649      	mov	r1, r9
 80160a8:	4640      	mov	r0, r8
 80160aa:	47d0      	blx	sl
 80160ac:	3001      	adds	r0, #1
 80160ae:	d09d      	beq.n	8015fec <_printf_i+0x160>
 80160b0:	3501      	adds	r5, #1
 80160b2:	68e3      	ldr	r3, [r4, #12]
 80160b4:	9903      	ldr	r1, [sp, #12]
 80160b6:	1a5b      	subs	r3, r3, r1
 80160b8:	42ab      	cmp	r3, r5
 80160ba:	dcf2      	bgt.n	80160a2 <_printf_i+0x216>
 80160bc:	e7eb      	b.n	8016096 <_printf_i+0x20a>
 80160be:	2500      	movs	r5, #0
 80160c0:	f104 0619 	add.w	r6, r4, #25
 80160c4:	e7f5      	b.n	80160b2 <_printf_i+0x226>
 80160c6:	bf00      	nop
 80160c8:	08018be7 	.word	0x08018be7
 80160cc:	08018bf8 	.word	0x08018bf8

080160d0 <std>:
 80160d0:	2300      	movs	r3, #0
 80160d2:	b510      	push	{r4, lr}
 80160d4:	4604      	mov	r4, r0
 80160d6:	e9c0 3300 	strd	r3, r3, [r0]
 80160da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80160de:	6083      	str	r3, [r0, #8]
 80160e0:	8181      	strh	r1, [r0, #12]
 80160e2:	6643      	str	r3, [r0, #100]	; 0x64
 80160e4:	81c2      	strh	r2, [r0, #14]
 80160e6:	6183      	str	r3, [r0, #24]
 80160e8:	4619      	mov	r1, r3
 80160ea:	2208      	movs	r2, #8
 80160ec:	305c      	adds	r0, #92	; 0x5c
 80160ee:	f000 f914 	bl	801631a <memset>
 80160f2:	4b0d      	ldr	r3, [pc, #52]	; (8016128 <std+0x58>)
 80160f4:	6263      	str	r3, [r4, #36]	; 0x24
 80160f6:	4b0d      	ldr	r3, [pc, #52]	; (801612c <std+0x5c>)
 80160f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80160fa:	4b0d      	ldr	r3, [pc, #52]	; (8016130 <std+0x60>)
 80160fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80160fe:	4b0d      	ldr	r3, [pc, #52]	; (8016134 <std+0x64>)
 8016100:	6323      	str	r3, [r4, #48]	; 0x30
 8016102:	4b0d      	ldr	r3, [pc, #52]	; (8016138 <std+0x68>)
 8016104:	6224      	str	r4, [r4, #32]
 8016106:	429c      	cmp	r4, r3
 8016108:	d006      	beq.n	8016118 <std+0x48>
 801610a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801610e:	4294      	cmp	r4, r2
 8016110:	d002      	beq.n	8016118 <std+0x48>
 8016112:	33d0      	adds	r3, #208	; 0xd0
 8016114:	429c      	cmp	r4, r3
 8016116:	d105      	bne.n	8016124 <std+0x54>
 8016118:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801611c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016120:	f000 b9f0 	b.w	8016504 <__retarget_lock_init_recursive>
 8016124:	bd10      	pop	{r4, pc}
 8016126:	bf00      	nop
 8016128:	08016295 	.word	0x08016295
 801612c:	080162b7 	.word	0x080162b7
 8016130:	080162ef 	.word	0x080162ef
 8016134:	08016313 	.word	0x08016313
 8016138:	2000a3a0 	.word	0x2000a3a0

0801613c <stdio_exit_handler>:
 801613c:	4a02      	ldr	r2, [pc, #8]	; (8016148 <stdio_exit_handler+0xc>)
 801613e:	4903      	ldr	r1, [pc, #12]	; (801614c <stdio_exit_handler+0x10>)
 8016140:	4803      	ldr	r0, [pc, #12]	; (8016150 <stdio_exit_handler+0x14>)
 8016142:	f000 b869 	b.w	8016218 <_fwalk_sglue>
 8016146:	bf00      	nop
 8016148:	2000139c 	.word	0x2000139c
 801614c:	08017ed1 	.word	0x08017ed1
 8016150:	200013a8 	.word	0x200013a8

08016154 <cleanup_stdio>:
 8016154:	6841      	ldr	r1, [r0, #4]
 8016156:	4b0c      	ldr	r3, [pc, #48]	; (8016188 <cleanup_stdio+0x34>)
 8016158:	4299      	cmp	r1, r3
 801615a:	b510      	push	{r4, lr}
 801615c:	4604      	mov	r4, r0
 801615e:	d001      	beq.n	8016164 <cleanup_stdio+0x10>
 8016160:	f001 feb6 	bl	8017ed0 <_fflush_r>
 8016164:	68a1      	ldr	r1, [r4, #8]
 8016166:	4b09      	ldr	r3, [pc, #36]	; (801618c <cleanup_stdio+0x38>)
 8016168:	4299      	cmp	r1, r3
 801616a:	d002      	beq.n	8016172 <cleanup_stdio+0x1e>
 801616c:	4620      	mov	r0, r4
 801616e:	f001 feaf 	bl	8017ed0 <_fflush_r>
 8016172:	68e1      	ldr	r1, [r4, #12]
 8016174:	4b06      	ldr	r3, [pc, #24]	; (8016190 <cleanup_stdio+0x3c>)
 8016176:	4299      	cmp	r1, r3
 8016178:	d004      	beq.n	8016184 <cleanup_stdio+0x30>
 801617a:	4620      	mov	r0, r4
 801617c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016180:	f001 bea6 	b.w	8017ed0 <_fflush_r>
 8016184:	bd10      	pop	{r4, pc}
 8016186:	bf00      	nop
 8016188:	2000a3a0 	.word	0x2000a3a0
 801618c:	2000a408 	.word	0x2000a408
 8016190:	2000a470 	.word	0x2000a470

08016194 <global_stdio_init.part.0>:
 8016194:	b510      	push	{r4, lr}
 8016196:	4b0b      	ldr	r3, [pc, #44]	; (80161c4 <global_stdio_init.part.0+0x30>)
 8016198:	4c0b      	ldr	r4, [pc, #44]	; (80161c8 <global_stdio_init.part.0+0x34>)
 801619a:	4a0c      	ldr	r2, [pc, #48]	; (80161cc <global_stdio_init.part.0+0x38>)
 801619c:	601a      	str	r2, [r3, #0]
 801619e:	4620      	mov	r0, r4
 80161a0:	2200      	movs	r2, #0
 80161a2:	2104      	movs	r1, #4
 80161a4:	f7ff ff94 	bl	80160d0 <std>
 80161a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80161ac:	2201      	movs	r2, #1
 80161ae:	2109      	movs	r1, #9
 80161b0:	f7ff ff8e 	bl	80160d0 <std>
 80161b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80161b8:	2202      	movs	r2, #2
 80161ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161be:	2112      	movs	r1, #18
 80161c0:	f7ff bf86 	b.w	80160d0 <std>
 80161c4:	2000a4d8 	.word	0x2000a4d8
 80161c8:	2000a3a0 	.word	0x2000a3a0
 80161cc:	0801613d 	.word	0x0801613d

080161d0 <__sfp_lock_acquire>:
 80161d0:	4801      	ldr	r0, [pc, #4]	; (80161d8 <__sfp_lock_acquire+0x8>)
 80161d2:	f000 b998 	b.w	8016506 <__retarget_lock_acquire_recursive>
 80161d6:	bf00      	nop
 80161d8:	2000a4e1 	.word	0x2000a4e1

080161dc <__sfp_lock_release>:
 80161dc:	4801      	ldr	r0, [pc, #4]	; (80161e4 <__sfp_lock_release+0x8>)
 80161de:	f000 b993 	b.w	8016508 <__retarget_lock_release_recursive>
 80161e2:	bf00      	nop
 80161e4:	2000a4e1 	.word	0x2000a4e1

080161e8 <__sinit>:
 80161e8:	b510      	push	{r4, lr}
 80161ea:	4604      	mov	r4, r0
 80161ec:	f7ff fff0 	bl	80161d0 <__sfp_lock_acquire>
 80161f0:	6a23      	ldr	r3, [r4, #32]
 80161f2:	b11b      	cbz	r3, 80161fc <__sinit+0x14>
 80161f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161f8:	f7ff bff0 	b.w	80161dc <__sfp_lock_release>
 80161fc:	4b04      	ldr	r3, [pc, #16]	; (8016210 <__sinit+0x28>)
 80161fe:	6223      	str	r3, [r4, #32]
 8016200:	4b04      	ldr	r3, [pc, #16]	; (8016214 <__sinit+0x2c>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d1f5      	bne.n	80161f4 <__sinit+0xc>
 8016208:	f7ff ffc4 	bl	8016194 <global_stdio_init.part.0>
 801620c:	e7f2      	b.n	80161f4 <__sinit+0xc>
 801620e:	bf00      	nop
 8016210:	08016155 	.word	0x08016155
 8016214:	2000a4d8 	.word	0x2000a4d8

08016218 <_fwalk_sglue>:
 8016218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801621c:	4607      	mov	r7, r0
 801621e:	4688      	mov	r8, r1
 8016220:	4614      	mov	r4, r2
 8016222:	2600      	movs	r6, #0
 8016224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016228:	f1b9 0901 	subs.w	r9, r9, #1
 801622c:	d505      	bpl.n	801623a <_fwalk_sglue+0x22>
 801622e:	6824      	ldr	r4, [r4, #0]
 8016230:	2c00      	cmp	r4, #0
 8016232:	d1f7      	bne.n	8016224 <_fwalk_sglue+0xc>
 8016234:	4630      	mov	r0, r6
 8016236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801623a:	89ab      	ldrh	r3, [r5, #12]
 801623c:	2b01      	cmp	r3, #1
 801623e:	d907      	bls.n	8016250 <_fwalk_sglue+0x38>
 8016240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016244:	3301      	adds	r3, #1
 8016246:	d003      	beq.n	8016250 <_fwalk_sglue+0x38>
 8016248:	4629      	mov	r1, r5
 801624a:	4638      	mov	r0, r7
 801624c:	47c0      	blx	r8
 801624e:	4306      	orrs	r6, r0
 8016250:	3568      	adds	r5, #104	; 0x68
 8016252:	e7e9      	b.n	8016228 <_fwalk_sglue+0x10>

08016254 <siprintf>:
 8016254:	b40e      	push	{r1, r2, r3}
 8016256:	b500      	push	{lr}
 8016258:	b09c      	sub	sp, #112	; 0x70
 801625a:	ab1d      	add	r3, sp, #116	; 0x74
 801625c:	9002      	str	r0, [sp, #8]
 801625e:	9006      	str	r0, [sp, #24]
 8016260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016264:	4809      	ldr	r0, [pc, #36]	; (801628c <siprintf+0x38>)
 8016266:	9107      	str	r1, [sp, #28]
 8016268:	9104      	str	r1, [sp, #16]
 801626a:	4909      	ldr	r1, [pc, #36]	; (8016290 <siprintf+0x3c>)
 801626c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016270:	9105      	str	r1, [sp, #20]
 8016272:	6800      	ldr	r0, [r0, #0]
 8016274:	9301      	str	r3, [sp, #4]
 8016276:	a902      	add	r1, sp, #8
 8016278:	f001 fca6 	bl	8017bc8 <_svfiprintf_r>
 801627c:	9b02      	ldr	r3, [sp, #8]
 801627e:	2200      	movs	r2, #0
 8016280:	701a      	strb	r2, [r3, #0]
 8016282:	b01c      	add	sp, #112	; 0x70
 8016284:	f85d eb04 	ldr.w	lr, [sp], #4
 8016288:	b003      	add	sp, #12
 801628a:	4770      	bx	lr
 801628c:	200013f4 	.word	0x200013f4
 8016290:	ffff0208 	.word	0xffff0208

08016294 <__sread>:
 8016294:	b510      	push	{r4, lr}
 8016296:	460c      	mov	r4, r1
 8016298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801629c:	f000 f8e4 	bl	8016468 <_read_r>
 80162a0:	2800      	cmp	r0, #0
 80162a2:	bfab      	itete	ge
 80162a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80162a6:	89a3      	ldrhlt	r3, [r4, #12]
 80162a8:	181b      	addge	r3, r3, r0
 80162aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80162ae:	bfac      	ite	ge
 80162b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80162b2:	81a3      	strhlt	r3, [r4, #12]
 80162b4:	bd10      	pop	{r4, pc}

080162b6 <__swrite>:
 80162b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162ba:	461f      	mov	r7, r3
 80162bc:	898b      	ldrh	r3, [r1, #12]
 80162be:	05db      	lsls	r3, r3, #23
 80162c0:	4605      	mov	r5, r0
 80162c2:	460c      	mov	r4, r1
 80162c4:	4616      	mov	r6, r2
 80162c6:	d505      	bpl.n	80162d4 <__swrite+0x1e>
 80162c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162cc:	2302      	movs	r3, #2
 80162ce:	2200      	movs	r2, #0
 80162d0:	f000 f8b8 	bl	8016444 <_lseek_r>
 80162d4:	89a3      	ldrh	r3, [r4, #12]
 80162d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80162de:	81a3      	strh	r3, [r4, #12]
 80162e0:	4632      	mov	r2, r6
 80162e2:	463b      	mov	r3, r7
 80162e4:	4628      	mov	r0, r5
 80162e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162ea:	f000 b8cf 	b.w	801648c <_write_r>

080162ee <__sseek>:
 80162ee:	b510      	push	{r4, lr}
 80162f0:	460c      	mov	r4, r1
 80162f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162f6:	f000 f8a5 	bl	8016444 <_lseek_r>
 80162fa:	1c43      	adds	r3, r0, #1
 80162fc:	89a3      	ldrh	r3, [r4, #12]
 80162fe:	bf15      	itete	ne
 8016300:	6560      	strne	r0, [r4, #84]	; 0x54
 8016302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801630a:	81a3      	strheq	r3, [r4, #12]
 801630c:	bf18      	it	ne
 801630e:	81a3      	strhne	r3, [r4, #12]
 8016310:	bd10      	pop	{r4, pc}

08016312 <__sclose>:
 8016312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016316:	f000 b82f 	b.w	8016378 <_close_r>

0801631a <memset>:
 801631a:	4402      	add	r2, r0
 801631c:	4603      	mov	r3, r0
 801631e:	4293      	cmp	r3, r2
 8016320:	d100      	bne.n	8016324 <memset+0xa>
 8016322:	4770      	bx	lr
 8016324:	f803 1b01 	strb.w	r1, [r3], #1
 8016328:	e7f9      	b.n	801631e <memset+0x4>

0801632a <strchr>:
 801632a:	b2c9      	uxtb	r1, r1
 801632c:	4603      	mov	r3, r0
 801632e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016332:	b11a      	cbz	r2, 801633c <strchr+0x12>
 8016334:	428a      	cmp	r2, r1
 8016336:	d1f9      	bne.n	801632c <strchr+0x2>
 8016338:	4618      	mov	r0, r3
 801633a:	4770      	bx	lr
 801633c:	2900      	cmp	r1, #0
 801633e:	bf18      	it	ne
 8016340:	2300      	movne	r3, #0
 8016342:	e7f9      	b.n	8016338 <strchr+0xe>

08016344 <strstr>:
 8016344:	780a      	ldrb	r2, [r1, #0]
 8016346:	b570      	push	{r4, r5, r6, lr}
 8016348:	b96a      	cbnz	r2, 8016366 <strstr+0x22>
 801634a:	bd70      	pop	{r4, r5, r6, pc}
 801634c:	429a      	cmp	r2, r3
 801634e:	d109      	bne.n	8016364 <strstr+0x20>
 8016350:	460c      	mov	r4, r1
 8016352:	4605      	mov	r5, r0
 8016354:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016358:	2b00      	cmp	r3, #0
 801635a:	d0f6      	beq.n	801634a <strstr+0x6>
 801635c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016360:	429e      	cmp	r6, r3
 8016362:	d0f7      	beq.n	8016354 <strstr+0x10>
 8016364:	3001      	adds	r0, #1
 8016366:	7803      	ldrb	r3, [r0, #0]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d1ef      	bne.n	801634c <strstr+0x8>
 801636c:	4618      	mov	r0, r3
 801636e:	e7ec      	b.n	801634a <strstr+0x6>

08016370 <_localeconv_r>:
 8016370:	4800      	ldr	r0, [pc, #0]	; (8016374 <_localeconv_r+0x4>)
 8016372:	4770      	bx	lr
 8016374:	200014e8 	.word	0x200014e8

08016378 <_close_r>:
 8016378:	b538      	push	{r3, r4, r5, lr}
 801637a:	4d06      	ldr	r5, [pc, #24]	; (8016394 <_close_r+0x1c>)
 801637c:	2300      	movs	r3, #0
 801637e:	4604      	mov	r4, r0
 8016380:	4608      	mov	r0, r1
 8016382:	602b      	str	r3, [r5, #0]
 8016384:	f7ec f9a9 	bl	80026da <_close>
 8016388:	1c43      	adds	r3, r0, #1
 801638a:	d102      	bne.n	8016392 <_close_r+0x1a>
 801638c:	682b      	ldr	r3, [r5, #0]
 801638e:	b103      	cbz	r3, 8016392 <_close_r+0x1a>
 8016390:	6023      	str	r3, [r4, #0]
 8016392:	bd38      	pop	{r3, r4, r5, pc}
 8016394:	2000a4dc 	.word	0x2000a4dc

08016398 <_reclaim_reent>:
 8016398:	4b29      	ldr	r3, [pc, #164]	; (8016440 <_reclaim_reent+0xa8>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	4283      	cmp	r3, r0
 801639e:	b570      	push	{r4, r5, r6, lr}
 80163a0:	4604      	mov	r4, r0
 80163a2:	d04b      	beq.n	801643c <_reclaim_reent+0xa4>
 80163a4:	69c3      	ldr	r3, [r0, #28]
 80163a6:	b143      	cbz	r3, 80163ba <_reclaim_reent+0x22>
 80163a8:	68db      	ldr	r3, [r3, #12]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d144      	bne.n	8016438 <_reclaim_reent+0xa0>
 80163ae:	69e3      	ldr	r3, [r4, #28]
 80163b0:	6819      	ldr	r1, [r3, #0]
 80163b2:	b111      	cbz	r1, 80163ba <_reclaim_reent+0x22>
 80163b4:	4620      	mov	r0, r4
 80163b6:	f000 ff31 	bl	801721c <_free_r>
 80163ba:	6961      	ldr	r1, [r4, #20]
 80163bc:	b111      	cbz	r1, 80163c4 <_reclaim_reent+0x2c>
 80163be:	4620      	mov	r0, r4
 80163c0:	f000 ff2c 	bl	801721c <_free_r>
 80163c4:	69e1      	ldr	r1, [r4, #28]
 80163c6:	b111      	cbz	r1, 80163ce <_reclaim_reent+0x36>
 80163c8:	4620      	mov	r0, r4
 80163ca:	f000 ff27 	bl	801721c <_free_r>
 80163ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80163d0:	b111      	cbz	r1, 80163d8 <_reclaim_reent+0x40>
 80163d2:	4620      	mov	r0, r4
 80163d4:	f000 ff22 	bl	801721c <_free_r>
 80163d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80163da:	b111      	cbz	r1, 80163e2 <_reclaim_reent+0x4a>
 80163dc:	4620      	mov	r0, r4
 80163de:	f000 ff1d 	bl	801721c <_free_r>
 80163e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80163e4:	b111      	cbz	r1, 80163ec <_reclaim_reent+0x54>
 80163e6:	4620      	mov	r0, r4
 80163e8:	f000 ff18 	bl	801721c <_free_r>
 80163ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80163ee:	b111      	cbz	r1, 80163f6 <_reclaim_reent+0x5e>
 80163f0:	4620      	mov	r0, r4
 80163f2:	f000 ff13 	bl	801721c <_free_r>
 80163f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80163f8:	b111      	cbz	r1, 8016400 <_reclaim_reent+0x68>
 80163fa:	4620      	mov	r0, r4
 80163fc:	f000 ff0e 	bl	801721c <_free_r>
 8016400:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016402:	b111      	cbz	r1, 801640a <_reclaim_reent+0x72>
 8016404:	4620      	mov	r0, r4
 8016406:	f000 ff09 	bl	801721c <_free_r>
 801640a:	6a23      	ldr	r3, [r4, #32]
 801640c:	b1b3      	cbz	r3, 801643c <_reclaim_reent+0xa4>
 801640e:	4620      	mov	r0, r4
 8016410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016414:	4718      	bx	r3
 8016416:	5949      	ldr	r1, [r1, r5]
 8016418:	b941      	cbnz	r1, 801642c <_reclaim_reent+0x94>
 801641a:	3504      	adds	r5, #4
 801641c:	69e3      	ldr	r3, [r4, #28]
 801641e:	2d80      	cmp	r5, #128	; 0x80
 8016420:	68d9      	ldr	r1, [r3, #12]
 8016422:	d1f8      	bne.n	8016416 <_reclaim_reent+0x7e>
 8016424:	4620      	mov	r0, r4
 8016426:	f000 fef9 	bl	801721c <_free_r>
 801642a:	e7c0      	b.n	80163ae <_reclaim_reent+0x16>
 801642c:	680e      	ldr	r6, [r1, #0]
 801642e:	4620      	mov	r0, r4
 8016430:	f000 fef4 	bl	801721c <_free_r>
 8016434:	4631      	mov	r1, r6
 8016436:	e7ef      	b.n	8016418 <_reclaim_reent+0x80>
 8016438:	2500      	movs	r5, #0
 801643a:	e7ef      	b.n	801641c <_reclaim_reent+0x84>
 801643c:	bd70      	pop	{r4, r5, r6, pc}
 801643e:	bf00      	nop
 8016440:	200013f4 	.word	0x200013f4

08016444 <_lseek_r>:
 8016444:	b538      	push	{r3, r4, r5, lr}
 8016446:	4d07      	ldr	r5, [pc, #28]	; (8016464 <_lseek_r+0x20>)
 8016448:	4604      	mov	r4, r0
 801644a:	4608      	mov	r0, r1
 801644c:	4611      	mov	r1, r2
 801644e:	2200      	movs	r2, #0
 8016450:	602a      	str	r2, [r5, #0]
 8016452:	461a      	mov	r2, r3
 8016454:	f7ec f968 	bl	8002728 <_lseek>
 8016458:	1c43      	adds	r3, r0, #1
 801645a:	d102      	bne.n	8016462 <_lseek_r+0x1e>
 801645c:	682b      	ldr	r3, [r5, #0]
 801645e:	b103      	cbz	r3, 8016462 <_lseek_r+0x1e>
 8016460:	6023      	str	r3, [r4, #0]
 8016462:	bd38      	pop	{r3, r4, r5, pc}
 8016464:	2000a4dc 	.word	0x2000a4dc

08016468 <_read_r>:
 8016468:	b538      	push	{r3, r4, r5, lr}
 801646a:	4d07      	ldr	r5, [pc, #28]	; (8016488 <_read_r+0x20>)
 801646c:	4604      	mov	r4, r0
 801646e:	4608      	mov	r0, r1
 8016470:	4611      	mov	r1, r2
 8016472:	2200      	movs	r2, #0
 8016474:	602a      	str	r2, [r5, #0]
 8016476:	461a      	mov	r2, r3
 8016478:	f7ec f8f6 	bl	8002668 <_read>
 801647c:	1c43      	adds	r3, r0, #1
 801647e:	d102      	bne.n	8016486 <_read_r+0x1e>
 8016480:	682b      	ldr	r3, [r5, #0]
 8016482:	b103      	cbz	r3, 8016486 <_read_r+0x1e>
 8016484:	6023      	str	r3, [r4, #0]
 8016486:	bd38      	pop	{r3, r4, r5, pc}
 8016488:	2000a4dc 	.word	0x2000a4dc

0801648c <_write_r>:
 801648c:	b538      	push	{r3, r4, r5, lr}
 801648e:	4d07      	ldr	r5, [pc, #28]	; (80164ac <_write_r+0x20>)
 8016490:	4604      	mov	r4, r0
 8016492:	4608      	mov	r0, r1
 8016494:	4611      	mov	r1, r2
 8016496:	2200      	movs	r2, #0
 8016498:	602a      	str	r2, [r5, #0]
 801649a:	461a      	mov	r2, r3
 801649c:	f7ec f901 	bl	80026a2 <_write>
 80164a0:	1c43      	adds	r3, r0, #1
 80164a2:	d102      	bne.n	80164aa <_write_r+0x1e>
 80164a4:	682b      	ldr	r3, [r5, #0]
 80164a6:	b103      	cbz	r3, 80164aa <_write_r+0x1e>
 80164a8:	6023      	str	r3, [r4, #0]
 80164aa:	bd38      	pop	{r3, r4, r5, pc}
 80164ac:	2000a4dc 	.word	0x2000a4dc

080164b0 <__errno>:
 80164b0:	4b01      	ldr	r3, [pc, #4]	; (80164b8 <__errno+0x8>)
 80164b2:	6818      	ldr	r0, [r3, #0]
 80164b4:	4770      	bx	lr
 80164b6:	bf00      	nop
 80164b8:	200013f4 	.word	0x200013f4

080164bc <__libc_init_array>:
 80164bc:	b570      	push	{r4, r5, r6, lr}
 80164be:	4d0d      	ldr	r5, [pc, #52]	; (80164f4 <__libc_init_array+0x38>)
 80164c0:	4c0d      	ldr	r4, [pc, #52]	; (80164f8 <__libc_init_array+0x3c>)
 80164c2:	1b64      	subs	r4, r4, r5
 80164c4:	10a4      	asrs	r4, r4, #2
 80164c6:	2600      	movs	r6, #0
 80164c8:	42a6      	cmp	r6, r4
 80164ca:	d109      	bne.n	80164e0 <__libc_init_array+0x24>
 80164cc:	4d0b      	ldr	r5, [pc, #44]	; (80164fc <__libc_init_array+0x40>)
 80164ce:	4c0c      	ldr	r4, [pc, #48]	; (8016500 <__libc_init_array+0x44>)
 80164d0:	f002 f894 	bl	80185fc <_init>
 80164d4:	1b64      	subs	r4, r4, r5
 80164d6:	10a4      	asrs	r4, r4, #2
 80164d8:	2600      	movs	r6, #0
 80164da:	42a6      	cmp	r6, r4
 80164dc:	d105      	bne.n	80164ea <__libc_init_array+0x2e>
 80164de:	bd70      	pop	{r4, r5, r6, pc}
 80164e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80164e4:	4798      	blx	r3
 80164e6:	3601      	adds	r6, #1
 80164e8:	e7ee      	b.n	80164c8 <__libc_init_array+0xc>
 80164ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80164ee:	4798      	blx	r3
 80164f0:	3601      	adds	r6, #1
 80164f2:	e7f2      	b.n	80164da <__libc_init_array+0x1e>
 80164f4:	08018e4c 	.word	0x08018e4c
 80164f8:	08018e4c 	.word	0x08018e4c
 80164fc:	08018e4c 	.word	0x08018e4c
 8016500:	08018e50 	.word	0x08018e50

08016504 <__retarget_lock_init_recursive>:
 8016504:	4770      	bx	lr

08016506 <__retarget_lock_acquire_recursive>:
 8016506:	4770      	bx	lr

08016508 <__retarget_lock_release_recursive>:
 8016508:	4770      	bx	lr

0801650a <memcpy>:
 801650a:	440a      	add	r2, r1
 801650c:	4291      	cmp	r1, r2
 801650e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016512:	d100      	bne.n	8016516 <memcpy+0xc>
 8016514:	4770      	bx	lr
 8016516:	b510      	push	{r4, lr}
 8016518:	f811 4b01 	ldrb.w	r4, [r1], #1
 801651c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016520:	4291      	cmp	r1, r2
 8016522:	d1f9      	bne.n	8016518 <memcpy+0xe>
 8016524:	bd10      	pop	{r4, pc}

08016526 <quorem>:
 8016526:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801652a:	6903      	ldr	r3, [r0, #16]
 801652c:	690c      	ldr	r4, [r1, #16]
 801652e:	42a3      	cmp	r3, r4
 8016530:	4607      	mov	r7, r0
 8016532:	db7e      	blt.n	8016632 <quorem+0x10c>
 8016534:	3c01      	subs	r4, #1
 8016536:	f101 0814 	add.w	r8, r1, #20
 801653a:	f100 0514 	add.w	r5, r0, #20
 801653e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016542:	9301      	str	r3, [sp, #4]
 8016544:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016548:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801654c:	3301      	adds	r3, #1
 801654e:	429a      	cmp	r2, r3
 8016550:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016554:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016558:	fbb2 f6f3 	udiv	r6, r2, r3
 801655c:	d331      	bcc.n	80165c2 <quorem+0x9c>
 801655e:	f04f 0e00 	mov.w	lr, #0
 8016562:	4640      	mov	r0, r8
 8016564:	46ac      	mov	ip, r5
 8016566:	46f2      	mov	sl, lr
 8016568:	f850 2b04 	ldr.w	r2, [r0], #4
 801656c:	b293      	uxth	r3, r2
 801656e:	fb06 e303 	mla	r3, r6, r3, lr
 8016572:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016576:	0c1a      	lsrs	r2, r3, #16
 8016578:	b29b      	uxth	r3, r3
 801657a:	ebaa 0303 	sub.w	r3, sl, r3
 801657e:	f8dc a000 	ldr.w	sl, [ip]
 8016582:	fa13 f38a 	uxtah	r3, r3, sl
 8016586:	fb06 220e 	mla	r2, r6, lr, r2
 801658a:	9300      	str	r3, [sp, #0]
 801658c:	9b00      	ldr	r3, [sp, #0]
 801658e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016592:	b292      	uxth	r2, r2
 8016594:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016598:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801659c:	f8bd 3000 	ldrh.w	r3, [sp]
 80165a0:	4581      	cmp	r9, r0
 80165a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80165a6:	f84c 3b04 	str.w	r3, [ip], #4
 80165aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80165ae:	d2db      	bcs.n	8016568 <quorem+0x42>
 80165b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80165b4:	b92b      	cbnz	r3, 80165c2 <quorem+0x9c>
 80165b6:	9b01      	ldr	r3, [sp, #4]
 80165b8:	3b04      	subs	r3, #4
 80165ba:	429d      	cmp	r5, r3
 80165bc:	461a      	mov	r2, r3
 80165be:	d32c      	bcc.n	801661a <quorem+0xf4>
 80165c0:	613c      	str	r4, [r7, #16]
 80165c2:	4638      	mov	r0, r7
 80165c4:	f001 f9a6 	bl	8017914 <__mcmp>
 80165c8:	2800      	cmp	r0, #0
 80165ca:	db22      	blt.n	8016612 <quorem+0xec>
 80165cc:	3601      	adds	r6, #1
 80165ce:	4629      	mov	r1, r5
 80165d0:	2000      	movs	r0, #0
 80165d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80165d6:	f8d1 c000 	ldr.w	ip, [r1]
 80165da:	b293      	uxth	r3, r2
 80165dc:	1ac3      	subs	r3, r0, r3
 80165de:	0c12      	lsrs	r2, r2, #16
 80165e0:	fa13 f38c 	uxtah	r3, r3, ip
 80165e4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80165e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80165ec:	b29b      	uxth	r3, r3
 80165ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80165f2:	45c1      	cmp	r9, r8
 80165f4:	f841 3b04 	str.w	r3, [r1], #4
 80165f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80165fc:	d2e9      	bcs.n	80165d2 <quorem+0xac>
 80165fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016606:	b922      	cbnz	r2, 8016612 <quorem+0xec>
 8016608:	3b04      	subs	r3, #4
 801660a:	429d      	cmp	r5, r3
 801660c:	461a      	mov	r2, r3
 801660e:	d30a      	bcc.n	8016626 <quorem+0x100>
 8016610:	613c      	str	r4, [r7, #16]
 8016612:	4630      	mov	r0, r6
 8016614:	b003      	add	sp, #12
 8016616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801661a:	6812      	ldr	r2, [r2, #0]
 801661c:	3b04      	subs	r3, #4
 801661e:	2a00      	cmp	r2, #0
 8016620:	d1ce      	bne.n	80165c0 <quorem+0x9a>
 8016622:	3c01      	subs	r4, #1
 8016624:	e7c9      	b.n	80165ba <quorem+0x94>
 8016626:	6812      	ldr	r2, [r2, #0]
 8016628:	3b04      	subs	r3, #4
 801662a:	2a00      	cmp	r2, #0
 801662c:	d1f0      	bne.n	8016610 <quorem+0xea>
 801662e:	3c01      	subs	r4, #1
 8016630:	e7eb      	b.n	801660a <quorem+0xe4>
 8016632:	2000      	movs	r0, #0
 8016634:	e7ee      	b.n	8016614 <quorem+0xee>
	...

08016638 <_dtoa_r>:
 8016638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801663c:	ed2d 8b04 	vpush	{d8-d9}
 8016640:	69c5      	ldr	r5, [r0, #28]
 8016642:	b093      	sub	sp, #76	; 0x4c
 8016644:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016648:	ec57 6b10 	vmov	r6, r7, d0
 801664c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016650:	9107      	str	r1, [sp, #28]
 8016652:	4604      	mov	r4, r0
 8016654:	920a      	str	r2, [sp, #40]	; 0x28
 8016656:	930d      	str	r3, [sp, #52]	; 0x34
 8016658:	b975      	cbnz	r5, 8016678 <_dtoa_r+0x40>
 801665a:	2010      	movs	r0, #16
 801665c:	f000 fe2a 	bl	80172b4 <malloc>
 8016660:	4602      	mov	r2, r0
 8016662:	61e0      	str	r0, [r4, #28]
 8016664:	b920      	cbnz	r0, 8016670 <_dtoa_r+0x38>
 8016666:	4bae      	ldr	r3, [pc, #696]	; (8016920 <_dtoa_r+0x2e8>)
 8016668:	21ef      	movs	r1, #239	; 0xef
 801666a:	48ae      	ldr	r0, [pc, #696]	; (8016924 <_dtoa_r+0x2ec>)
 801666c:	f001 fc82 	bl	8017f74 <__assert_func>
 8016670:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016674:	6005      	str	r5, [r0, #0]
 8016676:	60c5      	str	r5, [r0, #12]
 8016678:	69e3      	ldr	r3, [r4, #28]
 801667a:	6819      	ldr	r1, [r3, #0]
 801667c:	b151      	cbz	r1, 8016694 <_dtoa_r+0x5c>
 801667e:	685a      	ldr	r2, [r3, #4]
 8016680:	604a      	str	r2, [r1, #4]
 8016682:	2301      	movs	r3, #1
 8016684:	4093      	lsls	r3, r2
 8016686:	608b      	str	r3, [r1, #8]
 8016688:	4620      	mov	r0, r4
 801668a:	f000 ff07 	bl	801749c <_Bfree>
 801668e:	69e3      	ldr	r3, [r4, #28]
 8016690:	2200      	movs	r2, #0
 8016692:	601a      	str	r2, [r3, #0]
 8016694:	1e3b      	subs	r3, r7, #0
 8016696:	bfbb      	ittet	lt
 8016698:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801669c:	9303      	strlt	r3, [sp, #12]
 801669e:	2300      	movge	r3, #0
 80166a0:	2201      	movlt	r2, #1
 80166a2:	bfac      	ite	ge
 80166a4:	f8c8 3000 	strge.w	r3, [r8]
 80166a8:	f8c8 2000 	strlt.w	r2, [r8]
 80166ac:	4b9e      	ldr	r3, [pc, #632]	; (8016928 <_dtoa_r+0x2f0>)
 80166ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80166b2:	ea33 0308 	bics.w	r3, r3, r8
 80166b6:	d11b      	bne.n	80166f0 <_dtoa_r+0xb8>
 80166b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80166ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80166be:	6013      	str	r3, [r2, #0]
 80166c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80166c4:	4333      	orrs	r3, r6
 80166c6:	f000 8593 	beq.w	80171f0 <_dtoa_r+0xbb8>
 80166ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80166cc:	b963      	cbnz	r3, 80166e8 <_dtoa_r+0xb0>
 80166ce:	4b97      	ldr	r3, [pc, #604]	; (801692c <_dtoa_r+0x2f4>)
 80166d0:	e027      	b.n	8016722 <_dtoa_r+0xea>
 80166d2:	4b97      	ldr	r3, [pc, #604]	; (8016930 <_dtoa_r+0x2f8>)
 80166d4:	9300      	str	r3, [sp, #0]
 80166d6:	3308      	adds	r3, #8
 80166d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80166da:	6013      	str	r3, [r2, #0]
 80166dc:	9800      	ldr	r0, [sp, #0]
 80166de:	b013      	add	sp, #76	; 0x4c
 80166e0:	ecbd 8b04 	vpop	{d8-d9}
 80166e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166e8:	4b90      	ldr	r3, [pc, #576]	; (801692c <_dtoa_r+0x2f4>)
 80166ea:	9300      	str	r3, [sp, #0]
 80166ec:	3303      	adds	r3, #3
 80166ee:	e7f3      	b.n	80166d8 <_dtoa_r+0xa0>
 80166f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80166f4:	2200      	movs	r2, #0
 80166f6:	ec51 0b17 	vmov	r0, r1, d7
 80166fa:	eeb0 8a47 	vmov.f32	s16, s14
 80166fe:	eef0 8a67 	vmov.f32	s17, s15
 8016702:	2300      	movs	r3, #0
 8016704:	f7ea f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8016708:	4681      	mov	r9, r0
 801670a:	b160      	cbz	r0, 8016726 <_dtoa_r+0xee>
 801670c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801670e:	2301      	movs	r3, #1
 8016710:	6013      	str	r3, [r2, #0]
 8016712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016714:	2b00      	cmp	r3, #0
 8016716:	f000 8568 	beq.w	80171ea <_dtoa_r+0xbb2>
 801671a:	4b86      	ldr	r3, [pc, #536]	; (8016934 <_dtoa_r+0x2fc>)
 801671c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801671e:	6013      	str	r3, [r2, #0]
 8016720:	3b01      	subs	r3, #1
 8016722:	9300      	str	r3, [sp, #0]
 8016724:	e7da      	b.n	80166dc <_dtoa_r+0xa4>
 8016726:	aa10      	add	r2, sp, #64	; 0x40
 8016728:	a911      	add	r1, sp, #68	; 0x44
 801672a:	4620      	mov	r0, r4
 801672c:	eeb0 0a48 	vmov.f32	s0, s16
 8016730:	eef0 0a68 	vmov.f32	s1, s17
 8016734:	f001 f994 	bl	8017a60 <__d2b>
 8016738:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801673c:	4682      	mov	sl, r0
 801673e:	2d00      	cmp	r5, #0
 8016740:	d07f      	beq.n	8016842 <_dtoa_r+0x20a>
 8016742:	ee18 3a90 	vmov	r3, s17
 8016746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801674a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801674e:	ec51 0b18 	vmov	r0, r1, d8
 8016752:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016756:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801675a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801675e:	4619      	mov	r1, r3
 8016760:	2200      	movs	r2, #0
 8016762:	4b75      	ldr	r3, [pc, #468]	; (8016938 <_dtoa_r+0x300>)
 8016764:	f7e9 fd90 	bl	8000288 <__aeabi_dsub>
 8016768:	a367      	add	r3, pc, #412	; (adr r3, 8016908 <_dtoa_r+0x2d0>)
 801676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801676e:	f7e9 ff43 	bl	80005f8 <__aeabi_dmul>
 8016772:	a367      	add	r3, pc, #412	; (adr r3, 8016910 <_dtoa_r+0x2d8>)
 8016774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016778:	f7e9 fd88 	bl	800028c <__adddf3>
 801677c:	4606      	mov	r6, r0
 801677e:	4628      	mov	r0, r5
 8016780:	460f      	mov	r7, r1
 8016782:	f7e9 fecf 	bl	8000524 <__aeabi_i2d>
 8016786:	a364      	add	r3, pc, #400	; (adr r3, 8016918 <_dtoa_r+0x2e0>)
 8016788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678c:	f7e9 ff34 	bl	80005f8 <__aeabi_dmul>
 8016790:	4602      	mov	r2, r0
 8016792:	460b      	mov	r3, r1
 8016794:	4630      	mov	r0, r6
 8016796:	4639      	mov	r1, r7
 8016798:	f7e9 fd78 	bl	800028c <__adddf3>
 801679c:	4606      	mov	r6, r0
 801679e:	460f      	mov	r7, r1
 80167a0:	f7ea f9da 	bl	8000b58 <__aeabi_d2iz>
 80167a4:	2200      	movs	r2, #0
 80167a6:	4683      	mov	fp, r0
 80167a8:	2300      	movs	r3, #0
 80167aa:	4630      	mov	r0, r6
 80167ac:	4639      	mov	r1, r7
 80167ae:	f7ea f995 	bl	8000adc <__aeabi_dcmplt>
 80167b2:	b148      	cbz	r0, 80167c8 <_dtoa_r+0x190>
 80167b4:	4658      	mov	r0, fp
 80167b6:	f7e9 feb5 	bl	8000524 <__aeabi_i2d>
 80167ba:	4632      	mov	r2, r6
 80167bc:	463b      	mov	r3, r7
 80167be:	f7ea f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80167c2:	b908      	cbnz	r0, 80167c8 <_dtoa_r+0x190>
 80167c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80167c8:	f1bb 0f16 	cmp.w	fp, #22
 80167cc:	d857      	bhi.n	801687e <_dtoa_r+0x246>
 80167ce:	4b5b      	ldr	r3, [pc, #364]	; (801693c <_dtoa_r+0x304>)
 80167d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80167d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167d8:	ec51 0b18 	vmov	r0, r1, d8
 80167dc:	f7ea f97e 	bl	8000adc <__aeabi_dcmplt>
 80167e0:	2800      	cmp	r0, #0
 80167e2:	d04e      	beq.n	8016882 <_dtoa_r+0x24a>
 80167e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80167e8:	2300      	movs	r3, #0
 80167ea:	930c      	str	r3, [sp, #48]	; 0x30
 80167ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167ee:	1b5b      	subs	r3, r3, r5
 80167f0:	1e5a      	subs	r2, r3, #1
 80167f2:	bf45      	ittet	mi
 80167f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80167f8:	9305      	strmi	r3, [sp, #20]
 80167fa:	2300      	movpl	r3, #0
 80167fc:	2300      	movmi	r3, #0
 80167fe:	9206      	str	r2, [sp, #24]
 8016800:	bf54      	ite	pl
 8016802:	9305      	strpl	r3, [sp, #20]
 8016804:	9306      	strmi	r3, [sp, #24]
 8016806:	f1bb 0f00 	cmp.w	fp, #0
 801680a:	db3c      	blt.n	8016886 <_dtoa_r+0x24e>
 801680c:	9b06      	ldr	r3, [sp, #24]
 801680e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016812:	445b      	add	r3, fp
 8016814:	9306      	str	r3, [sp, #24]
 8016816:	2300      	movs	r3, #0
 8016818:	9308      	str	r3, [sp, #32]
 801681a:	9b07      	ldr	r3, [sp, #28]
 801681c:	2b09      	cmp	r3, #9
 801681e:	d868      	bhi.n	80168f2 <_dtoa_r+0x2ba>
 8016820:	2b05      	cmp	r3, #5
 8016822:	bfc4      	itt	gt
 8016824:	3b04      	subgt	r3, #4
 8016826:	9307      	strgt	r3, [sp, #28]
 8016828:	9b07      	ldr	r3, [sp, #28]
 801682a:	f1a3 0302 	sub.w	r3, r3, #2
 801682e:	bfcc      	ite	gt
 8016830:	2500      	movgt	r5, #0
 8016832:	2501      	movle	r5, #1
 8016834:	2b03      	cmp	r3, #3
 8016836:	f200 8085 	bhi.w	8016944 <_dtoa_r+0x30c>
 801683a:	e8df f003 	tbb	[pc, r3]
 801683e:	3b2e      	.short	0x3b2e
 8016840:	5839      	.short	0x5839
 8016842:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016846:	441d      	add	r5, r3
 8016848:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801684c:	2b20      	cmp	r3, #32
 801684e:	bfc1      	itttt	gt
 8016850:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016854:	fa08 f803 	lslgt.w	r8, r8, r3
 8016858:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801685c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016860:	bfd6      	itet	le
 8016862:	f1c3 0320 	rsble	r3, r3, #32
 8016866:	ea48 0003 	orrgt.w	r0, r8, r3
 801686a:	fa06 f003 	lslle.w	r0, r6, r3
 801686e:	f7e9 fe49 	bl	8000504 <__aeabi_ui2d>
 8016872:	2201      	movs	r2, #1
 8016874:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016878:	3d01      	subs	r5, #1
 801687a:	920e      	str	r2, [sp, #56]	; 0x38
 801687c:	e76f      	b.n	801675e <_dtoa_r+0x126>
 801687e:	2301      	movs	r3, #1
 8016880:	e7b3      	b.n	80167ea <_dtoa_r+0x1b2>
 8016882:	900c      	str	r0, [sp, #48]	; 0x30
 8016884:	e7b2      	b.n	80167ec <_dtoa_r+0x1b4>
 8016886:	9b05      	ldr	r3, [sp, #20]
 8016888:	eba3 030b 	sub.w	r3, r3, fp
 801688c:	9305      	str	r3, [sp, #20]
 801688e:	f1cb 0300 	rsb	r3, fp, #0
 8016892:	9308      	str	r3, [sp, #32]
 8016894:	2300      	movs	r3, #0
 8016896:	930b      	str	r3, [sp, #44]	; 0x2c
 8016898:	e7bf      	b.n	801681a <_dtoa_r+0x1e2>
 801689a:	2300      	movs	r3, #0
 801689c:	9309      	str	r3, [sp, #36]	; 0x24
 801689e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	dc52      	bgt.n	801694a <_dtoa_r+0x312>
 80168a4:	2301      	movs	r3, #1
 80168a6:	9301      	str	r3, [sp, #4]
 80168a8:	9304      	str	r3, [sp, #16]
 80168aa:	461a      	mov	r2, r3
 80168ac:	920a      	str	r2, [sp, #40]	; 0x28
 80168ae:	e00b      	b.n	80168c8 <_dtoa_r+0x290>
 80168b0:	2301      	movs	r3, #1
 80168b2:	e7f3      	b.n	801689c <_dtoa_r+0x264>
 80168b4:	2300      	movs	r3, #0
 80168b6:	9309      	str	r3, [sp, #36]	; 0x24
 80168b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168ba:	445b      	add	r3, fp
 80168bc:	9301      	str	r3, [sp, #4]
 80168be:	3301      	adds	r3, #1
 80168c0:	2b01      	cmp	r3, #1
 80168c2:	9304      	str	r3, [sp, #16]
 80168c4:	bfb8      	it	lt
 80168c6:	2301      	movlt	r3, #1
 80168c8:	69e0      	ldr	r0, [r4, #28]
 80168ca:	2100      	movs	r1, #0
 80168cc:	2204      	movs	r2, #4
 80168ce:	f102 0614 	add.w	r6, r2, #20
 80168d2:	429e      	cmp	r6, r3
 80168d4:	d93d      	bls.n	8016952 <_dtoa_r+0x31a>
 80168d6:	6041      	str	r1, [r0, #4]
 80168d8:	4620      	mov	r0, r4
 80168da:	f000 fd9f 	bl	801741c <_Balloc>
 80168de:	9000      	str	r0, [sp, #0]
 80168e0:	2800      	cmp	r0, #0
 80168e2:	d139      	bne.n	8016958 <_dtoa_r+0x320>
 80168e4:	4b16      	ldr	r3, [pc, #88]	; (8016940 <_dtoa_r+0x308>)
 80168e6:	4602      	mov	r2, r0
 80168e8:	f240 11af 	movw	r1, #431	; 0x1af
 80168ec:	e6bd      	b.n	801666a <_dtoa_r+0x32>
 80168ee:	2301      	movs	r3, #1
 80168f0:	e7e1      	b.n	80168b6 <_dtoa_r+0x27e>
 80168f2:	2501      	movs	r5, #1
 80168f4:	2300      	movs	r3, #0
 80168f6:	9307      	str	r3, [sp, #28]
 80168f8:	9509      	str	r5, [sp, #36]	; 0x24
 80168fa:	f04f 33ff 	mov.w	r3, #4294967295
 80168fe:	9301      	str	r3, [sp, #4]
 8016900:	9304      	str	r3, [sp, #16]
 8016902:	2200      	movs	r2, #0
 8016904:	2312      	movs	r3, #18
 8016906:	e7d1      	b.n	80168ac <_dtoa_r+0x274>
 8016908:	636f4361 	.word	0x636f4361
 801690c:	3fd287a7 	.word	0x3fd287a7
 8016910:	8b60c8b3 	.word	0x8b60c8b3
 8016914:	3fc68a28 	.word	0x3fc68a28
 8016918:	509f79fb 	.word	0x509f79fb
 801691c:	3fd34413 	.word	0x3fd34413
 8016920:	08018c16 	.word	0x08018c16
 8016924:	08018c2d 	.word	0x08018c2d
 8016928:	7ff00000 	.word	0x7ff00000
 801692c:	08018c12 	.word	0x08018c12
 8016930:	08018c09 	.word	0x08018c09
 8016934:	08018be6 	.word	0x08018be6
 8016938:	3ff80000 	.word	0x3ff80000
 801693c:	08018d18 	.word	0x08018d18
 8016940:	08018c85 	.word	0x08018c85
 8016944:	2301      	movs	r3, #1
 8016946:	9309      	str	r3, [sp, #36]	; 0x24
 8016948:	e7d7      	b.n	80168fa <_dtoa_r+0x2c2>
 801694a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801694c:	9301      	str	r3, [sp, #4]
 801694e:	9304      	str	r3, [sp, #16]
 8016950:	e7ba      	b.n	80168c8 <_dtoa_r+0x290>
 8016952:	3101      	adds	r1, #1
 8016954:	0052      	lsls	r2, r2, #1
 8016956:	e7ba      	b.n	80168ce <_dtoa_r+0x296>
 8016958:	69e3      	ldr	r3, [r4, #28]
 801695a:	9a00      	ldr	r2, [sp, #0]
 801695c:	601a      	str	r2, [r3, #0]
 801695e:	9b04      	ldr	r3, [sp, #16]
 8016960:	2b0e      	cmp	r3, #14
 8016962:	f200 80a8 	bhi.w	8016ab6 <_dtoa_r+0x47e>
 8016966:	2d00      	cmp	r5, #0
 8016968:	f000 80a5 	beq.w	8016ab6 <_dtoa_r+0x47e>
 801696c:	f1bb 0f00 	cmp.w	fp, #0
 8016970:	dd38      	ble.n	80169e4 <_dtoa_r+0x3ac>
 8016972:	4bc0      	ldr	r3, [pc, #768]	; (8016c74 <_dtoa_r+0x63c>)
 8016974:	f00b 020f 	and.w	r2, fp, #15
 8016978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801697c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016980:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016984:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016988:	d019      	beq.n	80169be <_dtoa_r+0x386>
 801698a:	4bbb      	ldr	r3, [pc, #748]	; (8016c78 <_dtoa_r+0x640>)
 801698c:	ec51 0b18 	vmov	r0, r1, d8
 8016990:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016994:	f7e9 ff5a 	bl	800084c <__aeabi_ddiv>
 8016998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801699c:	f008 080f 	and.w	r8, r8, #15
 80169a0:	2503      	movs	r5, #3
 80169a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8016c78 <_dtoa_r+0x640>
 80169a6:	f1b8 0f00 	cmp.w	r8, #0
 80169aa:	d10a      	bne.n	80169c2 <_dtoa_r+0x38a>
 80169ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80169b0:	4632      	mov	r2, r6
 80169b2:	463b      	mov	r3, r7
 80169b4:	f7e9 ff4a 	bl	800084c <__aeabi_ddiv>
 80169b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80169bc:	e02b      	b.n	8016a16 <_dtoa_r+0x3de>
 80169be:	2502      	movs	r5, #2
 80169c0:	e7ef      	b.n	80169a2 <_dtoa_r+0x36a>
 80169c2:	f018 0f01 	tst.w	r8, #1
 80169c6:	d008      	beq.n	80169da <_dtoa_r+0x3a2>
 80169c8:	4630      	mov	r0, r6
 80169ca:	4639      	mov	r1, r7
 80169cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80169d0:	f7e9 fe12 	bl	80005f8 <__aeabi_dmul>
 80169d4:	3501      	adds	r5, #1
 80169d6:	4606      	mov	r6, r0
 80169d8:	460f      	mov	r7, r1
 80169da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80169de:	f109 0908 	add.w	r9, r9, #8
 80169e2:	e7e0      	b.n	80169a6 <_dtoa_r+0x36e>
 80169e4:	f000 809f 	beq.w	8016b26 <_dtoa_r+0x4ee>
 80169e8:	f1cb 0600 	rsb	r6, fp, #0
 80169ec:	4ba1      	ldr	r3, [pc, #644]	; (8016c74 <_dtoa_r+0x63c>)
 80169ee:	4fa2      	ldr	r7, [pc, #648]	; (8016c78 <_dtoa_r+0x640>)
 80169f0:	f006 020f 	and.w	r2, r6, #15
 80169f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80169f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169fc:	ec51 0b18 	vmov	r0, r1, d8
 8016a00:	f7e9 fdfa 	bl	80005f8 <__aeabi_dmul>
 8016a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a08:	1136      	asrs	r6, r6, #4
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	2502      	movs	r5, #2
 8016a0e:	2e00      	cmp	r6, #0
 8016a10:	d17e      	bne.n	8016b10 <_dtoa_r+0x4d8>
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d1d0      	bne.n	80169b8 <_dtoa_r+0x380>
 8016a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	f000 8084 	beq.w	8016b2a <_dtoa_r+0x4f2>
 8016a22:	4b96      	ldr	r3, [pc, #600]	; (8016c7c <_dtoa_r+0x644>)
 8016a24:	2200      	movs	r2, #0
 8016a26:	4640      	mov	r0, r8
 8016a28:	4649      	mov	r1, r9
 8016a2a:	f7ea f857 	bl	8000adc <__aeabi_dcmplt>
 8016a2e:	2800      	cmp	r0, #0
 8016a30:	d07b      	beq.n	8016b2a <_dtoa_r+0x4f2>
 8016a32:	9b04      	ldr	r3, [sp, #16]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d078      	beq.n	8016b2a <_dtoa_r+0x4f2>
 8016a38:	9b01      	ldr	r3, [sp, #4]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	dd39      	ble.n	8016ab2 <_dtoa_r+0x47a>
 8016a3e:	4b90      	ldr	r3, [pc, #576]	; (8016c80 <_dtoa_r+0x648>)
 8016a40:	2200      	movs	r2, #0
 8016a42:	4640      	mov	r0, r8
 8016a44:	4649      	mov	r1, r9
 8016a46:	f7e9 fdd7 	bl	80005f8 <__aeabi_dmul>
 8016a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a4e:	9e01      	ldr	r6, [sp, #4]
 8016a50:	f10b 37ff 	add.w	r7, fp, #4294967295
 8016a54:	3501      	adds	r5, #1
 8016a56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	f7e9 fd62 	bl	8000524 <__aeabi_i2d>
 8016a60:	4642      	mov	r2, r8
 8016a62:	464b      	mov	r3, r9
 8016a64:	f7e9 fdc8 	bl	80005f8 <__aeabi_dmul>
 8016a68:	4b86      	ldr	r3, [pc, #536]	; (8016c84 <_dtoa_r+0x64c>)
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	f7e9 fc0e 	bl	800028c <__adddf3>
 8016a70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a78:	9303      	str	r3, [sp, #12]
 8016a7a:	2e00      	cmp	r6, #0
 8016a7c:	d158      	bne.n	8016b30 <_dtoa_r+0x4f8>
 8016a7e:	4b82      	ldr	r3, [pc, #520]	; (8016c88 <_dtoa_r+0x650>)
 8016a80:	2200      	movs	r2, #0
 8016a82:	4640      	mov	r0, r8
 8016a84:	4649      	mov	r1, r9
 8016a86:	f7e9 fbff 	bl	8000288 <__aeabi_dsub>
 8016a8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a8e:	4680      	mov	r8, r0
 8016a90:	4689      	mov	r9, r1
 8016a92:	f7ea f841 	bl	8000b18 <__aeabi_dcmpgt>
 8016a96:	2800      	cmp	r0, #0
 8016a98:	f040 8296 	bne.w	8016fc8 <_dtoa_r+0x990>
 8016a9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016aa0:	4640      	mov	r0, r8
 8016aa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016aa6:	4649      	mov	r1, r9
 8016aa8:	f7ea f818 	bl	8000adc <__aeabi_dcmplt>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	f040 8289 	bne.w	8016fc4 <_dtoa_r+0x98c>
 8016ab2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016ab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	f2c0 814e 	blt.w	8016d5a <_dtoa_r+0x722>
 8016abe:	f1bb 0f0e 	cmp.w	fp, #14
 8016ac2:	f300 814a 	bgt.w	8016d5a <_dtoa_r+0x722>
 8016ac6:	4b6b      	ldr	r3, [pc, #428]	; (8016c74 <_dtoa_r+0x63c>)
 8016ac8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016acc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	f280 80dc 	bge.w	8016c90 <_dtoa_r+0x658>
 8016ad8:	9b04      	ldr	r3, [sp, #16]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	f300 80d8 	bgt.w	8016c90 <_dtoa_r+0x658>
 8016ae0:	f040 826f 	bne.w	8016fc2 <_dtoa_r+0x98a>
 8016ae4:	4b68      	ldr	r3, [pc, #416]	; (8016c88 <_dtoa_r+0x650>)
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	4640      	mov	r0, r8
 8016aea:	4649      	mov	r1, r9
 8016aec:	f7e9 fd84 	bl	80005f8 <__aeabi_dmul>
 8016af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016af4:	f7ea f806 	bl	8000b04 <__aeabi_dcmpge>
 8016af8:	9e04      	ldr	r6, [sp, #16]
 8016afa:	4637      	mov	r7, r6
 8016afc:	2800      	cmp	r0, #0
 8016afe:	f040 8245 	bne.w	8016f8c <_dtoa_r+0x954>
 8016b02:	9d00      	ldr	r5, [sp, #0]
 8016b04:	2331      	movs	r3, #49	; 0x31
 8016b06:	f805 3b01 	strb.w	r3, [r5], #1
 8016b0a:	f10b 0b01 	add.w	fp, fp, #1
 8016b0e:	e241      	b.n	8016f94 <_dtoa_r+0x95c>
 8016b10:	07f2      	lsls	r2, r6, #31
 8016b12:	d505      	bpl.n	8016b20 <_dtoa_r+0x4e8>
 8016b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b18:	f7e9 fd6e 	bl	80005f8 <__aeabi_dmul>
 8016b1c:	3501      	adds	r5, #1
 8016b1e:	2301      	movs	r3, #1
 8016b20:	1076      	asrs	r6, r6, #1
 8016b22:	3708      	adds	r7, #8
 8016b24:	e773      	b.n	8016a0e <_dtoa_r+0x3d6>
 8016b26:	2502      	movs	r5, #2
 8016b28:	e775      	b.n	8016a16 <_dtoa_r+0x3de>
 8016b2a:	9e04      	ldr	r6, [sp, #16]
 8016b2c:	465f      	mov	r7, fp
 8016b2e:	e792      	b.n	8016a56 <_dtoa_r+0x41e>
 8016b30:	9900      	ldr	r1, [sp, #0]
 8016b32:	4b50      	ldr	r3, [pc, #320]	; (8016c74 <_dtoa_r+0x63c>)
 8016b34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016b38:	4431      	add	r1, r6
 8016b3a:	9102      	str	r1, [sp, #8]
 8016b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016b3e:	eeb0 9a47 	vmov.f32	s18, s14
 8016b42:	eef0 9a67 	vmov.f32	s19, s15
 8016b46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016b4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016b4e:	2900      	cmp	r1, #0
 8016b50:	d044      	beq.n	8016bdc <_dtoa_r+0x5a4>
 8016b52:	494e      	ldr	r1, [pc, #312]	; (8016c8c <_dtoa_r+0x654>)
 8016b54:	2000      	movs	r0, #0
 8016b56:	f7e9 fe79 	bl	800084c <__aeabi_ddiv>
 8016b5a:	ec53 2b19 	vmov	r2, r3, d9
 8016b5e:	f7e9 fb93 	bl	8000288 <__aeabi_dsub>
 8016b62:	9d00      	ldr	r5, [sp, #0]
 8016b64:	ec41 0b19 	vmov	d9, r0, r1
 8016b68:	4649      	mov	r1, r9
 8016b6a:	4640      	mov	r0, r8
 8016b6c:	f7e9 fff4 	bl	8000b58 <__aeabi_d2iz>
 8016b70:	4606      	mov	r6, r0
 8016b72:	f7e9 fcd7 	bl	8000524 <__aeabi_i2d>
 8016b76:	4602      	mov	r2, r0
 8016b78:	460b      	mov	r3, r1
 8016b7a:	4640      	mov	r0, r8
 8016b7c:	4649      	mov	r1, r9
 8016b7e:	f7e9 fb83 	bl	8000288 <__aeabi_dsub>
 8016b82:	3630      	adds	r6, #48	; 0x30
 8016b84:	f805 6b01 	strb.w	r6, [r5], #1
 8016b88:	ec53 2b19 	vmov	r2, r3, d9
 8016b8c:	4680      	mov	r8, r0
 8016b8e:	4689      	mov	r9, r1
 8016b90:	f7e9 ffa4 	bl	8000adc <__aeabi_dcmplt>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	d164      	bne.n	8016c62 <_dtoa_r+0x62a>
 8016b98:	4642      	mov	r2, r8
 8016b9a:	464b      	mov	r3, r9
 8016b9c:	4937      	ldr	r1, [pc, #220]	; (8016c7c <_dtoa_r+0x644>)
 8016b9e:	2000      	movs	r0, #0
 8016ba0:	f7e9 fb72 	bl	8000288 <__aeabi_dsub>
 8016ba4:	ec53 2b19 	vmov	r2, r3, d9
 8016ba8:	f7e9 ff98 	bl	8000adc <__aeabi_dcmplt>
 8016bac:	2800      	cmp	r0, #0
 8016bae:	f040 80b6 	bne.w	8016d1e <_dtoa_r+0x6e6>
 8016bb2:	9b02      	ldr	r3, [sp, #8]
 8016bb4:	429d      	cmp	r5, r3
 8016bb6:	f43f af7c 	beq.w	8016ab2 <_dtoa_r+0x47a>
 8016bba:	4b31      	ldr	r3, [pc, #196]	; (8016c80 <_dtoa_r+0x648>)
 8016bbc:	ec51 0b19 	vmov	r0, r1, d9
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	f7e9 fd19 	bl	80005f8 <__aeabi_dmul>
 8016bc6:	4b2e      	ldr	r3, [pc, #184]	; (8016c80 <_dtoa_r+0x648>)
 8016bc8:	ec41 0b19 	vmov	d9, r0, r1
 8016bcc:	2200      	movs	r2, #0
 8016bce:	4640      	mov	r0, r8
 8016bd0:	4649      	mov	r1, r9
 8016bd2:	f7e9 fd11 	bl	80005f8 <__aeabi_dmul>
 8016bd6:	4680      	mov	r8, r0
 8016bd8:	4689      	mov	r9, r1
 8016bda:	e7c5      	b.n	8016b68 <_dtoa_r+0x530>
 8016bdc:	ec51 0b17 	vmov	r0, r1, d7
 8016be0:	f7e9 fd0a 	bl	80005f8 <__aeabi_dmul>
 8016be4:	9b02      	ldr	r3, [sp, #8]
 8016be6:	9d00      	ldr	r5, [sp, #0]
 8016be8:	930f      	str	r3, [sp, #60]	; 0x3c
 8016bea:	ec41 0b19 	vmov	d9, r0, r1
 8016bee:	4649      	mov	r1, r9
 8016bf0:	4640      	mov	r0, r8
 8016bf2:	f7e9 ffb1 	bl	8000b58 <__aeabi_d2iz>
 8016bf6:	4606      	mov	r6, r0
 8016bf8:	f7e9 fc94 	bl	8000524 <__aeabi_i2d>
 8016bfc:	3630      	adds	r6, #48	; 0x30
 8016bfe:	4602      	mov	r2, r0
 8016c00:	460b      	mov	r3, r1
 8016c02:	4640      	mov	r0, r8
 8016c04:	4649      	mov	r1, r9
 8016c06:	f7e9 fb3f 	bl	8000288 <__aeabi_dsub>
 8016c0a:	f805 6b01 	strb.w	r6, [r5], #1
 8016c0e:	9b02      	ldr	r3, [sp, #8]
 8016c10:	429d      	cmp	r5, r3
 8016c12:	4680      	mov	r8, r0
 8016c14:	4689      	mov	r9, r1
 8016c16:	f04f 0200 	mov.w	r2, #0
 8016c1a:	d124      	bne.n	8016c66 <_dtoa_r+0x62e>
 8016c1c:	4b1b      	ldr	r3, [pc, #108]	; (8016c8c <_dtoa_r+0x654>)
 8016c1e:	ec51 0b19 	vmov	r0, r1, d9
 8016c22:	f7e9 fb33 	bl	800028c <__adddf3>
 8016c26:	4602      	mov	r2, r0
 8016c28:	460b      	mov	r3, r1
 8016c2a:	4640      	mov	r0, r8
 8016c2c:	4649      	mov	r1, r9
 8016c2e:	f7e9 ff73 	bl	8000b18 <__aeabi_dcmpgt>
 8016c32:	2800      	cmp	r0, #0
 8016c34:	d173      	bne.n	8016d1e <_dtoa_r+0x6e6>
 8016c36:	ec53 2b19 	vmov	r2, r3, d9
 8016c3a:	4914      	ldr	r1, [pc, #80]	; (8016c8c <_dtoa_r+0x654>)
 8016c3c:	2000      	movs	r0, #0
 8016c3e:	f7e9 fb23 	bl	8000288 <__aeabi_dsub>
 8016c42:	4602      	mov	r2, r0
 8016c44:	460b      	mov	r3, r1
 8016c46:	4640      	mov	r0, r8
 8016c48:	4649      	mov	r1, r9
 8016c4a:	f7e9 ff47 	bl	8000adc <__aeabi_dcmplt>
 8016c4e:	2800      	cmp	r0, #0
 8016c50:	f43f af2f 	beq.w	8016ab2 <_dtoa_r+0x47a>
 8016c54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016c56:	1e6b      	subs	r3, r5, #1
 8016c58:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016c5e:	2b30      	cmp	r3, #48	; 0x30
 8016c60:	d0f8      	beq.n	8016c54 <_dtoa_r+0x61c>
 8016c62:	46bb      	mov	fp, r7
 8016c64:	e04a      	b.n	8016cfc <_dtoa_r+0x6c4>
 8016c66:	4b06      	ldr	r3, [pc, #24]	; (8016c80 <_dtoa_r+0x648>)
 8016c68:	f7e9 fcc6 	bl	80005f8 <__aeabi_dmul>
 8016c6c:	4680      	mov	r8, r0
 8016c6e:	4689      	mov	r9, r1
 8016c70:	e7bd      	b.n	8016bee <_dtoa_r+0x5b6>
 8016c72:	bf00      	nop
 8016c74:	08018d18 	.word	0x08018d18
 8016c78:	08018cf0 	.word	0x08018cf0
 8016c7c:	3ff00000 	.word	0x3ff00000
 8016c80:	40240000 	.word	0x40240000
 8016c84:	401c0000 	.word	0x401c0000
 8016c88:	40140000 	.word	0x40140000
 8016c8c:	3fe00000 	.word	0x3fe00000
 8016c90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016c94:	9d00      	ldr	r5, [sp, #0]
 8016c96:	4642      	mov	r2, r8
 8016c98:	464b      	mov	r3, r9
 8016c9a:	4630      	mov	r0, r6
 8016c9c:	4639      	mov	r1, r7
 8016c9e:	f7e9 fdd5 	bl	800084c <__aeabi_ddiv>
 8016ca2:	f7e9 ff59 	bl	8000b58 <__aeabi_d2iz>
 8016ca6:	9001      	str	r0, [sp, #4]
 8016ca8:	f7e9 fc3c 	bl	8000524 <__aeabi_i2d>
 8016cac:	4642      	mov	r2, r8
 8016cae:	464b      	mov	r3, r9
 8016cb0:	f7e9 fca2 	bl	80005f8 <__aeabi_dmul>
 8016cb4:	4602      	mov	r2, r0
 8016cb6:	460b      	mov	r3, r1
 8016cb8:	4630      	mov	r0, r6
 8016cba:	4639      	mov	r1, r7
 8016cbc:	f7e9 fae4 	bl	8000288 <__aeabi_dsub>
 8016cc0:	9e01      	ldr	r6, [sp, #4]
 8016cc2:	9f04      	ldr	r7, [sp, #16]
 8016cc4:	3630      	adds	r6, #48	; 0x30
 8016cc6:	f805 6b01 	strb.w	r6, [r5], #1
 8016cca:	9e00      	ldr	r6, [sp, #0]
 8016ccc:	1bae      	subs	r6, r5, r6
 8016cce:	42b7      	cmp	r7, r6
 8016cd0:	4602      	mov	r2, r0
 8016cd2:	460b      	mov	r3, r1
 8016cd4:	d134      	bne.n	8016d40 <_dtoa_r+0x708>
 8016cd6:	f7e9 fad9 	bl	800028c <__adddf3>
 8016cda:	4642      	mov	r2, r8
 8016cdc:	464b      	mov	r3, r9
 8016cde:	4606      	mov	r6, r0
 8016ce0:	460f      	mov	r7, r1
 8016ce2:	f7e9 ff19 	bl	8000b18 <__aeabi_dcmpgt>
 8016ce6:	b9c8      	cbnz	r0, 8016d1c <_dtoa_r+0x6e4>
 8016ce8:	4642      	mov	r2, r8
 8016cea:	464b      	mov	r3, r9
 8016cec:	4630      	mov	r0, r6
 8016cee:	4639      	mov	r1, r7
 8016cf0:	f7e9 feea 	bl	8000ac8 <__aeabi_dcmpeq>
 8016cf4:	b110      	cbz	r0, 8016cfc <_dtoa_r+0x6c4>
 8016cf6:	9b01      	ldr	r3, [sp, #4]
 8016cf8:	07db      	lsls	r3, r3, #31
 8016cfa:	d40f      	bmi.n	8016d1c <_dtoa_r+0x6e4>
 8016cfc:	4651      	mov	r1, sl
 8016cfe:	4620      	mov	r0, r4
 8016d00:	f000 fbcc 	bl	801749c <_Bfree>
 8016d04:	2300      	movs	r3, #0
 8016d06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016d08:	702b      	strb	r3, [r5, #0]
 8016d0a:	f10b 0301 	add.w	r3, fp, #1
 8016d0e:	6013      	str	r3, [r2, #0]
 8016d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	f43f ace2 	beq.w	80166dc <_dtoa_r+0xa4>
 8016d18:	601d      	str	r5, [r3, #0]
 8016d1a:	e4df      	b.n	80166dc <_dtoa_r+0xa4>
 8016d1c:	465f      	mov	r7, fp
 8016d1e:	462b      	mov	r3, r5
 8016d20:	461d      	mov	r5, r3
 8016d22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016d26:	2a39      	cmp	r2, #57	; 0x39
 8016d28:	d106      	bne.n	8016d38 <_dtoa_r+0x700>
 8016d2a:	9a00      	ldr	r2, [sp, #0]
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d1f7      	bne.n	8016d20 <_dtoa_r+0x6e8>
 8016d30:	9900      	ldr	r1, [sp, #0]
 8016d32:	2230      	movs	r2, #48	; 0x30
 8016d34:	3701      	adds	r7, #1
 8016d36:	700a      	strb	r2, [r1, #0]
 8016d38:	781a      	ldrb	r2, [r3, #0]
 8016d3a:	3201      	adds	r2, #1
 8016d3c:	701a      	strb	r2, [r3, #0]
 8016d3e:	e790      	b.n	8016c62 <_dtoa_r+0x62a>
 8016d40:	4ba3      	ldr	r3, [pc, #652]	; (8016fd0 <_dtoa_r+0x998>)
 8016d42:	2200      	movs	r2, #0
 8016d44:	f7e9 fc58 	bl	80005f8 <__aeabi_dmul>
 8016d48:	2200      	movs	r2, #0
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	4606      	mov	r6, r0
 8016d4e:	460f      	mov	r7, r1
 8016d50:	f7e9 feba 	bl	8000ac8 <__aeabi_dcmpeq>
 8016d54:	2800      	cmp	r0, #0
 8016d56:	d09e      	beq.n	8016c96 <_dtoa_r+0x65e>
 8016d58:	e7d0      	b.n	8016cfc <_dtoa_r+0x6c4>
 8016d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d5c:	2a00      	cmp	r2, #0
 8016d5e:	f000 80ca 	beq.w	8016ef6 <_dtoa_r+0x8be>
 8016d62:	9a07      	ldr	r2, [sp, #28]
 8016d64:	2a01      	cmp	r2, #1
 8016d66:	f300 80ad 	bgt.w	8016ec4 <_dtoa_r+0x88c>
 8016d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d6c:	2a00      	cmp	r2, #0
 8016d6e:	f000 80a5 	beq.w	8016ebc <_dtoa_r+0x884>
 8016d72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016d76:	9e08      	ldr	r6, [sp, #32]
 8016d78:	9d05      	ldr	r5, [sp, #20]
 8016d7a:	9a05      	ldr	r2, [sp, #20]
 8016d7c:	441a      	add	r2, r3
 8016d7e:	9205      	str	r2, [sp, #20]
 8016d80:	9a06      	ldr	r2, [sp, #24]
 8016d82:	2101      	movs	r1, #1
 8016d84:	441a      	add	r2, r3
 8016d86:	4620      	mov	r0, r4
 8016d88:	9206      	str	r2, [sp, #24]
 8016d8a:	f000 fc3d 	bl	8017608 <__i2b>
 8016d8e:	4607      	mov	r7, r0
 8016d90:	b165      	cbz	r5, 8016dac <_dtoa_r+0x774>
 8016d92:	9b06      	ldr	r3, [sp, #24]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	dd09      	ble.n	8016dac <_dtoa_r+0x774>
 8016d98:	42ab      	cmp	r3, r5
 8016d9a:	9a05      	ldr	r2, [sp, #20]
 8016d9c:	bfa8      	it	ge
 8016d9e:	462b      	movge	r3, r5
 8016da0:	1ad2      	subs	r2, r2, r3
 8016da2:	9205      	str	r2, [sp, #20]
 8016da4:	9a06      	ldr	r2, [sp, #24]
 8016da6:	1aed      	subs	r5, r5, r3
 8016da8:	1ad3      	subs	r3, r2, r3
 8016daa:	9306      	str	r3, [sp, #24]
 8016dac:	9b08      	ldr	r3, [sp, #32]
 8016dae:	b1f3      	cbz	r3, 8016dee <_dtoa_r+0x7b6>
 8016db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	f000 80a3 	beq.w	8016efe <_dtoa_r+0x8c6>
 8016db8:	2e00      	cmp	r6, #0
 8016dba:	dd10      	ble.n	8016dde <_dtoa_r+0x7a6>
 8016dbc:	4639      	mov	r1, r7
 8016dbe:	4632      	mov	r2, r6
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	f000 fce1 	bl	8017788 <__pow5mult>
 8016dc6:	4652      	mov	r2, sl
 8016dc8:	4601      	mov	r1, r0
 8016dca:	4607      	mov	r7, r0
 8016dcc:	4620      	mov	r0, r4
 8016dce:	f000 fc31 	bl	8017634 <__multiply>
 8016dd2:	4651      	mov	r1, sl
 8016dd4:	4680      	mov	r8, r0
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	f000 fb60 	bl	801749c <_Bfree>
 8016ddc:	46c2      	mov	sl, r8
 8016dde:	9b08      	ldr	r3, [sp, #32]
 8016de0:	1b9a      	subs	r2, r3, r6
 8016de2:	d004      	beq.n	8016dee <_dtoa_r+0x7b6>
 8016de4:	4651      	mov	r1, sl
 8016de6:	4620      	mov	r0, r4
 8016de8:	f000 fcce 	bl	8017788 <__pow5mult>
 8016dec:	4682      	mov	sl, r0
 8016dee:	2101      	movs	r1, #1
 8016df0:	4620      	mov	r0, r4
 8016df2:	f000 fc09 	bl	8017608 <__i2b>
 8016df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	4606      	mov	r6, r0
 8016dfc:	f340 8081 	ble.w	8016f02 <_dtoa_r+0x8ca>
 8016e00:	461a      	mov	r2, r3
 8016e02:	4601      	mov	r1, r0
 8016e04:	4620      	mov	r0, r4
 8016e06:	f000 fcbf 	bl	8017788 <__pow5mult>
 8016e0a:	9b07      	ldr	r3, [sp, #28]
 8016e0c:	2b01      	cmp	r3, #1
 8016e0e:	4606      	mov	r6, r0
 8016e10:	dd7a      	ble.n	8016f08 <_dtoa_r+0x8d0>
 8016e12:	f04f 0800 	mov.w	r8, #0
 8016e16:	6933      	ldr	r3, [r6, #16]
 8016e18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016e1c:	6918      	ldr	r0, [r3, #16]
 8016e1e:	f000 fba5 	bl	801756c <__hi0bits>
 8016e22:	f1c0 0020 	rsb	r0, r0, #32
 8016e26:	9b06      	ldr	r3, [sp, #24]
 8016e28:	4418      	add	r0, r3
 8016e2a:	f010 001f 	ands.w	r0, r0, #31
 8016e2e:	f000 8094 	beq.w	8016f5a <_dtoa_r+0x922>
 8016e32:	f1c0 0320 	rsb	r3, r0, #32
 8016e36:	2b04      	cmp	r3, #4
 8016e38:	f340 8085 	ble.w	8016f46 <_dtoa_r+0x90e>
 8016e3c:	9b05      	ldr	r3, [sp, #20]
 8016e3e:	f1c0 001c 	rsb	r0, r0, #28
 8016e42:	4403      	add	r3, r0
 8016e44:	9305      	str	r3, [sp, #20]
 8016e46:	9b06      	ldr	r3, [sp, #24]
 8016e48:	4403      	add	r3, r0
 8016e4a:	4405      	add	r5, r0
 8016e4c:	9306      	str	r3, [sp, #24]
 8016e4e:	9b05      	ldr	r3, [sp, #20]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	dd05      	ble.n	8016e60 <_dtoa_r+0x828>
 8016e54:	4651      	mov	r1, sl
 8016e56:	461a      	mov	r2, r3
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f000 fcef 	bl	801783c <__lshift>
 8016e5e:	4682      	mov	sl, r0
 8016e60:	9b06      	ldr	r3, [sp, #24]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	dd05      	ble.n	8016e72 <_dtoa_r+0x83a>
 8016e66:	4631      	mov	r1, r6
 8016e68:	461a      	mov	r2, r3
 8016e6a:	4620      	mov	r0, r4
 8016e6c:	f000 fce6 	bl	801783c <__lshift>
 8016e70:	4606      	mov	r6, r0
 8016e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d072      	beq.n	8016f5e <_dtoa_r+0x926>
 8016e78:	4631      	mov	r1, r6
 8016e7a:	4650      	mov	r0, sl
 8016e7c:	f000 fd4a 	bl	8017914 <__mcmp>
 8016e80:	2800      	cmp	r0, #0
 8016e82:	da6c      	bge.n	8016f5e <_dtoa_r+0x926>
 8016e84:	2300      	movs	r3, #0
 8016e86:	4651      	mov	r1, sl
 8016e88:	220a      	movs	r2, #10
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	f000 fb28 	bl	80174e0 <__multadd>
 8016e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016e96:	4682      	mov	sl, r0
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	f000 81b0 	beq.w	80171fe <_dtoa_r+0xbc6>
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	4639      	mov	r1, r7
 8016ea2:	220a      	movs	r2, #10
 8016ea4:	4620      	mov	r0, r4
 8016ea6:	f000 fb1b 	bl	80174e0 <__multadd>
 8016eaa:	9b01      	ldr	r3, [sp, #4]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	4607      	mov	r7, r0
 8016eb0:	f300 8096 	bgt.w	8016fe0 <_dtoa_r+0x9a8>
 8016eb4:	9b07      	ldr	r3, [sp, #28]
 8016eb6:	2b02      	cmp	r3, #2
 8016eb8:	dc59      	bgt.n	8016f6e <_dtoa_r+0x936>
 8016eba:	e091      	b.n	8016fe0 <_dtoa_r+0x9a8>
 8016ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016ec2:	e758      	b.n	8016d76 <_dtoa_r+0x73e>
 8016ec4:	9b04      	ldr	r3, [sp, #16]
 8016ec6:	1e5e      	subs	r6, r3, #1
 8016ec8:	9b08      	ldr	r3, [sp, #32]
 8016eca:	42b3      	cmp	r3, r6
 8016ecc:	bfbf      	itttt	lt
 8016ece:	9b08      	ldrlt	r3, [sp, #32]
 8016ed0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8016ed2:	9608      	strlt	r6, [sp, #32]
 8016ed4:	1af3      	sublt	r3, r6, r3
 8016ed6:	bfb4      	ite	lt
 8016ed8:	18d2      	addlt	r2, r2, r3
 8016eda:	1b9e      	subge	r6, r3, r6
 8016edc:	9b04      	ldr	r3, [sp, #16]
 8016ede:	bfbc      	itt	lt
 8016ee0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8016ee2:	2600      	movlt	r6, #0
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	bfb7      	itett	lt
 8016ee8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8016eec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8016ef0:	1a9d      	sublt	r5, r3, r2
 8016ef2:	2300      	movlt	r3, #0
 8016ef4:	e741      	b.n	8016d7a <_dtoa_r+0x742>
 8016ef6:	9e08      	ldr	r6, [sp, #32]
 8016ef8:	9d05      	ldr	r5, [sp, #20]
 8016efa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016efc:	e748      	b.n	8016d90 <_dtoa_r+0x758>
 8016efe:	9a08      	ldr	r2, [sp, #32]
 8016f00:	e770      	b.n	8016de4 <_dtoa_r+0x7ac>
 8016f02:	9b07      	ldr	r3, [sp, #28]
 8016f04:	2b01      	cmp	r3, #1
 8016f06:	dc19      	bgt.n	8016f3c <_dtoa_r+0x904>
 8016f08:	9b02      	ldr	r3, [sp, #8]
 8016f0a:	b9bb      	cbnz	r3, 8016f3c <_dtoa_r+0x904>
 8016f0c:	9b03      	ldr	r3, [sp, #12]
 8016f0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016f12:	b99b      	cbnz	r3, 8016f3c <_dtoa_r+0x904>
 8016f14:	9b03      	ldr	r3, [sp, #12]
 8016f16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016f1a:	0d1b      	lsrs	r3, r3, #20
 8016f1c:	051b      	lsls	r3, r3, #20
 8016f1e:	b183      	cbz	r3, 8016f42 <_dtoa_r+0x90a>
 8016f20:	9b05      	ldr	r3, [sp, #20]
 8016f22:	3301      	adds	r3, #1
 8016f24:	9305      	str	r3, [sp, #20]
 8016f26:	9b06      	ldr	r3, [sp, #24]
 8016f28:	3301      	adds	r3, #1
 8016f2a:	9306      	str	r3, [sp, #24]
 8016f2c:	f04f 0801 	mov.w	r8, #1
 8016f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	f47f af6f 	bne.w	8016e16 <_dtoa_r+0x7de>
 8016f38:	2001      	movs	r0, #1
 8016f3a:	e774      	b.n	8016e26 <_dtoa_r+0x7ee>
 8016f3c:	f04f 0800 	mov.w	r8, #0
 8016f40:	e7f6      	b.n	8016f30 <_dtoa_r+0x8f8>
 8016f42:	4698      	mov	r8, r3
 8016f44:	e7f4      	b.n	8016f30 <_dtoa_r+0x8f8>
 8016f46:	d082      	beq.n	8016e4e <_dtoa_r+0x816>
 8016f48:	9a05      	ldr	r2, [sp, #20]
 8016f4a:	331c      	adds	r3, #28
 8016f4c:	441a      	add	r2, r3
 8016f4e:	9205      	str	r2, [sp, #20]
 8016f50:	9a06      	ldr	r2, [sp, #24]
 8016f52:	441a      	add	r2, r3
 8016f54:	441d      	add	r5, r3
 8016f56:	9206      	str	r2, [sp, #24]
 8016f58:	e779      	b.n	8016e4e <_dtoa_r+0x816>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	e7f4      	b.n	8016f48 <_dtoa_r+0x910>
 8016f5e:	9b04      	ldr	r3, [sp, #16]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	dc37      	bgt.n	8016fd4 <_dtoa_r+0x99c>
 8016f64:	9b07      	ldr	r3, [sp, #28]
 8016f66:	2b02      	cmp	r3, #2
 8016f68:	dd34      	ble.n	8016fd4 <_dtoa_r+0x99c>
 8016f6a:	9b04      	ldr	r3, [sp, #16]
 8016f6c:	9301      	str	r3, [sp, #4]
 8016f6e:	9b01      	ldr	r3, [sp, #4]
 8016f70:	b963      	cbnz	r3, 8016f8c <_dtoa_r+0x954>
 8016f72:	4631      	mov	r1, r6
 8016f74:	2205      	movs	r2, #5
 8016f76:	4620      	mov	r0, r4
 8016f78:	f000 fab2 	bl	80174e0 <__multadd>
 8016f7c:	4601      	mov	r1, r0
 8016f7e:	4606      	mov	r6, r0
 8016f80:	4650      	mov	r0, sl
 8016f82:	f000 fcc7 	bl	8017914 <__mcmp>
 8016f86:	2800      	cmp	r0, #0
 8016f88:	f73f adbb 	bgt.w	8016b02 <_dtoa_r+0x4ca>
 8016f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f8e:	9d00      	ldr	r5, [sp, #0]
 8016f90:	ea6f 0b03 	mvn.w	fp, r3
 8016f94:	f04f 0800 	mov.w	r8, #0
 8016f98:	4631      	mov	r1, r6
 8016f9a:	4620      	mov	r0, r4
 8016f9c:	f000 fa7e 	bl	801749c <_Bfree>
 8016fa0:	2f00      	cmp	r7, #0
 8016fa2:	f43f aeab 	beq.w	8016cfc <_dtoa_r+0x6c4>
 8016fa6:	f1b8 0f00 	cmp.w	r8, #0
 8016faa:	d005      	beq.n	8016fb8 <_dtoa_r+0x980>
 8016fac:	45b8      	cmp	r8, r7
 8016fae:	d003      	beq.n	8016fb8 <_dtoa_r+0x980>
 8016fb0:	4641      	mov	r1, r8
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	f000 fa72 	bl	801749c <_Bfree>
 8016fb8:	4639      	mov	r1, r7
 8016fba:	4620      	mov	r0, r4
 8016fbc:	f000 fa6e 	bl	801749c <_Bfree>
 8016fc0:	e69c      	b.n	8016cfc <_dtoa_r+0x6c4>
 8016fc2:	2600      	movs	r6, #0
 8016fc4:	4637      	mov	r7, r6
 8016fc6:	e7e1      	b.n	8016f8c <_dtoa_r+0x954>
 8016fc8:	46bb      	mov	fp, r7
 8016fca:	4637      	mov	r7, r6
 8016fcc:	e599      	b.n	8016b02 <_dtoa_r+0x4ca>
 8016fce:	bf00      	nop
 8016fd0:	40240000 	.word	0x40240000
 8016fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	f000 80c8 	beq.w	801716c <_dtoa_r+0xb34>
 8016fdc:	9b04      	ldr	r3, [sp, #16]
 8016fde:	9301      	str	r3, [sp, #4]
 8016fe0:	2d00      	cmp	r5, #0
 8016fe2:	dd05      	ble.n	8016ff0 <_dtoa_r+0x9b8>
 8016fe4:	4639      	mov	r1, r7
 8016fe6:	462a      	mov	r2, r5
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f000 fc27 	bl	801783c <__lshift>
 8016fee:	4607      	mov	r7, r0
 8016ff0:	f1b8 0f00 	cmp.w	r8, #0
 8016ff4:	d05b      	beq.n	80170ae <_dtoa_r+0xa76>
 8016ff6:	6879      	ldr	r1, [r7, #4]
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f000 fa0f 	bl	801741c <_Balloc>
 8016ffe:	4605      	mov	r5, r0
 8017000:	b928      	cbnz	r0, 801700e <_dtoa_r+0x9d6>
 8017002:	4b83      	ldr	r3, [pc, #524]	; (8017210 <_dtoa_r+0xbd8>)
 8017004:	4602      	mov	r2, r0
 8017006:	f240 21ef 	movw	r1, #751	; 0x2ef
 801700a:	f7ff bb2e 	b.w	801666a <_dtoa_r+0x32>
 801700e:	693a      	ldr	r2, [r7, #16]
 8017010:	3202      	adds	r2, #2
 8017012:	0092      	lsls	r2, r2, #2
 8017014:	f107 010c 	add.w	r1, r7, #12
 8017018:	300c      	adds	r0, #12
 801701a:	f7ff fa76 	bl	801650a <memcpy>
 801701e:	2201      	movs	r2, #1
 8017020:	4629      	mov	r1, r5
 8017022:	4620      	mov	r0, r4
 8017024:	f000 fc0a 	bl	801783c <__lshift>
 8017028:	9b00      	ldr	r3, [sp, #0]
 801702a:	3301      	adds	r3, #1
 801702c:	9304      	str	r3, [sp, #16]
 801702e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017032:	4413      	add	r3, r2
 8017034:	9308      	str	r3, [sp, #32]
 8017036:	9b02      	ldr	r3, [sp, #8]
 8017038:	f003 0301 	and.w	r3, r3, #1
 801703c:	46b8      	mov	r8, r7
 801703e:	9306      	str	r3, [sp, #24]
 8017040:	4607      	mov	r7, r0
 8017042:	9b04      	ldr	r3, [sp, #16]
 8017044:	4631      	mov	r1, r6
 8017046:	3b01      	subs	r3, #1
 8017048:	4650      	mov	r0, sl
 801704a:	9301      	str	r3, [sp, #4]
 801704c:	f7ff fa6b 	bl	8016526 <quorem>
 8017050:	4641      	mov	r1, r8
 8017052:	9002      	str	r0, [sp, #8]
 8017054:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017058:	4650      	mov	r0, sl
 801705a:	f000 fc5b 	bl	8017914 <__mcmp>
 801705e:	463a      	mov	r2, r7
 8017060:	9005      	str	r0, [sp, #20]
 8017062:	4631      	mov	r1, r6
 8017064:	4620      	mov	r0, r4
 8017066:	f000 fc71 	bl	801794c <__mdiff>
 801706a:	68c2      	ldr	r2, [r0, #12]
 801706c:	4605      	mov	r5, r0
 801706e:	bb02      	cbnz	r2, 80170b2 <_dtoa_r+0xa7a>
 8017070:	4601      	mov	r1, r0
 8017072:	4650      	mov	r0, sl
 8017074:	f000 fc4e 	bl	8017914 <__mcmp>
 8017078:	4602      	mov	r2, r0
 801707a:	4629      	mov	r1, r5
 801707c:	4620      	mov	r0, r4
 801707e:	9209      	str	r2, [sp, #36]	; 0x24
 8017080:	f000 fa0c 	bl	801749c <_Bfree>
 8017084:	9b07      	ldr	r3, [sp, #28]
 8017086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017088:	9d04      	ldr	r5, [sp, #16]
 801708a:	ea43 0102 	orr.w	r1, r3, r2
 801708e:	9b06      	ldr	r3, [sp, #24]
 8017090:	4319      	orrs	r1, r3
 8017092:	d110      	bne.n	80170b6 <_dtoa_r+0xa7e>
 8017094:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017098:	d029      	beq.n	80170ee <_dtoa_r+0xab6>
 801709a:	9b05      	ldr	r3, [sp, #20]
 801709c:	2b00      	cmp	r3, #0
 801709e:	dd02      	ble.n	80170a6 <_dtoa_r+0xa6e>
 80170a0:	9b02      	ldr	r3, [sp, #8]
 80170a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80170a6:	9b01      	ldr	r3, [sp, #4]
 80170a8:	f883 9000 	strb.w	r9, [r3]
 80170ac:	e774      	b.n	8016f98 <_dtoa_r+0x960>
 80170ae:	4638      	mov	r0, r7
 80170b0:	e7ba      	b.n	8017028 <_dtoa_r+0x9f0>
 80170b2:	2201      	movs	r2, #1
 80170b4:	e7e1      	b.n	801707a <_dtoa_r+0xa42>
 80170b6:	9b05      	ldr	r3, [sp, #20]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	db04      	blt.n	80170c6 <_dtoa_r+0xa8e>
 80170bc:	9907      	ldr	r1, [sp, #28]
 80170be:	430b      	orrs	r3, r1
 80170c0:	9906      	ldr	r1, [sp, #24]
 80170c2:	430b      	orrs	r3, r1
 80170c4:	d120      	bne.n	8017108 <_dtoa_r+0xad0>
 80170c6:	2a00      	cmp	r2, #0
 80170c8:	dded      	ble.n	80170a6 <_dtoa_r+0xa6e>
 80170ca:	4651      	mov	r1, sl
 80170cc:	2201      	movs	r2, #1
 80170ce:	4620      	mov	r0, r4
 80170d0:	f000 fbb4 	bl	801783c <__lshift>
 80170d4:	4631      	mov	r1, r6
 80170d6:	4682      	mov	sl, r0
 80170d8:	f000 fc1c 	bl	8017914 <__mcmp>
 80170dc:	2800      	cmp	r0, #0
 80170de:	dc03      	bgt.n	80170e8 <_dtoa_r+0xab0>
 80170e0:	d1e1      	bne.n	80170a6 <_dtoa_r+0xa6e>
 80170e2:	f019 0f01 	tst.w	r9, #1
 80170e6:	d0de      	beq.n	80170a6 <_dtoa_r+0xa6e>
 80170e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80170ec:	d1d8      	bne.n	80170a0 <_dtoa_r+0xa68>
 80170ee:	9a01      	ldr	r2, [sp, #4]
 80170f0:	2339      	movs	r3, #57	; 0x39
 80170f2:	7013      	strb	r3, [r2, #0]
 80170f4:	462b      	mov	r3, r5
 80170f6:	461d      	mov	r5, r3
 80170f8:	3b01      	subs	r3, #1
 80170fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80170fe:	2a39      	cmp	r2, #57	; 0x39
 8017100:	d06c      	beq.n	80171dc <_dtoa_r+0xba4>
 8017102:	3201      	adds	r2, #1
 8017104:	701a      	strb	r2, [r3, #0]
 8017106:	e747      	b.n	8016f98 <_dtoa_r+0x960>
 8017108:	2a00      	cmp	r2, #0
 801710a:	dd07      	ble.n	801711c <_dtoa_r+0xae4>
 801710c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017110:	d0ed      	beq.n	80170ee <_dtoa_r+0xab6>
 8017112:	9a01      	ldr	r2, [sp, #4]
 8017114:	f109 0301 	add.w	r3, r9, #1
 8017118:	7013      	strb	r3, [r2, #0]
 801711a:	e73d      	b.n	8016f98 <_dtoa_r+0x960>
 801711c:	9b04      	ldr	r3, [sp, #16]
 801711e:	9a08      	ldr	r2, [sp, #32]
 8017120:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017124:	4293      	cmp	r3, r2
 8017126:	d043      	beq.n	80171b0 <_dtoa_r+0xb78>
 8017128:	4651      	mov	r1, sl
 801712a:	2300      	movs	r3, #0
 801712c:	220a      	movs	r2, #10
 801712e:	4620      	mov	r0, r4
 8017130:	f000 f9d6 	bl	80174e0 <__multadd>
 8017134:	45b8      	cmp	r8, r7
 8017136:	4682      	mov	sl, r0
 8017138:	f04f 0300 	mov.w	r3, #0
 801713c:	f04f 020a 	mov.w	r2, #10
 8017140:	4641      	mov	r1, r8
 8017142:	4620      	mov	r0, r4
 8017144:	d107      	bne.n	8017156 <_dtoa_r+0xb1e>
 8017146:	f000 f9cb 	bl	80174e0 <__multadd>
 801714a:	4680      	mov	r8, r0
 801714c:	4607      	mov	r7, r0
 801714e:	9b04      	ldr	r3, [sp, #16]
 8017150:	3301      	adds	r3, #1
 8017152:	9304      	str	r3, [sp, #16]
 8017154:	e775      	b.n	8017042 <_dtoa_r+0xa0a>
 8017156:	f000 f9c3 	bl	80174e0 <__multadd>
 801715a:	4639      	mov	r1, r7
 801715c:	4680      	mov	r8, r0
 801715e:	2300      	movs	r3, #0
 8017160:	220a      	movs	r2, #10
 8017162:	4620      	mov	r0, r4
 8017164:	f000 f9bc 	bl	80174e0 <__multadd>
 8017168:	4607      	mov	r7, r0
 801716a:	e7f0      	b.n	801714e <_dtoa_r+0xb16>
 801716c:	9b04      	ldr	r3, [sp, #16]
 801716e:	9301      	str	r3, [sp, #4]
 8017170:	9d00      	ldr	r5, [sp, #0]
 8017172:	4631      	mov	r1, r6
 8017174:	4650      	mov	r0, sl
 8017176:	f7ff f9d6 	bl	8016526 <quorem>
 801717a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801717e:	9b00      	ldr	r3, [sp, #0]
 8017180:	f805 9b01 	strb.w	r9, [r5], #1
 8017184:	1aea      	subs	r2, r5, r3
 8017186:	9b01      	ldr	r3, [sp, #4]
 8017188:	4293      	cmp	r3, r2
 801718a:	dd07      	ble.n	801719c <_dtoa_r+0xb64>
 801718c:	4651      	mov	r1, sl
 801718e:	2300      	movs	r3, #0
 8017190:	220a      	movs	r2, #10
 8017192:	4620      	mov	r0, r4
 8017194:	f000 f9a4 	bl	80174e0 <__multadd>
 8017198:	4682      	mov	sl, r0
 801719a:	e7ea      	b.n	8017172 <_dtoa_r+0xb3a>
 801719c:	9b01      	ldr	r3, [sp, #4]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	bfc8      	it	gt
 80171a2:	461d      	movgt	r5, r3
 80171a4:	9b00      	ldr	r3, [sp, #0]
 80171a6:	bfd8      	it	le
 80171a8:	2501      	movle	r5, #1
 80171aa:	441d      	add	r5, r3
 80171ac:	f04f 0800 	mov.w	r8, #0
 80171b0:	4651      	mov	r1, sl
 80171b2:	2201      	movs	r2, #1
 80171b4:	4620      	mov	r0, r4
 80171b6:	f000 fb41 	bl	801783c <__lshift>
 80171ba:	4631      	mov	r1, r6
 80171bc:	4682      	mov	sl, r0
 80171be:	f000 fba9 	bl	8017914 <__mcmp>
 80171c2:	2800      	cmp	r0, #0
 80171c4:	dc96      	bgt.n	80170f4 <_dtoa_r+0xabc>
 80171c6:	d102      	bne.n	80171ce <_dtoa_r+0xb96>
 80171c8:	f019 0f01 	tst.w	r9, #1
 80171cc:	d192      	bne.n	80170f4 <_dtoa_r+0xabc>
 80171ce:	462b      	mov	r3, r5
 80171d0:	461d      	mov	r5, r3
 80171d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80171d6:	2a30      	cmp	r2, #48	; 0x30
 80171d8:	d0fa      	beq.n	80171d0 <_dtoa_r+0xb98>
 80171da:	e6dd      	b.n	8016f98 <_dtoa_r+0x960>
 80171dc:	9a00      	ldr	r2, [sp, #0]
 80171de:	429a      	cmp	r2, r3
 80171e0:	d189      	bne.n	80170f6 <_dtoa_r+0xabe>
 80171e2:	f10b 0b01 	add.w	fp, fp, #1
 80171e6:	2331      	movs	r3, #49	; 0x31
 80171e8:	e796      	b.n	8017118 <_dtoa_r+0xae0>
 80171ea:	4b0a      	ldr	r3, [pc, #40]	; (8017214 <_dtoa_r+0xbdc>)
 80171ec:	f7ff ba99 	b.w	8016722 <_dtoa_r+0xea>
 80171f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	f47f aa6d 	bne.w	80166d2 <_dtoa_r+0x9a>
 80171f8:	4b07      	ldr	r3, [pc, #28]	; (8017218 <_dtoa_r+0xbe0>)
 80171fa:	f7ff ba92 	b.w	8016722 <_dtoa_r+0xea>
 80171fe:	9b01      	ldr	r3, [sp, #4]
 8017200:	2b00      	cmp	r3, #0
 8017202:	dcb5      	bgt.n	8017170 <_dtoa_r+0xb38>
 8017204:	9b07      	ldr	r3, [sp, #28]
 8017206:	2b02      	cmp	r3, #2
 8017208:	f73f aeb1 	bgt.w	8016f6e <_dtoa_r+0x936>
 801720c:	e7b0      	b.n	8017170 <_dtoa_r+0xb38>
 801720e:	bf00      	nop
 8017210:	08018c85 	.word	0x08018c85
 8017214:	08018be5 	.word	0x08018be5
 8017218:	08018c09 	.word	0x08018c09

0801721c <_free_r>:
 801721c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801721e:	2900      	cmp	r1, #0
 8017220:	d044      	beq.n	80172ac <_free_r+0x90>
 8017222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017226:	9001      	str	r0, [sp, #4]
 8017228:	2b00      	cmp	r3, #0
 801722a:	f1a1 0404 	sub.w	r4, r1, #4
 801722e:	bfb8      	it	lt
 8017230:	18e4      	addlt	r4, r4, r3
 8017232:	f000 f8e7 	bl	8017404 <__malloc_lock>
 8017236:	4a1e      	ldr	r2, [pc, #120]	; (80172b0 <_free_r+0x94>)
 8017238:	9801      	ldr	r0, [sp, #4]
 801723a:	6813      	ldr	r3, [r2, #0]
 801723c:	b933      	cbnz	r3, 801724c <_free_r+0x30>
 801723e:	6063      	str	r3, [r4, #4]
 8017240:	6014      	str	r4, [r2, #0]
 8017242:	b003      	add	sp, #12
 8017244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017248:	f000 b8e2 	b.w	8017410 <__malloc_unlock>
 801724c:	42a3      	cmp	r3, r4
 801724e:	d908      	bls.n	8017262 <_free_r+0x46>
 8017250:	6825      	ldr	r5, [r4, #0]
 8017252:	1961      	adds	r1, r4, r5
 8017254:	428b      	cmp	r3, r1
 8017256:	bf01      	itttt	eq
 8017258:	6819      	ldreq	r1, [r3, #0]
 801725a:	685b      	ldreq	r3, [r3, #4]
 801725c:	1949      	addeq	r1, r1, r5
 801725e:	6021      	streq	r1, [r4, #0]
 8017260:	e7ed      	b.n	801723e <_free_r+0x22>
 8017262:	461a      	mov	r2, r3
 8017264:	685b      	ldr	r3, [r3, #4]
 8017266:	b10b      	cbz	r3, 801726c <_free_r+0x50>
 8017268:	42a3      	cmp	r3, r4
 801726a:	d9fa      	bls.n	8017262 <_free_r+0x46>
 801726c:	6811      	ldr	r1, [r2, #0]
 801726e:	1855      	adds	r5, r2, r1
 8017270:	42a5      	cmp	r5, r4
 8017272:	d10b      	bne.n	801728c <_free_r+0x70>
 8017274:	6824      	ldr	r4, [r4, #0]
 8017276:	4421      	add	r1, r4
 8017278:	1854      	adds	r4, r2, r1
 801727a:	42a3      	cmp	r3, r4
 801727c:	6011      	str	r1, [r2, #0]
 801727e:	d1e0      	bne.n	8017242 <_free_r+0x26>
 8017280:	681c      	ldr	r4, [r3, #0]
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	6053      	str	r3, [r2, #4]
 8017286:	440c      	add	r4, r1
 8017288:	6014      	str	r4, [r2, #0]
 801728a:	e7da      	b.n	8017242 <_free_r+0x26>
 801728c:	d902      	bls.n	8017294 <_free_r+0x78>
 801728e:	230c      	movs	r3, #12
 8017290:	6003      	str	r3, [r0, #0]
 8017292:	e7d6      	b.n	8017242 <_free_r+0x26>
 8017294:	6825      	ldr	r5, [r4, #0]
 8017296:	1961      	adds	r1, r4, r5
 8017298:	428b      	cmp	r3, r1
 801729a:	bf04      	itt	eq
 801729c:	6819      	ldreq	r1, [r3, #0]
 801729e:	685b      	ldreq	r3, [r3, #4]
 80172a0:	6063      	str	r3, [r4, #4]
 80172a2:	bf04      	itt	eq
 80172a4:	1949      	addeq	r1, r1, r5
 80172a6:	6021      	streq	r1, [r4, #0]
 80172a8:	6054      	str	r4, [r2, #4]
 80172aa:	e7ca      	b.n	8017242 <_free_r+0x26>
 80172ac:	b003      	add	sp, #12
 80172ae:	bd30      	pop	{r4, r5, pc}
 80172b0:	2000a4e4 	.word	0x2000a4e4

080172b4 <malloc>:
 80172b4:	4b02      	ldr	r3, [pc, #8]	; (80172c0 <malloc+0xc>)
 80172b6:	4601      	mov	r1, r0
 80172b8:	6818      	ldr	r0, [r3, #0]
 80172ba:	f000 b823 	b.w	8017304 <_malloc_r>
 80172be:	bf00      	nop
 80172c0:	200013f4 	.word	0x200013f4

080172c4 <sbrk_aligned>:
 80172c4:	b570      	push	{r4, r5, r6, lr}
 80172c6:	4e0e      	ldr	r6, [pc, #56]	; (8017300 <sbrk_aligned+0x3c>)
 80172c8:	460c      	mov	r4, r1
 80172ca:	6831      	ldr	r1, [r6, #0]
 80172cc:	4605      	mov	r5, r0
 80172ce:	b911      	cbnz	r1, 80172d6 <sbrk_aligned+0x12>
 80172d0:	f000 fe40 	bl	8017f54 <_sbrk_r>
 80172d4:	6030      	str	r0, [r6, #0]
 80172d6:	4621      	mov	r1, r4
 80172d8:	4628      	mov	r0, r5
 80172da:	f000 fe3b 	bl	8017f54 <_sbrk_r>
 80172de:	1c43      	adds	r3, r0, #1
 80172e0:	d00a      	beq.n	80172f8 <sbrk_aligned+0x34>
 80172e2:	1cc4      	adds	r4, r0, #3
 80172e4:	f024 0403 	bic.w	r4, r4, #3
 80172e8:	42a0      	cmp	r0, r4
 80172ea:	d007      	beq.n	80172fc <sbrk_aligned+0x38>
 80172ec:	1a21      	subs	r1, r4, r0
 80172ee:	4628      	mov	r0, r5
 80172f0:	f000 fe30 	bl	8017f54 <_sbrk_r>
 80172f4:	3001      	adds	r0, #1
 80172f6:	d101      	bne.n	80172fc <sbrk_aligned+0x38>
 80172f8:	f04f 34ff 	mov.w	r4, #4294967295
 80172fc:	4620      	mov	r0, r4
 80172fe:	bd70      	pop	{r4, r5, r6, pc}
 8017300:	2000a4e8 	.word	0x2000a4e8

08017304 <_malloc_r>:
 8017304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017308:	1ccd      	adds	r5, r1, #3
 801730a:	f025 0503 	bic.w	r5, r5, #3
 801730e:	3508      	adds	r5, #8
 8017310:	2d0c      	cmp	r5, #12
 8017312:	bf38      	it	cc
 8017314:	250c      	movcc	r5, #12
 8017316:	2d00      	cmp	r5, #0
 8017318:	4607      	mov	r7, r0
 801731a:	db01      	blt.n	8017320 <_malloc_r+0x1c>
 801731c:	42a9      	cmp	r1, r5
 801731e:	d905      	bls.n	801732c <_malloc_r+0x28>
 8017320:	230c      	movs	r3, #12
 8017322:	603b      	str	r3, [r7, #0]
 8017324:	2600      	movs	r6, #0
 8017326:	4630      	mov	r0, r6
 8017328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801732c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017400 <_malloc_r+0xfc>
 8017330:	f000 f868 	bl	8017404 <__malloc_lock>
 8017334:	f8d8 3000 	ldr.w	r3, [r8]
 8017338:	461c      	mov	r4, r3
 801733a:	bb5c      	cbnz	r4, 8017394 <_malloc_r+0x90>
 801733c:	4629      	mov	r1, r5
 801733e:	4638      	mov	r0, r7
 8017340:	f7ff ffc0 	bl	80172c4 <sbrk_aligned>
 8017344:	1c43      	adds	r3, r0, #1
 8017346:	4604      	mov	r4, r0
 8017348:	d155      	bne.n	80173f6 <_malloc_r+0xf2>
 801734a:	f8d8 4000 	ldr.w	r4, [r8]
 801734e:	4626      	mov	r6, r4
 8017350:	2e00      	cmp	r6, #0
 8017352:	d145      	bne.n	80173e0 <_malloc_r+0xdc>
 8017354:	2c00      	cmp	r4, #0
 8017356:	d048      	beq.n	80173ea <_malloc_r+0xe6>
 8017358:	6823      	ldr	r3, [r4, #0]
 801735a:	4631      	mov	r1, r6
 801735c:	4638      	mov	r0, r7
 801735e:	eb04 0903 	add.w	r9, r4, r3
 8017362:	f000 fdf7 	bl	8017f54 <_sbrk_r>
 8017366:	4581      	cmp	r9, r0
 8017368:	d13f      	bne.n	80173ea <_malloc_r+0xe6>
 801736a:	6821      	ldr	r1, [r4, #0]
 801736c:	1a6d      	subs	r5, r5, r1
 801736e:	4629      	mov	r1, r5
 8017370:	4638      	mov	r0, r7
 8017372:	f7ff ffa7 	bl	80172c4 <sbrk_aligned>
 8017376:	3001      	adds	r0, #1
 8017378:	d037      	beq.n	80173ea <_malloc_r+0xe6>
 801737a:	6823      	ldr	r3, [r4, #0]
 801737c:	442b      	add	r3, r5
 801737e:	6023      	str	r3, [r4, #0]
 8017380:	f8d8 3000 	ldr.w	r3, [r8]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d038      	beq.n	80173fa <_malloc_r+0xf6>
 8017388:	685a      	ldr	r2, [r3, #4]
 801738a:	42a2      	cmp	r2, r4
 801738c:	d12b      	bne.n	80173e6 <_malloc_r+0xe2>
 801738e:	2200      	movs	r2, #0
 8017390:	605a      	str	r2, [r3, #4]
 8017392:	e00f      	b.n	80173b4 <_malloc_r+0xb0>
 8017394:	6822      	ldr	r2, [r4, #0]
 8017396:	1b52      	subs	r2, r2, r5
 8017398:	d41f      	bmi.n	80173da <_malloc_r+0xd6>
 801739a:	2a0b      	cmp	r2, #11
 801739c:	d917      	bls.n	80173ce <_malloc_r+0xca>
 801739e:	1961      	adds	r1, r4, r5
 80173a0:	42a3      	cmp	r3, r4
 80173a2:	6025      	str	r5, [r4, #0]
 80173a4:	bf18      	it	ne
 80173a6:	6059      	strne	r1, [r3, #4]
 80173a8:	6863      	ldr	r3, [r4, #4]
 80173aa:	bf08      	it	eq
 80173ac:	f8c8 1000 	streq.w	r1, [r8]
 80173b0:	5162      	str	r2, [r4, r5]
 80173b2:	604b      	str	r3, [r1, #4]
 80173b4:	4638      	mov	r0, r7
 80173b6:	f104 060b 	add.w	r6, r4, #11
 80173ba:	f000 f829 	bl	8017410 <__malloc_unlock>
 80173be:	f026 0607 	bic.w	r6, r6, #7
 80173c2:	1d23      	adds	r3, r4, #4
 80173c4:	1af2      	subs	r2, r6, r3
 80173c6:	d0ae      	beq.n	8017326 <_malloc_r+0x22>
 80173c8:	1b9b      	subs	r3, r3, r6
 80173ca:	50a3      	str	r3, [r4, r2]
 80173cc:	e7ab      	b.n	8017326 <_malloc_r+0x22>
 80173ce:	42a3      	cmp	r3, r4
 80173d0:	6862      	ldr	r2, [r4, #4]
 80173d2:	d1dd      	bne.n	8017390 <_malloc_r+0x8c>
 80173d4:	f8c8 2000 	str.w	r2, [r8]
 80173d8:	e7ec      	b.n	80173b4 <_malloc_r+0xb0>
 80173da:	4623      	mov	r3, r4
 80173dc:	6864      	ldr	r4, [r4, #4]
 80173de:	e7ac      	b.n	801733a <_malloc_r+0x36>
 80173e0:	4634      	mov	r4, r6
 80173e2:	6876      	ldr	r6, [r6, #4]
 80173e4:	e7b4      	b.n	8017350 <_malloc_r+0x4c>
 80173e6:	4613      	mov	r3, r2
 80173e8:	e7cc      	b.n	8017384 <_malloc_r+0x80>
 80173ea:	230c      	movs	r3, #12
 80173ec:	603b      	str	r3, [r7, #0]
 80173ee:	4638      	mov	r0, r7
 80173f0:	f000 f80e 	bl	8017410 <__malloc_unlock>
 80173f4:	e797      	b.n	8017326 <_malloc_r+0x22>
 80173f6:	6025      	str	r5, [r4, #0]
 80173f8:	e7dc      	b.n	80173b4 <_malloc_r+0xb0>
 80173fa:	605b      	str	r3, [r3, #4]
 80173fc:	deff      	udf	#255	; 0xff
 80173fe:	bf00      	nop
 8017400:	2000a4e4 	.word	0x2000a4e4

08017404 <__malloc_lock>:
 8017404:	4801      	ldr	r0, [pc, #4]	; (801740c <__malloc_lock+0x8>)
 8017406:	f7ff b87e 	b.w	8016506 <__retarget_lock_acquire_recursive>
 801740a:	bf00      	nop
 801740c:	2000a4e0 	.word	0x2000a4e0

08017410 <__malloc_unlock>:
 8017410:	4801      	ldr	r0, [pc, #4]	; (8017418 <__malloc_unlock+0x8>)
 8017412:	f7ff b879 	b.w	8016508 <__retarget_lock_release_recursive>
 8017416:	bf00      	nop
 8017418:	2000a4e0 	.word	0x2000a4e0

0801741c <_Balloc>:
 801741c:	b570      	push	{r4, r5, r6, lr}
 801741e:	69c6      	ldr	r6, [r0, #28]
 8017420:	4604      	mov	r4, r0
 8017422:	460d      	mov	r5, r1
 8017424:	b976      	cbnz	r6, 8017444 <_Balloc+0x28>
 8017426:	2010      	movs	r0, #16
 8017428:	f7ff ff44 	bl	80172b4 <malloc>
 801742c:	4602      	mov	r2, r0
 801742e:	61e0      	str	r0, [r4, #28]
 8017430:	b920      	cbnz	r0, 801743c <_Balloc+0x20>
 8017432:	4b18      	ldr	r3, [pc, #96]	; (8017494 <_Balloc+0x78>)
 8017434:	4818      	ldr	r0, [pc, #96]	; (8017498 <_Balloc+0x7c>)
 8017436:	216b      	movs	r1, #107	; 0x6b
 8017438:	f000 fd9c 	bl	8017f74 <__assert_func>
 801743c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017440:	6006      	str	r6, [r0, #0]
 8017442:	60c6      	str	r6, [r0, #12]
 8017444:	69e6      	ldr	r6, [r4, #28]
 8017446:	68f3      	ldr	r3, [r6, #12]
 8017448:	b183      	cbz	r3, 801746c <_Balloc+0x50>
 801744a:	69e3      	ldr	r3, [r4, #28]
 801744c:	68db      	ldr	r3, [r3, #12]
 801744e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017452:	b9b8      	cbnz	r0, 8017484 <_Balloc+0x68>
 8017454:	2101      	movs	r1, #1
 8017456:	fa01 f605 	lsl.w	r6, r1, r5
 801745a:	1d72      	adds	r2, r6, #5
 801745c:	0092      	lsls	r2, r2, #2
 801745e:	4620      	mov	r0, r4
 8017460:	f000 fda6 	bl	8017fb0 <_calloc_r>
 8017464:	b160      	cbz	r0, 8017480 <_Balloc+0x64>
 8017466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801746a:	e00e      	b.n	801748a <_Balloc+0x6e>
 801746c:	2221      	movs	r2, #33	; 0x21
 801746e:	2104      	movs	r1, #4
 8017470:	4620      	mov	r0, r4
 8017472:	f000 fd9d 	bl	8017fb0 <_calloc_r>
 8017476:	69e3      	ldr	r3, [r4, #28]
 8017478:	60f0      	str	r0, [r6, #12]
 801747a:	68db      	ldr	r3, [r3, #12]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d1e4      	bne.n	801744a <_Balloc+0x2e>
 8017480:	2000      	movs	r0, #0
 8017482:	bd70      	pop	{r4, r5, r6, pc}
 8017484:	6802      	ldr	r2, [r0, #0]
 8017486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801748a:	2300      	movs	r3, #0
 801748c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017490:	e7f7      	b.n	8017482 <_Balloc+0x66>
 8017492:	bf00      	nop
 8017494:	08018c16 	.word	0x08018c16
 8017498:	08018c96 	.word	0x08018c96

0801749c <_Bfree>:
 801749c:	b570      	push	{r4, r5, r6, lr}
 801749e:	69c6      	ldr	r6, [r0, #28]
 80174a0:	4605      	mov	r5, r0
 80174a2:	460c      	mov	r4, r1
 80174a4:	b976      	cbnz	r6, 80174c4 <_Bfree+0x28>
 80174a6:	2010      	movs	r0, #16
 80174a8:	f7ff ff04 	bl	80172b4 <malloc>
 80174ac:	4602      	mov	r2, r0
 80174ae:	61e8      	str	r0, [r5, #28]
 80174b0:	b920      	cbnz	r0, 80174bc <_Bfree+0x20>
 80174b2:	4b09      	ldr	r3, [pc, #36]	; (80174d8 <_Bfree+0x3c>)
 80174b4:	4809      	ldr	r0, [pc, #36]	; (80174dc <_Bfree+0x40>)
 80174b6:	218f      	movs	r1, #143	; 0x8f
 80174b8:	f000 fd5c 	bl	8017f74 <__assert_func>
 80174bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80174c0:	6006      	str	r6, [r0, #0]
 80174c2:	60c6      	str	r6, [r0, #12]
 80174c4:	b13c      	cbz	r4, 80174d6 <_Bfree+0x3a>
 80174c6:	69eb      	ldr	r3, [r5, #28]
 80174c8:	6862      	ldr	r2, [r4, #4]
 80174ca:	68db      	ldr	r3, [r3, #12]
 80174cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80174d0:	6021      	str	r1, [r4, #0]
 80174d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80174d6:	bd70      	pop	{r4, r5, r6, pc}
 80174d8:	08018c16 	.word	0x08018c16
 80174dc:	08018c96 	.word	0x08018c96

080174e0 <__multadd>:
 80174e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174e4:	690d      	ldr	r5, [r1, #16]
 80174e6:	4607      	mov	r7, r0
 80174e8:	460c      	mov	r4, r1
 80174ea:	461e      	mov	r6, r3
 80174ec:	f101 0c14 	add.w	ip, r1, #20
 80174f0:	2000      	movs	r0, #0
 80174f2:	f8dc 3000 	ldr.w	r3, [ip]
 80174f6:	b299      	uxth	r1, r3
 80174f8:	fb02 6101 	mla	r1, r2, r1, r6
 80174fc:	0c1e      	lsrs	r6, r3, #16
 80174fe:	0c0b      	lsrs	r3, r1, #16
 8017500:	fb02 3306 	mla	r3, r2, r6, r3
 8017504:	b289      	uxth	r1, r1
 8017506:	3001      	adds	r0, #1
 8017508:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801750c:	4285      	cmp	r5, r0
 801750e:	f84c 1b04 	str.w	r1, [ip], #4
 8017512:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017516:	dcec      	bgt.n	80174f2 <__multadd+0x12>
 8017518:	b30e      	cbz	r6, 801755e <__multadd+0x7e>
 801751a:	68a3      	ldr	r3, [r4, #8]
 801751c:	42ab      	cmp	r3, r5
 801751e:	dc19      	bgt.n	8017554 <__multadd+0x74>
 8017520:	6861      	ldr	r1, [r4, #4]
 8017522:	4638      	mov	r0, r7
 8017524:	3101      	adds	r1, #1
 8017526:	f7ff ff79 	bl	801741c <_Balloc>
 801752a:	4680      	mov	r8, r0
 801752c:	b928      	cbnz	r0, 801753a <__multadd+0x5a>
 801752e:	4602      	mov	r2, r0
 8017530:	4b0c      	ldr	r3, [pc, #48]	; (8017564 <__multadd+0x84>)
 8017532:	480d      	ldr	r0, [pc, #52]	; (8017568 <__multadd+0x88>)
 8017534:	21ba      	movs	r1, #186	; 0xba
 8017536:	f000 fd1d 	bl	8017f74 <__assert_func>
 801753a:	6922      	ldr	r2, [r4, #16]
 801753c:	3202      	adds	r2, #2
 801753e:	f104 010c 	add.w	r1, r4, #12
 8017542:	0092      	lsls	r2, r2, #2
 8017544:	300c      	adds	r0, #12
 8017546:	f7fe ffe0 	bl	801650a <memcpy>
 801754a:	4621      	mov	r1, r4
 801754c:	4638      	mov	r0, r7
 801754e:	f7ff ffa5 	bl	801749c <_Bfree>
 8017552:	4644      	mov	r4, r8
 8017554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017558:	3501      	adds	r5, #1
 801755a:	615e      	str	r6, [r3, #20]
 801755c:	6125      	str	r5, [r4, #16]
 801755e:	4620      	mov	r0, r4
 8017560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017564:	08018c85 	.word	0x08018c85
 8017568:	08018c96 	.word	0x08018c96

0801756c <__hi0bits>:
 801756c:	0c03      	lsrs	r3, r0, #16
 801756e:	041b      	lsls	r3, r3, #16
 8017570:	b9d3      	cbnz	r3, 80175a8 <__hi0bits+0x3c>
 8017572:	0400      	lsls	r0, r0, #16
 8017574:	2310      	movs	r3, #16
 8017576:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801757a:	bf04      	itt	eq
 801757c:	0200      	lsleq	r0, r0, #8
 801757e:	3308      	addeq	r3, #8
 8017580:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017584:	bf04      	itt	eq
 8017586:	0100      	lsleq	r0, r0, #4
 8017588:	3304      	addeq	r3, #4
 801758a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801758e:	bf04      	itt	eq
 8017590:	0080      	lsleq	r0, r0, #2
 8017592:	3302      	addeq	r3, #2
 8017594:	2800      	cmp	r0, #0
 8017596:	db05      	blt.n	80175a4 <__hi0bits+0x38>
 8017598:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801759c:	f103 0301 	add.w	r3, r3, #1
 80175a0:	bf08      	it	eq
 80175a2:	2320      	moveq	r3, #32
 80175a4:	4618      	mov	r0, r3
 80175a6:	4770      	bx	lr
 80175a8:	2300      	movs	r3, #0
 80175aa:	e7e4      	b.n	8017576 <__hi0bits+0xa>

080175ac <__lo0bits>:
 80175ac:	6803      	ldr	r3, [r0, #0]
 80175ae:	f013 0207 	ands.w	r2, r3, #7
 80175b2:	d00c      	beq.n	80175ce <__lo0bits+0x22>
 80175b4:	07d9      	lsls	r1, r3, #31
 80175b6:	d422      	bmi.n	80175fe <__lo0bits+0x52>
 80175b8:	079a      	lsls	r2, r3, #30
 80175ba:	bf49      	itett	mi
 80175bc:	085b      	lsrmi	r3, r3, #1
 80175be:	089b      	lsrpl	r3, r3, #2
 80175c0:	6003      	strmi	r3, [r0, #0]
 80175c2:	2201      	movmi	r2, #1
 80175c4:	bf5c      	itt	pl
 80175c6:	6003      	strpl	r3, [r0, #0]
 80175c8:	2202      	movpl	r2, #2
 80175ca:	4610      	mov	r0, r2
 80175cc:	4770      	bx	lr
 80175ce:	b299      	uxth	r1, r3
 80175d0:	b909      	cbnz	r1, 80175d6 <__lo0bits+0x2a>
 80175d2:	0c1b      	lsrs	r3, r3, #16
 80175d4:	2210      	movs	r2, #16
 80175d6:	b2d9      	uxtb	r1, r3
 80175d8:	b909      	cbnz	r1, 80175de <__lo0bits+0x32>
 80175da:	3208      	adds	r2, #8
 80175dc:	0a1b      	lsrs	r3, r3, #8
 80175de:	0719      	lsls	r1, r3, #28
 80175e0:	bf04      	itt	eq
 80175e2:	091b      	lsreq	r3, r3, #4
 80175e4:	3204      	addeq	r2, #4
 80175e6:	0799      	lsls	r1, r3, #30
 80175e8:	bf04      	itt	eq
 80175ea:	089b      	lsreq	r3, r3, #2
 80175ec:	3202      	addeq	r2, #2
 80175ee:	07d9      	lsls	r1, r3, #31
 80175f0:	d403      	bmi.n	80175fa <__lo0bits+0x4e>
 80175f2:	085b      	lsrs	r3, r3, #1
 80175f4:	f102 0201 	add.w	r2, r2, #1
 80175f8:	d003      	beq.n	8017602 <__lo0bits+0x56>
 80175fa:	6003      	str	r3, [r0, #0]
 80175fc:	e7e5      	b.n	80175ca <__lo0bits+0x1e>
 80175fe:	2200      	movs	r2, #0
 8017600:	e7e3      	b.n	80175ca <__lo0bits+0x1e>
 8017602:	2220      	movs	r2, #32
 8017604:	e7e1      	b.n	80175ca <__lo0bits+0x1e>
	...

08017608 <__i2b>:
 8017608:	b510      	push	{r4, lr}
 801760a:	460c      	mov	r4, r1
 801760c:	2101      	movs	r1, #1
 801760e:	f7ff ff05 	bl	801741c <_Balloc>
 8017612:	4602      	mov	r2, r0
 8017614:	b928      	cbnz	r0, 8017622 <__i2b+0x1a>
 8017616:	4b05      	ldr	r3, [pc, #20]	; (801762c <__i2b+0x24>)
 8017618:	4805      	ldr	r0, [pc, #20]	; (8017630 <__i2b+0x28>)
 801761a:	f240 1145 	movw	r1, #325	; 0x145
 801761e:	f000 fca9 	bl	8017f74 <__assert_func>
 8017622:	2301      	movs	r3, #1
 8017624:	6144      	str	r4, [r0, #20]
 8017626:	6103      	str	r3, [r0, #16]
 8017628:	bd10      	pop	{r4, pc}
 801762a:	bf00      	nop
 801762c:	08018c85 	.word	0x08018c85
 8017630:	08018c96 	.word	0x08018c96

08017634 <__multiply>:
 8017634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017638:	4691      	mov	r9, r2
 801763a:	690a      	ldr	r2, [r1, #16]
 801763c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017640:	429a      	cmp	r2, r3
 8017642:	bfb8      	it	lt
 8017644:	460b      	movlt	r3, r1
 8017646:	460c      	mov	r4, r1
 8017648:	bfbc      	itt	lt
 801764a:	464c      	movlt	r4, r9
 801764c:	4699      	movlt	r9, r3
 801764e:	6927      	ldr	r7, [r4, #16]
 8017650:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017654:	68a3      	ldr	r3, [r4, #8]
 8017656:	6861      	ldr	r1, [r4, #4]
 8017658:	eb07 060a 	add.w	r6, r7, sl
 801765c:	42b3      	cmp	r3, r6
 801765e:	b085      	sub	sp, #20
 8017660:	bfb8      	it	lt
 8017662:	3101      	addlt	r1, #1
 8017664:	f7ff feda 	bl	801741c <_Balloc>
 8017668:	b930      	cbnz	r0, 8017678 <__multiply+0x44>
 801766a:	4602      	mov	r2, r0
 801766c:	4b44      	ldr	r3, [pc, #272]	; (8017780 <__multiply+0x14c>)
 801766e:	4845      	ldr	r0, [pc, #276]	; (8017784 <__multiply+0x150>)
 8017670:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017674:	f000 fc7e 	bl	8017f74 <__assert_func>
 8017678:	f100 0514 	add.w	r5, r0, #20
 801767c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017680:	462b      	mov	r3, r5
 8017682:	2200      	movs	r2, #0
 8017684:	4543      	cmp	r3, r8
 8017686:	d321      	bcc.n	80176cc <__multiply+0x98>
 8017688:	f104 0314 	add.w	r3, r4, #20
 801768c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017690:	f109 0314 	add.w	r3, r9, #20
 8017694:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017698:	9202      	str	r2, [sp, #8]
 801769a:	1b3a      	subs	r2, r7, r4
 801769c:	3a15      	subs	r2, #21
 801769e:	f022 0203 	bic.w	r2, r2, #3
 80176a2:	3204      	adds	r2, #4
 80176a4:	f104 0115 	add.w	r1, r4, #21
 80176a8:	428f      	cmp	r7, r1
 80176aa:	bf38      	it	cc
 80176ac:	2204      	movcc	r2, #4
 80176ae:	9201      	str	r2, [sp, #4]
 80176b0:	9a02      	ldr	r2, [sp, #8]
 80176b2:	9303      	str	r3, [sp, #12]
 80176b4:	429a      	cmp	r2, r3
 80176b6:	d80c      	bhi.n	80176d2 <__multiply+0x9e>
 80176b8:	2e00      	cmp	r6, #0
 80176ba:	dd03      	ble.n	80176c4 <__multiply+0x90>
 80176bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d05b      	beq.n	801777c <__multiply+0x148>
 80176c4:	6106      	str	r6, [r0, #16]
 80176c6:	b005      	add	sp, #20
 80176c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176cc:	f843 2b04 	str.w	r2, [r3], #4
 80176d0:	e7d8      	b.n	8017684 <__multiply+0x50>
 80176d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80176d6:	f1ba 0f00 	cmp.w	sl, #0
 80176da:	d024      	beq.n	8017726 <__multiply+0xf2>
 80176dc:	f104 0e14 	add.w	lr, r4, #20
 80176e0:	46a9      	mov	r9, r5
 80176e2:	f04f 0c00 	mov.w	ip, #0
 80176e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80176ea:	f8d9 1000 	ldr.w	r1, [r9]
 80176ee:	fa1f fb82 	uxth.w	fp, r2
 80176f2:	b289      	uxth	r1, r1
 80176f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80176f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80176fc:	f8d9 2000 	ldr.w	r2, [r9]
 8017700:	4461      	add	r1, ip
 8017702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017706:	fb0a c20b 	mla	r2, sl, fp, ip
 801770a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801770e:	b289      	uxth	r1, r1
 8017710:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017714:	4577      	cmp	r7, lr
 8017716:	f849 1b04 	str.w	r1, [r9], #4
 801771a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801771e:	d8e2      	bhi.n	80176e6 <__multiply+0xb2>
 8017720:	9a01      	ldr	r2, [sp, #4]
 8017722:	f845 c002 	str.w	ip, [r5, r2]
 8017726:	9a03      	ldr	r2, [sp, #12]
 8017728:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801772c:	3304      	adds	r3, #4
 801772e:	f1b9 0f00 	cmp.w	r9, #0
 8017732:	d021      	beq.n	8017778 <__multiply+0x144>
 8017734:	6829      	ldr	r1, [r5, #0]
 8017736:	f104 0c14 	add.w	ip, r4, #20
 801773a:	46ae      	mov	lr, r5
 801773c:	f04f 0a00 	mov.w	sl, #0
 8017740:	f8bc b000 	ldrh.w	fp, [ip]
 8017744:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017748:	fb09 220b 	mla	r2, r9, fp, r2
 801774c:	4452      	add	r2, sl
 801774e:	b289      	uxth	r1, r1
 8017750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017754:	f84e 1b04 	str.w	r1, [lr], #4
 8017758:	f85c 1b04 	ldr.w	r1, [ip], #4
 801775c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017760:	f8be 1000 	ldrh.w	r1, [lr]
 8017764:	fb09 110a 	mla	r1, r9, sl, r1
 8017768:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801776c:	4567      	cmp	r7, ip
 801776e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017772:	d8e5      	bhi.n	8017740 <__multiply+0x10c>
 8017774:	9a01      	ldr	r2, [sp, #4]
 8017776:	50a9      	str	r1, [r5, r2]
 8017778:	3504      	adds	r5, #4
 801777a:	e799      	b.n	80176b0 <__multiply+0x7c>
 801777c:	3e01      	subs	r6, #1
 801777e:	e79b      	b.n	80176b8 <__multiply+0x84>
 8017780:	08018c85 	.word	0x08018c85
 8017784:	08018c96 	.word	0x08018c96

08017788 <__pow5mult>:
 8017788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801778c:	4615      	mov	r5, r2
 801778e:	f012 0203 	ands.w	r2, r2, #3
 8017792:	4606      	mov	r6, r0
 8017794:	460f      	mov	r7, r1
 8017796:	d007      	beq.n	80177a8 <__pow5mult+0x20>
 8017798:	4c25      	ldr	r4, [pc, #148]	; (8017830 <__pow5mult+0xa8>)
 801779a:	3a01      	subs	r2, #1
 801779c:	2300      	movs	r3, #0
 801779e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80177a2:	f7ff fe9d 	bl	80174e0 <__multadd>
 80177a6:	4607      	mov	r7, r0
 80177a8:	10ad      	asrs	r5, r5, #2
 80177aa:	d03d      	beq.n	8017828 <__pow5mult+0xa0>
 80177ac:	69f4      	ldr	r4, [r6, #28]
 80177ae:	b97c      	cbnz	r4, 80177d0 <__pow5mult+0x48>
 80177b0:	2010      	movs	r0, #16
 80177b2:	f7ff fd7f 	bl	80172b4 <malloc>
 80177b6:	4602      	mov	r2, r0
 80177b8:	61f0      	str	r0, [r6, #28]
 80177ba:	b928      	cbnz	r0, 80177c8 <__pow5mult+0x40>
 80177bc:	4b1d      	ldr	r3, [pc, #116]	; (8017834 <__pow5mult+0xac>)
 80177be:	481e      	ldr	r0, [pc, #120]	; (8017838 <__pow5mult+0xb0>)
 80177c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80177c4:	f000 fbd6 	bl	8017f74 <__assert_func>
 80177c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80177cc:	6004      	str	r4, [r0, #0]
 80177ce:	60c4      	str	r4, [r0, #12]
 80177d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80177d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80177d8:	b94c      	cbnz	r4, 80177ee <__pow5mult+0x66>
 80177da:	f240 2171 	movw	r1, #625	; 0x271
 80177de:	4630      	mov	r0, r6
 80177e0:	f7ff ff12 	bl	8017608 <__i2b>
 80177e4:	2300      	movs	r3, #0
 80177e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80177ea:	4604      	mov	r4, r0
 80177ec:	6003      	str	r3, [r0, #0]
 80177ee:	f04f 0900 	mov.w	r9, #0
 80177f2:	07eb      	lsls	r3, r5, #31
 80177f4:	d50a      	bpl.n	801780c <__pow5mult+0x84>
 80177f6:	4639      	mov	r1, r7
 80177f8:	4622      	mov	r2, r4
 80177fa:	4630      	mov	r0, r6
 80177fc:	f7ff ff1a 	bl	8017634 <__multiply>
 8017800:	4639      	mov	r1, r7
 8017802:	4680      	mov	r8, r0
 8017804:	4630      	mov	r0, r6
 8017806:	f7ff fe49 	bl	801749c <_Bfree>
 801780a:	4647      	mov	r7, r8
 801780c:	106d      	asrs	r5, r5, #1
 801780e:	d00b      	beq.n	8017828 <__pow5mult+0xa0>
 8017810:	6820      	ldr	r0, [r4, #0]
 8017812:	b938      	cbnz	r0, 8017824 <__pow5mult+0x9c>
 8017814:	4622      	mov	r2, r4
 8017816:	4621      	mov	r1, r4
 8017818:	4630      	mov	r0, r6
 801781a:	f7ff ff0b 	bl	8017634 <__multiply>
 801781e:	6020      	str	r0, [r4, #0]
 8017820:	f8c0 9000 	str.w	r9, [r0]
 8017824:	4604      	mov	r4, r0
 8017826:	e7e4      	b.n	80177f2 <__pow5mult+0x6a>
 8017828:	4638      	mov	r0, r7
 801782a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801782e:	bf00      	nop
 8017830:	08018de0 	.word	0x08018de0
 8017834:	08018c16 	.word	0x08018c16
 8017838:	08018c96 	.word	0x08018c96

0801783c <__lshift>:
 801783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017840:	460c      	mov	r4, r1
 8017842:	6849      	ldr	r1, [r1, #4]
 8017844:	6923      	ldr	r3, [r4, #16]
 8017846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801784a:	68a3      	ldr	r3, [r4, #8]
 801784c:	4607      	mov	r7, r0
 801784e:	4691      	mov	r9, r2
 8017850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017854:	f108 0601 	add.w	r6, r8, #1
 8017858:	42b3      	cmp	r3, r6
 801785a:	db0b      	blt.n	8017874 <__lshift+0x38>
 801785c:	4638      	mov	r0, r7
 801785e:	f7ff fddd 	bl	801741c <_Balloc>
 8017862:	4605      	mov	r5, r0
 8017864:	b948      	cbnz	r0, 801787a <__lshift+0x3e>
 8017866:	4602      	mov	r2, r0
 8017868:	4b28      	ldr	r3, [pc, #160]	; (801790c <__lshift+0xd0>)
 801786a:	4829      	ldr	r0, [pc, #164]	; (8017910 <__lshift+0xd4>)
 801786c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017870:	f000 fb80 	bl	8017f74 <__assert_func>
 8017874:	3101      	adds	r1, #1
 8017876:	005b      	lsls	r3, r3, #1
 8017878:	e7ee      	b.n	8017858 <__lshift+0x1c>
 801787a:	2300      	movs	r3, #0
 801787c:	f100 0114 	add.w	r1, r0, #20
 8017880:	f100 0210 	add.w	r2, r0, #16
 8017884:	4618      	mov	r0, r3
 8017886:	4553      	cmp	r3, sl
 8017888:	db33      	blt.n	80178f2 <__lshift+0xb6>
 801788a:	6920      	ldr	r0, [r4, #16]
 801788c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017890:	f104 0314 	add.w	r3, r4, #20
 8017894:	f019 091f 	ands.w	r9, r9, #31
 8017898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801789c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80178a0:	d02b      	beq.n	80178fa <__lshift+0xbe>
 80178a2:	f1c9 0e20 	rsb	lr, r9, #32
 80178a6:	468a      	mov	sl, r1
 80178a8:	2200      	movs	r2, #0
 80178aa:	6818      	ldr	r0, [r3, #0]
 80178ac:	fa00 f009 	lsl.w	r0, r0, r9
 80178b0:	4310      	orrs	r0, r2
 80178b2:	f84a 0b04 	str.w	r0, [sl], #4
 80178b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80178ba:	459c      	cmp	ip, r3
 80178bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80178c0:	d8f3      	bhi.n	80178aa <__lshift+0x6e>
 80178c2:	ebac 0304 	sub.w	r3, ip, r4
 80178c6:	3b15      	subs	r3, #21
 80178c8:	f023 0303 	bic.w	r3, r3, #3
 80178cc:	3304      	adds	r3, #4
 80178ce:	f104 0015 	add.w	r0, r4, #21
 80178d2:	4584      	cmp	ip, r0
 80178d4:	bf38      	it	cc
 80178d6:	2304      	movcc	r3, #4
 80178d8:	50ca      	str	r2, [r1, r3]
 80178da:	b10a      	cbz	r2, 80178e0 <__lshift+0xa4>
 80178dc:	f108 0602 	add.w	r6, r8, #2
 80178e0:	3e01      	subs	r6, #1
 80178e2:	4638      	mov	r0, r7
 80178e4:	612e      	str	r6, [r5, #16]
 80178e6:	4621      	mov	r1, r4
 80178e8:	f7ff fdd8 	bl	801749c <_Bfree>
 80178ec:	4628      	mov	r0, r5
 80178ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80178f6:	3301      	adds	r3, #1
 80178f8:	e7c5      	b.n	8017886 <__lshift+0x4a>
 80178fa:	3904      	subs	r1, #4
 80178fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017900:	f841 2f04 	str.w	r2, [r1, #4]!
 8017904:	459c      	cmp	ip, r3
 8017906:	d8f9      	bhi.n	80178fc <__lshift+0xc0>
 8017908:	e7ea      	b.n	80178e0 <__lshift+0xa4>
 801790a:	bf00      	nop
 801790c:	08018c85 	.word	0x08018c85
 8017910:	08018c96 	.word	0x08018c96

08017914 <__mcmp>:
 8017914:	b530      	push	{r4, r5, lr}
 8017916:	6902      	ldr	r2, [r0, #16]
 8017918:	690c      	ldr	r4, [r1, #16]
 801791a:	1b12      	subs	r2, r2, r4
 801791c:	d10e      	bne.n	801793c <__mcmp+0x28>
 801791e:	f100 0314 	add.w	r3, r0, #20
 8017922:	3114      	adds	r1, #20
 8017924:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017928:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801792c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017930:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017934:	42a5      	cmp	r5, r4
 8017936:	d003      	beq.n	8017940 <__mcmp+0x2c>
 8017938:	d305      	bcc.n	8017946 <__mcmp+0x32>
 801793a:	2201      	movs	r2, #1
 801793c:	4610      	mov	r0, r2
 801793e:	bd30      	pop	{r4, r5, pc}
 8017940:	4283      	cmp	r3, r0
 8017942:	d3f3      	bcc.n	801792c <__mcmp+0x18>
 8017944:	e7fa      	b.n	801793c <__mcmp+0x28>
 8017946:	f04f 32ff 	mov.w	r2, #4294967295
 801794a:	e7f7      	b.n	801793c <__mcmp+0x28>

0801794c <__mdiff>:
 801794c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017950:	460c      	mov	r4, r1
 8017952:	4606      	mov	r6, r0
 8017954:	4611      	mov	r1, r2
 8017956:	4620      	mov	r0, r4
 8017958:	4690      	mov	r8, r2
 801795a:	f7ff ffdb 	bl	8017914 <__mcmp>
 801795e:	1e05      	subs	r5, r0, #0
 8017960:	d110      	bne.n	8017984 <__mdiff+0x38>
 8017962:	4629      	mov	r1, r5
 8017964:	4630      	mov	r0, r6
 8017966:	f7ff fd59 	bl	801741c <_Balloc>
 801796a:	b930      	cbnz	r0, 801797a <__mdiff+0x2e>
 801796c:	4b3a      	ldr	r3, [pc, #232]	; (8017a58 <__mdiff+0x10c>)
 801796e:	4602      	mov	r2, r0
 8017970:	f240 2137 	movw	r1, #567	; 0x237
 8017974:	4839      	ldr	r0, [pc, #228]	; (8017a5c <__mdiff+0x110>)
 8017976:	f000 fafd 	bl	8017f74 <__assert_func>
 801797a:	2301      	movs	r3, #1
 801797c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017984:	bfa4      	itt	ge
 8017986:	4643      	movge	r3, r8
 8017988:	46a0      	movge	r8, r4
 801798a:	4630      	mov	r0, r6
 801798c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017990:	bfa6      	itte	ge
 8017992:	461c      	movge	r4, r3
 8017994:	2500      	movge	r5, #0
 8017996:	2501      	movlt	r5, #1
 8017998:	f7ff fd40 	bl	801741c <_Balloc>
 801799c:	b920      	cbnz	r0, 80179a8 <__mdiff+0x5c>
 801799e:	4b2e      	ldr	r3, [pc, #184]	; (8017a58 <__mdiff+0x10c>)
 80179a0:	4602      	mov	r2, r0
 80179a2:	f240 2145 	movw	r1, #581	; 0x245
 80179a6:	e7e5      	b.n	8017974 <__mdiff+0x28>
 80179a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80179ac:	6926      	ldr	r6, [r4, #16]
 80179ae:	60c5      	str	r5, [r0, #12]
 80179b0:	f104 0914 	add.w	r9, r4, #20
 80179b4:	f108 0514 	add.w	r5, r8, #20
 80179b8:	f100 0e14 	add.w	lr, r0, #20
 80179bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80179c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80179c4:	f108 0210 	add.w	r2, r8, #16
 80179c8:	46f2      	mov	sl, lr
 80179ca:	2100      	movs	r1, #0
 80179cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80179d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80179d4:	fa11 f88b 	uxtah	r8, r1, fp
 80179d8:	b299      	uxth	r1, r3
 80179da:	0c1b      	lsrs	r3, r3, #16
 80179dc:	eba8 0801 	sub.w	r8, r8, r1
 80179e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80179e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80179e8:	fa1f f888 	uxth.w	r8, r8
 80179ec:	1419      	asrs	r1, r3, #16
 80179ee:	454e      	cmp	r6, r9
 80179f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80179f4:	f84a 3b04 	str.w	r3, [sl], #4
 80179f8:	d8e8      	bhi.n	80179cc <__mdiff+0x80>
 80179fa:	1b33      	subs	r3, r6, r4
 80179fc:	3b15      	subs	r3, #21
 80179fe:	f023 0303 	bic.w	r3, r3, #3
 8017a02:	3304      	adds	r3, #4
 8017a04:	3415      	adds	r4, #21
 8017a06:	42a6      	cmp	r6, r4
 8017a08:	bf38      	it	cc
 8017a0a:	2304      	movcc	r3, #4
 8017a0c:	441d      	add	r5, r3
 8017a0e:	4473      	add	r3, lr
 8017a10:	469e      	mov	lr, r3
 8017a12:	462e      	mov	r6, r5
 8017a14:	4566      	cmp	r6, ip
 8017a16:	d30e      	bcc.n	8017a36 <__mdiff+0xea>
 8017a18:	f10c 0203 	add.w	r2, ip, #3
 8017a1c:	1b52      	subs	r2, r2, r5
 8017a1e:	f022 0203 	bic.w	r2, r2, #3
 8017a22:	3d03      	subs	r5, #3
 8017a24:	45ac      	cmp	ip, r5
 8017a26:	bf38      	it	cc
 8017a28:	2200      	movcc	r2, #0
 8017a2a:	4413      	add	r3, r2
 8017a2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017a30:	b17a      	cbz	r2, 8017a52 <__mdiff+0x106>
 8017a32:	6107      	str	r7, [r0, #16]
 8017a34:	e7a4      	b.n	8017980 <__mdiff+0x34>
 8017a36:	f856 8b04 	ldr.w	r8, [r6], #4
 8017a3a:	fa11 f288 	uxtah	r2, r1, r8
 8017a3e:	1414      	asrs	r4, r2, #16
 8017a40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017a44:	b292      	uxth	r2, r2
 8017a46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017a4a:	f84e 2b04 	str.w	r2, [lr], #4
 8017a4e:	1421      	asrs	r1, r4, #16
 8017a50:	e7e0      	b.n	8017a14 <__mdiff+0xc8>
 8017a52:	3f01      	subs	r7, #1
 8017a54:	e7ea      	b.n	8017a2c <__mdiff+0xe0>
 8017a56:	bf00      	nop
 8017a58:	08018c85 	.word	0x08018c85
 8017a5c:	08018c96 	.word	0x08018c96

08017a60 <__d2b>:
 8017a60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017a64:	460f      	mov	r7, r1
 8017a66:	2101      	movs	r1, #1
 8017a68:	ec59 8b10 	vmov	r8, r9, d0
 8017a6c:	4616      	mov	r6, r2
 8017a6e:	f7ff fcd5 	bl	801741c <_Balloc>
 8017a72:	4604      	mov	r4, r0
 8017a74:	b930      	cbnz	r0, 8017a84 <__d2b+0x24>
 8017a76:	4602      	mov	r2, r0
 8017a78:	4b24      	ldr	r3, [pc, #144]	; (8017b0c <__d2b+0xac>)
 8017a7a:	4825      	ldr	r0, [pc, #148]	; (8017b10 <__d2b+0xb0>)
 8017a7c:	f240 310f 	movw	r1, #783	; 0x30f
 8017a80:	f000 fa78 	bl	8017f74 <__assert_func>
 8017a84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017a8c:	bb2d      	cbnz	r5, 8017ada <__d2b+0x7a>
 8017a8e:	9301      	str	r3, [sp, #4]
 8017a90:	f1b8 0300 	subs.w	r3, r8, #0
 8017a94:	d026      	beq.n	8017ae4 <__d2b+0x84>
 8017a96:	4668      	mov	r0, sp
 8017a98:	9300      	str	r3, [sp, #0]
 8017a9a:	f7ff fd87 	bl	80175ac <__lo0bits>
 8017a9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017aa2:	b1e8      	cbz	r0, 8017ae0 <__d2b+0x80>
 8017aa4:	f1c0 0320 	rsb	r3, r0, #32
 8017aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8017aac:	430b      	orrs	r3, r1
 8017aae:	40c2      	lsrs	r2, r0
 8017ab0:	6163      	str	r3, [r4, #20]
 8017ab2:	9201      	str	r2, [sp, #4]
 8017ab4:	9b01      	ldr	r3, [sp, #4]
 8017ab6:	61a3      	str	r3, [r4, #24]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	bf14      	ite	ne
 8017abc:	2202      	movne	r2, #2
 8017abe:	2201      	moveq	r2, #1
 8017ac0:	6122      	str	r2, [r4, #16]
 8017ac2:	b1bd      	cbz	r5, 8017af4 <__d2b+0x94>
 8017ac4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017ac8:	4405      	add	r5, r0
 8017aca:	603d      	str	r5, [r7, #0]
 8017acc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017ad0:	6030      	str	r0, [r6, #0]
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	b003      	add	sp, #12
 8017ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017ade:	e7d6      	b.n	8017a8e <__d2b+0x2e>
 8017ae0:	6161      	str	r1, [r4, #20]
 8017ae2:	e7e7      	b.n	8017ab4 <__d2b+0x54>
 8017ae4:	a801      	add	r0, sp, #4
 8017ae6:	f7ff fd61 	bl	80175ac <__lo0bits>
 8017aea:	9b01      	ldr	r3, [sp, #4]
 8017aec:	6163      	str	r3, [r4, #20]
 8017aee:	3020      	adds	r0, #32
 8017af0:	2201      	movs	r2, #1
 8017af2:	e7e5      	b.n	8017ac0 <__d2b+0x60>
 8017af4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017af8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017afc:	6038      	str	r0, [r7, #0]
 8017afe:	6918      	ldr	r0, [r3, #16]
 8017b00:	f7ff fd34 	bl	801756c <__hi0bits>
 8017b04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017b08:	e7e2      	b.n	8017ad0 <__d2b+0x70>
 8017b0a:	bf00      	nop
 8017b0c:	08018c85 	.word	0x08018c85
 8017b10:	08018c96 	.word	0x08018c96

08017b14 <__ssputs_r>:
 8017b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b18:	688e      	ldr	r6, [r1, #8]
 8017b1a:	461f      	mov	r7, r3
 8017b1c:	42be      	cmp	r6, r7
 8017b1e:	680b      	ldr	r3, [r1, #0]
 8017b20:	4682      	mov	sl, r0
 8017b22:	460c      	mov	r4, r1
 8017b24:	4690      	mov	r8, r2
 8017b26:	d82c      	bhi.n	8017b82 <__ssputs_r+0x6e>
 8017b28:	898a      	ldrh	r2, [r1, #12]
 8017b2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017b2e:	d026      	beq.n	8017b7e <__ssputs_r+0x6a>
 8017b30:	6965      	ldr	r5, [r4, #20]
 8017b32:	6909      	ldr	r1, [r1, #16]
 8017b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b38:	eba3 0901 	sub.w	r9, r3, r1
 8017b3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017b40:	1c7b      	adds	r3, r7, #1
 8017b42:	444b      	add	r3, r9
 8017b44:	106d      	asrs	r5, r5, #1
 8017b46:	429d      	cmp	r5, r3
 8017b48:	bf38      	it	cc
 8017b4a:	461d      	movcc	r5, r3
 8017b4c:	0553      	lsls	r3, r2, #21
 8017b4e:	d527      	bpl.n	8017ba0 <__ssputs_r+0x8c>
 8017b50:	4629      	mov	r1, r5
 8017b52:	f7ff fbd7 	bl	8017304 <_malloc_r>
 8017b56:	4606      	mov	r6, r0
 8017b58:	b360      	cbz	r0, 8017bb4 <__ssputs_r+0xa0>
 8017b5a:	6921      	ldr	r1, [r4, #16]
 8017b5c:	464a      	mov	r2, r9
 8017b5e:	f7fe fcd4 	bl	801650a <memcpy>
 8017b62:	89a3      	ldrh	r3, [r4, #12]
 8017b64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b6c:	81a3      	strh	r3, [r4, #12]
 8017b6e:	6126      	str	r6, [r4, #16]
 8017b70:	6165      	str	r5, [r4, #20]
 8017b72:	444e      	add	r6, r9
 8017b74:	eba5 0509 	sub.w	r5, r5, r9
 8017b78:	6026      	str	r6, [r4, #0]
 8017b7a:	60a5      	str	r5, [r4, #8]
 8017b7c:	463e      	mov	r6, r7
 8017b7e:	42be      	cmp	r6, r7
 8017b80:	d900      	bls.n	8017b84 <__ssputs_r+0x70>
 8017b82:	463e      	mov	r6, r7
 8017b84:	6820      	ldr	r0, [r4, #0]
 8017b86:	4632      	mov	r2, r6
 8017b88:	4641      	mov	r1, r8
 8017b8a:	f000 f9c9 	bl	8017f20 <memmove>
 8017b8e:	68a3      	ldr	r3, [r4, #8]
 8017b90:	1b9b      	subs	r3, r3, r6
 8017b92:	60a3      	str	r3, [r4, #8]
 8017b94:	6823      	ldr	r3, [r4, #0]
 8017b96:	4433      	add	r3, r6
 8017b98:	6023      	str	r3, [r4, #0]
 8017b9a:	2000      	movs	r0, #0
 8017b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ba0:	462a      	mov	r2, r5
 8017ba2:	f000 fa2d 	bl	8018000 <_realloc_r>
 8017ba6:	4606      	mov	r6, r0
 8017ba8:	2800      	cmp	r0, #0
 8017baa:	d1e0      	bne.n	8017b6e <__ssputs_r+0x5a>
 8017bac:	6921      	ldr	r1, [r4, #16]
 8017bae:	4650      	mov	r0, sl
 8017bb0:	f7ff fb34 	bl	801721c <_free_r>
 8017bb4:	230c      	movs	r3, #12
 8017bb6:	f8ca 3000 	str.w	r3, [sl]
 8017bba:	89a3      	ldrh	r3, [r4, #12]
 8017bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bc0:	81a3      	strh	r3, [r4, #12]
 8017bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8017bc6:	e7e9      	b.n	8017b9c <__ssputs_r+0x88>

08017bc8 <_svfiprintf_r>:
 8017bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bcc:	4698      	mov	r8, r3
 8017bce:	898b      	ldrh	r3, [r1, #12]
 8017bd0:	061b      	lsls	r3, r3, #24
 8017bd2:	b09d      	sub	sp, #116	; 0x74
 8017bd4:	4607      	mov	r7, r0
 8017bd6:	460d      	mov	r5, r1
 8017bd8:	4614      	mov	r4, r2
 8017bda:	d50e      	bpl.n	8017bfa <_svfiprintf_r+0x32>
 8017bdc:	690b      	ldr	r3, [r1, #16]
 8017bde:	b963      	cbnz	r3, 8017bfa <_svfiprintf_r+0x32>
 8017be0:	2140      	movs	r1, #64	; 0x40
 8017be2:	f7ff fb8f 	bl	8017304 <_malloc_r>
 8017be6:	6028      	str	r0, [r5, #0]
 8017be8:	6128      	str	r0, [r5, #16]
 8017bea:	b920      	cbnz	r0, 8017bf6 <_svfiprintf_r+0x2e>
 8017bec:	230c      	movs	r3, #12
 8017bee:	603b      	str	r3, [r7, #0]
 8017bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8017bf4:	e0d0      	b.n	8017d98 <_svfiprintf_r+0x1d0>
 8017bf6:	2340      	movs	r3, #64	; 0x40
 8017bf8:	616b      	str	r3, [r5, #20]
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8017bfe:	2320      	movs	r3, #32
 8017c00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c04:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c08:	2330      	movs	r3, #48	; 0x30
 8017c0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017db0 <_svfiprintf_r+0x1e8>
 8017c0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c12:	f04f 0901 	mov.w	r9, #1
 8017c16:	4623      	mov	r3, r4
 8017c18:	469a      	mov	sl, r3
 8017c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c1e:	b10a      	cbz	r2, 8017c24 <_svfiprintf_r+0x5c>
 8017c20:	2a25      	cmp	r2, #37	; 0x25
 8017c22:	d1f9      	bne.n	8017c18 <_svfiprintf_r+0x50>
 8017c24:	ebba 0b04 	subs.w	fp, sl, r4
 8017c28:	d00b      	beq.n	8017c42 <_svfiprintf_r+0x7a>
 8017c2a:	465b      	mov	r3, fp
 8017c2c:	4622      	mov	r2, r4
 8017c2e:	4629      	mov	r1, r5
 8017c30:	4638      	mov	r0, r7
 8017c32:	f7ff ff6f 	bl	8017b14 <__ssputs_r>
 8017c36:	3001      	adds	r0, #1
 8017c38:	f000 80a9 	beq.w	8017d8e <_svfiprintf_r+0x1c6>
 8017c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c3e:	445a      	add	r2, fp
 8017c40:	9209      	str	r2, [sp, #36]	; 0x24
 8017c42:	f89a 3000 	ldrb.w	r3, [sl]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	f000 80a1 	beq.w	8017d8e <_svfiprintf_r+0x1c6>
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8017c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c56:	f10a 0a01 	add.w	sl, sl, #1
 8017c5a:	9304      	str	r3, [sp, #16]
 8017c5c:	9307      	str	r3, [sp, #28]
 8017c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c62:	931a      	str	r3, [sp, #104]	; 0x68
 8017c64:	4654      	mov	r4, sl
 8017c66:	2205      	movs	r2, #5
 8017c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c6c:	4850      	ldr	r0, [pc, #320]	; (8017db0 <_svfiprintf_r+0x1e8>)
 8017c6e:	f7e8 faaf 	bl	80001d0 <memchr>
 8017c72:	9a04      	ldr	r2, [sp, #16]
 8017c74:	b9d8      	cbnz	r0, 8017cae <_svfiprintf_r+0xe6>
 8017c76:	06d0      	lsls	r0, r2, #27
 8017c78:	bf44      	itt	mi
 8017c7a:	2320      	movmi	r3, #32
 8017c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c80:	0711      	lsls	r1, r2, #28
 8017c82:	bf44      	itt	mi
 8017c84:	232b      	movmi	r3, #43	; 0x2b
 8017c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8017c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8017c90:	d015      	beq.n	8017cbe <_svfiprintf_r+0xf6>
 8017c92:	9a07      	ldr	r2, [sp, #28]
 8017c94:	4654      	mov	r4, sl
 8017c96:	2000      	movs	r0, #0
 8017c98:	f04f 0c0a 	mov.w	ip, #10
 8017c9c:	4621      	mov	r1, r4
 8017c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ca2:	3b30      	subs	r3, #48	; 0x30
 8017ca4:	2b09      	cmp	r3, #9
 8017ca6:	d94d      	bls.n	8017d44 <_svfiprintf_r+0x17c>
 8017ca8:	b1b0      	cbz	r0, 8017cd8 <_svfiprintf_r+0x110>
 8017caa:	9207      	str	r2, [sp, #28]
 8017cac:	e014      	b.n	8017cd8 <_svfiprintf_r+0x110>
 8017cae:	eba0 0308 	sub.w	r3, r0, r8
 8017cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8017cb6:	4313      	orrs	r3, r2
 8017cb8:	9304      	str	r3, [sp, #16]
 8017cba:	46a2      	mov	sl, r4
 8017cbc:	e7d2      	b.n	8017c64 <_svfiprintf_r+0x9c>
 8017cbe:	9b03      	ldr	r3, [sp, #12]
 8017cc0:	1d19      	adds	r1, r3, #4
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	9103      	str	r1, [sp, #12]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	bfbb      	ittet	lt
 8017cca:	425b      	neglt	r3, r3
 8017ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8017cd0:	9307      	strge	r3, [sp, #28]
 8017cd2:	9307      	strlt	r3, [sp, #28]
 8017cd4:	bfb8      	it	lt
 8017cd6:	9204      	strlt	r2, [sp, #16]
 8017cd8:	7823      	ldrb	r3, [r4, #0]
 8017cda:	2b2e      	cmp	r3, #46	; 0x2e
 8017cdc:	d10c      	bne.n	8017cf8 <_svfiprintf_r+0x130>
 8017cde:	7863      	ldrb	r3, [r4, #1]
 8017ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8017ce2:	d134      	bne.n	8017d4e <_svfiprintf_r+0x186>
 8017ce4:	9b03      	ldr	r3, [sp, #12]
 8017ce6:	1d1a      	adds	r2, r3, #4
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	9203      	str	r2, [sp, #12]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	bfb8      	it	lt
 8017cf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8017cf4:	3402      	adds	r4, #2
 8017cf6:	9305      	str	r3, [sp, #20]
 8017cf8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017dc0 <_svfiprintf_r+0x1f8>
 8017cfc:	7821      	ldrb	r1, [r4, #0]
 8017cfe:	2203      	movs	r2, #3
 8017d00:	4650      	mov	r0, sl
 8017d02:	f7e8 fa65 	bl	80001d0 <memchr>
 8017d06:	b138      	cbz	r0, 8017d18 <_svfiprintf_r+0x150>
 8017d08:	9b04      	ldr	r3, [sp, #16]
 8017d0a:	eba0 000a 	sub.w	r0, r0, sl
 8017d0e:	2240      	movs	r2, #64	; 0x40
 8017d10:	4082      	lsls	r2, r0
 8017d12:	4313      	orrs	r3, r2
 8017d14:	3401      	adds	r4, #1
 8017d16:	9304      	str	r3, [sp, #16]
 8017d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d1c:	4825      	ldr	r0, [pc, #148]	; (8017db4 <_svfiprintf_r+0x1ec>)
 8017d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d22:	2206      	movs	r2, #6
 8017d24:	f7e8 fa54 	bl	80001d0 <memchr>
 8017d28:	2800      	cmp	r0, #0
 8017d2a:	d038      	beq.n	8017d9e <_svfiprintf_r+0x1d6>
 8017d2c:	4b22      	ldr	r3, [pc, #136]	; (8017db8 <_svfiprintf_r+0x1f0>)
 8017d2e:	bb1b      	cbnz	r3, 8017d78 <_svfiprintf_r+0x1b0>
 8017d30:	9b03      	ldr	r3, [sp, #12]
 8017d32:	3307      	adds	r3, #7
 8017d34:	f023 0307 	bic.w	r3, r3, #7
 8017d38:	3308      	adds	r3, #8
 8017d3a:	9303      	str	r3, [sp, #12]
 8017d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d3e:	4433      	add	r3, r6
 8017d40:	9309      	str	r3, [sp, #36]	; 0x24
 8017d42:	e768      	b.n	8017c16 <_svfiprintf_r+0x4e>
 8017d44:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d48:	460c      	mov	r4, r1
 8017d4a:	2001      	movs	r0, #1
 8017d4c:	e7a6      	b.n	8017c9c <_svfiprintf_r+0xd4>
 8017d4e:	2300      	movs	r3, #0
 8017d50:	3401      	adds	r4, #1
 8017d52:	9305      	str	r3, [sp, #20]
 8017d54:	4619      	mov	r1, r3
 8017d56:	f04f 0c0a 	mov.w	ip, #10
 8017d5a:	4620      	mov	r0, r4
 8017d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d60:	3a30      	subs	r2, #48	; 0x30
 8017d62:	2a09      	cmp	r2, #9
 8017d64:	d903      	bls.n	8017d6e <_svfiprintf_r+0x1a6>
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d0c6      	beq.n	8017cf8 <_svfiprintf_r+0x130>
 8017d6a:	9105      	str	r1, [sp, #20]
 8017d6c:	e7c4      	b.n	8017cf8 <_svfiprintf_r+0x130>
 8017d6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d72:	4604      	mov	r4, r0
 8017d74:	2301      	movs	r3, #1
 8017d76:	e7f0      	b.n	8017d5a <_svfiprintf_r+0x192>
 8017d78:	ab03      	add	r3, sp, #12
 8017d7a:	9300      	str	r3, [sp, #0]
 8017d7c:	462a      	mov	r2, r5
 8017d7e:	4b0f      	ldr	r3, [pc, #60]	; (8017dbc <_svfiprintf_r+0x1f4>)
 8017d80:	a904      	add	r1, sp, #16
 8017d82:	4638      	mov	r0, r7
 8017d84:	f7fd fdde 	bl	8015944 <_printf_float>
 8017d88:	1c42      	adds	r2, r0, #1
 8017d8a:	4606      	mov	r6, r0
 8017d8c:	d1d6      	bne.n	8017d3c <_svfiprintf_r+0x174>
 8017d8e:	89ab      	ldrh	r3, [r5, #12]
 8017d90:	065b      	lsls	r3, r3, #25
 8017d92:	f53f af2d 	bmi.w	8017bf0 <_svfiprintf_r+0x28>
 8017d96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d98:	b01d      	add	sp, #116	; 0x74
 8017d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d9e:	ab03      	add	r3, sp, #12
 8017da0:	9300      	str	r3, [sp, #0]
 8017da2:	462a      	mov	r2, r5
 8017da4:	4b05      	ldr	r3, [pc, #20]	; (8017dbc <_svfiprintf_r+0x1f4>)
 8017da6:	a904      	add	r1, sp, #16
 8017da8:	4638      	mov	r0, r7
 8017daa:	f7fe f86f 	bl	8015e8c <_printf_i>
 8017dae:	e7eb      	b.n	8017d88 <_svfiprintf_r+0x1c0>
 8017db0:	08018dec 	.word	0x08018dec
 8017db4:	08018df6 	.word	0x08018df6
 8017db8:	08015945 	.word	0x08015945
 8017dbc:	08017b15 	.word	0x08017b15
 8017dc0:	08018df2 	.word	0x08018df2

08017dc4 <__sflush_r>:
 8017dc4:	898a      	ldrh	r2, [r1, #12]
 8017dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dca:	4605      	mov	r5, r0
 8017dcc:	0710      	lsls	r0, r2, #28
 8017dce:	460c      	mov	r4, r1
 8017dd0:	d458      	bmi.n	8017e84 <__sflush_r+0xc0>
 8017dd2:	684b      	ldr	r3, [r1, #4]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	dc05      	bgt.n	8017de4 <__sflush_r+0x20>
 8017dd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	dc02      	bgt.n	8017de4 <__sflush_r+0x20>
 8017dde:	2000      	movs	r0, #0
 8017de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017de6:	2e00      	cmp	r6, #0
 8017de8:	d0f9      	beq.n	8017dde <__sflush_r+0x1a>
 8017dea:	2300      	movs	r3, #0
 8017dec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017df0:	682f      	ldr	r7, [r5, #0]
 8017df2:	6a21      	ldr	r1, [r4, #32]
 8017df4:	602b      	str	r3, [r5, #0]
 8017df6:	d032      	beq.n	8017e5e <__sflush_r+0x9a>
 8017df8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017dfa:	89a3      	ldrh	r3, [r4, #12]
 8017dfc:	075a      	lsls	r2, r3, #29
 8017dfe:	d505      	bpl.n	8017e0c <__sflush_r+0x48>
 8017e00:	6863      	ldr	r3, [r4, #4]
 8017e02:	1ac0      	subs	r0, r0, r3
 8017e04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017e06:	b10b      	cbz	r3, 8017e0c <__sflush_r+0x48>
 8017e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017e0a:	1ac0      	subs	r0, r0, r3
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	4602      	mov	r2, r0
 8017e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017e12:	6a21      	ldr	r1, [r4, #32]
 8017e14:	4628      	mov	r0, r5
 8017e16:	47b0      	blx	r6
 8017e18:	1c43      	adds	r3, r0, #1
 8017e1a:	89a3      	ldrh	r3, [r4, #12]
 8017e1c:	d106      	bne.n	8017e2c <__sflush_r+0x68>
 8017e1e:	6829      	ldr	r1, [r5, #0]
 8017e20:	291d      	cmp	r1, #29
 8017e22:	d82b      	bhi.n	8017e7c <__sflush_r+0xb8>
 8017e24:	4a29      	ldr	r2, [pc, #164]	; (8017ecc <__sflush_r+0x108>)
 8017e26:	410a      	asrs	r2, r1
 8017e28:	07d6      	lsls	r6, r2, #31
 8017e2a:	d427      	bmi.n	8017e7c <__sflush_r+0xb8>
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	6062      	str	r2, [r4, #4]
 8017e30:	04d9      	lsls	r1, r3, #19
 8017e32:	6922      	ldr	r2, [r4, #16]
 8017e34:	6022      	str	r2, [r4, #0]
 8017e36:	d504      	bpl.n	8017e42 <__sflush_r+0x7e>
 8017e38:	1c42      	adds	r2, r0, #1
 8017e3a:	d101      	bne.n	8017e40 <__sflush_r+0x7c>
 8017e3c:	682b      	ldr	r3, [r5, #0]
 8017e3e:	b903      	cbnz	r3, 8017e42 <__sflush_r+0x7e>
 8017e40:	6560      	str	r0, [r4, #84]	; 0x54
 8017e42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e44:	602f      	str	r7, [r5, #0]
 8017e46:	2900      	cmp	r1, #0
 8017e48:	d0c9      	beq.n	8017dde <__sflush_r+0x1a>
 8017e4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e4e:	4299      	cmp	r1, r3
 8017e50:	d002      	beq.n	8017e58 <__sflush_r+0x94>
 8017e52:	4628      	mov	r0, r5
 8017e54:	f7ff f9e2 	bl	801721c <_free_r>
 8017e58:	2000      	movs	r0, #0
 8017e5a:	6360      	str	r0, [r4, #52]	; 0x34
 8017e5c:	e7c0      	b.n	8017de0 <__sflush_r+0x1c>
 8017e5e:	2301      	movs	r3, #1
 8017e60:	4628      	mov	r0, r5
 8017e62:	47b0      	blx	r6
 8017e64:	1c41      	adds	r1, r0, #1
 8017e66:	d1c8      	bne.n	8017dfa <__sflush_r+0x36>
 8017e68:	682b      	ldr	r3, [r5, #0]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d0c5      	beq.n	8017dfa <__sflush_r+0x36>
 8017e6e:	2b1d      	cmp	r3, #29
 8017e70:	d001      	beq.n	8017e76 <__sflush_r+0xb2>
 8017e72:	2b16      	cmp	r3, #22
 8017e74:	d101      	bne.n	8017e7a <__sflush_r+0xb6>
 8017e76:	602f      	str	r7, [r5, #0]
 8017e78:	e7b1      	b.n	8017dde <__sflush_r+0x1a>
 8017e7a:	89a3      	ldrh	r3, [r4, #12]
 8017e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e80:	81a3      	strh	r3, [r4, #12]
 8017e82:	e7ad      	b.n	8017de0 <__sflush_r+0x1c>
 8017e84:	690f      	ldr	r7, [r1, #16]
 8017e86:	2f00      	cmp	r7, #0
 8017e88:	d0a9      	beq.n	8017dde <__sflush_r+0x1a>
 8017e8a:	0793      	lsls	r3, r2, #30
 8017e8c:	680e      	ldr	r6, [r1, #0]
 8017e8e:	bf08      	it	eq
 8017e90:	694b      	ldreq	r3, [r1, #20]
 8017e92:	600f      	str	r7, [r1, #0]
 8017e94:	bf18      	it	ne
 8017e96:	2300      	movne	r3, #0
 8017e98:	eba6 0807 	sub.w	r8, r6, r7
 8017e9c:	608b      	str	r3, [r1, #8]
 8017e9e:	f1b8 0f00 	cmp.w	r8, #0
 8017ea2:	dd9c      	ble.n	8017dde <__sflush_r+0x1a>
 8017ea4:	6a21      	ldr	r1, [r4, #32]
 8017ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017ea8:	4643      	mov	r3, r8
 8017eaa:	463a      	mov	r2, r7
 8017eac:	4628      	mov	r0, r5
 8017eae:	47b0      	blx	r6
 8017eb0:	2800      	cmp	r0, #0
 8017eb2:	dc06      	bgt.n	8017ec2 <__sflush_r+0xfe>
 8017eb4:	89a3      	ldrh	r3, [r4, #12]
 8017eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017eba:	81a3      	strh	r3, [r4, #12]
 8017ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8017ec0:	e78e      	b.n	8017de0 <__sflush_r+0x1c>
 8017ec2:	4407      	add	r7, r0
 8017ec4:	eba8 0800 	sub.w	r8, r8, r0
 8017ec8:	e7e9      	b.n	8017e9e <__sflush_r+0xda>
 8017eca:	bf00      	nop
 8017ecc:	dfbffffe 	.word	0xdfbffffe

08017ed0 <_fflush_r>:
 8017ed0:	b538      	push	{r3, r4, r5, lr}
 8017ed2:	690b      	ldr	r3, [r1, #16]
 8017ed4:	4605      	mov	r5, r0
 8017ed6:	460c      	mov	r4, r1
 8017ed8:	b913      	cbnz	r3, 8017ee0 <_fflush_r+0x10>
 8017eda:	2500      	movs	r5, #0
 8017edc:	4628      	mov	r0, r5
 8017ede:	bd38      	pop	{r3, r4, r5, pc}
 8017ee0:	b118      	cbz	r0, 8017eea <_fflush_r+0x1a>
 8017ee2:	6a03      	ldr	r3, [r0, #32]
 8017ee4:	b90b      	cbnz	r3, 8017eea <_fflush_r+0x1a>
 8017ee6:	f7fe f97f 	bl	80161e8 <__sinit>
 8017eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d0f3      	beq.n	8017eda <_fflush_r+0xa>
 8017ef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017ef4:	07d0      	lsls	r0, r2, #31
 8017ef6:	d404      	bmi.n	8017f02 <_fflush_r+0x32>
 8017ef8:	0599      	lsls	r1, r3, #22
 8017efa:	d402      	bmi.n	8017f02 <_fflush_r+0x32>
 8017efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017efe:	f7fe fb02 	bl	8016506 <__retarget_lock_acquire_recursive>
 8017f02:	4628      	mov	r0, r5
 8017f04:	4621      	mov	r1, r4
 8017f06:	f7ff ff5d 	bl	8017dc4 <__sflush_r>
 8017f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f0c:	07da      	lsls	r2, r3, #31
 8017f0e:	4605      	mov	r5, r0
 8017f10:	d4e4      	bmi.n	8017edc <_fflush_r+0xc>
 8017f12:	89a3      	ldrh	r3, [r4, #12]
 8017f14:	059b      	lsls	r3, r3, #22
 8017f16:	d4e1      	bmi.n	8017edc <_fflush_r+0xc>
 8017f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f1a:	f7fe faf5 	bl	8016508 <__retarget_lock_release_recursive>
 8017f1e:	e7dd      	b.n	8017edc <_fflush_r+0xc>

08017f20 <memmove>:
 8017f20:	4288      	cmp	r0, r1
 8017f22:	b510      	push	{r4, lr}
 8017f24:	eb01 0402 	add.w	r4, r1, r2
 8017f28:	d902      	bls.n	8017f30 <memmove+0x10>
 8017f2a:	4284      	cmp	r4, r0
 8017f2c:	4623      	mov	r3, r4
 8017f2e:	d807      	bhi.n	8017f40 <memmove+0x20>
 8017f30:	1e43      	subs	r3, r0, #1
 8017f32:	42a1      	cmp	r1, r4
 8017f34:	d008      	beq.n	8017f48 <memmove+0x28>
 8017f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017f3e:	e7f8      	b.n	8017f32 <memmove+0x12>
 8017f40:	4402      	add	r2, r0
 8017f42:	4601      	mov	r1, r0
 8017f44:	428a      	cmp	r2, r1
 8017f46:	d100      	bne.n	8017f4a <memmove+0x2a>
 8017f48:	bd10      	pop	{r4, pc}
 8017f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017f4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017f52:	e7f7      	b.n	8017f44 <memmove+0x24>

08017f54 <_sbrk_r>:
 8017f54:	b538      	push	{r3, r4, r5, lr}
 8017f56:	4d06      	ldr	r5, [pc, #24]	; (8017f70 <_sbrk_r+0x1c>)
 8017f58:	2300      	movs	r3, #0
 8017f5a:	4604      	mov	r4, r0
 8017f5c:	4608      	mov	r0, r1
 8017f5e:	602b      	str	r3, [r5, #0]
 8017f60:	f7ea fbf0 	bl	8002744 <_sbrk>
 8017f64:	1c43      	adds	r3, r0, #1
 8017f66:	d102      	bne.n	8017f6e <_sbrk_r+0x1a>
 8017f68:	682b      	ldr	r3, [r5, #0]
 8017f6a:	b103      	cbz	r3, 8017f6e <_sbrk_r+0x1a>
 8017f6c:	6023      	str	r3, [r4, #0]
 8017f6e:	bd38      	pop	{r3, r4, r5, pc}
 8017f70:	2000a4dc 	.word	0x2000a4dc

08017f74 <__assert_func>:
 8017f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f76:	4614      	mov	r4, r2
 8017f78:	461a      	mov	r2, r3
 8017f7a:	4b09      	ldr	r3, [pc, #36]	; (8017fa0 <__assert_func+0x2c>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	4605      	mov	r5, r0
 8017f80:	68d8      	ldr	r0, [r3, #12]
 8017f82:	b14c      	cbz	r4, 8017f98 <__assert_func+0x24>
 8017f84:	4b07      	ldr	r3, [pc, #28]	; (8017fa4 <__assert_func+0x30>)
 8017f86:	9100      	str	r1, [sp, #0]
 8017f88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017f8c:	4906      	ldr	r1, [pc, #24]	; (8017fa8 <__assert_func+0x34>)
 8017f8e:	462b      	mov	r3, r5
 8017f90:	f000 f872 	bl	8018078 <fiprintf>
 8017f94:	f000 f882 	bl	801809c <abort>
 8017f98:	4b04      	ldr	r3, [pc, #16]	; (8017fac <__assert_func+0x38>)
 8017f9a:	461c      	mov	r4, r3
 8017f9c:	e7f3      	b.n	8017f86 <__assert_func+0x12>
 8017f9e:	bf00      	nop
 8017fa0:	200013f4 	.word	0x200013f4
 8017fa4:	08018e07 	.word	0x08018e07
 8017fa8:	08018e14 	.word	0x08018e14
 8017fac:	08018e42 	.word	0x08018e42

08017fb0 <_calloc_r>:
 8017fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017fb2:	fba1 2402 	umull	r2, r4, r1, r2
 8017fb6:	b94c      	cbnz	r4, 8017fcc <_calloc_r+0x1c>
 8017fb8:	4611      	mov	r1, r2
 8017fba:	9201      	str	r2, [sp, #4]
 8017fbc:	f7ff f9a2 	bl	8017304 <_malloc_r>
 8017fc0:	9a01      	ldr	r2, [sp, #4]
 8017fc2:	4605      	mov	r5, r0
 8017fc4:	b930      	cbnz	r0, 8017fd4 <_calloc_r+0x24>
 8017fc6:	4628      	mov	r0, r5
 8017fc8:	b003      	add	sp, #12
 8017fca:	bd30      	pop	{r4, r5, pc}
 8017fcc:	220c      	movs	r2, #12
 8017fce:	6002      	str	r2, [r0, #0]
 8017fd0:	2500      	movs	r5, #0
 8017fd2:	e7f8      	b.n	8017fc6 <_calloc_r+0x16>
 8017fd4:	4621      	mov	r1, r4
 8017fd6:	f7fe f9a0 	bl	801631a <memset>
 8017fda:	e7f4      	b.n	8017fc6 <_calloc_r+0x16>

08017fdc <__ascii_mbtowc>:
 8017fdc:	b082      	sub	sp, #8
 8017fde:	b901      	cbnz	r1, 8017fe2 <__ascii_mbtowc+0x6>
 8017fe0:	a901      	add	r1, sp, #4
 8017fe2:	b142      	cbz	r2, 8017ff6 <__ascii_mbtowc+0x1a>
 8017fe4:	b14b      	cbz	r3, 8017ffa <__ascii_mbtowc+0x1e>
 8017fe6:	7813      	ldrb	r3, [r2, #0]
 8017fe8:	600b      	str	r3, [r1, #0]
 8017fea:	7812      	ldrb	r2, [r2, #0]
 8017fec:	1e10      	subs	r0, r2, #0
 8017fee:	bf18      	it	ne
 8017ff0:	2001      	movne	r0, #1
 8017ff2:	b002      	add	sp, #8
 8017ff4:	4770      	bx	lr
 8017ff6:	4610      	mov	r0, r2
 8017ff8:	e7fb      	b.n	8017ff2 <__ascii_mbtowc+0x16>
 8017ffa:	f06f 0001 	mvn.w	r0, #1
 8017ffe:	e7f8      	b.n	8017ff2 <__ascii_mbtowc+0x16>

08018000 <_realloc_r>:
 8018000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018004:	4680      	mov	r8, r0
 8018006:	4614      	mov	r4, r2
 8018008:	460e      	mov	r6, r1
 801800a:	b921      	cbnz	r1, 8018016 <_realloc_r+0x16>
 801800c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018010:	4611      	mov	r1, r2
 8018012:	f7ff b977 	b.w	8017304 <_malloc_r>
 8018016:	b92a      	cbnz	r2, 8018024 <_realloc_r+0x24>
 8018018:	f7ff f900 	bl	801721c <_free_r>
 801801c:	4625      	mov	r5, r4
 801801e:	4628      	mov	r0, r5
 8018020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018024:	f000 f841 	bl	80180aa <_malloc_usable_size_r>
 8018028:	4284      	cmp	r4, r0
 801802a:	4607      	mov	r7, r0
 801802c:	d802      	bhi.n	8018034 <_realloc_r+0x34>
 801802e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018032:	d812      	bhi.n	801805a <_realloc_r+0x5a>
 8018034:	4621      	mov	r1, r4
 8018036:	4640      	mov	r0, r8
 8018038:	f7ff f964 	bl	8017304 <_malloc_r>
 801803c:	4605      	mov	r5, r0
 801803e:	2800      	cmp	r0, #0
 8018040:	d0ed      	beq.n	801801e <_realloc_r+0x1e>
 8018042:	42bc      	cmp	r4, r7
 8018044:	4622      	mov	r2, r4
 8018046:	4631      	mov	r1, r6
 8018048:	bf28      	it	cs
 801804a:	463a      	movcs	r2, r7
 801804c:	f7fe fa5d 	bl	801650a <memcpy>
 8018050:	4631      	mov	r1, r6
 8018052:	4640      	mov	r0, r8
 8018054:	f7ff f8e2 	bl	801721c <_free_r>
 8018058:	e7e1      	b.n	801801e <_realloc_r+0x1e>
 801805a:	4635      	mov	r5, r6
 801805c:	e7df      	b.n	801801e <_realloc_r+0x1e>

0801805e <__ascii_wctomb>:
 801805e:	b149      	cbz	r1, 8018074 <__ascii_wctomb+0x16>
 8018060:	2aff      	cmp	r2, #255	; 0xff
 8018062:	bf85      	ittet	hi
 8018064:	238a      	movhi	r3, #138	; 0x8a
 8018066:	6003      	strhi	r3, [r0, #0]
 8018068:	700a      	strbls	r2, [r1, #0]
 801806a:	f04f 30ff 	movhi.w	r0, #4294967295
 801806e:	bf98      	it	ls
 8018070:	2001      	movls	r0, #1
 8018072:	4770      	bx	lr
 8018074:	4608      	mov	r0, r1
 8018076:	4770      	bx	lr

08018078 <fiprintf>:
 8018078:	b40e      	push	{r1, r2, r3}
 801807a:	b503      	push	{r0, r1, lr}
 801807c:	4601      	mov	r1, r0
 801807e:	ab03      	add	r3, sp, #12
 8018080:	4805      	ldr	r0, [pc, #20]	; (8018098 <fiprintf+0x20>)
 8018082:	f853 2b04 	ldr.w	r2, [r3], #4
 8018086:	6800      	ldr	r0, [r0, #0]
 8018088:	9301      	str	r3, [sp, #4]
 801808a:	f000 f83f 	bl	801810c <_vfiprintf_r>
 801808e:	b002      	add	sp, #8
 8018090:	f85d eb04 	ldr.w	lr, [sp], #4
 8018094:	b003      	add	sp, #12
 8018096:	4770      	bx	lr
 8018098:	200013f4 	.word	0x200013f4

0801809c <abort>:
 801809c:	b508      	push	{r3, lr}
 801809e:	2006      	movs	r0, #6
 80180a0:	f000 fa0c 	bl	80184bc <raise>
 80180a4:	2001      	movs	r0, #1
 80180a6:	f7ea fad5 	bl	8002654 <_exit>

080180aa <_malloc_usable_size_r>:
 80180aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180ae:	1f18      	subs	r0, r3, #4
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	bfbc      	itt	lt
 80180b4:	580b      	ldrlt	r3, [r1, r0]
 80180b6:	18c0      	addlt	r0, r0, r3
 80180b8:	4770      	bx	lr

080180ba <__sfputc_r>:
 80180ba:	6893      	ldr	r3, [r2, #8]
 80180bc:	3b01      	subs	r3, #1
 80180be:	2b00      	cmp	r3, #0
 80180c0:	b410      	push	{r4}
 80180c2:	6093      	str	r3, [r2, #8]
 80180c4:	da08      	bge.n	80180d8 <__sfputc_r+0x1e>
 80180c6:	6994      	ldr	r4, [r2, #24]
 80180c8:	42a3      	cmp	r3, r4
 80180ca:	db01      	blt.n	80180d0 <__sfputc_r+0x16>
 80180cc:	290a      	cmp	r1, #10
 80180ce:	d103      	bne.n	80180d8 <__sfputc_r+0x1e>
 80180d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180d4:	f000 b934 	b.w	8018340 <__swbuf_r>
 80180d8:	6813      	ldr	r3, [r2, #0]
 80180da:	1c58      	adds	r0, r3, #1
 80180dc:	6010      	str	r0, [r2, #0]
 80180de:	7019      	strb	r1, [r3, #0]
 80180e0:	4608      	mov	r0, r1
 80180e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180e6:	4770      	bx	lr

080180e8 <__sfputs_r>:
 80180e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ea:	4606      	mov	r6, r0
 80180ec:	460f      	mov	r7, r1
 80180ee:	4614      	mov	r4, r2
 80180f0:	18d5      	adds	r5, r2, r3
 80180f2:	42ac      	cmp	r4, r5
 80180f4:	d101      	bne.n	80180fa <__sfputs_r+0x12>
 80180f6:	2000      	movs	r0, #0
 80180f8:	e007      	b.n	801810a <__sfputs_r+0x22>
 80180fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180fe:	463a      	mov	r2, r7
 8018100:	4630      	mov	r0, r6
 8018102:	f7ff ffda 	bl	80180ba <__sfputc_r>
 8018106:	1c43      	adds	r3, r0, #1
 8018108:	d1f3      	bne.n	80180f2 <__sfputs_r+0xa>
 801810a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801810c <_vfiprintf_r>:
 801810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018110:	460d      	mov	r5, r1
 8018112:	b09d      	sub	sp, #116	; 0x74
 8018114:	4614      	mov	r4, r2
 8018116:	4698      	mov	r8, r3
 8018118:	4606      	mov	r6, r0
 801811a:	b118      	cbz	r0, 8018124 <_vfiprintf_r+0x18>
 801811c:	6a03      	ldr	r3, [r0, #32]
 801811e:	b90b      	cbnz	r3, 8018124 <_vfiprintf_r+0x18>
 8018120:	f7fe f862 	bl	80161e8 <__sinit>
 8018124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018126:	07d9      	lsls	r1, r3, #31
 8018128:	d405      	bmi.n	8018136 <_vfiprintf_r+0x2a>
 801812a:	89ab      	ldrh	r3, [r5, #12]
 801812c:	059a      	lsls	r2, r3, #22
 801812e:	d402      	bmi.n	8018136 <_vfiprintf_r+0x2a>
 8018130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018132:	f7fe f9e8 	bl	8016506 <__retarget_lock_acquire_recursive>
 8018136:	89ab      	ldrh	r3, [r5, #12]
 8018138:	071b      	lsls	r3, r3, #28
 801813a:	d501      	bpl.n	8018140 <_vfiprintf_r+0x34>
 801813c:	692b      	ldr	r3, [r5, #16]
 801813e:	b99b      	cbnz	r3, 8018168 <_vfiprintf_r+0x5c>
 8018140:	4629      	mov	r1, r5
 8018142:	4630      	mov	r0, r6
 8018144:	f000 f93a 	bl	80183bc <__swsetup_r>
 8018148:	b170      	cbz	r0, 8018168 <_vfiprintf_r+0x5c>
 801814a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801814c:	07dc      	lsls	r4, r3, #31
 801814e:	d504      	bpl.n	801815a <_vfiprintf_r+0x4e>
 8018150:	f04f 30ff 	mov.w	r0, #4294967295
 8018154:	b01d      	add	sp, #116	; 0x74
 8018156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801815a:	89ab      	ldrh	r3, [r5, #12]
 801815c:	0598      	lsls	r0, r3, #22
 801815e:	d4f7      	bmi.n	8018150 <_vfiprintf_r+0x44>
 8018160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018162:	f7fe f9d1 	bl	8016508 <__retarget_lock_release_recursive>
 8018166:	e7f3      	b.n	8018150 <_vfiprintf_r+0x44>
 8018168:	2300      	movs	r3, #0
 801816a:	9309      	str	r3, [sp, #36]	; 0x24
 801816c:	2320      	movs	r3, #32
 801816e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018172:	f8cd 800c 	str.w	r8, [sp, #12]
 8018176:	2330      	movs	r3, #48	; 0x30
 8018178:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801832c <_vfiprintf_r+0x220>
 801817c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018180:	f04f 0901 	mov.w	r9, #1
 8018184:	4623      	mov	r3, r4
 8018186:	469a      	mov	sl, r3
 8018188:	f813 2b01 	ldrb.w	r2, [r3], #1
 801818c:	b10a      	cbz	r2, 8018192 <_vfiprintf_r+0x86>
 801818e:	2a25      	cmp	r2, #37	; 0x25
 8018190:	d1f9      	bne.n	8018186 <_vfiprintf_r+0x7a>
 8018192:	ebba 0b04 	subs.w	fp, sl, r4
 8018196:	d00b      	beq.n	80181b0 <_vfiprintf_r+0xa4>
 8018198:	465b      	mov	r3, fp
 801819a:	4622      	mov	r2, r4
 801819c:	4629      	mov	r1, r5
 801819e:	4630      	mov	r0, r6
 80181a0:	f7ff ffa2 	bl	80180e8 <__sfputs_r>
 80181a4:	3001      	adds	r0, #1
 80181a6:	f000 80a9 	beq.w	80182fc <_vfiprintf_r+0x1f0>
 80181aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181ac:	445a      	add	r2, fp
 80181ae:	9209      	str	r2, [sp, #36]	; 0x24
 80181b0:	f89a 3000 	ldrb.w	r3, [sl]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	f000 80a1 	beq.w	80182fc <_vfiprintf_r+0x1f0>
 80181ba:	2300      	movs	r3, #0
 80181bc:	f04f 32ff 	mov.w	r2, #4294967295
 80181c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181c4:	f10a 0a01 	add.w	sl, sl, #1
 80181c8:	9304      	str	r3, [sp, #16]
 80181ca:	9307      	str	r3, [sp, #28]
 80181cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80181d0:	931a      	str	r3, [sp, #104]	; 0x68
 80181d2:	4654      	mov	r4, sl
 80181d4:	2205      	movs	r2, #5
 80181d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181da:	4854      	ldr	r0, [pc, #336]	; (801832c <_vfiprintf_r+0x220>)
 80181dc:	f7e7 fff8 	bl	80001d0 <memchr>
 80181e0:	9a04      	ldr	r2, [sp, #16]
 80181e2:	b9d8      	cbnz	r0, 801821c <_vfiprintf_r+0x110>
 80181e4:	06d1      	lsls	r1, r2, #27
 80181e6:	bf44      	itt	mi
 80181e8:	2320      	movmi	r3, #32
 80181ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181ee:	0713      	lsls	r3, r2, #28
 80181f0:	bf44      	itt	mi
 80181f2:	232b      	movmi	r3, #43	; 0x2b
 80181f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181f8:	f89a 3000 	ldrb.w	r3, [sl]
 80181fc:	2b2a      	cmp	r3, #42	; 0x2a
 80181fe:	d015      	beq.n	801822c <_vfiprintf_r+0x120>
 8018200:	9a07      	ldr	r2, [sp, #28]
 8018202:	4654      	mov	r4, sl
 8018204:	2000      	movs	r0, #0
 8018206:	f04f 0c0a 	mov.w	ip, #10
 801820a:	4621      	mov	r1, r4
 801820c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018210:	3b30      	subs	r3, #48	; 0x30
 8018212:	2b09      	cmp	r3, #9
 8018214:	d94d      	bls.n	80182b2 <_vfiprintf_r+0x1a6>
 8018216:	b1b0      	cbz	r0, 8018246 <_vfiprintf_r+0x13a>
 8018218:	9207      	str	r2, [sp, #28]
 801821a:	e014      	b.n	8018246 <_vfiprintf_r+0x13a>
 801821c:	eba0 0308 	sub.w	r3, r0, r8
 8018220:	fa09 f303 	lsl.w	r3, r9, r3
 8018224:	4313      	orrs	r3, r2
 8018226:	9304      	str	r3, [sp, #16]
 8018228:	46a2      	mov	sl, r4
 801822a:	e7d2      	b.n	80181d2 <_vfiprintf_r+0xc6>
 801822c:	9b03      	ldr	r3, [sp, #12]
 801822e:	1d19      	adds	r1, r3, #4
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	9103      	str	r1, [sp, #12]
 8018234:	2b00      	cmp	r3, #0
 8018236:	bfbb      	ittet	lt
 8018238:	425b      	neglt	r3, r3
 801823a:	f042 0202 	orrlt.w	r2, r2, #2
 801823e:	9307      	strge	r3, [sp, #28]
 8018240:	9307      	strlt	r3, [sp, #28]
 8018242:	bfb8      	it	lt
 8018244:	9204      	strlt	r2, [sp, #16]
 8018246:	7823      	ldrb	r3, [r4, #0]
 8018248:	2b2e      	cmp	r3, #46	; 0x2e
 801824a:	d10c      	bne.n	8018266 <_vfiprintf_r+0x15a>
 801824c:	7863      	ldrb	r3, [r4, #1]
 801824e:	2b2a      	cmp	r3, #42	; 0x2a
 8018250:	d134      	bne.n	80182bc <_vfiprintf_r+0x1b0>
 8018252:	9b03      	ldr	r3, [sp, #12]
 8018254:	1d1a      	adds	r2, r3, #4
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	9203      	str	r2, [sp, #12]
 801825a:	2b00      	cmp	r3, #0
 801825c:	bfb8      	it	lt
 801825e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018262:	3402      	adds	r4, #2
 8018264:	9305      	str	r3, [sp, #20]
 8018266:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801833c <_vfiprintf_r+0x230>
 801826a:	7821      	ldrb	r1, [r4, #0]
 801826c:	2203      	movs	r2, #3
 801826e:	4650      	mov	r0, sl
 8018270:	f7e7 ffae 	bl	80001d0 <memchr>
 8018274:	b138      	cbz	r0, 8018286 <_vfiprintf_r+0x17a>
 8018276:	9b04      	ldr	r3, [sp, #16]
 8018278:	eba0 000a 	sub.w	r0, r0, sl
 801827c:	2240      	movs	r2, #64	; 0x40
 801827e:	4082      	lsls	r2, r0
 8018280:	4313      	orrs	r3, r2
 8018282:	3401      	adds	r4, #1
 8018284:	9304      	str	r3, [sp, #16]
 8018286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801828a:	4829      	ldr	r0, [pc, #164]	; (8018330 <_vfiprintf_r+0x224>)
 801828c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018290:	2206      	movs	r2, #6
 8018292:	f7e7 ff9d 	bl	80001d0 <memchr>
 8018296:	2800      	cmp	r0, #0
 8018298:	d03f      	beq.n	801831a <_vfiprintf_r+0x20e>
 801829a:	4b26      	ldr	r3, [pc, #152]	; (8018334 <_vfiprintf_r+0x228>)
 801829c:	bb1b      	cbnz	r3, 80182e6 <_vfiprintf_r+0x1da>
 801829e:	9b03      	ldr	r3, [sp, #12]
 80182a0:	3307      	adds	r3, #7
 80182a2:	f023 0307 	bic.w	r3, r3, #7
 80182a6:	3308      	adds	r3, #8
 80182a8:	9303      	str	r3, [sp, #12]
 80182aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182ac:	443b      	add	r3, r7
 80182ae:	9309      	str	r3, [sp, #36]	; 0x24
 80182b0:	e768      	b.n	8018184 <_vfiprintf_r+0x78>
 80182b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80182b6:	460c      	mov	r4, r1
 80182b8:	2001      	movs	r0, #1
 80182ba:	e7a6      	b.n	801820a <_vfiprintf_r+0xfe>
 80182bc:	2300      	movs	r3, #0
 80182be:	3401      	adds	r4, #1
 80182c0:	9305      	str	r3, [sp, #20]
 80182c2:	4619      	mov	r1, r3
 80182c4:	f04f 0c0a 	mov.w	ip, #10
 80182c8:	4620      	mov	r0, r4
 80182ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182ce:	3a30      	subs	r2, #48	; 0x30
 80182d0:	2a09      	cmp	r2, #9
 80182d2:	d903      	bls.n	80182dc <_vfiprintf_r+0x1d0>
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d0c6      	beq.n	8018266 <_vfiprintf_r+0x15a>
 80182d8:	9105      	str	r1, [sp, #20]
 80182da:	e7c4      	b.n	8018266 <_vfiprintf_r+0x15a>
 80182dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80182e0:	4604      	mov	r4, r0
 80182e2:	2301      	movs	r3, #1
 80182e4:	e7f0      	b.n	80182c8 <_vfiprintf_r+0x1bc>
 80182e6:	ab03      	add	r3, sp, #12
 80182e8:	9300      	str	r3, [sp, #0]
 80182ea:	462a      	mov	r2, r5
 80182ec:	4b12      	ldr	r3, [pc, #72]	; (8018338 <_vfiprintf_r+0x22c>)
 80182ee:	a904      	add	r1, sp, #16
 80182f0:	4630      	mov	r0, r6
 80182f2:	f7fd fb27 	bl	8015944 <_printf_float>
 80182f6:	4607      	mov	r7, r0
 80182f8:	1c78      	adds	r0, r7, #1
 80182fa:	d1d6      	bne.n	80182aa <_vfiprintf_r+0x19e>
 80182fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80182fe:	07d9      	lsls	r1, r3, #31
 8018300:	d405      	bmi.n	801830e <_vfiprintf_r+0x202>
 8018302:	89ab      	ldrh	r3, [r5, #12]
 8018304:	059a      	lsls	r2, r3, #22
 8018306:	d402      	bmi.n	801830e <_vfiprintf_r+0x202>
 8018308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801830a:	f7fe f8fd 	bl	8016508 <__retarget_lock_release_recursive>
 801830e:	89ab      	ldrh	r3, [r5, #12]
 8018310:	065b      	lsls	r3, r3, #25
 8018312:	f53f af1d 	bmi.w	8018150 <_vfiprintf_r+0x44>
 8018316:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018318:	e71c      	b.n	8018154 <_vfiprintf_r+0x48>
 801831a:	ab03      	add	r3, sp, #12
 801831c:	9300      	str	r3, [sp, #0]
 801831e:	462a      	mov	r2, r5
 8018320:	4b05      	ldr	r3, [pc, #20]	; (8018338 <_vfiprintf_r+0x22c>)
 8018322:	a904      	add	r1, sp, #16
 8018324:	4630      	mov	r0, r6
 8018326:	f7fd fdb1 	bl	8015e8c <_printf_i>
 801832a:	e7e4      	b.n	80182f6 <_vfiprintf_r+0x1ea>
 801832c:	08018dec 	.word	0x08018dec
 8018330:	08018df6 	.word	0x08018df6
 8018334:	08015945 	.word	0x08015945
 8018338:	080180e9 	.word	0x080180e9
 801833c:	08018df2 	.word	0x08018df2

08018340 <__swbuf_r>:
 8018340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018342:	460e      	mov	r6, r1
 8018344:	4614      	mov	r4, r2
 8018346:	4605      	mov	r5, r0
 8018348:	b118      	cbz	r0, 8018352 <__swbuf_r+0x12>
 801834a:	6a03      	ldr	r3, [r0, #32]
 801834c:	b90b      	cbnz	r3, 8018352 <__swbuf_r+0x12>
 801834e:	f7fd ff4b 	bl	80161e8 <__sinit>
 8018352:	69a3      	ldr	r3, [r4, #24]
 8018354:	60a3      	str	r3, [r4, #8]
 8018356:	89a3      	ldrh	r3, [r4, #12]
 8018358:	071a      	lsls	r2, r3, #28
 801835a:	d525      	bpl.n	80183a8 <__swbuf_r+0x68>
 801835c:	6923      	ldr	r3, [r4, #16]
 801835e:	b31b      	cbz	r3, 80183a8 <__swbuf_r+0x68>
 8018360:	6823      	ldr	r3, [r4, #0]
 8018362:	6922      	ldr	r2, [r4, #16]
 8018364:	1a98      	subs	r0, r3, r2
 8018366:	6963      	ldr	r3, [r4, #20]
 8018368:	b2f6      	uxtb	r6, r6
 801836a:	4283      	cmp	r3, r0
 801836c:	4637      	mov	r7, r6
 801836e:	dc04      	bgt.n	801837a <__swbuf_r+0x3a>
 8018370:	4621      	mov	r1, r4
 8018372:	4628      	mov	r0, r5
 8018374:	f7ff fdac 	bl	8017ed0 <_fflush_r>
 8018378:	b9e0      	cbnz	r0, 80183b4 <__swbuf_r+0x74>
 801837a:	68a3      	ldr	r3, [r4, #8]
 801837c:	3b01      	subs	r3, #1
 801837e:	60a3      	str	r3, [r4, #8]
 8018380:	6823      	ldr	r3, [r4, #0]
 8018382:	1c5a      	adds	r2, r3, #1
 8018384:	6022      	str	r2, [r4, #0]
 8018386:	701e      	strb	r6, [r3, #0]
 8018388:	6962      	ldr	r2, [r4, #20]
 801838a:	1c43      	adds	r3, r0, #1
 801838c:	429a      	cmp	r2, r3
 801838e:	d004      	beq.n	801839a <__swbuf_r+0x5a>
 8018390:	89a3      	ldrh	r3, [r4, #12]
 8018392:	07db      	lsls	r3, r3, #31
 8018394:	d506      	bpl.n	80183a4 <__swbuf_r+0x64>
 8018396:	2e0a      	cmp	r6, #10
 8018398:	d104      	bne.n	80183a4 <__swbuf_r+0x64>
 801839a:	4621      	mov	r1, r4
 801839c:	4628      	mov	r0, r5
 801839e:	f7ff fd97 	bl	8017ed0 <_fflush_r>
 80183a2:	b938      	cbnz	r0, 80183b4 <__swbuf_r+0x74>
 80183a4:	4638      	mov	r0, r7
 80183a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183a8:	4621      	mov	r1, r4
 80183aa:	4628      	mov	r0, r5
 80183ac:	f000 f806 	bl	80183bc <__swsetup_r>
 80183b0:	2800      	cmp	r0, #0
 80183b2:	d0d5      	beq.n	8018360 <__swbuf_r+0x20>
 80183b4:	f04f 37ff 	mov.w	r7, #4294967295
 80183b8:	e7f4      	b.n	80183a4 <__swbuf_r+0x64>
	...

080183bc <__swsetup_r>:
 80183bc:	b538      	push	{r3, r4, r5, lr}
 80183be:	4b2a      	ldr	r3, [pc, #168]	; (8018468 <__swsetup_r+0xac>)
 80183c0:	4605      	mov	r5, r0
 80183c2:	6818      	ldr	r0, [r3, #0]
 80183c4:	460c      	mov	r4, r1
 80183c6:	b118      	cbz	r0, 80183d0 <__swsetup_r+0x14>
 80183c8:	6a03      	ldr	r3, [r0, #32]
 80183ca:	b90b      	cbnz	r3, 80183d0 <__swsetup_r+0x14>
 80183cc:	f7fd ff0c 	bl	80161e8 <__sinit>
 80183d0:	89a3      	ldrh	r3, [r4, #12]
 80183d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80183d6:	0718      	lsls	r0, r3, #28
 80183d8:	d422      	bmi.n	8018420 <__swsetup_r+0x64>
 80183da:	06d9      	lsls	r1, r3, #27
 80183dc:	d407      	bmi.n	80183ee <__swsetup_r+0x32>
 80183de:	2309      	movs	r3, #9
 80183e0:	602b      	str	r3, [r5, #0]
 80183e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80183e6:	81a3      	strh	r3, [r4, #12]
 80183e8:	f04f 30ff 	mov.w	r0, #4294967295
 80183ec:	e034      	b.n	8018458 <__swsetup_r+0x9c>
 80183ee:	0758      	lsls	r0, r3, #29
 80183f0:	d512      	bpl.n	8018418 <__swsetup_r+0x5c>
 80183f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80183f4:	b141      	cbz	r1, 8018408 <__swsetup_r+0x4c>
 80183f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80183fa:	4299      	cmp	r1, r3
 80183fc:	d002      	beq.n	8018404 <__swsetup_r+0x48>
 80183fe:	4628      	mov	r0, r5
 8018400:	f7fe ff0c 	bl	801721c <_free_r>
 8018404:	2300      	movs	r3, #0
 8018406:	6363      	str	r3, [r4, #52]	; 0x34
 8018408:	89a3      	ldrh	r3, [r4, #12]
 801840a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801840e:	81a3      	strh	r3, [r4, #12]
 8018410:	2300      	movs	r3, #0
 8018412:	6063      	str	r3, [r4, #4]
 8018414:	6923      	ldr	r3, [r4, #16]
 8018416:	6023      	str	r3, [r4, #0]
 8018418:	89a3      	ldrh	r3, [r4, #12]
 801841a:	f043 0308 	orr.w	r3, r3, #8
 801841e:	81a3      	strh	r3, [r4, #12]
 8018420:	6923      	ldr	r3, [r4, #16]
 8018422:	b94b      	cbnz	r3, 8018438 <__swsetup_r+0x7c>
 8018424:	89a3      	ldrh	r3, [r4, #12]
 8018426:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801842a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801842e:	d003      	beq.n	8018438 <__swsetup_r+0x7c>
 8018430:	4621      	mov	r1, r4
 8018432:	4628      	mov	r0, r5
 8018434:	f000 f884 	bl	8018540 <__smakebuf_r>
 8018438:	89a0      	ldrh	r0, [r4, #12]
 801843a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801843e:	f010 0301 	ands.w	r3, r0, #1
 8018442:	d00a      	beq.n	801845a <__swsetup_r+0x9e>
 8018444:	2300      	movs	r3, #0
 8018446:	60a3      	str	r3, [r4, #8]
 8018448:	6963      	ldr	r3, [r4, #20]
 801844a:	425b      	negs	r3, r3
 801844c:	61a3      	str	r3, [r4, #24]
 801844e:	6923      	ldr	r3, [r4, #16]
 8018450:	b943      	cbnz	r3, 8018464 <__swsetup_r+0xa8>
 8018452:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018456:	d1c4      	bne.n	80183e2 <__swsetup_r+0x26>
 8018458:	bd38      	pop	{r3, r4, r5, pc}
 801845a:	0781      	lsls	r1, r0, #30
 801845c:	bf58      	it	pl
 801845e:	6963      	ldrpl	r3, [r4, #20]
 8018460:	60a3      	str	r3, [r4, #8]
 8018462:	e7f4      	b.n	801844e <__swsetup_r+0x92>
 8018464:	2000      	movs	r0, #0
 8018466:	e7f7      	b.n	8018458 <__swsetup_r+0x9c>
 8018468:	200013f4 	.word	0x200013f4

0801846c <_raise_r>:
 801846c:	291f      	cmp	r1, #31
 801846e:	b538      	push	{r3, r4, r5, lr}
 8018470:	4604      	mov	r4, r0
 8018472:	460d      	mov	r5, r1
 8018474:	d904      	bls.n	8018480 <_raise_r+0x14>
 8018476:	2316      	movs	r3, #22
 8018478:	6003      	str	r3, [r0, #0]
 801847a:	f04f 30ff 	mov.w	r0, #4294967295
 801847e:	bd38      	pop	{r3, r4, r5, pc}
 8018480:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018482:	b112      	cbz	r2, 801848a <_raise_r+0x1e>
 8018484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018488:	b94b      	cbnz	r3, 801849e <_raise_r+0x32>
 801848a:	4620      	mov	r0, r4
 801848c:	f000 f830 	bl	80184f0 <_getpid_r>
 8018490:	462a      	mov	r2, r5
 8018492:	4601      	mov	r1, r0
 8018494:	4620      	mov	r0, r4
 8018496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801849a:	f000 b817 	b.w	80184cc <_kill_r>
 801849e:	2b01      	cmp	r3, #1
 80184a0:	d00a      	beq.n	80184b8 <_raise_r+0x4c>
 80184a2:	1c59      	adds	r1, r3, #1
 80184a4:	d103      	bne.n	80184ae <_raise_r+0x42>
 80184a6:	2316      	movs	r3, #22
 80184a8:	6003      	str	r3, [r0, #0]
 80184aa:	2001      	movs	r0, #1
 80184ac:	e7e7      	b.n	801847e <_raise_r+0x12>
 80184ae:	2400      	movs	r4, #0
 80184b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80184b4:	4628      	mov	r0, r5
 80184b6:	4798      	blx	r3
 80184b8:	2000      	movs	r0, #0
 80184ba:	e7e0      	b.n	801847e <_raise_r+0x12>

080184bc <raise>:
 80184bc:	4b02      	ldr	r3, [pc, #8]	; (80184c8 <raise+0xc>)
 80184be:	4601      	mov	r1, r0
 80184c0:	6818      	ldr	r0, [r3, #0]
 80184c2:	f7ff bfd3 	b.w	801846c <_raise_r>
 80184c6:	bf00      	nop
 80184c8:	200013f4 	.word	0x200013f4

080184cc <_kill_r>:
 80184cc:	b538      	push	{r3, r4, r5, lr}
 80184ce:	4d07      	ldr	r5, [pc, #28]	; (80184ec <_kill_r+0x20>)
 80184d0:	2300      	movs	r3, #0
 80184d2:	4604      	mov	r4, r0
 80184d4:	4608      	mov	r0, r1
 80184d6:	4611      	mov	r1, r2
 80184d8:	602b      	str	r3, [r5, #0]
 80184da:	f7ea f8ab 	bl	8002634 <_kill>
 80184de:	1c43      	adds	r3, r0, #1
 80184e0:	d102      	bne.n	80184e8 <_kill_r+0x1c>
 80184e2:	682b      	ldr	r3, [r5, #0]
 80184e4:	b103      	cbz	r3, 80184e8 <_kill_r+0x1c>
 80184e6:	6023      	str	r3, [r4, #0]
 80184e8:	bd38      	pop	{r3, r4, r5, pc}
 80184ea:	bf00      	nop
 80184ec:	2000a4dc 	.word	0x2000a4dc

080184f0 <_getpid_r>:
 80184f0:	f7ea b898 	b.w	8002624 <_getpid>

080184f4 <__swhatbuf_r>:
 80184f4:	b570      	push	{r4, r5, r6, lr}
 80184f6:	460c      	mov	r4, r1
 80184f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184fc:	2900      	cmp	r1, #0
 80184fe:	b096      	sub	sp, #88	; 0x58
 8018500:	4615      	mov	r5, r2
 8018502:	461e      	mov	r6, r3
 8018504:	da0d      	bge.n	8018522 <__swhatbuf_r+0x2e>
 8018506:	89a3      	ldrh	r3, [r4, #12]
 8018508:	f013 0f80 	tst.w	r3, #128	; 0x80
 801850c:	f04f 0100 	mov.w	r1, #0
 8018510:	bf0c      	ite	eq
 8018512:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018516:	2340      	movne	r3, #64	; 0x40
 8018518:	2000      	movs	r0, #0
 801851a:	6031      	str	r1, [r6, #0]
 801851c:	602b      	str	r3, [r5, #0]
 801851e:	b016      	add	sp, #88	; 0x58
 8018520:	bd70      	pop	{r4, r5, r6, pc}
 8018522:	466a      	mov	r2, sp
 8018524:	f000 f848 	bl	80185b8 <_fstat_r>
 8018528:	2800      	cmp	r0, #0
 801852a:	dbec      	blt.n	8018506 <__swhatbuf_r+0x12>
 801852c:	9901      	ldr	r1, [sp, #4]
 801852e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018532:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018536:	4259      	negs	r1, r3
 8018538:	4159      	adcs	r1, r3
 801853a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801853e:	e7eb      	b.n	8018518 <__swhatbuf_r+0x24>

08018540 <__smakebuf_r>:
 8018540:	898b      	ldrh	r3, [r1, #12]
 8018542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018544:	079d      	lsls	r5, r3, #30
 8018546:	4606      	mov	r6, r0
 8018548:	460c      	mov	r4, r1
 801854a:	d507      	bpl.n	801855c <__smakebuf_r+0x1c>
 801854c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018550:	6023      	str	r3, [r4, #0]
 8018552:	6123      	str	r3, [r4, #16]
 8018554:	2301      	movs	r3, #1
 8018556:	6163      	str	r3, [r4, #20]
 8018558:	b002      	add	sp, #8
 801855a:	bd70      	pop	{r4, r5, r6, pc}
 801855c:	ab01      	add	r3, sp, #4
 801855e:	466a      	mov	r2, sp
 8018560:	f7ff ffc8 	bl	80184f4 <__swhatbuf_r>
 8018564:	9900      	ldr	r1, [sp, #0]
 8018566:	4605      	mov	r5, r0
 8018568:	4630      	mov	r0, r6
 801856a:	f7fe fecb 	bl	8017304 <_malloc_r>
 801856e:	b948      	cbnz	r0, 8018584 <__smakebuf_r+0x44>
 8018570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018574:	059a      	lsls	r2, r3, #22
 8018576:	d4ef      	bmi.n	8018558 <__smakebuf_r+0x18>
 8018578:	f023 0303 	bic.w	r3, r3, #3
 801857c:	f043 0302 	orr.w	r3, r3, #2
 8018580:	81a3      	strh	r3, [r4, #12]
 8018582:	e7e3      	b.n	801854c <__smakebuf_r+0xc>
 8018584:	89a3      	ldrh	r3, [r4, #12]
 8018586:	6020      	str	r0, [r4, #0]
 8018588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801858c:	81a3      	strh	r3, [r4, #12]
 801858e:	9b00      	ldr	r3, [sp, #0]
 8018590:	6163      	str	r3, [r4, #20]
 8018592:	9b01      	ldr	r3, [sp, #4]
 8018594:	6120      	str	r0, [r4, #16]
 8018596:	b15b      	cbz	r3, 80185b0 <__smakebuf_r+0x70>
 8018598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801859c:	4630      	mov	r0, r6
 801859e:	f000 f81d 	bl	80185dc <_isatty_r>
 80185a2:	b128      	cbz	r0, 80185b0 <__smakebuf_r+0x70>
 80185a4:	89a3      	ldrh	r3, [r4, #12]
 80185a6:	f023 0303 	bic.w	r3, r3, #3
 80185aa:	f043 0301 	orr.w	r3, r3, #1
 80185ae:	81a3      	strh	r3, [r4, #12]
 80185b0:	89a3      	ldrh	r3, [r4, #12]
 80185b2:	431d      	orrs	r5, r3
 80185b4:	81a5      	strh	r5, [r4, #12]
 80185b6:	e7cf      	b.n	8018558 <__smakebuf_r+0x18>

080185b8 <_fstat_r>:
 80185b8:	b538      	push	{r3, r4, r5, lr}
 80185ba:	4d07      	ldr	r5, [pc, #28]	; (80185d8 <_fstat_r+0x20>)
 80185bc:	2300      	movs	r3, #0
 80185be:	4604      	mov	r4, r0
 80185c0:	4608      	mov	r0, r1
 80185c2:	4611      	mov	r1, r2
 80185c4:	602b      	str	r3, [r5, #0]
 80185c6:	f7ea f894 	bl	80026f2 <_fstat>
 80185ca:	1c43      	adds	r3, r0, #1
 80185cc:	d102      	bne.n	80185d4 <_fstat_r+0x1c>
 80185ce:	682b      	ldr	r3, [r5, #0]
 80185d0:	b103      	cbz	r3, 80185d4 <_fstat_r+0x1c>
 80185d2:	6023      	str	r3, [r4, #0]
 80185d4:	bd38      	pop	{r3, r4, r5, pc}
 80185d6:	bf00      	nop
 80185d8:	2000a4dc 	.word	0x2000a4dc

080185dc <_isatty_r>:
 80185dc:	b538      	push	{r3, r4, r5, lr}
 80185de:	4d06      	ldr	r5, [pc, #24]	; (80185f8 <_isatty_r+0x1c>)
 80185e0:	2300      	movs	r3, #0
 80185e2:	4604      	mov	r4, r0
 80185e4:	4608      	mov	r0, r1
 80185e6:	602b      	str	r3, [r5, #0]
 80185e8:	f7ea f893 	bl	8002712 <_isatty>
 80185ec:	1c43      	adds	r3, r0, #1
 80185ee:	d102      	bne.n	80185f6 <_isatty_r+0x1a>
 80185f0:	682b      	ldr	r3, [r5, #0]
 80185f2:	b103      	cbz	r3, 80185f6 <_isatty_r+0x1a>
 80185f4:	6023      	str	r3, [r4, #0]
 80185f6:	bd38      	pop	{r3, r4, r5, pc}
 80185f8:	2000a4dc 	.word	0x2000a4dc

080185fc <_init>:
 80185fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185fe:	bf00      	nop
 8018600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018602:	bc08      	pop	{r3}
 8018604:	469e      	mov	lr, r3
 8018606:	4770      	bx	lr

08018608 <_fini>:
 8018608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801860a:	bf00      	nop
 801860c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801860e:	bc08      	pop	{r3}
 8018610:	469e      	mov	lr, r3
 8018612:	4770      	bx	lr
